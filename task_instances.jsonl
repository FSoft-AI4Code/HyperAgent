{"repo":"django\/django","instance_id":"django__django-15996","base_commit":"b30c0081d4d8a31ab7dc7f72a4c7099af606ef29","patch":"diff --git a\/django\/db\/migrations\/serializer.py b\/django\/db\/migrations\/serializer.py\n--- a\/django\/db\/migrations\/serializer.py\n+++ b\/django\/db\/migrations\/serializer.py\n@@ -16,7 +16,7 @@\n from django.db.migrations.operations.base import Operation\n from django.db.migrations.utils import COMPILED_REGEX_TYPE, RegexObject\n from django.utils.functional import LazyObject, Promise\n-from django.utils.version import get_docs_version\n+from django.utils.version import PY311, get_docs_version\n \n \n class BaseSerializer:\n@@ -125,8 +125,21 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        if issubclass(enum_class, enum.Flag):\n+            if PY311:\n+                members = list(self.value)\n+            else:\n+                members, _ = enum._decompose(enum_class, self.value)\n+                members = reversed(members)\n+        else:\n+            members = (self.value,)\n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            \" | \".join(\n+                [\n+                    f\"{module}.{enum_class.__qualname__}[{item.name!r}]\"\n+                    for item in members\n+                ]\n+            ),\n             {\"import %s\" % module},\n         )\n \n","test_patch":"diff --git a\/tests\/migrations\/test_writer.py b\/tests\/migrations\/test_writer.py\n--- a\/tests\/migrations\/test_writer.py\n+++ b\/tests\/migrations\/test_writer.py\n@@ -413,6 +413,14 @@ def test_serialize_enum_flags(self):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | \"\n+                \"migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n","problem_statement":"Support for serialization of combination of Enum flags.\nDescription\n\t \n\t\t(last modified by Willem Van Onsem)\n\t \nIf we work with a field:\nregex_flags = models.IntegerField(default=re.UNICODE | re.IGNORECASE)\nThis is turned into a migration with:\ndefault=re.RegexFlag[None]\nThis is due to the fact that the EnumSerializer aims to work with the .name of the item, but if there is no single item for the given value, then there is no such name.\nIn that case, we can use enum._decompose to obtain a list of names, and create an expression to create the enum value by \"ORing\" the items together.\n","hints_text":"patch of the EnumSerializer","created_at":"2022-08-25T04:49:14Z","version":"4.2","FAIL_TO_PASS":"[\"test_serialize_enum_flags (migrations.test_writer.WriterTests)\"]","PASS_TO_PASS":"[\"test_args_kwargs_signature (migrations.test_writer.OperationWriterTests)\", \"test_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_empty_signature (migrations.test_writer.OperationWriterTests)\", \"test_expand_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_kwargs_signature (migrations.test_writer.OperationWriterTests)\", \"test_multiline_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_nested_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_custom_operation (migrations.test_writer.WriterTests)\", \"test_deconstruct_class_arguments (migrations.test_writer.WriterTests)\", \"Test comments at top of file.\", \"test_migration_path (migrations.test_writer.WriterTests)\", \"django.db.models shouldn't be imported if unused.\", \"test_register_non_serializer (migrations.test_writer.WriterTests)\", \"test_register_serializer (migrations.test_writer.WriterTests)\", \"test_serialize_builtin_types (migrations.test_writer.WriterTests)\", \"test_serialize_builtins (migrations.test_writer.WriterTests)\", \"test_serialize_choices (migrations.test_writer.WriterTests)\", \"Ticket #22943: Test serialization of class-based validators, including\", \"test_serialize_collections (migrations.test_writer.WriterTests)\", \"Make sure compiled regex can be serialized.\", \"test_serialize_complex_func_index (migrations.test_writer.WriterTests)\", \"test_serialize_constants (migrations.test_writer.WriterTests)\", \"test_serialize_datetime (migrations.test_writer.WriterTests)\", \"Ticket #22679: makemigrations generates invalid code for (an empty\", \"test_serialize_enums (migrations.test_writer.WriterTests)\", \"test_serialize_fields (migrations.test_writer.WriterTests)\", \"test_serialize_frozensets (migrations.test_writer.WriterTests)\", \"test_serialize_functions (migrations.test_writer.WriterTests)\", \"test_serialize_functools_partial (migrations.test_writer.WriterTests)\", \"test_serialize_functools_partialmethod (migrations.test_writer.WriterTests)\", \"test_serialize_iterators (migrations.test_writer.WriterTests)\", \"test_serialize_lazy_objects (migrations.test_writer.WriterTests)\", \"A reference in a local scope can't be serialized.\", \"test_serialize_managers (migrations.test_writer.WriterTests)\", \"test_serialize_multiline_strings (migrations.test_writer.WriterTests)\", \"test_serialize_nested_class (migrations.test_writer.WriterTests)\", \"test_serialize_numbers (migrations.test_writer.WriterTests)\", \"test_serialize_path_like (migrations.test_writer.WriterTests)\", \"test_serialize_pathlib (migrations.test_writer.WriterTests)\", \"test_serialize_range (migrations.test_writer.WriterTests)\", \"test_serialize_set (migrations.test_writer.WriterTests)\", \"test_serialize_settings (migrations.test_writer.WriterTests)\", \"test_serialize_strings (migrations.test_writer.WriterTests)\", \"test_serialize_timedelta (migrations.test_writer.WriterTests)\", \"test_serialize_type_model (migrations.test_writer.WriterTests)\", \"test_serialize_type_none (migrations.test_writer.WriterTests)\", \"An unbound method used within a class body can be serialized.\", \"test_serialize_uuid (migrations.test_writer.WriterTests)\", \"Tests serializing a simple migration.\", \"#24155 - Tests ordering of imports.\"]","environment_setup_commit":"0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}
{"repo":"django\/django","instance_id":"django__django-15252","base_commit":"361bb8f786f112ee275be136795c0b1ecefff928","patch":"diff --git a\/django\/db\/migrations\/executor.py b\/django\/db\/migrations\/executor.py\n--- a\/django\/db\/migrations\/executor.py\n+++ b\/django\/db\/migrations\/executor.py\n@@ -96,8 +96,12 @@ def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False\n         (un)applied and in a second step run all the database operations.\n         \"\"\"\n         # The django_migrations table must be present to record applied\n-        # migrations.\n-        self.recorder.ensure_schema()\n+        # migrations, but don't create it if there are no migrations to apply.\n+        if plan == []:\n+            if not self.recorder.has_table():\n+                return self._create_project_state(with_applied_migrations=False)\n+        else:\n+            self.recorder.ensure_schema()\n \n         if plan is None:\n             plan = self.migration_plan(targets)\n","test_patch":"diff --git a\/tests\/backends\/base\/test_creation.py b\/tests\/backends\/base\/test_creation.py\n--- a\/tests\/backends\/base\/test_creation.py\n+++ b\/tests\/backends\/base\/test_creation.py\n@@ -57,12 +57,12 @@ def test_custom_test_name_with_test_prefix(self):\n @mock.patch.object(connection, 'ensure_connection')\n @mock.patch.object(connection, 'prepare_database')\n @mock.patch('django.db.migrations.recorder.MigrationRecorder.has_table', return_value=False)\n-@mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n @mock.patch('django.core.management.commands.migrate.Command.sync_apps')\n class TestDbCreationTests(SimpleTestCase):\n     available_apps = ['backends.base.app_unmigrated']\n \n-    def test_migrate_test_setting_false(self, mocked_sync_apps, mocked_migrate, *mocked_objects):\n+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n+    def test_migrate_test_setting_false(self, mocked_migrate, mocked_sync_apps, *mocked_objects):\n         test_connection = get_connection_copy()\n         test_connection.settings_dict['TEST']['MIGRATE'] = False\n         creation = test_connection.creation_class(test_connection)\n@@ -86,7 +86,32 @@ def test_migrate_test_setting_false(self, mocked_sync_apps, mocked_migrate, *moc\n             with mock.patch.object(creation, '_destroy_test_db'):\n                 creation.destroy_test_db(old_database_name, verbosity=0)\n \n-    def test_migrate_test_setting_true(self, mocked_sync_apps, mocked_migrate, *mocked_objects):\n+    @mock.patch('django.db.migrations.executor.MigrationRecorder.ensure_schema')\n+    def test_migrate_test_setting_false_ensure_schema(\n+        self, mocked_ensure_schema, mocked_sync_apps, *mocked_objects,\n+    ):\n+        test_connection = get_connection_copy()\n+        test_connection.settings_dict['TEST']['MIGRATE'] = False\n+        creation = test_connection.creation_class(test_connection)\n+        if connection.vendor == 'oracle':\n+            # Don't close connection on Oracle.\n+            creation.connection.close = mock.Mock()\n+        old_database_name = test_connection.settings_dict['NAME']\n+        try:\n+            with mock.patch.object(creation, '_create_test_db'):\n+                creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)\n+            # The django_migrations table is not created.\n+            mocked_ensure_schema.assert_not_called()\n+            # App is synced.\n+            mocked_sync_apps.assert_called()\n+            mocked_args, _ = mocked_sync_apps.call_args\n+            self.assertEqual(mocked_args[1], {'app_unmigrated'})\n+        finally:\n+            with mock.patch.object(creation, '_destroy_test_db'):\n+                creation.destroy_test_db(old_database_name, verbosity=0)\n+\n+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n+    def test_migrate_test_setting_true(self, mocked_migrate, mocked_sync_apps, *mocked_objects):\n         test_connection = get_connection_copy()\n         test_connection.settings_dict['TEST']['MIGRATE'] = True\n         creation = test_connection.creation_class(test_connection)\n@@ -109,6 +134,7 @@ def test_migrate_test_setting_true(self, mocked_sync_apps, mocked_migrate, *mock\n                 creation.destroy_test_db(old_database_name, verbosity=0)\n \n     @mock.patch.dict(os.environ, {'RUNNING_DJANGOS_TEST_SUITE': ''})\n+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n     @mock.patch.object(BaseDatabaseCreation, 'mark_expected_failures_and_skips')\n     def test_mark_expected_failures_and_skips_call(self, mark_expected_failures_and_skips, *mocked_objects):\n         \"\"\"\ndiff --git a\/tests\/migrations\/test_executor.py b\/tests\/migrations\/test_executor.py\n--- a\/tests\/migrations\/test_executor.py\n+++ b\/tests\/migrations\/test_executor.py\n@@ -759,6 +759,17 @@ def apply(self, project_state, schema_editor, collect_sql=False):\n             False,\n         )\n \n+    @mock.patch.object(MigrationRecorder, 'has_table', return_value=False)\n+    def test_migrate_skips_schema_creation(self, mocked_has_table):\n+        \"\"\"\n+        The django_migrations table is not created if there are no migrations\n+        to record.\n+        \"\"\"\n+        executor = MigrationExecutor(connection)\n+        # 0 queries, since the query for has_table is being mocked.\n+        with self.assertNumQueries(0):\n+            executor.migrate([], plan=[])\n+\n \n class FakeLoader:\n     def __init__(self, graph, applied):\n","problem_statement":"MigrationRecorder does not obey db_router allow_migrate rules\nDescription\n\t\nHi,\nWe have a multi-db setup. We have one connection that is for the django project, and several connections that talk to other dbs for information (ie models with managed = False). Django should only create tables in the first connection, never in any of the other connections. We have a simple router that does the following: \nclass Router(object):\n\tdef allow_migrate(self, db, model):\n\t\tif db == 'default':\n\t\t\treturn True\n\t\treturn False\nCurrent Behaviour\nWe run our functional tests and the migrate command is called against each connection when the test databases are created (see django\/test\/runner.py, setup_databases, line 300-ish, which calls django\/db\/backends\/creation.py, create_test_db, line 377-ish)\nWhen this migrate runs, it tries to apply our migrations, which tries to record that a migration has been applied (see django\/db\/migrations\/executor.py, apply_migration, which has several calls to self.recorder.record_applied). \nThe first thing that record_applied does is a call to self.ensure_schema() (see django\/db\/migrations\/recorder.py, record_applied, lien 66-ish). \nensure_schema checks to see if the Migration model is in the tables in the connection. If it does not find the table then it tries to create the table. \nI believe that this is incorrect behaviour when a db_router has been provided. If using the router above, my expectation would be that the table is not created on any connection other than the 'default' connection. Looking at the other methods on the MigrationRecorder, I would expect that there will be similar issues with applied_migrations and record_unapplied.\n","hints_text":"I don't think you've implemented your router correctly, but I'd need to check the router code to see if it's called multiple times (num_dbs*num_models) to be sure. This is how we implement our routers for allow_migrate: def allow_migrate(self, db, model): if db == 'other': return model._meta.app_label == 'legacy_app' # allow migration for new django models implemented in legacy db elif model._meta.app_label == 'legacy_app': # do not allow migration for legacy on any other db return False return None # this router not responsible So, I'm not sure if there is a bug or not (I'll let someone more familiar answer that), but this is what works for us.\n#22583 is somewhat related. It deals with the inability to skip RunSQL\/RunPython operations on given database.\n@jarshwah: I don't think it is the router. Mainly because the router is not called at this point. Which is what I believe is the bug. @akaariai: I agree that there are similarities. Surely I should be able to manage which connections I actually run migrations against. That seems to be what the db_router is trying to do. I thought that something like the following would solve our problem: from django.db import router . . . def ensure_schema(self): \"\"\" Ensures the table exists and has the correct schema. \"\"\" # If the table's there, that's fine - we've never changed its schema # in the codebase. if self.Migration._meta.db_table in self.connection.introspection.get_table_list(self.connection.cursor()): return # Make the table # Change below, similar to how allowed_to_migrate in django\/db\/migrations\/operations\/base.py works if router.allow_migrate(self.connection, self.Migration): with self.connection.schema_editor() as editor: editor.create_model(self.Migration) But this means that changes to applied_migrations, record_applied, and record_unapplied need to be made, so that it doesn't try to write to a none existent table. For us this is not an urgent issue, as we have appropriate permissions to those connections that are not our core connection. But I do have a concern for any time that we are using a true read-only connection, where we do not have the CREATE TABLE permission. Because this code, as it exists, will blow up in this situation. I tested that with a read-only connection in our db setup, and got an insufficient permissions error. Thanks, Dylan\nThis is an issue, but bear in mind that migrate must be separately executed for each database alias, so this isn't going to happen unless you specifically run migrate on a database that you know isn't supposed to have migrations on it. I think the best fix would be to have migrations refuse to run entirely and just exit if the migration model is not allowed to be created on the target database.\nI see what you mean about the needing to run migarte for each database. I noticed this with the django test runner, where it is trying to run a migration against every connection alias that we have. So that might be an issue with the test runner as much as with the migrations stuff. Thanks, Dylan\nJust stumbled on this issue. With a properly written router, I expected the migrations of each app to be executed in the right database by just using : manage.py migrate Could this be the behavior ? Instead it's assuming I'm using the default database, OK, no, but ok :-)... and it doesn't follow the allow_migrate rule and creates in the default database the tables that are supposed to live exclusively in the another one (NOT OK !). So for now the workaround for me is to use a shell script where the app and the database are specified.: .\/manage.py migrate inapppurchase --database=iap .\/manage.py migrate myapp --database=default\ndperetti: Just like syncdb, migrate only runs on one database at a time, so you must execute it individually for each database, as you suggest. This is by design. froomzy: Yes, this is likely a test runner issue, that would be doing this kind of migrate-on-everything. I think the suggested fix of refusing to migrate databases where allow_migrate on the migration model returns False will still work, as long as it errors in a way we can catch in the test runner.\nReplying to andrewgodwin: dperetti: Just like syncdb, migrate only runs on one database at a time, so you must execute it individually for each database, as you suggest. This is by design. The question is : is it the best design ? When I run migrate, I don't want to know about how the router is configured. I just want to migrate the app. If the router dispatches the tables of an app to different databases, then I want migrate to operate on those. In other words, I think it would make sense to make migrate database agnostic.\nAnother side issue : we cannot just manage.py migrate someapp if the someapp is a \"django <1.7\" app without migration : the old syncdb behavior is not applied when an application is specified. So if want the old apps to sync, I have to just run manage.py migrate, without argument... which will create unwanted tables when we have multiple databases.\nHi guys, Just wondering if there is any chance this will make it into 1.8? Or soon there after? Thanks, Dylan\nIt's not clear to me what fixing this issue involves exactly. Anyway, it doesn't appear anyone is working on it so there's no timetable for its resolution.\nI wanted to chime in here to broaden the scope of the bug, as I was affected by it recently in a different context. The bigger issue is not just that the framework tries to create the migrations table where it's not needed, but that it marks as applied migrations that in fact were not. That puts the database in an inconsistent state, at least as far as migrations are concerned. It's a harmless inconsistency for the specific settings file used at that specific moment in time, but it lays the seed for big problems down the line. For example, if you later decide to change your routing scheme, or (as happened in my case) if you have multiple projects with different settings using the same app on the same database. In terms of a solution, what seems straightforward to my untrained eye is for the migration framework to simply not record migrations as applied that it didn't apply (and as a corollary, it shouldn't try to create the migration table on a database if it doesn't need to record any migrations there). The fix suggested above (\"to have migrations refuse to run entirely and just exit if the migration model is not allowed to be created on the target database\") doesn't address the broader issue.\nLet me amend my last comment: I think that having migrate blow up in this situation would in fact solve the problem with having an inconsistent migrations table, which is the most important thing. My question is, since allow_migrate() operates at the model level and the migrate command operates at the app level, wouldn't this make it impossible to migrate some models of an app but not others?\nI can confirm marfire's findings. 1\/ For example even with this router applied: class testerouter(object): def allow_migrate(self, db, app_label, model_name=None, **hints): return False And then executing: migrate --database=replica All apps and models migrations get applied to this replica database, while according to the router nothing should happen at all. 2\/ From the documentation it is not clear whether it is possible to isolate certain models from certain databases, or whether isolation can only be done on the app-level. From the description in the documentation, it seems possible to use the model_name argument for this, but by the way django stores its migrations, I don't see how that could work.\nJust to further confirm: I've been wrestling with this problem for a couple days. I have multiple databases and multiple apps. When I'm running tests, the router allow_migrate works properly to control which migrations can be applied to which database\/app. The actual migration portion works fine, but when it comes time to actually write the migration history, it seems to only have a concept of the default database. When it runs ensure_schema, it's expecting that tables should exist on the default DB when they really only exist for certain other apps\/databases. This leads to a ProgrammingError where it can't find tables that it shouldn't be checking for in the first place.\nCan you please have a look at \u200bhttp:\/\/stackoverflow.com\/questions\/40893868\/using-redshift-as-an-additional-django-database?noredirect=1#comment69004673_40893868, which provides a decent use case for this bug.\nSince 3.1 you can set 'TEST': {'MIGRATE': False} to avoid running migrations on a given db connection, so that solves the test runner issue. Still, even if you do that, apps are still synced (see fix to #32012), Django ends up calling migrate to do the syncing, and this will cause queries in MigrationRecorder.ensure_schema() that might create tables (or fail with permission errors, see #27141). I plan to open a PR to do roughly this from comment:13: it shouldn't try to create the migration table on a database if it doesn't need to record any migrations there","created_at":"2021-12-28T15:51:06Z","version":"4.1","FAIL_TO_PASS":"[\"test_migrate_test_setting_false_ensure_schema (backends.base.test_creation.TestDbCreationTests)\", \"The django_migrations table is not created if there are no migrations\"]","PASS_TO_PASS":"[\"test_mark_expected_failures_and_skips (backends.base.test_creation.TestMarkTests)\", \"test_custom_test_name (backends.base.test_creation.TestDbSignatureTests)\", \"test_custom_test_name_with_test_prefix (backends.base.test_creation.TestDbSignatureTests)\", \"test_default_name (backends.base.test_creation.TestDbSignatureTests)\", \"If the current state satisfies the given target, do nothing.\", \"Minimize unnecessary rollbacks in connected apps.\", \"Minimize rollbacks when target has multiple in-app children.\", \"mark_expected_failures_and_skips() isn't called unless\", \"test_migrate_test_setting_false (backends.base.test_creation.TestDbCreationTests)\", \"test_migrate_test_setting_true (backends.base.test_creation.TestDbCreationTests)\", \"test_circular_reference (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_circular_reference_with_natural_key (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_self_reference (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_serialize_db_to_string_base_manager (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests)\", \"Applying all replaced migrations marks replacement as applied (#24628).\", \"An atomic operation is properly rolled back inside a non-atomic\", \"Regression test for #22325 - references to a custom user model defined in the\", \"executor.detect_soft_applied() detects ManyToManyField tables from an\", \"Re-planning a full migration of a fully-migrated set doesn't\", \"test_migrate_backward_to_squashed_migration (migrations.test_executor.ExecutorTests)\", \"A new squash migration will be marked as applied even if all its\", \"test_migrate_marks_replacement_unapplied (migrations.test_executor.ExecutorTests)\", \"Migrations are applied and recorded atomically.\", \"Migrations are not recorded if deferred SQL application fails.\", \"Although the MigrationExecutor interfaces allows for mixed migration\", \"Applying a non-atomic migration works as expected.\", \"#24129 - Tests callback process\", \"Tests running a simple set of migrations.\", \"Tests running a squashed migration from zero (should ignore what it replaces)\", \"Tests detection of initial migrations already having been applied.\", \"#26647 - Unrelated applied migrations should be part of the final\", \"#24123 - All models of apps being unapplied which are\", \"#24123 - All models of apps already applied which are\"]","environment_setup_commit":"647480166bfe7532e8c471fef0146e3a17e6c0c9"}
{"repo":"sympy\/sympy","instance_id":"sympy__sympy-21171","base_commit":"aa22709cb7df2d7503803d4b2c0baa7aa21440b6","patch":"diff --git a\/sympy\/printing\/latex.py b\/sympy\/printing\/latex.py\n--- a\/sympy\/printing\/latex.py\n+++ b\/sympy\/printing\/latex.py\n@@ -1968,10 +1968,12 @@ def _print_DiracDelta(self, expr, exp=None):\n             tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n-    def _print_SingularityFunction(self, expr):\n+    def _print_SingularityFunction(self, expr, exp=None):\n         shift = self._print(expr.args[0] - expr.args[1])\n         power = self._print(expr.args[2])\n         tex = r\"{\\left\\langle %s \\right\\rangle}^{%s}\" % (shift, power)\n+        if exp is not None:\n+            tex = r\"{\\left({\\langle %s \\rangle}^{%s}\\right)}^{%s}\" % (shift, power, exp)\n         return tex\n \n     def _print_Heaviside(self, expr, exp=None):\n","test_patch":"diff --git a\/sympy\/printing\/tests\/test_latex.py b\/sympy\/printing\/tests\/test_latex.py\n--- a\/sympy\/printing\/tests\/test_latex.py\n+++ b\/sympy\/printing\/tests\/test_latex.py\n@@ -214,6 +214,19 @@ def test_latex_SingularityFunction():\n     assert latex(SingularityFunction(x, 4, -1)) == \\\n         r\"{\\left\\langle x - 4 \\right\\rangle}^{-1}\"\n \n+    assert latex(SingularityFunction(x, 4, 5)**3) == \\\n+        r\"{\\left({\\langle x - 4 \\rangle}^{5}\\right)}^{3}\"\n+    assert latex(SingularityFunction(x, -3, 4)**3) == \\\n+        r\"{\\left({\\langle x + 3 \\rangle}^{4}\\right)}^{3}\"\n+    assert latex(SingularityFunction(x, 0, 4)**3) == \\\n+        r\"{\\left({\\langle x \\rangle}^{4}\\right)}^{3}\"\n+    assert latex(SingularityFunction(x, a, n)**3) == \\\n+        r\"{\\left({\\langle - a + x \\rangle}^{n}\\right)}^{3}\"\n+    assert latex(SingularityFunction(x, 4, -2)**3) == \\\n+        r\"{\\left({\\langle x - 4 \\rangle}^{-2}\\right)}^{3}\"\n+    assert latex((SingularityFunction(x, 4, -1)**3)**3) == \\\n+        r\"{\\left({\\langle x - 4 \\rangle}^{-1}\\right)}^{9}\"\n+\n \n def test_latex_cycle():\n     assert latex(Cycle(1, 2, 4)) == r\"\\left( 1\\; 2\\; 4\\right)\"\n","problem_statement":"_print_SingularityFunction() got an unexpected keyword argument 'exp'\nOn a Jupyter Notebook cell, type the following:\r\n\r\n```python\r\nfrom sympy import *\r\nfrom sympy.physics.continuum_mechanics import Beam\r\n# Young's modulus\r\nE = symbols(\"E\")\r\n# length of the beam\r\nL = symbols(\"L\")\r\n# concentrated load at the end tip of the beam\r\nF = symbols(\"F\")\r\n# square cross section\r\nB, H = symbols(\"B, H\")\r\nI = B * H**3 \/ 12\r\n# numerical values (material: steel)\r\nd = {B: 1e-02, H: 1e-02, E: 210e09, L: 0.2, F: 100}\r\n\r\nb2 = Beam(L, E, I)\r\nb2.apply_load(-F, L \/ 2, -1)\r\nb2.apply_support(0, \"fixed\")\r\nR0, M0 = symbols(\"R_0, M_0\")\r\nb2.solve_for_reaction_loads(R0, M0)\r\n```\r\n\r\nThen:\r\n\r\n```\r\nb2.shear_force()\r\n```\r\n\r\nThe following error appears:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/IPython\/core\/formatters.py in __call__(self, obj)\r\n    343             method = get_real_method(obj, self.print_method)\r\n    344             if method is not None:\r\n--> 345                 return method()\r\n    346             return None\r\n    347         else:\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/interactive\/printing.py in _print_latex_png(o)\r\n    184         \"\"\"\r\n    185         if _can_print(o):\r\n--> 186             s = latex(o, mode=latex_mode, **settings)\r\n    187             if latex_mode == 'plain':\r\n    188                 s = '$\\\\displaystyle %s$' % s\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in __call__(self, *args, **kwargs)\r\n    371 \r\n    372     def __call__(self, *args, **kwargs):\r\n--> 373         return self.__wrapped__(*args, **kwargs)\r\n    374 \r\n    375     @property\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in latex(expr, **settings)\r\n   2913 \r\n   2914     \"\"\"\r\n-> 2915     return LatexPrinter(settings).doprint(expr)\r\n   2916 \r\n   2917 \r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in doprint(self, expr)\r\n    252 \r\n    253     def doprint(self, expr):\r\n--> 254         tex = Printer.doprint(self, expr)\r\n    255 \r\n    256         if self._settings['mode'] == 'plain':\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in doprint(self, expr)\r\n    289     def doprint(self, expr):\r\n    290         \"\"\"Returns printer's representation for expr (as a string)\"\"\"\r\n--> 291         return self._str(self._print(expr))\r\n    292 \r\n    293     def _print(self, expr, **kwargs):\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Mul(self, expr)\r\n    565             # use the original expression here, since fraction() may have\r\n    566             # altered it when producing numer and denom\r\n--> 567             tex += convert(expr)\r\n    568 \r\n    569         else:\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in convert(expr)\r\n    517                                isinstance(x.base, Quantity)))\r\n    518 \r\n--> 519                 return convert_args(args)\r\n    520 \r\n    521         def convert_args(args):\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in convert_args(args)\r\n    523 \r\n    524                 for i, term in enumerate(args):\r\n--> 525                     term_tex = self._print(term)\r\n    526 \r\n    527                     if self._needs_mul_brackets(term, first=(i == 0),\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Mul(self, expr)\r\n    569         else:\r\n    570             snumer = convert(numer)\r\n--> 571             sdenom = convert(denom)\r\n    572             ldenom = len(sdenom.split())\r\n    573             ratio = self._settings['long_frac_ratio']\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in convert(expr)\r\n    505         def convert(expr):\r\n    506             if not expr.is_Mul:\r\n--> 507                 return str(self._print(expr))\r\n    508             else:\r\n    509                 if self.order not in ('old', 'none'):\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Pow(self, expr)\r\n    649         else:\r\n    650             if expr.base.is_Function:\r\n--> 651                 return self._print(expr.base, exp=self._print(expr.exp))\r\n    652             else:\r\n    653                 tex = r\"%s^{%s}\"\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\nTypeError: _print_SingularityFunction() got an unexpected keyword argument 'exp'\r\n```\n","hints_text":"Could you provide a fully working example? Copying and pasting your code leaves a number of non-defined variables. Thanks for the report.\n@moorepants Sorry for that, I've just updated the code in the original post.\nThis is the string printed version from `b2..shear_force()`:\r\n\r\n```\r\nOut[5]: -F*SingularityFunction(x, L\/2, 0) + (F*SingularityFunction(L, 0, -1)*SingularityFunction(L, L\/2, 1)\/(SingularityFunction(L, 0, -1)*SingularityFunction(L, 0, 1) - SingularityFunction(L, 0, 0)**2) - F*SingularityFunction(L, 0, 0)*SingularityFunction(L, L\/2, 0)\/(SingularityFunction(L, 0, -1)*SingularityFunction(L, 0, 1) - SingularityFunction(L, 0, 0)**2))*SingularityFunction(x, 0, 0) + (-F*SingularityFunction(L, 0, 0)*SingularityFunction(L, L\/2, 1)\/(SingularityFunction(L, 0, -1)*SingularityFunction(L, 0, 1) - SingularityFunction(L, 0, 0)**2) + F*SingularityFunction(L, 0, 1)*SingularityFunction(L, L\/2, 0)\/(SingularityFunction(L, 0, -1)*SingularityFunction(L, 0, 1) - SingularityFunction(L, 0, 0)**2))*SingularityFunction(x, 0, -1)\r\n```\nYes works correctly if you print the string. It throws the error when you display the expression on a jupyter notebook with latex\nIt errors on this term: `SingularityFunction(L, 0, 0)**2`. For some reasons the latex printer fails on printing a singularity function raised to a power.","created_at":"2021-03-26T07:48:35Z","version":"1.8","FAIL_TO_PASS":"[\"test_latex_SingularityFunction\"]","PASS_TO_PASS":"[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_8470\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13559\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Series_printing\", \"test_TransferFunction_printing\", \"test_Parallel_printing\", \"test_Feedback_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_AppliedPermutation\", \"test_PermutationMatrix\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_latex_diffgeom\", \"test_unit_printing\", \"test_issue_17092\", \"test_latex_decimal_separator\", \"test_Str\", \"test_latex_escape\", \"test_emptyPrinter\", \"test_global_settings\", \"test_pickleable\"]","environment_setup_commit":"3ac1464b8840d5f8b618a654f9fbf09c452fe969"}
{"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-24334","base_commit":"332937997d03e0c173be6d9fc1841e9186e857df","patch":"diff --git a\/lib\/matplotlib\/axis.py b\/lib\/matplotlib\/axis.py\n--- a\/lib\/matplotlib\/axis.py\n+++ b\/lib\/matplotlib\/axis.py\n@@ -2029,6 +2029,9 @@ def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):\n         other limits, you should set the limits explicitly after setting the\n         ticks.\n         \"\"\"\n+        if labels is None and kwargs:\n+            raise ValueError('labels argument cannot be None when '\n+                             'kwargs are passed')\n         result = self._set_tick_locations(ticks, minor=minor)\n         if labels is not None:\n             self.set_ticklabels(labels, minor=minor, **kwargs)\n","test_patch":"diff --git a\/lib\/matplotlib\/tests\/test_axes.py b\/lib\/matplotlib\/tests\/test_axes.py\n--- a\/lib\/matplotlib\/tests\/test_axes.py\n+++ b\/lib\/matplotlib\/tests\/test_axes.py\n@@ -5732,6 +5732,17 @@ def test_set_get_ticklabels():\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n \n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+\n @check_figures_equal(extensions=[\"png\"])\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n","problem_statement":"[ENH]: Axes.set_xticks\/Axis.set_ticks only validates kwargs if ticklabels are set, but they should\n### Problem\n\nPer the doc of `Axis.set_ticks`:\r\n```\r\n        **kwargs\r\n            `.Text` properties for the labels. These take effect only if you\r\n            pass *labels*. In other cases, please use `~.Axes.tick_params`.\r\n```\r\nThis means that in e.g. `ax.set_xticks([0, 1], xticklabels=[\"a\", \"b\"])`, the incorrect `xticklabels` silently do nothing; they are not even validated (because `labels` has not been passed).\n\n### Proposed solution\n\nWe should at least check that `kwargs` are valid Text properties in all cases; we could even consider making any kwargs an error if `labels` is not set.\n","hints_text":"> we could even consider making any kwargs an error if labels is not set.\r\n\r\n\ud83d\udc4d ","created_at":"2022-11-01T18:11:43Z","version":"3.6","FAIL_TO_PASS":"[\"lib\/matplotlib\/tests\/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels\"]","PASS_TO_PASS":"[\"lib\/matplotlib\/tests\/test_axes.py::test_invisible_axes[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_get_labels\", \"lib\/matplotlib\/tests\/test_axes.py::test_repr\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_loc_vertical[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_loc_vertical[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_loc_horizontal[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_loc_rc[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_loc_rc[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_label_shift\", \"lib\/matplotlib\/tests\/test_axes.py::test_acorr[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_spy[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_spy_invalid_kwargs\", \"lib\/matplotlib\/tests\/test_axes.py::test_matshow[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_formatter_ticker[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_formatter_ticker[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_funcformatter_auto_formatter\", \"lib\/matplotlib\/tests\/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twinx_cla\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_logscale[png-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_logscale[png-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twinx_axis_scales[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib\/matplotlib\/tests\/test_axes.py::test_inverted_cla\", \"lib\/matplotlib\/tests\/test_axes.py::test_subclass_clear_cla\", \"lib\/matplotlib\/tests\/test_axes.py::test_cla_not_redefined_internally\", \"lib\/matplotlib\/tests\/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_autoscale_tiny_range[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_autoscale_tight\", \"lib\/matplotlib\/tests\/test_axes.py::test_autoscale_log_shared\", \"lib\/matplotlib\/tests\/test_axes.py::test_use_sticky_edges\", \"lib\/matplotlib\/tests\/test_axes.py::test_sticky_shared_axes[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_basic_annotate[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_basic_annotate[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_arrow_simple[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_arrow_empty\", \"lib\/matplotlib\/tests\/test_axes.py::test_arrow_in_view\", \"lib\/matplotlib\/tests\/test_axes.py::test_annotate_default_arrow\", \"lib\/matplotlib\/tests\/test_axes.py::test_annotate_signature\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_units[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_kwarg_redundant\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_dashes[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_single_point[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_single_point[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_single_date[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_shaped_data[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_structured_data\", \"lib\/matplotlib\/tests\/test_axes.py::test_aitoff_proj[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axvspan_epoch[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axvspan_epoch[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axhspan_epoch[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axhspan_epoch[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hexbin_extent[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hexbin_empty[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hexbin_pickable\", \"lib\/matplotlib\/tests\/test_axes.py::test_hexbin_log[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hexbin_linear[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hexbin_log_clim\", \"lib\/matplotlib\/tests\/test_axes.py::test_inverted_limits\", \"lib\/matplotlib\/tests\/test_axes.py::test_nonfinite_limits[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_nonfinite_limits[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib\/matplotlib\/tests\/test_axes.py::test_limits_empty_data[png-plot]\", \"lib\/matplotlib\/tests\/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib\/matplotlib\/tests\/test_axes.py::test_imshow[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_imshow[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_imshow_clip[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_imshow_clip[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_imshow_norm_vminvmax\", \"lib\/matplotlib\/tests\/test_axes.py::test_polycollection_joinstyle[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_interpolate[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_symlog[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_symlog2[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorargs_5205\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolormesh[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolormesh[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolormesh_small[eps]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolormesh_alpha[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorargs\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolornearest[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolornearestunits[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorflaterror\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorauto[png-False]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorauto[png-True]\", \"lib\/matplotlib\/tests\/test_axes.py::test_canonical[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_canonical[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_arc_angles[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_arc_ellipse[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_arc_ellipse[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_marker_as_markerstyle\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_line[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_line[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_linear_scales[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_log_scales[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_log_scales[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_polar[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_polar[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_marker_edges[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_marker_edges[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_tick_label_single[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_nan_bar_values\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_ticklabel_fail\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_decimal_center[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_barh_decimal_center[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_decimal_width[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_barh_decimal_height[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_color_none_alpha\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib\/matplotlib\/tests\/test_axes.py::test_barh_tick_label[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_timedelta\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_dates_pandas\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_capwidths\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolor_regression\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_pandas\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_pandas_indexed\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_hatches[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_hatches[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_labels_length\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_minimal_plot\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_log[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_log[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_log_2[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_log_barstacked\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_bar_empty[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_float16\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step_empty[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step_filled[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_density[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_unequal_bins_density\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_datetime_datasets\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_zorder[bar-1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_zorder[step-2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_fill[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_update[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_baseline_0[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_empty\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_invalid_nan\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_invalid_mismatch\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_invalid_update\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_invalid_update2\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_options[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_datetime[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stairs_edge_handling[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_contour_hatching[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_contour_hatching[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_contour_colorbar[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_contour_colorbar[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist2d[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist2d[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist2d_transpose[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist2d_transpose[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist2d_density\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_color\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib\/matplotlib\/tests\/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib\/matplotlib\/tests\/test_axes.py::test_parse_scatter_color_args_error\", \"lib\/matplotlib\/tests\/test_axes.py::test_as_mpl_axes_api\", \"lib\/matplotlib\/tests\/test_axes.py::test_pyplot_axes\", \"lib\/matplotlib\/tests\/test_axes.py::test_log_scales\", \"lib\/matplotlib\/tests\/test_axes.py::test_log_scales_no_data\", \"lib\/matplotlib\/tests\/test_axes.py::test_log_scales_invalid\", \"lib\/matplotlib\/tests\/test_axes.py::test_stackplot[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stackplot[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stackplot_baseline[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stackplot_baseline[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_baseline[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_rangewhis[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_percentilewhis[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_with_xlabels[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_horizontal[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_with_ylabels[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_patchartist[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_custompatchartist[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_customoutlier[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_showcustommean[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_custombox[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_custommedian[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_customcap[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_customwhisker[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_shownotches[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_nocaps[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_nobox[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_showmean[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_showmeanasline[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_scalarwidth[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_customwidths[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_custompositions[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_bad_widths\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_bad_positions\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bxp_bad_capwidths\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_sym2[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_sym[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_bad_medians\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_bad_ci\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_zorder\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_marker_behavior\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_showall[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_violinplot_bad_positions\", \"lib\/matplotlib\/tests\/test_axes.py::test_violinplot_bad_widths\", \"lib\/matplotlib\/tests\/test_axes.py::test_violinplot_bad_quantiles\", \"lib\/matplotlib\/tests\/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib\/matplotlib\/tests\/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_violinplot_pandas_series[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_manage_xticks\", \"lib\/matplotlib\/tests\/test_axes.py::test_boxplot_not_single\", \"lib\/matplotlib\/tests\/test_axes.py::test_tick_space_size_0\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_mixed_errorbar_polar_caps[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_colorcycle\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_shape\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_limits[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_limits[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_nonefmt\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_every_invalid\", \"lib\/matplotlib\/tests\/test_axes.py::test_xerr_yerr_not_negative\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_every[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_every[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_nan[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_offset[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_offset[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step_horiz[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_weighted[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem[png-w\/\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem[png-w\/o\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem_args\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem_markerfmt\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem_dates\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem_orientation[png-w\/\", \"lib\/matplotlib\/tests\/test_axes.py::test_stem_orientation[png-w\/o\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_step[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_step[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_density[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_density[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step_bottom[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stepfilled_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_step_bottom_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_step_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_bar[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_emptydata\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_labels\", \"lib\/matplotlib\/tests\/test_axes.py::test_transparent_markers[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_transparent_markers[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rgba_markers[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rgba_markers[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_mollweide_grid[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_mollweide_grid[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib\/matplotlib\/tests\/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib\/matplotlib\/tests\/test_axes.py::test_alpha[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_alpha[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_defaults[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_colors[colors0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_colors[colors1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_colors[colors2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_empty_eventplot\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_units_list[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_marker_styles[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vertex_markers[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eb_line_zorder[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_eb_line_zorder[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_loglog[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_loglog[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_transaxes[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_transaxes[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_args\", \"lib\/matplotlib\/tests\/test_axes.py::test_vlines[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vlines_default\", \"lib\/matplotlib\/tests\/test_axes.py::test_hlines[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_hlines_default\", \"lib\/matplotlib\/tests\/test_axes.py::test_lines_with_colors[png-data0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_lines_with_colors[png-data1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_step_linestyle[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_step_linestyle[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_mixed_collection[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_mixed_collection[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_subplot_key_hash\", \"lib\/matplotlib\/tests\/test_axes.py::test_specgram[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_specgram_magnitude[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_specgram_angle[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_specgram_fs_none\", \"lib\/matplotlib\/tests\/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_specgram_origin_kwarg\", \"lib\/matplotlib\/tests\/test_axes.py::test_psd_csd[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_spectrum[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_psd_csd_edge_cases\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_remove[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_spines[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_spines_on_top[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib\/matplotlib\/tests\/test_axes.py::test_grid\", \"lib\/matplotlib\/tests\/test_axes.py::test_reset_grid\", \"lib\/matplotlib\/tests\/test_axes.py::test_reset_ticks[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_vline_limit\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_empty_shared_subplots\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_with_aspect_1\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_with_aspect_2\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_with_aspect_3\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_aspect_error\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_method_errors\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_with_aspect[x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twin_with_aspect[y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relim_visible_only\", \"lib\/matplotlib\/tests\/test_axes.py::test_text_labelsize\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_default[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_linewidth_0[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_center_radius[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_linewidth_2[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_ccw_true[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_frame_grid[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_textprops\", \"lib\/matplotlib\/tests\/test_axes.py::test_pie_get_negative_values\", \"lib\/matplotlib\/tests\/test_axes.py::test_normalize_kwarg_pie\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_get_ticklabels[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_ticks_with_labels[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_noniterable_ticklabels\", \"lib\/matplotlib\/tests\/test_axes.py::test_subsampled_ticklabels\", \"lib\/matplotlib\/tests\/test_axes.py::test_mismatched_ticklabels\", \"lib\/matplotlib\/tests\/test_axes.py::test_empty_ticks_fixed_loc\", \"lib\/matplotlib\/tests\/test_axes.py::test_retain_tick_visibility[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_tick_label_update\", \"lib\/matplotlib\/tests\/test_axes.py::test_o_marker_path_snap[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_margin_updates_limits\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib\/matplotlib\/tests\/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib\/matplotlib\/tests\/test_axes.py::test_length_one_hist\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_xy_bound\", \"lib\/matplotlib\/tests\/test_axes.py::test_pathological_hexbin\", \"lib\/matplotlib\/tests\/test_axes.py::test_color_None\", \"lib\/matplotlib\/tests\/test_axes.py::test_color_alias\", \"lib\/matplotlib\/tests\/test_axes.py::test_numerical_hist_label\", \"lib\/matplotlib\/tests\/test_axes.py::test_unicode_hist_label\", \"lib\/matplotlib\/tests\/test_axes.py::test_move_offsetlabel\", \"lib\/matplotlib\/tests\/test_axes.py::test_rc_spines[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rc_grid[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_rc_tick\", \"lib\/matplotlib\/tests\/test_axes.py::test_rc_major_minor_tick\", \"lib\/matplotlib\/tests\/test_axes.py::test_square_plot\", \"lib\/matplotlib\/tests\/test_axes.py::test_bad_plot_args\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib\/matplotlib\/tests\/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_scale\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_bool\", \"lib\/matplotlib\/tests\/test_axes.py::test_violin_point_mass\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib\/matplotlib\/tests\/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib\/matplotlib\/tests\/test_axes.py::test_dash_offset[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_dash_offset[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_pad\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_location_roundtrip\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_location_shared[True]\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_location_shared[False]\", \"lib\/matplotlib\/tests\/test_axes.py::test_loglog[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_loglog_nonpos[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axes_margins\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_remove_shared_axes_relim\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_axes_autoscale\", \"lib\/matplotlib\/tests\/test_axes.py::test_adjust_numtick_aspect\", \"lib\/matplotlib\/tests\/test_axes.py::test_auto_numticks\", \"lib\/matplotlib\/tests\/test_axes.py::test_auto_numticks_log\", \"lib\/matplotlib\/tests\/test_axes.py::test_broken_barh_empty\", \"lib\/matplotlib\/tests\/test_axes.py::test_broken_barh_timedelta\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_pcolormesh\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_indexing_dates\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_errorbar_indexing\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_index_shape\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_indexing_hist\", \"lib\/matplotlib\/tests\/test_axes.py::test_pandas_bar_align_center\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib\/matplotlib\/tests\/test_axes.py::test_axes_tick_params_gridlines\", \"lib\/matplotlib\/tests\/test_axes.py::test_axes_tick_params_ylabelside\", \"lib\/matplotlib\/tests\/test_axes.py::test_axes_tick_params_xlabelside\", \"lib\/matplotlib\/tests\/test_axes.py::test_none_kwargs\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_uint8\", \"lib\/matplotlib\/tests\/test_axes.py::test_date_timezone_x[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_date_timezone_y[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axisbelow[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_titletwiny\", \"lib\/matplotlib\/tests\/test_axes.py::test_titlesetpos\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_xticks_top\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_xticks_top_both\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_above_offset[left\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_above_offset[center\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_above_offset[both\", \"lib\/matplotlib\/tests\/test_axes.py::test_title_no_move_off_page\", \"lib\/matplotlib\/tests\/test_axes.py::test_offset_label_color\", \"lib\/matplotlib\/tests\/test_axes.py::test_offset_text_visible\", \"lib\/matplotlib\/tests\/test_axes.py::test_large_offset\", \"lib\/matplotlib\/tests\/test_axes.py::test_barb_units\", \"lib\/matplotlib\/tests\/test_axes.py::test_quiver_units\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_color_cycle\", \"lib\/matplotlib\/tests\/test_axes.py::test_tick_param_label_rotation\", \"lib\/matplotlib\/tests\/test_axes.py::test_fillbetween_cycle\", \"lib\/matplotlib\/tests\/test_axes.py::test_log_margins\", \"lib\/matplotlib\/tests\/test_axes.py::test_color_length_mismatch\", \"lib\/matplotlib\/tests\/test_axes.py::test_eventplot_legend\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_broadcast_args\", \"lib\/matplotlib\/tests\/test_axes.py::test_invalid_axis_limits\", \"lib\/matplotlib\/tests\/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib\/matplotlib\/tests\/test_axes.py::test_minorticks_on[symlog-log]\", \"lib\/matplotlib\/tests\/test_axes.py::test_minorticks_on[log-symlog]\", \"lib\/matplotlib\/tests\/test_axes.py::test_minorticks_on[log-log]\", \"lib\/matplotlib\/tests\/test_axes.py::test_twinx_knows_limits\", \"lib\/matplotlib\/tests\/test_axes.py::test_zero_linewidth\", \"lib\/matplotlib\/tests\/test_axes.py::test_empty_errorbar_legend\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_decimal[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_tick_padding_tightbbox\", \"lib\/matplotlib\/tests\/test_axes.py::test_inset\", \"lib\/matplotlib\/tests\/test_axes.py::test_zoom_inset\", \"lib\/matplotlib\/tests\/test_axes.py::test_inset_polar[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_inset_projection\", \"lib\/matplotlib\/tests\/test_axes.py::test_inset_subclass\", \"lib\/matplotlib\/tests\/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib\/matplotlib\/tests\/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib\/matplotlib\/tests\/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib\/matplotlib\/tests\/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_position\", \"lib\/matplotlib\/tests\/test_axes.py::test_spines_properbbox_after_zoom\", \"lib\/matplotlib\/tests\/test_axes.py::test_gettightbbox_ignore_nan\", \"lib\/matplotlib\/tests\/test_axes.py::test_scatter_series_non_zero_index\", \"lib\/matplotlib\/tests\/test_axes.py::test_scatter_empty_data\", \"lib\/matplotlib\/tests\/test_axes.py::test_annotate_across_transforms[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_secondary_xy[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_secondary_fail\", \"lib\/matplotlib\/tests\/test_axes.py::test_secondary_resize\", \"lib\/matplotlib\/tests\/test_axes.py::test_secondary_minorloc\", \"lib\/matplotlib\/tests\/test_axes.py::test_secondary_formatter\", \"lib\/matplotlib\/tests\/test_axes.py::test_secondary_repr\", \"lib\/matplotlib\/tests\/test_axes.py::test_normal_axes\", \"lib\/matplotlib\/tests\/test_axes.py::test_nodecorator\", \"lib\/matplotlib\/tests\/test_axes.py::test_displaced_spine\", \"lib\/matplotlib\/tests\/test_axes.py::test_tickdirs\", \"lib\/matplotlib\/tests\/test_axes.py::test_minor_accountedfor\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_bool_arguments[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_extent_arg\", \"lib\/matplotlib\/tests\/test_axes.py::test_axis_extent_arg2\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_auto_bins\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_nan_data\", \"lib\/matplotlib\/tests\/test_axes.py::test_hist_range_and_density\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_errbar_zorder\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_ticks_inverted\", \"lib\/matplotlib\/tests\/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib\/matplotlib\/tests\/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib\/matplotlib\/tests\/test_axes.py::test_box_aspect\", \"lib\/matplotlib\/tests\/test_axes.py::test_box_aspect_custom_position\", \"lib\/matplotlib\/tests\/test_axes.py::test_bbox_aspect_axes_init\", \"lib\/matplotlib\/tests\/test_axes.py::test_set_aspect_negative\", \"lib\/matplotlib\/tests\/test_axes.py::test_redraw_in_frame\", \"lib\/matplotlib\/tests\/test_axes.py::test_invisible_axes_events\", \"lib\/matplotlib\/tests\/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib\/matplotlib\/tests\/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib\/matplotlib\/tests\/test_axes.py::test_unautoscale[True-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_unautoscale[True-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_unautoscale[False-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_unautoscale[False-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_unautoscale[None-x]\", \"lib\/matplotlib\/tests\/test_axes.py::test_unautoscale[None-y]\", \"lib\/matplotlib\/tests\/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_autoscale_tiny_sticky\", \"lib\/matplotlib\/tests\/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib\/matplotlib\/tests\/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib\/matplotlib\/tests\/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib\/matplotlib\/tests\/test_axes.py::test_multiplot_autoscale\", \"lib\/matplotlib\/tests\/test_axes.py::test_sharing_does_not_link_positions\", \"lib\/matplotlib\/tests\/test_axes.py::test_2dcolor_plot[pdf]\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_axes_clear[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_shared_axes_retick\", \"lib\/matplotlib\/tests\/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib\/matplotlib\/tests\/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib\/matplotlib\/tests\/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_vertical\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_horizontal\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_center\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_location_errorbars\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_fmt[%.2f]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_fmt[{:.2f}]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_fmt[format]\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_fmt_error\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_labels\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_nan_ydata\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib\/matplotlib\/tests\/test_axes.py::test_nan_barlabels\", \"lib\/matplotlib\/tests\/test_axes.py::test_patch_bounds\", \"lib\/matplotlib\/tests\/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib\/matplotlib\/tests\/test_axes.py::test_artist_sublists\", \"lib\/matplotlib\/tests\/test_axes.py::test_empty_line_plots\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_format\", \"lib\/matplotlib\/tests\/test_axes.py::test_automatic_legend\", \"lib\/matplotlib\/tests\/test_axes.py::test_plot_errors\", \"lib\/matplotlib\/tests\/test_axes.py::test_clim\", \"lib\/matplotlib\/tests\/test_axes.py::test_bezier_autoscale\", \"lib\/matplotlib\/tests\/test_axes.py::test_small_autoscale\", \"lib\/matplotlib\/tests\/test_axes.py::test_get_xticklabel\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_leading_nan\", \"lib\/matplotlib\/tests\/test_axes.py::test_bar_all_nan[png]\", \"lib\/matplotlib\/tests\/test_axes.py::test_extent_units[png]\"]","environment_setup_commit":"73909bcb408886a22e2b84581d6b9e6d9907c813"}
{"repo":"django\/django","instance_id":"django__django-11797","base_commit":"3346b78a8a872286a245d1e77ef4718fc5e6be1a","patch":"diff --git a\/django\/db\/models\/lookups.py b\/django\/db\/models\/lookups.py\n--- a\/django\/db\/models\/lookups.py\n+++ b\/django\/db\/models\/lookups.py\n@@ -262,9 +262,9 @@ def process_rhs(self, compiler, connection):\n         from django.db.models.sql.query import Query\n         if isinstance(self.rhs, Query):\n             if self.rhs.has_limit_one():\n-                # The subquery must select only the pk.\n-                self.rhs.clear_select_clause()\n-                self.rhs.add_fields(['pk'])\n+                if not self.rhs.has_select_fields:\n+                    self.rhs.clear_select_clause()\n+                    self.rhs.add_fields(['pk'])\n             else:\n                 raise ValueError(\n                     'The QuerySet value for an exact lookup must be limited to '\n","test_patch":"diff --git a\/tests\/lookup\/tests.py b\/tests\/lookup\/tests.py\n--- a\/tests\/lookup\/tests.py\n+++ b\/tests\/lookup\/tests.py\n@@ -5,6 +5,7 @@\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db.models import Max\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n@@ -956,3 +957,15 @@ def test_nested_outerref_lhs(self):\n             ),\n         )\n         self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+\n+    def test_exact_query_rhs_with_selected_columns(self):\n+        newest_author = Author.objects.create(name='Author 2')\n+        authors_max_ids = Author.objects.filter(\n+            name='Author 2',\n+        ).values(\n+            'name',\n+        ).annotate(\n+            max_id=Max('id'),\n+        ).values('max_id')\n+        authors = Author.objects.filter(id=authors_max_ids[:1])\n+        self.assertEqual(authors.get(), newest_author)\n","problem_statement":"Filtering on query result overrides GROUP BY of internal query\nDescription\n\t\nfrom django.contrib.auth import models\na = models.User.objects.filter(email__isnull=True).values('email').annotate(m=Max('id')).values('m')\nprint(a.query) # good\n# SELECT MAX(\"auth_user\".\"id\") AS \"m\" FROM \"auth_user\" WHERE \"auth_user\".\"email\" IS NULL GROUP BY \"auth_user\".\"email\"\nprint(a[:1].query) # good\n# SELECT MAX(\"auth_user\".\"id\") AS \"m\" FROM \"auth_user\" WHERE \"auth_user\".\"email\" IS NULL GROUP BY \"auth_user\".\"email\" LIMIT 1\nb = models.User.objects.filter(id=a[:1])\nprint(b.query) # GROUP BY U0.\"id\" should be GROUP BY U0.\"email\"\n# SELECT ... FROM \"auth_user\" WHERE \"auth_user\".\"id\" = (SELECT U0.\"id\" FROM \"auth_user\" U0 WHERE U0.\"email\" IS NULL GROUP BY U0.\"id\" LIMIT 1)\n","hints_text":"Workaround: from django.contrib.auth import models a = models.User.objects.filter(email__isnull=True).values('email').aggregate(Max('id'))['id_max'] b = models.User.objects.filter(id=a)\nThanks for tackling that one James! If I can provide you some guidance I'd suggest you have a look at lookups.Exact.process_rhs \u200bhttps:\/\/github.com\/django\/django\/blob\/ea25bdc2b94466bb1563000bf81628dea4d80612\/django\/db\/models\/lookups.py#L265-L267 We probably don't want to perform the clear_select_clause and add_fields(['pk']) when the query is already selecting fields. That's exactly what In.process_rhs \u200bdoes already by only performing these operations if not getattr(self.rhs, 'has_select_fields', True).\nThanks so much for the help Simon! This is a great jumping-off point. There's something that I'm unclear about, which perhaps you can shed some light on. While I was able to replicate the bug with 2.2, when I try to create a test on Master to validate the bug, the group-by behavior seems to have changed. Here's the test that I created: def test_exact_selected_field_rhs_subquery(self): author_1 = Author.objects.create(name='one') author_2 = Author.objects.create(name='two') max_ids = Author.objects.filter(alias__isnull=True).values('alias').annotate(m=Max('id')).values('m') authors = Author.objects.filter(id=max_ids[:1]) self.assertFalse(str(max_ids.query)) # This was just to force the test-runner to output the query. self.assertEqual(authors[0], author_2) And here's the resulting query: SELECT MAX(\"lookup_author\".\"id\") AS \"m\" FROM \"lookup_author\" WHERE \"lookup_author\".\"alias\" IS NULL GROUP BY \"lookup_author\".\"alias\", \"lookup_author\".\"name\" It no longer appears to be grouping by the 'alias' field listed in the initial .values() preceeding the .annotate(). I looked at the docs and release notes to see if there was a behavior change, but didn't see anything listed. Do you know if I'm just misunderstanding what's happening here? Or does this seem like a possible regression?\nIt's possible that a regression was introduced in between. Could you try bisecting the commit that changed the behavior \u200bhttps:\/\/docs.djangoproject.com\/en\/dev\/internals\/contributing\/triaging-tickets\/#bisecting-a-regression\nMmm actually disregard that. The second value in the GROUP BY is due to the ordering value in the Author class's Meta class. class Author(models.Model): name = models.CharField(max_length=100) alias = models.CharField(max_length=50, null=True, blank=True) class Meta: ordering = ('name',) Regarding the bug in question in this ticket, what should the desired behavior be if the inner query is returning multiple fields? With the fix, which allows the inner query to define a field to return\/group by, if there are multiple fields used then it will throw a sqlite3.OperationalError: row value misused. Is this the desired behavior or should it avoid this problem by defaulting back to pk if more than one field is selected?\nI think that we should only default to pk if no fields are selected. The ORM has preliminary support for multi-column lookups and other interface dealing with subqueries doesn't prevent passing queries with multiple fields so I'd stick to the current __in lookup behavior.","created_at":"2019-09-20T02:23:19Z","version":"3.1","FAIL_TO_PASS":"[\"test_exact_query_rhs_with_selected_columns (lookup.tests.LookupTests)\"]","PASS_TO_PASS":"[\"test_chain_date_time_lookups (lookup.tests.LookupTests)\", \"test_count (lookup.tests.LookupTests)\", \"test_custom_field_none_rhs (lookup.tests.LookupTests)\", \"Lookup.can_use_none_as_rhs=True allows None as a lookup value.\", \"test_error_messages (lookup.tests.LookupTests)\", \"test_escaping (lookup.tests.LookupTests)\", \"test_exact_exists (lookup.tests.LookupTests)\", \"Transforms are used for __exact=None.\", \"test_exact_sliced_queryset_limit_one (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_limit_one_offset (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_not_limited_to_one (lookup.tests.LookupTests)\", \"test_exclude (lookup.tests.LookupTests)\", \"test_exists (lookup.tests.LookupTests)\", \"test_get_next_previous_by (lookup.tests.LookupTests)\", \"test_in (lookup.tests.LookupTests)\", \"test_in_bulk (lookup.tests.LookupTests)\", \"test_in_bulk_lots_of_ids (lookup.tests.LookupTests)\", \"test_in_bulk_non_unique_field (lookup.tests.LookupTests)\", \"test_in_bulk_with_field (lookup.tests.LookupTests)\", \"test_in_different_database (lookup.tests.LookupTests)\", \"test_in_keeps_value_ordering (lookup.tests.LookupTests)\", \"test_iterator (lookup.tests.LookupTests)\", \"test_lookup_collision (lookup.tests.LookupTests)\", \"test_lookup_date_as_str (lookup.tests.LookupTests)\", \"test_lookup_int_as_str (lookup.tests.LookupTests)\", \"test_nested_outerref_lhs (lookup.tests.LookupTests)\", \"test_none (lookup.tests.LookupTests)\", \"test_nonfield_lookups (lookup.tests.LookupTests)\", \"test_pattern_lookups_with_substr (lookup.tests.LookupTests)\", \"test_regex (lookup.tests.LookupTests)\", \"test_regex_backreferencing (lookup.tests.LookupTests)\", \"test_regex_non_ascii (lookup.tests.LookupTests)\", \"test_regex_non_string (lookup.tests.LookupTests)\", \"test_regex_null (lookup.tests.LookupTests)\", \"test_relation_nested_lookup_error (lookup.tests.LookupTests)\", \"test_unsupported_lookups (lookup.tests.LookupTests)\", \"test_values (lookup.tests.LookupTests)\", \"test_values_list (lookup.tests.LookupTests)\"]","environment_setup_commit":"0668164b4ac93a5be79f5b87fae83c657124d9ab"}
{"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13142","base_commit":"1c8668b0a021832386470ddf740d834e02c66f69","patch":"diff --git a\/sklearn\/mixture\/base.py b\/sklearn\/mixture\/base.py\n--- a\/sklearn\/mixture\/base.py\n+++ b\/sklearn\/mixture\/base.py\n@@ -257,11 +257,6 @@ def fit_predict(self, X, y=None):\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n \n-        # Always do a final e-step to guarantee that the labels returned by\n-        # fit_predict(X) are always consistent with fit(X).predict(X)\n-        # for any value of max_iter and tol (and any random_state).\n-        _, log_resp = self._e_step(X)\n-\n         if not self.converged_:\n             warnings.warn('Initialization %d did not converge. '\n                           'Try different init parameters, '\n@@ -273,6 +268,11 @@ def fit_predict(self, X, y=None):\n         self.n_iter_ = best_n_iter\n         self.lower_bound_ = max_lower_bound\n \n+        # Always do a final e-step to guarantee that the labels returned by\n+        # fit_predict(X) are always consistent with fit(X).predict(X)\n+        # for any value of max_iter and tol (and any random_state).\n+        _, log_resp = self._e_step(X)\n+\n         return log_resp.argmax(axis=1)\n \n     def _e_step(self, X):\n","test_patch":"diff --git a\/sklearn\/mixture\/tests\/test_bayesian_mixture.py b\/sklearn\/mixture\/tests\/test_bayesian_mixture.py\n--- a\/sklearn\/mixture\/tests\/test_bayesian_mixture.py\n+++ b\/sklearn\/mixture\/tests\/test_bayesian_mixture.py\n@@ -451,6 +451,15 @@ def test_bayesian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n \n \n+def test_bayesian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = BayesianGaussianMixture(n_components=5, n_init=10, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_bayesian_mixture_predict_predict_proba():\n     # this is the same test as test_gaussian_mixture_predict_predict_proba()\n     rng = np.random.RandomState(0)\ndiff --git a\/sklearn\/mixture\/tests\/test_gaussian_mixture.py b\/sklearn\/mixture\/tests\/test_gaussian_mixture.py\n--- a\/sklearn\/mixture\/tests\/test_gaussian_mixture.py\n+++ b\/sklearn\/mixture\/tests\/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n","problem_statement":"GaussianMixture predict and fit_predict disagree when n_init>1\n#### Description\r\nWhen `n_init` is specified in GaussianMixture, the results of fit_predict(X) and predict(X) are often different.  The `test_gaussian_mixture_fit_predict` unit test doesn't catch this because it does not set `n_init`.\r\n\r\n#### Steps\/Code to Reproduce\r\n```\r\npython\r\nfrom sklearn.mixture import GaussianMixture\r\nfrom sklearn.utils.testing import assert_array_equal\r\nimport numpy\r\nX = numpy.random.randn(1000,5)\r\nprint 'no n_init'\r\ngm = GaussianMixture(n_components=5)\r\nc1 = gm.fit_predict(X)\r\nc2 = gm.predict(X)\r\nassert_array_equal(c1,c2)\r\nprint 'n_init=5'\r\ngm = GaussianMixture(n_components=5, n_init=5)\r\nc1 = gm.fit_predict(X)\r\nc2 = gm.predict(X)\r\nassert_array_equal(c1,c2)\r\n```\r\n\r\n#### Expected Results\r\n```\r\nno n_init\r\nn_init=5\r\n```\r\nNo exceptions.\r\n\r\n#### Actual Results\r\n```\r\nno n_init\r\nn_init=5\r\nTraceback (most recent call last):\r\n  File \"test_gm.py\", line 17, in <module>\r\n    assert_array_equal(c1,c2)\r\n  File \"\/home\/scott\/.local\/lib\/python2.7\/site-packages\/numpy\/testing\/_private\/utils.py\", line 872, in assert_array_equal\r\n    verbose=verbose, header='Arrays are not equal')\r\n  File \"\/home\/scott\/.local\/lib\/python2.7\/site-packages\/numpy\/testing\/_private\/utils.py\", line 796, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nArrays are not equal\r\n\r\n(mismatch 88.6%)\r\n x: array([4, 0, 1, 1, 1, 3, 3, 4, 4, 2, 0, 0, 1, 2, 0, 2, 0, 1, 3, 1, 1, 3,\r\n       2, 1, 0, 2, 1, 0, 2, 0, 3, 1, 2, 3, 3, 1, 0, 2, 2, 0, 3, 0, 2, 0,\r\n       4, 2, 3, 0, 4, 2, 4, 1, 0, 2, 2, 1, 3, 2, 1, 4, 0, 2, 2, 1, 1, 2,...\r\n y: array([4, 1, 0, 2, 2, 1, 1, 4, 4, 0, 4, 1, 0, 3, 1, 0, 2, 2, 1, 2, 0, 0,\r\n       1, 0, 4, 1, 0, 4, 0, 1, 1, 2, 3, 1, 4, 0, 1, 4, 4, 4, 0, 1, 0, 2,\r\n       4, 1, 1, 2, 4, 3, 4, 0, 2, 3, 2, 3, 0, 0, 2, 3, 3, 3, 3, 0, 3, 2,...\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 2.7.15rc1 (default, Nov 12 2018, 14:31:15)  [GCC 7.3.0]\r\n   machine: Linux-4.15.0-43-generic-x86_64-with-Ubuntu-18.04-bionic\r\nexecutable: \/usr\/bin\/python\r\n\r\nBLAS:\r\n    macros: HAVE_CBLAS=None, NO_ATLAS_INFO=-1\r\ncblas_libs: cblas\r\n  lib_dirs: \/usr\/lib\/x86_64-linux-gnu\r\n\r\nPython deps:\r\n    Cython: 0.28.5\r\n     scipy: 1.2.0\r\nsetuptools: 39.0.1\r\n       pip: 19.0.1\r\n     numpy: 1.16.0\r\n    pandas: 0.23.1\r\n   sklearn: 0.20.2\r\n```\n","hints_text":"Indeed the code in fit_predict and the one in predict are not exactly consistent. This should be fixed but we would need to check the math to choose the correct variant, add a test and remove the other one.\nI don't think the math is wrong or inconsistent.  I think it's a matter of `fit_predict` returning the fit from the last of `n_iter` iterations, when it should be returning the fit from the _best_ of the iterations.  That is, the last call to `self._e_step()` (base.py:263) should be moved to just before the return, after `self._set_parameters(best_params)` restores the best solution.\nSeems good indeed. When looking quickly you can miss the fact that `_e_step` uses the parameters even if not passed as arguments because they are attributes of the estimator. That's what happened to me :)\r\n\r\n Would you submit a PR ?","created_at":"2019-02-12T14:32:37Z","version":"0.21","FAIL_TO_PASS":"[\"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_fit_predict_n_init\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_predict_n_init\"]","PASS_TO_PASS":"[\"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_log_dirichlet_norm\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_log_wishart_norm\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_covariance_type\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_weight_concentration_prior_type\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_weights_prior_initialisation\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_mean_prior_initialisation\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_precisions_prior_initialisation\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_check_is_fitted\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_weights\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_monotonic_likelihood\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_compare_covar_type\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_check_covariance_precision\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_invariant_translation\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_fit_predict[0-2-1e-07]\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_fit_predict[1-2-0.1]\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_fit_predict[3-300-1e-07]\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_fit_predict[4-300-0.1]\", \"sklearn\/mixture\/tests\/test_bayesian_mixture.py::test_bayesian_mixture_predict_predict_proba\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_attributes\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_check_X\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_check_weights\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_check_means\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_check_precisions\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_suffstat_sk_full\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_suffstat_sk_tied\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_suffstat_sk_diag\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_suffstat_sk_spherical\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_compute_log_det_cholesky\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_log_probabilities\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_estimate_log_prob_resp\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_predict_predict_proba\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_predict[0-2-1e-07]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_predict[1-2-0.1]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_predict[3-300-1e-07]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_predict[4-300-0.1]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_best_params\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_fit_convergence_warning\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_multiple_init\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_n_parameters\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_bic_1d_1component\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_aic_bic\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_gaussian_mixture_verbose\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_warm_start[0]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_warm_start[1]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_warm_start[2]\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_convergence_detected_with_warm_start\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_score\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_score_samples\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_monotonic_likelihood\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_regularisation\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_property\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_sample\", \"sklearn\/mixture\/tests\/test_gaussian_mixture.py::test_init\"]","environment_setup_commit":"7813f7efb5b2012412888b69e73d76f2df2b50b6"}
{"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-18869","base_commit":"b7d05919865fc0c37a0164cf467d5d5513bd0ede","patch":"diff --git a\/lib\/matplotlib\/__init__.py b\/lib\/matplotlib\/__init__.py\n--- a\/lib\/matplotlib\/__init__.py\n+++ b\/lib\/matplotlib\/__init__.py\n@@ -129,25 +129,60 @@\n   year      = 2007\n }\"\"\"\n \n+# modelled after sys.version_info\n+_VersionInfo = namedtuple('_VersionInfo',\n+                          'major, minor, micro, releaselevel, serial')\n \n-def __getattr__(name):\n-    if name == \"__version__\":\n+\n+def _parse_to_version_info(version_str):\n+    \"\"\"\n+    Parse a version string to a namedtuple analogous to sys.version_info.\n+\n+    See:\n+    https:\/\/packaging.pypa.io\/en\/latest\/version.html#packaging.version.parse\n+    https:\/\/docs.python.org\/3\/library\/sys.html#sys.version_info\n+    \"\"\"\n+    v = parse_version(version_str)\n+    if v.pre is None and v.post is None and v.dev is None:\n+        return _VersionInfo(v.major, v.minor, v.micro, 'final', 0)\n+    elif v.dev is not None:\n+        return _VersionInfo(v.major, v.minor, v.micro, 'alpha', v.dev)\n+    elif v.pre is not None:\n+        releaselevel = {\n+            'a': 'alpha',\n+            'b': 'beta',\n+            'rc': 'candidate'}.get(v.pre[0], 'alpha')\n+        return _VersionInfo(v.major, v.minor, v.micro, releaselevel, v.pre[1])\n+    else:\n+        # fallback for v.post: guess-next-dev scheme from setuptools_scm\n+        return _VersionInfo(v.major, v.minor, v.micro + 1, 'alpha', v.post)\n+\n+\n+def _get_version():\n+    \"\"\"Return the version string used for __version__.\"\"\"\n+    # Only shell out to a git subprocess if really needed, and not on a\n+    # shallow clone, such as those used by CI, as the latter would trigger\n+    # a warning from setuptools_scm.\n+    root = Path(__file__).resolve().parents[2]\n+    if (root \/ \".git\").exists() and not (root \/ \".git\/shallow\").exists():\n         import setuptools_scm\n+        return setuptools_scm.get_version(\n+            root=root,\n+            version_scheme=\"post-release\",\n+            local_scheme=\"node-and-date\",\n+            fallback_version=_version.version,\n+        )\n+    else:  # Get the version from the _version.py setuptools_scm file.\n+        return _version.version\n+\n+\n+def __getattr__(name):\n+    if name in (\"__version__\", \"__version_info__\"):\n         global __version__  # cache it.\n-        # Only shell out to a git subprocess if really needed, and not on a\n-        # shallow clone, such as those used by CI, as the latter would trigger\n-        # a warning from setuptools_scm.\n-        root = Path(__file__).resolve().parents[2]\n-        if (root \/ \".git\").exists() and not (root \/ \".git\/shallow\").exists():\n-            __version__ = setuptools_scm.get_version(\n-                root=root,\n-                version_scheme=\"post-release\",\n-                local_scheme=\"node-and-date\",\n-                fallback_version=_version.version,\n-            )\n-        else:  # Get the version from the _version.py setuptools_scm file.\n-            __version__ = _version.version\n-        return __version__\n+        __version__ = _get_version()\n+        global __version__info__  # cache it.\n+        __version_info__ = _parse_to_version_info(__version__)\n+        return __version__ if name == \"__version__\" else __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n","test_patch":"diff --git a\/lib\/matplotlib\/tests\/test_matplotlib.py b\/lib\/matplotlib\/tests\/test_matplotlib.py\n--- a\/lib\/matplotlib\/tests\/test_matplotlib.py\n+++ b\/lib\/matplotlib\/tests\/test_matplotlib.py\n@@ -7,6 +7,16 @@\n import matplotlib\n \n \n+@pytest.mark.parametrize('version_str, version_tuple', [\n+    ('3.5.0', (3, 5, 0, 'final', 0)),\n+    ('3.5.0rc2', (3, 5, 0, 'candidate', 2)),\n+    ('3.5.0.dev820+g6768ef8c4c', (3, 5, 0, 'alpha', 820)),\n+    ('3.5.0.post820+g6768ef8c4c', (3, 5, 1, 'alpha', 820)),\n+])\n+def test_parse_to_version_info(version_str, version_tuple):\n+    assert matplotlib._parse_to_version_info(version_str) == version_tuple\n+\n+\n @pytest.mark.skipif(\n     os.name == \"nt\", reason=\"chmod() doesn't work as is on Windows\")\n @pytest.mark.skipif(os.name != \"nt\" and os.geteuid() == 0,\n","problem_statement":"Add easily comparable version info to toplevel\n<!--\r\nWelcome! Thanks for thinking of a way to improve Matplotlib.\r\n\r\n\r\nBefore creating a new feature request please search the issues for relevant feature requests.\r\n-->\r\n\r\n### Problem\r\n\r\nCurrently matplotlib only exposes `__version__`.  For quick version checks, exposing either a `version_info` tuple (which can be compared with other tuples) or a `LooseVersion` instance (which can be properly compared with other strings) would be a small usability improvement.\r\n\r\n(In practice I guess boring string comparisons will work just fine until we hit mpl 3.10 or 4.10 which is unlikely to happen soon, but that feels quite dirty :))\r\n<!--\r\nProvide a clear and concise description of the problem this feature will solve. \r\n\r\nFor example:\r\n* I'm always frustrated when [...] because [...]\r\n* I would like it if [...] happened when I [...] because [...]\r\n* Here is a sample image of what I am asking for [...]\r\n-->\r\n\r\n### Proposed Solution\r\n\r\nI guess I slightly prefer `LooseVersion`, but exposing just a `version_info` tuple is much more common in other packages (and perhaps simpler to understand).  The hardest(?) part is probably just bikeshedding this point :-)\r\n<!-- Provide a clear and concise description of a way to accomplish what you want. For example:\r\n\r\n* Add an option so that when [...]  [...] will happen\r\n -->\r\n\r\n### Additional context and prior art\r\n\r\n`version_info` is a pretty common thing (citation needed).\r\n<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:\r\n\r\n* Another project [...] solved this by [...]\r\n-->\r\n\n","hints_text":"It seems that `__version_info__` is the way to go.\r\n\r\n### Prior art\r\n- There's no official specification for version tuples. [PEP 396 - Module Version Numbers](https:\/\/www.python.org\/dev\/peps\/pep-0396\/) only defines the string `__version__`.\r\n\r\n- Many projects don't bother with version tuples.\r\n\r\n- When they do, `__version_info__` seems to be a common thing:\r\n  - [Stackoverflow discussion](https:\/\/stackoverflow.com\/a\/466694)\r\n  - [PySide2](https:\/\/doc.qt.io\/qtforpython-5.12\/pysideversion.html#printing-project-and-qt-version) uses it.\r\n\r\n- Python itself has the string [sys.version](https:\/\/docs.python.org\/3\/library\/sys.html#sys.version) and the (named)tuple [sys.version_info](https:\/\/docs.python.org\/3\/library\/sys.html#sys.version_info). In analogy to that `__version_info__` next to `__version__` makes sense for packages.\r\n","created_at":"2020-11-01T23:18:42Z","version":"3.3","FAIL_TO_PASS":"[\"lib\/matplotlib\/tests\/test_matplotlib.py::test_parse_to_version_info[3.5.0-version_tuple0]\", \"lib\/matplotlib\/tests\/test_matplotlib.py::test_parse_to_version_info[3.5.0rc2-version_tuple1]\", \"lib\/matplotlib\/tests\/test_matplotlib.py::test_parse_to_version_info[3.5.0.dev820+g6768ef8c4c-version_tuple2]\", \"lib\/matplotlib\/tests\/test_matplotlib.py::test_parse_to_version_info[3.5.0.post820+g6768ef8c4c-version_tuple3]\"]","PASS_TO_PASS":"[\"lib\/matplotlib\/tests\/test_matplotlib.py::test_tmpconfigdir_warning\", \"lib\/matplotlib\/tests\/test_matplotlib.py::test_importable_with_no_home\", \"lib\/matplotlib\/tests\/test_matplotlib.py::test_use_doc_standard_backends\", \"lib\/matplotlib\/tests\/test_matplotlib.py::test_importable_with__OO\"]","environment_setup_commit":"28289122be81e0bc0a6ee0c4c5b7343a46ce2e4e"}
{"repo":"django\/django","instance_id":"django__django-16046","base_commit":"ec13e801b820614ff374cb0046092caab8d67249","patch":"diff --git a\/django\/utils\/numberformat.py b\/django\/utils\/numberformat.py\n--- a\/django\/utils\/numberformat.py\n+++ b\/django\/utils\/numberformat.py\n@@ -25,6 +25,8 @@ def format(\n         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).\n     * thousand_sep: Thousand separator symbol (for example \",\")\n     \"\"\"\n+    if number is None or number == \"\":\n+        return mark_safe(number)\n     use_grouping = (\n         use_l10n or (use_l10n is None and settings.USE_L10N)\n     ) and settings.USE_THOUSAND_SEPARATOR\n","test_patch":"diff --git a\/tests\/utils_tests\/test_numberformat.py b\/tests\/utils_tests\/test_numberformat.py\n--- a\/tests\/utils_tests\/test_numberformat.py\n+++ b\/tests\/utils_tests\/test_numberformat.py\n@@ -172,3 +172,7 @@ def __format__(self, specifier, **kwargs):\n \n         price = EuroDecimal(\"1.23\")\n         self.assertEqual(nformat(price, \",\"), \"\u20ac 1,23\")\n+\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n","problem_statement":"Fix numberformat.py \"string index out of range\" when null\nDescription\n\t\nWhen:\nif str_number[0] == \"-\"\nencounters a number field that's null when formatting for the admin list_display this causes an \nIndexError: string index out of range\nI can attach the proposed fix here, or open a pull request on GitHub if you like?\n","hints_text":"proposed fix patch\nPlease provide a pull request, including a test.","created_at":"2022-09-10T13:27:38Z","version":"4.2","FAIL_TO_PASS":"[\"test_empty (utils_tests.test_numberformat.TestNumberFormat)\"]","PASS_TO_PASS":"[\"test_decimal_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_decimal_subclass (utils_tests.test_numberformat.TestNumberFormat)\", \"test_float_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_number (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_string (utils_tests.test_numberformat.TestNumberFormat)\", \"test_large_number (utils_tests.test_numberformat.TestNumberFormat)\"]","environment_setup_commit":"0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}
{"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25311","base_commit":"430fb1db88843300fb4baae3edc499bbfe073b0c","patch":"diff --git a\/lib\/matplotlib\/offsetbox.py b\/lib\/matplotlib\/offsetbox.py\n--- a\/lib\/matplotlib\/offsetbox.py\n+++ b\/lib\/matplotlib\/offsetbox.py\n@@ -1505,7 +1505,6 @@ def __init__(self, ref_artist, use_blit=False):\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self.canvas = self.ref_artist.figure.canvas\n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1514,6 +1513,9 @@ def __init__(self, ref_artist, use_blit=False):\n                 'button_release_event', self.on_release),\n         ]\n \n+    # A property, not an attribute, to maintain picklability.\n+    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\n","test_patch":"diff --git a\/lib\/matplotlib\/tests\/test_pickle.py b\/lib\/matplotlib\/tests\/test_pickle.py\n--- a\/lib\/matplotlib\/tests\/test_pickle.py\n+++ b\/lib\/matplotlib\/tests\/test_pickle.py\n@@ -1,6 +1,7 @@\n from io import BytesIO\n import ast\n import pickle\n+import pickletools\n \n import numpy as np\n import pytest\n@@ -88,6 +89,7 @@ def _generate_complete_test_figure(fig_ref):\n \n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n+    plt.legend(draggable=True)\n \n \n @mpl.style.context(\"default\")\n@@ -95,9 +97,13 @@ def _generate_complete_test_figure(fig_ref):\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n-    pkl = BytesIO()\n-    pickle.dump(fig_ref, pkl, pickle.HIGHEST_PROTOCOL)\n-    loaded = pickle.loads(pkl.getbuffer())\n+    pkl = pickle.dumps(fig_ref, pickle.HIGHEST_PROTOCOL)\n+    # FigureCanvasAgg is picklable and GUI canvases are generally not, but there should\n+    # be no reference to the canvas in the pickle stream in either case.  In order to\n+    # keep the test independent of GUI toolkits, run it with Agg and check that there's\n+    # no reference to FigureCanvasAgg in the pickle stream.\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded = pickle.loads(pkl)\n     loaded.canvas.draw()\n \n     fig_test.set_size_inches(loaded.get_size_inches())\n","problem_statement":"[Bug]: Unable to pickle figure with draggable legend\n### Bug summary\r\n\r\nI am unable to pickle figure with draggable legend. Same error comes for draggable annotations.\r\n\r\n\r\n\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\ntime=[0,1,2,3,4]\r\nspeed=[40,43,45,47,48]\r\n\r\nax.plot(time,speed,label=\"speed\")\r\n\r\nleg=ax.legend()\r\nleg.set_draggable(True) #pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n`TypeError: cannot pickle 'FigureCanvasQTAgg' object`\r\n\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n","hints_text":"","created_at":"2023-02-23T21:04:12Z","version":"3.7","FAIL_TO_PASS":"[\"lib\/matplotlib\/tests\/test_pickle.py::test_complete[png]\"]","PASS_TO_PASS":"[\"lib\/matplotlib\/tests\/test_pickle.py::test_simple\", \"lib\/matplotlib\/tests\/test_pickle.py::test_gcf\", \"lib\/matplotlib\/tests\/test_pickle.py::test_no_pyplot\", \"lib\/matplotlib\/tests\/test_pickle.py::test_renderer\", \"lib\/matplotlib\/tests\/test_pickle.py::test_image\", \"lib\/matplotlib\/tests\/test_pickle.py::test_polar\", \"lib\/matplotlib\/tests\/test_pickle.py::test_transform\", \"lib\/matplotlib\/tests\/test_pickle.py::test_rrulewrapper\", \"lib\/matplotlib\/tests\/test_pickle.py::test_shared\", \"lib\/matplotlib\/tests\/test_pickle.py::test_inset_and_secondary\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap0]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap1]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap2]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap3]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap4]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap5]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap6]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap7]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap8]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap9]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap10]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap11]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap12]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap13]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap14]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap15]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap16]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap17]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap18]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap19]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap20]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap21]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap22]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap23]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap24]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap25]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap26]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap27]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap28]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap29]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap30]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap31]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap32]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap33]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap34]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap35]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap36]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap37]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap38]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap39]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap40]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap41]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap42]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap43]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap44]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap45]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap46]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap47]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap48]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap49]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap50]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap51]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap52]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap53]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap54]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap55]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap56]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap57]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap58]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap59]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap60]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap61]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap62]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap63]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap64]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap65]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap66]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap67]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap68]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap69]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap70]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap71]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap72]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap73]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap74]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap75]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap76]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap77]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap78]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap79]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap80]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap81]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap82]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap83]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap84]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap85]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap86]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap87]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap88]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap89]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap90]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap91]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap92]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap93]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap94]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap95]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap96]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap97]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap98]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap99]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap100]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap101]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap102]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap103]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap104]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap105]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap106]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap107]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap108]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap109]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap110]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap111]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap112]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap113]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap114]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap115]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap116]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap117]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap118]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap119]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap120]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap121]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap122]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap123]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap124]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap125]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap126]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap127]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap128]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap129]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap130]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap131]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap132]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap133]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap134]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap135]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap136]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap137]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap138]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap139]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap140]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap141]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap142]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap143]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap144]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap145]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap146]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap147]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap148]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap149]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap150]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap151]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap152]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap153]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap154]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap155]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap156]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap157]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap158]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap159]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap160]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap161]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap162]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap163]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap164]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_cmap[cmap165]\", \"lib\/matplotlib\/tests\/test_pickle.py::test_unpickle_canvas\", \"lib\/matplotlib\/tests\/test_pickle.py::test_mpl_toolkits\", \"lib\/matplotlib\/tests\/test_pickle.py::test_standard_norm\", \"lib\/matplotlib\/tests\/test_pickle.py::test_dynamic_norm\", \"lib\/matplotlib\/tests\/test_pickle.py::test_vertexselector\"]","environment_setup_commit":"0849036fd992a2dd133a0cffc3f84f58ccf1840f"}
{"repo":"django\/django","instance_id":"django__django-11583","base_commit":"60dc957a825232fdda9138e2f8878b2ca407a7c9","patch":"diff --git a\/django\/utils\/autoreload.py b\/django\/utils\/autoreload.py\n--- a\/django\/utils\/autoreload.py\n+++ b\/django\/utils\/autoreload.py\n@@ -143,6 +143,10 @@ def iter_modules_and_files(modules, extra_files):\n             # The module could have been removed, don't fail loudly if this\n             # is the case.\n             continue\n+        except ValueError as e:\n+            # Network filesystems may return null bytes in file paths.\n+            logger.debug('\"%s\" raised when resolving path: \"%s\"' % (str(e), path))\n+            continue\n         results.add(resolved_path)\n     return frozenset(results)\n \n","test_patch":"diff --git a\/tests\/utils_tests\/test_autoreload.py b\/tests\/utils_tests\/test_autoreload.py\n--- a\/tests\/utils_tests\/test_autoreload.py\n+++ b\/tests\/utils_tests\/test_autoreload.py\n@@ -140,6 +140,17 @@ def test_main_module_without_file_is_not_resolved(self):\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n+    def test_path_with_embedded_null_bytes(self):\n+        for path in (\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory\/embedded_null_byte.py',\n+        ):\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n \n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n","problem_statement":"Auto-reloading with StatReloader very intermittently throws \"ValueError: embedded null byte\".\nDescription\n\t\nRaising this mainly so that it's tracked, as I have no idea how to reproduce it, nor why it's happening. It ultimately looks like a problem with Pathlib, which wasn't used prior to 2.2.\nStacktrace:\nTraceback (most recent call last):\n File \"manage.py\" ...\n\texecute_from_command_line(sys.argv)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/__init__.py\", line 381, in execute_from_command_line\n\tutility.execute()\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/__init__.py\", line 375, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/base.py\", line 323, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/runserver.py\", line 60, in execute\n\tsuper().execute(*args, **options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/base.py\", line 364, in execute\n\toutput = self.handle(*args, **options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/runserver.py\", line 95, in handle\n\tself.run(**options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/runserver.py\", line 102, in run\n\tautoreload.run_with_reloader(self.inner_run, **options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 577, in run_with_reloader\n\tstart_django(reloader, main_func, *args, **kwargs)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 562, in start_django\n\treloader.run(django_main_thread)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 280, in run\n\tself.run_loop()\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 286, in run_loop\n\tnext(ticker)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 326, in tick\n\tfor filepath, mtime in self.snapshot_files():\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 342, in snapshot_files\n\tfor file in self.watched_files():\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 241, in watched_files\n\tyield from iter_all_python_module_files()\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 103, in iter_all_python_module_files\n\treturn iter_modules_and_files(modules, frozenset(_error_files))\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 132, in iter_modules_and_files\n\tresults.add(path.resolve().absolute())\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 1120, in resolve\n\ts = self._flavour.resolve(self, strict=strict)\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 346, in resolve\n\treturn _resolve(base, str(path)) or sep\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 330, in _resolve\n\ttarget = accessor.readlink(newpath)\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 441, in readlink\n\treturn os.readlink(path)\nValueError: embedded null byte\nI did print(path) before os.readlink(path) in pathlib and ended up with:\n\/Users\/kez\n\/Users\/kez\/.pyenv\n\/Users\/kez\/.pyenv\/versions\n\/Users\/kez\/.pyenv\/versions\/3.6.2\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/asyncio\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/asyncio\/selector_events.py\n\/Users\nIt always seems to be \/Users which is last\nIt may have already printed \/Users as part of another .resolve() multiple times (that is, the order is not deterministic, and it may have traversed beyond \/Users successfully many times during startup.\nI don't know where to begin looking for the rogue null byte, nor why it only exists sometimes.\nBest guess I have is that there's a mountpoint in \/Users to a samba share which may not have been connected to yet? I dunno.\nI have no idea if it's fixable without removing the use of pathlib (which tbh I think should happen anyway, because it's slow) and reverting to using os.path.join and friends. \nI have no idea if it's fixed in a later Python version, but with no easy way to reproduce ... dunno how I'd check.\nI have no idea if it's something specific to my system (pyenv, OSX 10.11, etc)\n","hints_text":"Thanks for the report, however as you've admitted there is too many unknowns to accept this ticket. I don't believe that it is related with pathlib, maybe samba connection is unstable it's hard to tell.\nI don't believe that it is related with pathlib Well ... it definitely is, you can see that from the stacktrace. The difference between 2.2 and 2.1 (and every version prior) for the purposes of this report is that AFAIK 2.2 is using pathlib.resolve() which deals with symlinks where under <2.2 I don't think the equivalent (os.path.realpath rather than os.path.abspath) was used. But yes, there's no path forward to fix the ticket as it stands, short of not using pathlib (or at least .resolve()).\nHey Keryn, Have you tried removing resolve() yourself, and did it fix the issue? I chose to use resolve() to try and work around a corner case with symlinks, and to generally just normalize the paths to prevent duplication. Also, regarding your comment above, you would need to use print(repr(path)), as I think the print machinery stops at the first null byte found (hence just \/Users, which should never be monitored by itself). If you can provide me some more information I'm more than willing to look into this, or consider removing the resolve() call.\nReplying to Tom Forbes: Hey Keryn, Have you tried removing resolve() yourself, and did it fix the issue? I chose to use resolve() to try and work around a corner case with symlinks, and to generally just normalize the paths to prevent duplication. Also, regarding your comment above, you would need to use print(repr(path)), as I think the print machinery stops at the first null byte found (hence just \/Users, which should never be monitored by itself). If you can provide me some more information I'm more than willing to look into this, or consider removing the resolve() call. Hi Tom, I am also getting this error, see here for the stackoverflow question which I have attempted to answer: \u200bhttps:\/\/stackoverflow.com\/questions\/56406965\/django-valueerror-embedded-null-byte\/56685648#56685648 What is really odd is that it doesn't error every time and looks to error on a random file each time. I believe the issue is caused by having a venv within the top level directory but might be wrong. Bug is on all versions of django >= 2.2.0\nFelix, I'm going to re-open this ticket if that's OK. While this is clearly something \"funky\" going on at a lower level than we handle, it used to work (at least, the error was swallowed). I think this is a fairly simple fix.","created_at":"2019-07-21T20:56:14Z","version":"3.0","FAIL_TO_PASS":"[\"test_path_with_embedded_null_bytes (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_paths_are_pathlib_instances (utils_tests.test_autoreload.TestIterModulesAndFiles)\"]","PASS_TO_PASS":"[\"test_no_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_custom_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception_with_context (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_watchman_available (utils_tests.test_autoreload.GetReloaderTests)\", \"test_watchman_unavailable (utils_tests.test_autoreload.GetReloaderTests)\", \"test_common_roots (utils_tests.test_autoreload.TestCommonRoots)\", \"test_calls_start_django (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_calls_sys_exit (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_swallows_keyboard_interrupt (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_mutates_error_files (utils_tests.test_autoreload.TestCheckErrors)\", \"test_sys_paths_absolute (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_non_existing (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_with_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_manage_py (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_python_m_django (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_run_loop_catches_stopiteration (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_run_loop_stop_and_return (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_checks_for_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_without_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_files_with_recursive_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_single_file (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_without_absolute (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_file (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_recursive_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_nested_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_ignores_missing_files (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_updates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_with_duplicates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_tick_does_not_trigger_twice (utils_tests.test_autoreload.StatReloaderTests)\", \"test_check_errors_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_echo_on_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_starts_thread_with_args (utils_tests.test_autoreload.StartDjangoTests)\", \"test_watchman_becomes_unavailable (utils_tests.test_autoreload.StartDjangoTests)\", \".pyc and .pyo files are included in the files list.\", \"test_check_errors (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_catches_all_exceptions (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_file_added (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_is_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_without_file_is_not_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_module_without_spec (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"iter_all_python_module_file() ignores weakref modules.\", \"test_zip_reload (utils_tests.test_autoreload.TestIterModulesAndFiles)\"]","environment_setup_commit":"419a78300f7cd27611196e1e464d50fd0385ff27"}
{"repo":"django\/django","instance_id":"django__django-12113","base_commit":"62254c5202e80a68f4fe6572a2be46a3d953de1a","patch":"diff --git a\/django\/db\/backends\/sqlite3\/creation.py b\/django\/db\/backends\/sqlite3\/creation.py\n--- a\/django\/db\/backends\/sqlite3\/creation.py\n+++ b\/django\/db\/backends\/sqlite3\/creation.py\n@@ -98,4 +98,6 @@ def test_db_signature(self):\n         sig = [self.connection.settings_dict['NAME']]\n         if self.is_in_memory_db(test_database_name):\n             sig.append(self.connection.alias)\n+        else:\n+            sig.append(test_database_name)\n         return tuple(sig)\n","test_patch":"diff --git a\/tests\/backends\/sqlite\/test_creation.py b\/tests\/backends\/sqlite\/test_creation.py\nnew file mode 100644\n--- \/dev\/null\n+++ b\/tests\/backends\/sqlite\/test_creation.py\n@@ -0,0 +1,18 @@\n+import copy\n+import unittest\n+\n+from django.db import connection\n+from django.test import SimpleTestCase\n+\n+\n+@unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n+class TestDbSignatureTests(SimpleTestCase):\n+    def test_custom_test_name(self):\n+        saved_settings = copy.deepcopy(connection.settings_dict)\n+        try:\n+            connection.settings_dict['NAME'] = None\n+            connection.settings_dict['TEST']['NAME'] = 'custom.sqlite.db'\n+            signature = connection.creation.test_db_signature()\n+            self.assertEqual(signature, (None, 'custom.sqlite.db'))\n+        finally:\n+            connection.settings_dict = saved_settings\n","problem_statement":"admin_views.test_multidb fails with persistent test SQLite database.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nI've tried using persistent SQLite databases for the tests (to make use of\n--keepdb), but at least some test fails with:\nsqlite3.OperationalError: database is locked\nThis is not an issue when only using TEST[\"NAME\"] with \"default\" (which is good enough in terms of performance).\ndiff --git i\/tests\/test_sqlite.py w\/tests\/test_sqlite.py\nindex f1b65f7d01..9ce4e32e14 100644\n--- i\/tests\/test_sqlite.py\n+++ w\/tests\/test_sqlite.py\n@@ -15,9 +15,15 @@\n DATABASES = {\n\t 'default': {\n\t\t 'ENGINE': 'django.db.backends.sqlite3',\n+\t\t'TEST': {\n+\t\t\t'NAME': 'test_default.sqlite3'\n+\t\t},\n\t },\n\t 'other': {\n\t\t 'ENGINE': 'django.db.backends.sqlite3',\n+\t\t'TEST': {\n+\t\t\t'NAME': 'test_other.sqlite3'\n+\t\t},\n\t }\n }\n% tests\/runtests.py admin_views.test_multidb -v 3 --keepdb --parallel 1\n\u2026\nOperations to perform:\n Synchronize unmigrated apps: admin_views, auth, contenttypes, messages, sessions, staticfiles\n Apply all migrations: admin, sites\nRunning pre-migrate handlers for application contenttypes\nRunning pre-migrate handlers for application auth\nRunning pre-migrate handlers for application sites\nRunning pre-migrate handlers for application sessions\nRunning pre-migrate handlers for application admin\nRunning pre-migrate handlers for application admin_views\nSynchronizing apps without migrations:\n Creating tables...\n\tRunning deferred SQL...\nRunning migrations:\n No migrations to apply.\nRunning post-migrate handlers for application contenttypes\nRunning post-migrate handlers for application auth\nRunning post-migrate handlers for application sites\nRunning post-migrate handlers for application sessions\nRunning post-migrate handlers for application admin\nRunning post-migrate handlers for application admin_views\nSystem check identified no issues (0 silenced).\nERROR\n======================================================================\nERROR: setUpClass (admin_views.test_multidb.MultiDatabaseTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/sqlite3\/base.py\", line 391, in execute\n\treturn Database.Cursor.execute(self, query, params)\nsqlite3.OperationalError: database is locked\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"\u2026\/Vcs\/django\/django\/test\/testcases.py\", line 1137, in setUpClass\n\tcls.setUpTestData()\n File \"\u2026\/Vcs\/django\/tests\/admin_views\/test_multidb.py\", line 40, in setUpTestData\n\tusername='admin', password='something', email='test@test.org',\n File \"\u2026\/Vcs\/django\/django\/contrib\/auth\/models.py\", line 158, in create_superuser\n\treturn self._create_user(username, email, password, **extra_fields)\n File \"\u2026\/Vcs\/django\/django\/contrib\/auth\/models.py\", line 141, in _create_user\n\tuser.save(using=self._db)\n File \"\u2026\/Vcs\/django\/django\/contrib\/auth\/base_user.py\", line 66, in save\n\tsuper().save(*args, **kwargs)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 741, in save\n\tforce_update=force_update, update_fields=update_fields)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 779, in save_base\n\tforce_update, using, update_fields,\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 870, in _save_table\n\tresult = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 908, in _do_insert\n\tusing=using, raw=raw)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/query.py\", line 1175, in _insert\n\treturn query.get_compiler(using=using).execute_sql(return_id)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/sql\/compiler.py\", line 1321, in execute_sql\n\tcursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 76, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/utils.py\", line 89, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/sqlite3\/base.py\", line 391, in execute\n\treturn Database.Cursor.execute(self, query, params)\ndjango.db.utils.OperationalError: database is locked\n","hints_text":"This is only an issue when setting TEST[\"NAME\"], but not NAME. The following works: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'django_tests_default.sqlite3', }, 'other': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'django_tests_other.sqlite3', } }\nReproduced at 0dd2308cf6f559a4f4b50edd7c005c7cf025d1aa.\nCreated \u200bPR\nHey, I am able to replicate this bug and was able to fix it as well with the help of \u200bhttps:\/\/github.com\/django\/django\/pull\/11678, but the point I am stuck at is how to test it, I am not able to manipulate the cls variable so the next option that is left is create a file like test_sqlite and pass it as a parameter in runtests, should I be doing that?\nI think we should add tests\/backends\/sqlite\/test_creation.py with regressions tests for test_db_signature(), you can take a look at tests\/backends\/base\/test_creation.py with similar tests.","created_at":"2019-11-20T17:49:06Z","version":"3.1","FAIL_TO_PASS":"[\"test_custom_test_name (backends.sqlite.test_creation.TestDbSignatureTests)\"]","PASS_TO_PASS":"[]","environment_setup_commit":"0668164b4ac93a5be79f5b87fae83c657124d9ab"}
{"repo":"sympy\/sympy","instance_id":"sympy__sympy-21612","base_commit":"b4777fdcef467b7132c055f8ac2c9a5059e6a145","patch":"diff --git a\/sympy\/printing\/str.py b\/sympy\/printing\/str.py\n--- a\/sympy\/printing\/str.py\n+++ b\/sympy\/printing\/str.py\n@@ -333,7 +333,7 @@ def apow(i):\n                     b.append(apow(item))\n                 else:\n                     if (len(item.args[0].args) != 1 and\n-                            isinstance(item.base, Mul)):\n+                            isinstance(item.base, (Mul, Pow))):\n                         # To avoid situations like #14160\n                         pow_paren.append(item)\n                     b.append(item.base)\n","test_patch":"diff --git a\/sympy\/printing\/tests\/test_str.py b\/sympy\/printing\/tests\/test_str.py\n--- a\/sympy\/printing\/tests\/test_str.py\n+++ b\/sympy\/printing\/tests\/test_str.py\n@@ -252,6 +252,8 @@ def test_Mul():\n     # For issue 14160\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\n                                                 evaluate=False)) == '-2*x\/(y*y)'\n+    # issue 21537\n+    assert str(Mul(x, Pow(1\/y, -1, evaluate=False), evaluate=False)) == 'x\/(1\/y)'\n \n \n     class CustomClass1(Expr):\n","problem_statement":"Latex parsing of fractions yields wrong expression due to missing brackets\nProblematic latex expression: `\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"`\r\n\r\nis parsed to: `((a**3 + b)\/c)\/1\/(c**2)`.\r\n\r\nExpected is: `((a**3 + b)\/c)\/(1\/(c**2))`. \r\n\r\nThe missing brackets in the denominator result in a wrong expression.\r\n\r\n## Tested on\r\n\r\n- 1.8\r\n- 1.6.2\r\n\r\n## Reproduce:\r\n\r\n```\r\nroot@d31ef1c26093:\/# python3\r\nPython 3.6.9 (default, Jan 26 2021, 15:33:00)\r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy.parsing.latex import parse_latex\r\n>>> parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\r\n((a**3 + b)\/c)\/1\/(c**2)\r\n\r\n\n","hints_text":"This can be further simplified and fails with \r\n\r\n````python\r\n>>> parse_latex(\"\\\\frac{a}{\\\\frac{1}{b}}\")\r\na\/1\/b\r\n````\r\nbut works with a slighty different expression correctly (although the double brackets are not necessary):\r\n\r\n````python\r\n>>> parse_latex(\"\\\\frac{a}{\\\\frac{b}{c}}\")\r\na\/((b\/c))\r\n````\n> This can be further simplified and fails with\r\n\r\nThis is a printing, not a parsing error. If you look at the args of the result they are `(a, 1\/(1\/b))`\nThis can be fixed with \r\n```diff\r\ndiff --git a\/sympy\/printing\/str.py b\/sympy\/printing\/str.py\r\nindex c3fdcdd435..3e4b7d1b19 100644\r\n--- a\/sympy\/printing\/str.py\r\n+++ b\/sympy\/printing\/str.py\r\n@@ -333,7 +333,7 @@ def apow(i):\r\n                     b.append(apow(item))\r\n                 else:\r\n                     if (len(item.args[0].args) != 1 and\r\n-                            isinstance(item.base, Mul)):\r\n+                            isinstance(item.base, (Mul, Pow))):\r\n                         # To avoid situations like #14160\r\n                         pow_paren.append(item)\r\n                     b.append(item.base)\r\ndiff --git a\/sympy\/printing\/tests\/test_str.py b\/sympy\/printing\/tests\/test_str.py\r\nindex 690b1a8bbf..68c7d63769 100644\r\n--- a\/sympy\/printing\/tests\/test_str.py\r\n+++ b\/sympy\/printing\/tests\/test_str.py\r\n@@ -252,6 +252,8 @@ def test_Mul():\r\n     # For issue 14160\r\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\r\n                                                 evaluate=False)) == '-2*x\/(y*y)'\r\n+    # issue 21537\r\n+    assert str(Mul(x, Pow(1\/y, -1, evaluate=False), evaluate=False)) == 'x\/(1\/y)'\r\n \r\n \r\n     class CustomClass1(Expr):\r\n```\n@smichr That's great, thank you for the quick fix! This works fine here now with all the test cases.\r\n\r\nI did not even consider that this is connected to printing and took the expression at face value. ","created_at":"2021-06-14T04:31:24Z","version":"1.9","FAIL_TO_PASS":"[\"test_Mul\"]","PASS_TO_PASS":"[\"test_printmethod\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_GaussianInteger\", \"test_GaussianRational\", \"test_Pow\", \"test_sqrt\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_AppliedBinaryRelation\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Series_str\", \"test_TransferFunction_str\", \"test_Parallel_str\", \"test_Feedback_str\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_wild_matchpy\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_UniversalSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_MatrixExpressions\", \"test_Subs_printing\", \"test_issue_15716\", \"test_str_special_matrices\", \"test_issue_14567\", \"test_issue_21119_21460\", \"test_Str\", \"test_diffgeom\", \"test_NDimArray\", \"test_Predicate\", \"test_AppliedPredicate\"]","environment_setup_commit":"f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91"}
{"repo":"django\/django","instance_id":"django__django-11620","base_commit":"514efa3129792ec2abb2444f3e7aeb3f21a38386","patch":"diff --git a\/django\/views\/debug.py b\/django\/views\/debug.py\n--- a\/django\/views\/debug.py\n+++ b\/django\/views\/debug.py\n@@ -5,10 +5,10 @@\n from pathlib import Path\n \n from django.conf import settings\n-from django.http import HttpResponse, HttpResponseNotFound\n+from django.http import Http404, HttpResponse, HttpResponseNotFound\n from django.template import Context, Engine, TemplateDoesNotExist\n from django.template.defaultfilters import pprint\n-from django.urls import Resolver404, resolve\n+from django.urls import resolve\n from django.utils import timezone\n from django.utils.datastructures import MultiValueDict\n from django.utils.encoding import force_str\n@@ -483,7 +483,7 @@ def technical_404_response(request, exception):\n     caller = ''\n     try:\n         resolver_match = resolve(request.path)\n-    except Resolver404:\n+    except Http404:\n         pass\n     else:\n         obj = resolver_match.func\n","test_patch":"diff --git a\/tests\/view_tests\/tests\/test_debug.py b\/tests\/view_tests\/tests\/test_debug.py\n--- a\/tests\/view_tests\/tests\/test_debug.py\n+++ b\/tests\/view_tests\/tests\/test_debug.py\n@@ -12,11 +12,13 @@\n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n+from django.http import Http404\n from django.shortcuts import render\n from django.template import TemplateDoesNotExist\n from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n+from django.urls.converters import IntConverter\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n@@ -237,6 +239,11 @@ def test_template_encoding(self):\n             technical_404_response(mock.MagicMock(), mock.Mock())\n             m.assert_called_once_with(encoding='utf-8')\n \n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('\/path-post\/1\/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n \n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n","problem_statement":"When DEBUG is True, raising Http404 in a path converter's to_python method does not result in a technical response\nDescription\n\t\nThis is the response I get (plain text): \nA server error occurred. Please contact the administrator.\nI understand a ValueError should be raised which tells the URL resolver \"this path does not match, try next one\" but Http404 is what came to my mind intuitively and the error message was not very helpful.\nOne could also make a point that raising a Http404 should be valid way to tell the resolver \"this is indeed the right path but the current parameter value does not match anything so stop what you are doing and let the handler return the 404 page (including a helpful error message when DEBUG is True instead of the default 'Django tried these URL patterns')\".\nThis would prove useful for example to implement a path converter that uses get_object_or_404.\n","hints_text":"It seems that other exceptions correctly result in a technical 500 response.\nThe technical_404_response view performs a new URL resolving (cf \u200bhttps:\/\/github.com\/django\/django\/blob\/a8e492bc81fca829f5d270e2d57703c02e58701e\/django\/views\/debug.py#L482) which will obviously raise a new Http404 which won't be caught as only Resolver404 is checked. That means the WSGI handler fails and the WSGI server returns the previously described default error message (indeed the error message is the default one from wsgiref.handlers.BaseHandler \u200bhttps:\/\/docs.python.org\/3.6\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.error_body). The solution seems to be to catch Http404 instead of Resolver404 in technical_404_response. This will result in a technical 404 page with the Http404's message displayed and will match the behaviour of when DEBUG is False.\nCreated \u200bPR , but I am not sure how to write the tests. I've looking about the response before and after catch Http404 instead of Resolver404, and there is no difference. Should I also change the technical_404.html for response?\nI've added test to the patch, but not sure if it is correct.\nI have made the requested changes; please review again","created_at":"2019-08-02T13:56:08Z","version":"3.0","FAIL_TO_PASS":"[\"test_technical_404_converter_raise_404 (view_tests.tests.test_debug.DebugViewTests)\"]","PASS_TO_PASS":"[\"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_ajax_response_encoding (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_non_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_paranoid_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)\", \"test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)\", \"test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_encoding (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions\/values should not make the output generation choke.\", \"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_template_encoding (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Unprintable values should not make the output generation choke.\", \"test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]","environment_setup_commit":"419a78300f7cd27611196e1e464d50fd0385ff27"}
{"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8282","base_commit":"2c2335bbb8af99fa132e1573bbf45dc91584d5a2","patch":"diff --git a\/sphinx\/ext\/autodoc\/__init__.py b\/sphinx\/ext\/autodoc\/__init__.py\n--- a\/sphinx\/ext\/autodoc\/__init__.py\n+++ b\/sphinx\/ext\/autodoc\/__init__.py\n@@ -1240,7 +1240,9 @@ def add_directive_header(self, sig: str) -> None:\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sigs = []\n-        if self.analyzer and '.'.join(self.objpath) in self.analyzer.overloads:\n+        if (self.analyzer and\n+                '.'.join(self.objpath) in self.analyzer.overloads and\n+                self.env.config.autodoc_typehints == 'signature'):\n             # Use signatures for overloaded functions instead of the implementation function.\n             overloaded = True\n         else:\n@@ -1474,7 +1476,7 @@ def format_signature(self, **kwargs: Any) -> str:\n         sigs = []\n \n         overloads = self.get_overloaded_signatures()\n-        if overloads:\n+        if overloads and self.env.config.autodoc_typehints == 'signature':\n             # Use signatures for overloaded methods instead of the implementation method.\n             method = safe_getattr(self._signature_class, self._signature_method_name, None)\n             __globals__ = safe_getattr(method, '__globals__', {})\n@@ -1882,7 +1884,9 @@ def document_members(self, all_members: bool = False) -> None:\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sigs = []\n-        if self.analyzer and '.'.join(self.objpath) in self.analyzer.overloads:\n+        if (self.analyzer and\n+                '.'.join(self.objpath) in self.analyzer.overloads and\n+                self.env.config.autodoc_typehints == 'signature'):\n             # Use signatures for overloaded methods instead of the implementation method.\n             overloaded = True\n         else:\n","test_patch":"diff --git a\/tests\/test_ext_autodoc_configs.py b\/tests\/test_ext_autodoc_configs.py\n--- a\/tests\/test_ext_autodoc_configs.py\n+++ b\/tests\/test_ext_autodoc_configs.py\n@@ -610,6 +610,54 @@ def test_autodoc_typehints_none(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': 'none'})\n+def test_autodoc_typehints_none_for_overload(app):\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.overload', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.overload',\n+        '',\n+        '',\n+        '.. py:class:: Bar(x, y)',\n+        '   :module: target.overload',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: Baz(x, y)',\n+        '   :module: target.overload',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: Foo(x, y)',\n+        '   :module: target.overload',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: Math()',\n+        '   :module: target.overload',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:method:: Math.sum(x, y)',\n+        '      :module: target.overload',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '.. py:function:: sum(x, y)',\n+        '   :module: target.overload',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description(app):\n","problem_statement":"autodoc_typehints does not effect to overloaded callables\n**Describe the bug**\r\nautodoc_typehints does not effect to overloaded callables.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# in conf.py\r\nautodoc_typehints = 'none'\r\n```\r\n```\r\n# in index.rst\r\n.. automodule:: example\r\n   :members:\r\n   :undoc-members:\r\n```\r\n```\r\n# in example.py\r\nfrom typing import overload\r\n\r\n\r\n@overload\r\ndef foo(x: int) -> int:\r\n    ...\r\n\r\n\r\n@overload\r\ndef foo(x: float) -> float:\r\n    ...\r\n\r\n\r\ndef foo(x):\r\n    return x\r\n```\r\n\r\n**Expected behavior**\r\nAll typehints for overloaded callables are obeyed `autodoc_typehints` setting.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\n","hints_text":"","created_at":"2020-10-04T09:04:48Z","version":"3.3","FAIL_TO_PASS":"[\"tests\/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\"]","PASS_TO_PASS":"[\"tests\/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests\/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests\/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests\/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests\/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests\/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests\/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests\/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]","environment_setup_commit":"3b85187ffa3401e88582073c23188c147857a8a3"}
{"repo":"sympy\/sympy","instance_id":"sympy__sympy-16792","base_commit":"09786a173e7a0a488f46dd6000177c23e5d24eed","patch":"diff --git a\/sympy\/utilities\/codegen.py b\/sympy\/utilities\/codegen.py\n--- a\/sympy\/utilities\/codegen.py\n+++ b\/sympy\/utilities\/codegen.py\n@@ -695,6 +695,11 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n         arg_list = []\n \n         # setup input argument list\n+\n+        # helper to get dimensions for data for array-like args\n+        def dimensions(s):\n+            return [(S.Zero, dim - 1) for dim in s.shape]\n+\n         array_symbols = {}\n         for array in expressions.atoms(Indexed) | local_expressions.atoms(Indexed):\n             array_symbols[array.base.label] = array\n@@ -703,11 +708,8 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n \n         for symbol in sorted(symbols, key=str):\n             if symbol in array_symbols:\n-                dims = []\n                 array = array_symbols[symbol]\n-                for dim in array.shape:\n-                    dims.append((S.Zero, dim - 1))\n-                metadata = {'dimensions': dims}\n+                metadata = {'dimensions': dimensions(array)}\n             else:\n                 metadata = {}\n \n@@ -739,7 +741,11 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n                 try:\n                     new_args.append(name_arg_dict[symbol])\n                 except KeyError:\n-                    new_args.append(InputArgument(symbol))\n+                    if isinstance(symbol, (IndexedBase, MatrixSymbol)):\n+                        metadata = {'dimensions': dimensions(symbol)}\n+                    else:\n+                        metadata = {}\n+                    new_args.append(InputArgument(symbol, **metadata))\n             arg_list = new_args\n \n         return Routine(name, arg_list, return_val, local_vars, global_vars)\n","test_patch":"diff --git a\/sympy\/utilities\/tests\/test_codegen.py b\/sympy\/utilities\/tests\/test_codegen.py\n--- a\/sympy\/utilities\/tests\/test_codegen.py\n+++ b\/sympy\/utilities\/tests\/test_codegen.py\n@@ -582,6 +582,25 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n","problem_statement":"autowrap with cython backend fails when array arguments do not appear in wrapped expr\nWhen using the cython backend for autowrap, it appears that the code is not correctly generated when the function in question has array arguments that do not appear in the final expression. A minimal counterexample is:\r\n\r\n```python\r\nfrom sympy.utilities.autowrap import autowrap\r\nfrom sympy import MatrixSymbol\r\nimport numpy as np\r\n\r\nx = MatrixSymbol('x', 2, 1)\r\nexpr = 1.0\r\nf = autowrap(expr, args=(x,), backend='cython')\r\n\r\nf(np.array([[1.0, 2.0]]))\r\n```\r\n\r\nThis should of course return `1.0` but instead fails with:\r\n```python\r\nTypeError: only size-1 arrays can be converted to Python scalars\r\n```\r\n\r\nA little inspection reveals that this is because the corresponding C function is generated with an incorrect signature:\r\n\r\n```C\r\ndouble autofunc(double x) {\r\n\r\n   double autofunc_result;\r\n   autofunc_result = 1.0;\r\n   return autofunc_result;\r\n\r\n}\r\n```\r\n\r\n(`x` should be `double *`, not `double` in this case)\r\n\r\nI've found that this error won't occur so long as `expr` depends at least in part on each argument. For example this slight modification of the above counterexample works perfectly:\r\n\r\n```python\r\nfrom sympy.utilities.autowrap import autowrap\r\nfrom sympy import MatrixSymbol\r\nimport numpy as np\r\n\r\nx = MatrixSymbol('x', 2, 1)\r\n# now output depends on x\r\nexpr = x[0,0]\r\nf = autowrap(expr, args=(x,), backend='cython')\r\n\r\n# returns 1.0 as expected, without failure\r\nf(np.array([[1.0, 2.0]]))\r\n```\r\n\r\nThis may seem like a silly issue (\"why even have `x` as an argument if it doesn't appear in the expression you're trying to evaluate?\"). But of course in interfacing with external libraries (e.g. for numerical integration), one often needs functions to have a pre-defined signature regardless of whether a given argument contributes to the output.\r\n\r\nI think I've identified the problem in `codegen` and will suggest a PR shortly.\n","hints_text":"","created_at":"2019-05-09T03:40:54Z","version":"1.5","FAIL_TO_PASS":"[\"test_ccode_unused_array_arg\"]","PASS_TO_PASS":"[\"test_Routine_argument_order\", \"test_empty_c_code\", \"test_empty_c_code_with_comment\", \"test_empty_c_header\", \"test_simple_c_code\", \"test_c_code_reserved_words\", \"test_numbersymbol_c_code\", \"test_c_code_argument_order\", \"test_simple_c_header\", \"test_simple_c_codegen\", \"test_multiple_results_c\", \"test_no_results_c\", \"test_ansi_math1_codegen\", \"test_ansi_math2_codegen\", \"test_complicated_codegen\", \"test_loops_c\", \"test_dummy_loops_c\", \"test_partial_loops_c\", \"test_output_arg_c\", \"test_output_arg_c_reserved_words\", \"test_ccode_results_named_ordered\", \"test_ccode_matrixsymbol_slice\", \"test_ccode_cse\", \"test_empty_f_code\", \"test_empty_f_code_with_header\", \"test_empty_f_header\", \"test_simple_f_code\", \"test_numbersymbol_f_code\", \"test_erf_f_code\", \"test_f_code_argument_order\", \"test_simple_f_header\", \"test_simple_f_codegen\", \"test_multiple_results_f\", \"test_no_results_f\", \"test_intrinsic_math_codegen\", \"test_intrinsic_math2_codegen\", \"test_complicated_codegen_f95\", \"test_loops\", \"test_dummy_loops_f95\", \"test_loops_InOut\", \"test_partial_loops_f\", \"test_output_arg_f\", \"test_inline_function\", \"test_f_code_call_signature_wrap\", \"test_check_case\", \"test_check_case_false_positive\", \"test_c_fortran_omit_routine_name\", \"test_fcode_matrix_output\", \"test_fcode_results_named_ordered\", \"test_fcode_matrixsymbol_slice\", \"test_fcode_matrixsymbol_slice_autoname\", \"test_global_vars\", \"test_custom_codegen\", \"test_c_with_printer\"]","environment_setup_commit":"70381f282f2d9d039da860e391fe51649df2779d"}
