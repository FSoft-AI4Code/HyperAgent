{
    "Closure-24": {
        "code_elements": [
            "goog.scope(function() {",
            "var x = function(){};",
            "goog.scope(function() {",
            "function x() {}"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.scope"],
        "summary_text": [
            "goog.scope doesn't properly check declared functions"
        ],
        "desc_hints": ["goog.scope"],
        "desc_text": [
            ["The following code is a compiler error:", ["OB", "SR"]],
            ["goog.scope(function() {", "CODE"],
            ["var x = function(){};", "CODE"],
            ["});", []],
            ["but the following code is not:", ["OB", "SR"]],
            ["goog.scope(function() {", "CODE"],
            ["function x() {}", "CODE"],
            ["});", []],
            [
                "Both code snippets should be a compiler error, because they prevent the goog.scope from being unboxed.",
                ["OB", "EB"]
            ]
        ]
    },
    "JxPath-5": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:665)",
            "at org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:649)",
            "at org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:649)",
            "at org.apache.commons.jxpath.ri.model.NodePointer.compareTo(NodePointer.java:639)",
            "at java.util.Arrays.mergeSort(Arrays.java:1152)",
            "at java.util.Arrays.sort(Arrays.java:1079)",
            "at java.util.Collections.sort(Collections.java:113)",
            "at org.apache.commons.jxpath.ri.EvalContext.constructIterator(EvalContext.java:176)",
            "at org.apache.commons.jxpath.ri.EvalContext.hasNext(EvalContext.java:100)",
            "at org.apache.commons.jxpath.JXPathContext.selectNodes(JXPathContext.java:648)",
            "at org.apache.commons.jxpath.ri.model.VariablePointerTestCase.testUnionOfVariableAndNode(VariablePointerTestCase.java:76)"
        ],
        "summary_hints": [],
        "summary_text": [
            "Cannot compare pointers that do not belong to the same tree"
        ],
        "desc_hints": [
            "java.util.Arrays.mergeSort",
            "org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers",
            "Arrays.java",
            "org.apache.commons.jxpath.ri.model.NodePointer.compareTo",
            "EvalContext.java",
            "org.apache.commons.jxpath.ri.EvalContext.hasNext",
            "VariablePointerTestCase.java",
            "java.util.Collections.sort",
            "org.apache.commons.jxpath.JXPathException",
            "org.apache.commons.jxpath.JXPathContext.selectNodes",
            "Collections.java",
            "org.apache.commons.jxpath.ri.model.VariablePointerTestCase.testUnionOfVariableAndNode",
            "JXPathContext.java",
            "NodePointer.java",
            "org.apache.commons.jxpath.ri.EvalContext.constructIterator",
            "java.util.Arrays.sort"
        ],
        "desc_text": [
            ["For XPath \"$var | /MAIN/A\" exception is thrown:", []],
            [
                "org.apache.commons.jxpath.JXPathException: Cannot compare pointers that do not belong to the same tree: '$var' and ''",
                ["OB"]
            ],
            [
                "at org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:665)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:649)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:649)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.ri.model.NodePointer.compareTo(NodePointer.java:639)",
                "STACK_TRACE"
            ],
            ["at java.util.Arrays.mergeSort(Arrays.java:1152)", "STACK_TRACE"],
            ["at java.util.Arrays.sort(Arrays.java:1079)", "STACK_TRACE"],
            [
                "at java.util.Collections.sort(Collections.java:113)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.ri.EvalContext.constructIterator(EvalContext.java:176)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.ri.EvalContext.hasNext(EvalContext.java:100)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.JXPathContext.selectNodes(JXPathContext.java:648)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.jxpath.ri.model.VariablePointerTestCase.testUnionOfVariableAndNode(VariablePointerTestCase.java:76)",
                "STACK_TRACE"
            ]
        ]
    },
    "Closure-167": {
        "code_elements": [
            "/**",
            "* @param {ns.Thing} thing",
            "* @constructor",
            "*/",
            "ns.MyClass = function(thing) {",
            "/** @type {ns.Thing} */ this.thing_ = thing;",
            "ns.MyClass.prototype.doIt = function() {",
            "var subthing = this.thing_.subthing;",
            "// ERRORS:",
            "// window.console.log(subthing.noprop);",
            "// NO ERROR:",
            "for (var i = 0; i < subthing.noprop; i++) {",
            "window.console.log(i);",
            "}",
            "var thing = /** @type {ns.Thing} */({subthing: {prop: 3}});",
            "/*",
            "ERRORS:",
            "var subthing = thing.subthing;",
            "for (var i = 0; i < subthing.noprop; i++) {",
            "window.console.log(i);",
            "} */",
            "var c = new ns.MyClass(thing);",
            "co.doIt();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "invalid property not erroring in for loop in prototype function"
        ],
        "desc_hints": [
            "externsValidation",
            "this.thing_",
            "this.thing_.subthing",
            "externs.js",
            "checkTypes",
            "thing.subthing",
            "compiler.jar",
            "inloop.js",
            "doIt",
            "ns.MyClass.prototype.doIt",
            "subthing.noprop",
            "ns.Thing",
            "co.doIt",
            "ns.MyClass",
            "window.console.log"
        ],
        "desc_text": [
            [
                "I think this example can be simplified to use a typedef instead of externs, but using an extern for the repro case.",
                ["OB", "SR"]
            ],
            ["Compile the attached with:", ["SR"]],
            [
                "java -jar build/compiler.jar --formatting=PRETTY_PRINT --jscomp_error=checkTypes --jscomp_error=externsValidation --compilation_level=SIMPLE_OPTIMIZATIONS --externs=inloop-externs.js inloop.js (pasted below for completeness)",
                []
            ],
            [
                "I would expect an error on the line in the for loop in the doIt function, but this compiles just fine.",
                ["OB", "EB"]
            ],
            [
                "The commented out line above it properly errors, and if the same code is outside a prototype function, it errors.",
                ["OB"]
            ],
            ["It does not error within the prototype function.", ["OB"]],
            ["Thanks", []],
            ["/**", "CODE"],
            ["* @param {ns.Thing} thing", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["ns.MyClass = function(thing) {", "CODE"],
            ["/** @type {ns.Thing} */ this.thing_ = thing;", "CODE"],
            ["};", []],
            ["ns.MyClass.prototype.doIt = function() {", "CODE"],
            ["var subthing = this.thing_.subthing;", "CODE"],
            ["// ERRORS:", "CODE"],
            ["// window.console.log(subthing.noprop);", "CODE"],
            ["// NO ERROR:", "CODE"],
            ["for (var i = 0; i < subthing.noprop; i++) {", "CODE"],
            ["window.console.log(i);", "CODE"],
            ["}", "CODE"],
            ["};", []],
            [
                "var thing = /** @type {ns.Thing} */({subthing: {prop: 3}});",
                "CODE"
            ],
            ["/*", "CODE"],
            ["ERRORS:", "CODE"],
            ["var subthing = thing.subthing;", "CODE"],
            ["for (var i = 0; i < subthing.noprop; i++) {", "CODE"],
            ["window.console.log(i);", "CODE"],
            ["} */", "CODE"],
            ["var c = new ns.MyClass(thing);", "CODE"],
            ["co.doIt();", "CODE"]
        ]
    },
    "Jsoup-69": {
        "code_elements": [
            "Connection.Response response = Jsoup.connect(\"myURL\").execute();",
            "Document doc = response.parse();",
            "//prints HTML including \"input[name=alpha]\"",
            "System.out.println(doc.toString());",
            "doc.select(\"input[name=alpha]\").first().remove();",
            "//prints HTML excluding \"input[name=alpha]\"",
            "System.out.println(doc.toString());",
            "FormElement form = (FormElement)doc.select(\"form\").first();",
            "//prints HTML excluding \"input[name=alpha]\"",
            "System.out.println(form.toString());",
            "List<Connection.KeyVal> data = form.formData();",
            "//prints a list including \"alpha\"",
            "System.out.println(data.toString());"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Removing nodes from forms using jsoup"],
        "desc_hints": [
            "Connection.Response",
            "myURL",
            "doc.select",
            "FormElement",
            "form.formData",
            "response.parse",
            "Jsoup.connect",
            "form.toString",
            "data.toString",
            "Connection.KeyVal",
            "doc.toString",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I'm having a problem removing nodes from forms using jsoup v1.7.3.",
                []
            ],
            ["The following code works as expected:", ["EB", "SR"]],
            [
                "Connection.Response response = Jsoup.connect(\"myURL\").execute();",
                "CODE"
            ],
            ["Document doc = response.parse();", "CODE"],
            ["//prints HTML including \"input[name=alpha]\"", "CODE"],
            ["System.out.println(doc.toString());", "CODE"],
            ["doc.select(\"input[name=alpha]\").first().remove();", "CODE"],
            ["//prints HTML excluding \"input[name=alpha]\"", "CODE"],
            ["System.out.println(doc.toString());", "CODE"],
            [
                "FormElement form = (FormElement)doc.select(\"form\").first();",
                "CODE"
            ],
            ["//prints HTML excluding \"input[name=alpha]\"", "CODE"],
            ["System.out.println(form.toString());", "CODE"],
            ["However, the following code appears to highlight a bug:", ["SR"]],
            ["List<Connection.KeyVal> data = form.formData();", "CODE"],
            ["//prints a list including \"alpha\"", "CODE"],
            ["System.out.println(data.toString());", "CODE"],
            [
                "I would expect \"alpha\" to have been removed from the form data, but it hasn't.",
                ["OB", "EB"]
            ],
            ["Is this a bug?", []],
            ["Or am I doing something wrong?", []],
            ["[Previously reported on Stack Overflow]", []]
        ]
    },
    "Math-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Line.revert"],
        "summary_text": ["Line.revert() is imprecise"],
        "desc_hints": ["Vector3D.negate", "Line.revert"],
        "desc_text": [
            [
                "Line.revert() only maintains ~10 digits for the direction.",
                ["OB"]
            ],
            [
                "This becomes an issue when the line's position is evaluated far from the origin.",
                ["OB"]
            ],
            [
                "A simple fix would be to use Vector3D.negate() for the direction.",
                []
            ],
            ["Also, is there a reason why Line is not immutable?", []],
            ["It is just comprised of two vectors.", ["OB"]]
        ]
    },
    "Closure-101": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["--process_closure_primitives can't be set to false"],
        "desc_hints": ["goog.provide"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "compile a file with \"--process_closure_primitives false\"",
                ["OB", "SR"]
            ],
            ["2.", ["OB", "SR"]],
            [
                "compile a file with \"--process_closure_primitives true\" (default)",
                ["SR"]
            ],
            ["3.", ["OB", "SR"]],
            ["result: primitives are processed in both cases.", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "The file should still have its goog.provide/require tags in place.",
                ["OB", "EB"]
            ],
            ["Instead they are processed.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "current SVN (also tried two of the preceding binary releases with same",
                []
            ],
            ["result)", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Flag can't be set to false due to a missing \"else\" in the command-line",
                ["OB", "SR"]
            ],
            ["parser.", ["OB"]]
        ]
    },
    "Jsoup-31": {
        "code_elements": ["\"</html>\").outerHtml());"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Xml declaration is parsed as a comment"],
        "desc_hints": ["Jsoup.parse", "outerHtml", "System.out.println"],
        "desc_text": [
            ["Using jsoup 1.6.3, the following snippet", ["OB", "SR"]],
            ["System.out.println(", []],
            ["Jsoup.parse(", []],
            ["\"<?xml encoding='UTF-8' version='1.0'?>\" +", []],
            ["\"<html>\" +", []],
            ["\"<head><title></title></head>\" +", []],
            ["\"<body>Document content</body>\" +", []],
            ["\"</html>\").outerHtml());", "CODE"],
            ["prints :", []],
            ["<!--?xml encoding='UTF-8' version='1.0'?-->", []],
            ["<html>", []],
            ["<head>", []],
            ["<title></title>", []],
            ["</head>", []],
            ["<body>", []],
            ["Document content", ["OB"]],
            ["</body>", []],
            ["</html>", []],
            ["while I expect :", ["EB"]],
            ["<?xml encoding='UTF-8' version='1.0'?>", []],
            ["<html>", []],
            ["<head>", []],
            ["<title></title>", []],
            ["</head>", []],
            ["<body>", []],
            ["Document content", ["OB"]],
            ["</body>", []],
            ["</html>", []]
        ]
    },
    "Closure-29": {
        "code_elements": [
            "isFunction = function(functionToCheck) {",
            "var getType;",
            "getType = {}; //just an object",
            "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';",
            "isFunction = function(a) {",
            "return a && \"[object Function]\" === (void 0).apply(a)",
            "isFunction = function(functionToCheck) {",
            "var getType;",
            "getType = []; //not it's an array",
            "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';",
            "isFunction = function(a) {",
            "var b;",
            "b = [];",
            "return a && \"[object Function]\" === b.toString.apply(a)"
        ],
        "stack_traces": [],
        "summary_hints": ["isFunction"],
        "summary_text": [
            "closure compiler screws up a perfectly valid isFunction() implementation"
        ],
        "desc_hints": [
            "isFunction",
            "toString",
            "functionToCheck",
            "getType.toString.apply",
            "getType",
            "toString.apply"
        ],
        "desc_text": [
            [
                "hi, this function does not get compiled correctly via google closure compiler",
                ["OB"]
            ],
            ["isFunction = function(functionToCheck) {", "CODE"],
            ["var getType;", "CODE"],
            ["getType = {}; //just an object", "CODE"],
            [
                "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';",
                "CODE"
            ],
            ["};", []],
            ["gets compiled into", ["OB"]],
            ["isFunction = function(a) {", "CODE"],
            ["return a && \"[object Function]\" === (void 0).apply(a)", "CODE"],
            ["};", []],
            [
                "to make it work, we have to use an array instead of an object (even though we just want to call the object toString method)",
                []
            ],
            ["isFunction = function(functionToCheck) {", "CODE"],
            ["var getType;", "CODE"],
            ["getType = []; //not it's an array", "CODE"],
            [
                "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';",
                "CODE"
            ],
            ["};", []],
            ["gets compiled into", ["OB"]],
            ["isFunction = function(a) {", "CODE"],
            ["var b;", "CODE"],
            ["b = [];", "CODE"],
            [
                "return a && \"[object Function]\" === b.toString.apply(a)",
                "CODE"
            ],
            ["};", []],
            ["and it does what it should do.", ["OB", "EB"]],
            ["i wasted an hour to find that bug.", []],
            ["bugs me.", []],
            ["great tool otherwise.", ["OB"]]
        ]
    },
    "Closure-138": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @output_file_name default.js",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// ==/ClosureCompiler==",
            "var t = null;",
            "{",
            "if (t != null)",
            "{",
            "t = null;",
            "}",
            "t = 1;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Invalid JSC_DETERMINISTIC_TEST"],
        "desc_hints": ["window.test", "ClosureCompiler", "default.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile following code:", ["SR"]],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["var t = null;", "CODE"],
            ["window.test = function()", []],
            ["{", "CODE"],
            ["if (t != null)", "CODE"],
            ["{", "CODE"],
            ["t = null;", "CODE"],
            ["}", "CODE"],
            ["t = 1;", "CODE"],
            ["};", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Code should be compiled without warnings, but I see", ["EB"]],
            [
                "\"JSC_DETERMINISTIC_TEST: condition always evaluates to false\".",
                ["OB"]
            ]
        ]
    },
    "Jsoup-55": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Parse slash in attibutes"],
        "desc_hints": [],
        "desc_text": [
            ["Hello,", []],
            ["I don't know if it is a bug or not, but when I'm parsing:", []],
            ["<img /onerror=\"a()\"/>", []],
            ["The result of the parsers is:", ["OB"]],
            ["<img nerror=\"a()\"/>", []],
            ["Is it OK?", []],
            ["can I change the parser behavior for those types of tags?", []]
        ]
    },
    "JacksonDatabind-22": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonValue"],
        "summary_text": ["Custom serializer not used if POJO has @JsonValue"],
        "desc_hints": ["JsonValue"],
        "desc_text": [
            [
                "Looks like serializers constructed for @JsonValue have higher precedence than custom serializers; that is, registered custom serializer is not found if POJO type has @JsonValue annotation.",
                []
            ],
            ["This is wrong.", ["OB"]]
        ]
    },
    "JacksonCore-14": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Relax ownership checks for buffers not to require increase in size"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "Checks in IOContext expect buffer to either be the same or grow.",
                ["OB", "EB"]
            ],
            [
                "But it should actually be completely legal to return another buffer with similar size, given that most allocation strategies will eventually converge into maximum allowed block size.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Mockito-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArgumentCaptor"],
        "summary_text": ["ArgumentCaptor no longer working for varargs"],
        "desc_hints": [],
        "desc_text": [
            ["Hi, thanks for the PR", []],
            ["I will take a look at it soon.", []],
            ["And probably merge it.", ["OB"]],
            [
                "In the mean time, git history is fine except the merge commit, can you get rid of it ?",
                []
            ],
            ["Otherwise I'll have to cherry-pick relevant commits.", ["OB"]]
        ]
    },
    "Lang-17": {
        "code_elements": [
            "String str1 = \"\\uD842\\uDFB7\" + \"A\";",
            "String str2 = StringEscapeUtils.escapeXml(str1);",
            "// The value of str2 must be equal to the one of str1,",
            "// because str1 does not contain characters to be escaped.",
            "// However, str2 is diffrent from str1."
        ],
        "stack_traces": [],
        "summary_hints": ["StringEscapeUtils.escapeXml"],
        "summary_text": [
            "StringEscapeUtils.escapeXml(input) outputs wrong results when an input contains characters in Supplementary Planes."
        ],
        "desc_hints": [
            "input.length",
            "URLEncoder.encode",
            "CharSequence",
            "StringEscapeUtils.escapeXml",
            "CharSequenceTranslator.translate",
            "Character.codePointCount",
            "System.out.println"
        ],
        "desc_text": [
            ["Hello.", ["OB"]],
            [
                "I use StringEscapeUtils.escapeXml(input) to escape special characters for XML.",
                ["OB", "SR"]
            ],
            [
                "This method outputs wrong results when input contains characters in Supplementary Planes.",
                ["OB"]
            ],
            ["String str1 = \"\\uD842\\uDFB7\" + \"A\";", "CODE"],
            ["String str2 = StringEscapeUtils.escapeXml(str1);", "CODE"],
            ["// The value of str2 must be equal to the one of str1,", "CODE"],
            [
                "// because str1 does not contain characters to be escaped.",
                "CODE"
            ],
            ["// However, str2 is diffrent from str1.", "CODE"],
            [
                "System.out.println(URLEncoder.encode(str1, \"UTF-16BE\")); //%D8%42%DF%B7A",
                []
            ],
            [
                "System.out.println(URLEncoder.encode(str2, \"UTF-16BE\")); //%D8%42%DF%B7%FF%FD",
                []
            ],
            [
                "The cause of this problem is that the loop to translate input character by character is wrong.",
                ["OB"]
            ],
            [
                "In CharSequenceTranslator.translate(CharSequence input, Writer out),",
                ["OB"]
            ],
            [
                "loop counter \"i\" moves from 0 to Character.codePointCount(input, 0, input.length()),",
                []
            ],
            ["but it should move from 0 to input.length().", ["OB", "EB"]]
        ]
    },
    "Closure-151": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Add a --version option for the compiler."],
        "desc_hints": ["compiler.jar"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Run java -jar compiler.jar --version", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected: A version statement.", ["OB", "EB"]],
            ["Actual: An error that --version is not supported.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["See above.", ["OB"]],
            [
                "This is a compiler.jar I downloaded from this project (didn't",
                []
            ],
            ["build it myself), file is dated 04/12/2009.", ["OB"]],
            ["On Windows XP.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "This information doesn't seem to be given anywhere, don't see it on --help",
                ["OB"]
            ],
            ["either.", ["OB"]],
            ["This is an enhancement request, not a bug report.", []]
        ]
    },
    "Jsoup-77": {
        "code_elements": [
            "@Test public void test() {",
            "Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);",
            "Document document = Jsoup.parse(\"<div>test</DIV><p></p>\", \"\", parser);",
            "assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.toString()); // fail -> toString() = \"<div>\\n test\\n <p></p>\\n</div>\"",
            "}",
            "@Test public void test1() {",
            "Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);",
            "Document document = Jsoup.parse(\"<DIV>test</div><p></p>\", \"\", parser);",
            "assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.toString()); // pass",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["ParseSettings.htmlDefault", "xmlParser"],
        "summary_text": [
            "xmlParser() with ParseSettings.htmlDefault does not put end tag to lower case"
        ],
        "desc_hints": [
            "assertEquals",
            "toString",
            "ParseSettings.htmlDefault",
            "Jsoup.parse",
            "Parser.xmlParser",
            "document.toString"
        ],
        "desc_text": [
            ["@Test public void test() {", "CODE"],
            [
                "Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);",
                "CODE"
            ],
            [
                "Document document = Jsoup.parse(\"<div>test</DIV><p></p>\", \"\", parser);",
                "CODE"
            ],
            [
                "assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.toString()); // fail -> toString() = \"<div>\\n test\\n <p></p>\\n</div>\"",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test public void test1() {", "CODE"],
            [
                "Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);",
                "CODE"
            ],
            [
                "Document document = Jsoup.parse(\"<DIV>test</div><p></p>\", \"\", parser);",
                "CODE"
            ],
            [
                "assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.toString()); // pass",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Mockito-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DelegatingMethod.equals"],
        "summary_text": [
            "Fixed DelegatingMethod.equals() so that it's easier to extend Mockito by custom verification modes"
        ],
        "desc_hints": ["VerificationMode", "GitHub"],
        "desc_text": [
            ["Hi Szczepan,", []],
            [
                "Thanks for the reply, I'll simplify the methods now - do I open a new pull request, or somehow edit this one?",
                []
            ],
            ["Sorry - I'm new to GitHub and Git!", []],
            [
                "I haven't used a custom VerificationMode in anger yet, I'm actually writing a tutorial on Mockito and wanted to show one as an example.",
                ["OB", "SR"]
            ],
            [
                "The one I wrote would verify that an invocation was the first invocation on a Mock, and I had a lot of hair pulling when the .equals() of my chunk and all invocations didn't evaluate to true, even though it was the same object!",
                ["OB", "SR"]
            ],
            ["Regards,", []],
            ["Hugh", []]
        ]
    },
    "Codec-13": {
        "code_elements": [
            "public void test1() throws Throwable {",
            "org.apache.commons.codec.language.DoubleMetaphone var0 = new org.apache.commons.codec.language.DoubleMetaphone();",
            "boolean var3 = var0.isDoubleMetaphoneEqual(\"\", \"\", false);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "NullPointerException",
            "DoubleMetaPhone.isDoubleMetaphoneEqual"
        ],
        "summary_text": [
            "NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings"
        ],
        "desc_hints": [
            "var0.isDoubleMetaphoneEqual",
            "isDoubleMetaphoneEqual",
            "org.apache.commons.codec.language.DoubleMetaphone",
            "NullPointerException"
        ],
        "desc_text": [
            [
                "isDoubleMetaphoneEqual does not work with empty strings: The following test throws a NullPointerException:",
                ["OB", "SR"]
            ],
            ["public void test1() throws Throwable {", "CODE"],
            [
                "org.apache.commons.codec.language.DoubleMetaphone var0 = new org.apache.commons.codec.language.DoubleMetaphone();",
                "CODE"
            ],
            [
                "boolean var3 = var0.isDoubleMetaphoneEqual(\"\", \"\", false);",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Collections-27": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["InvokerTransformer"],
        "summary_text": [
            "Arbitrary remote code execution with InvokerTransformer"
        ],
        "desc_hints": [
            "foxglovesecurity.com",
            "readObject",
            "github.com",
            "InvokerTransformer",
            "entrySet",
            "sun.reflect.annotation.AnnotationInvocationHandler"
        ],
        "desc_text": [
            [
                "With InvokerTransformer serializable collections can be build that execute arbitrary Java code.",
                ["OB"]
            ],
            [
                "sun.reflect.annotation.AnnotationInvocationHandler#readObject invokes #entrySet and #get on a deserialized collection.",
                ["OB", "SR"]
            ],
            [
                "If you have an endpoint that accepts serialized Java objects (JMX, RMI, remote EJB, ...) you can combine the two to create arbitrary remote code execution vulnerability.",
                ["OB", "SR"]
            ],
            [
                "I don't know of a good fix short of removing InvokerTransformer or making it not Serializable.",
                []
            ],
            ["Both probably break existing applications.", ["OB"]],
            [
                "This is not my research, but has been discovered by other people.",
                []
            ],
            ["https://github.com/frohoff/ysoserial", []],
            [
                "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/",
                []
            ]
        ]
    },
    "Gson-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Add boxed boolean value() overload."],
        "desc_hints": [],
        "desc_text": [
            [
                "When calling value() with a Boolean, overload resolution would choose value(boolean) which would throw an NPE on null.",
                ["OB", "SR"]
            ],
            [
                "The other boxed types are all numbers which would resolve to value(Number) and behave correctly.",
                ["OB", "SR"]
            ],
            ["Proof this happens: bugsnag/bugsnag-android#42", []]
        ]
    },
    "Math-90": {
        "code_elements": ["final Object OBJ = new Object();"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Bugs in Frequency API"],
        "desc_hints": [
            "getCount",
            "getPct",
            "IllegalArgumentException",
            "getCumFreq",
            "getCumPct",
            "System.out.println",
            "addValue"
        ],
        "desc_text": [
            ["I think the existing Frequency API has some bugs in it.", []],
            [
                "The addValue(Object v) method allows one to add a plain Object, but one cannot add anything further to the instance, as the second add fails with IllegalArgumentException.",
                ["OB"]
            ],
            [
                "In fact, the problem is with the first call to addValue(Object) which should not allow a plain Object to be added - it should only allow Comparable objects.",
                ["OB", "EB"]
            ],
            [
                "This could be fixed by checking that the object is Comparable.",
                []
            ],
            [
                "Similar considerations apply to the getCumFreq(Object) and getCumPct(Object) methods - they will only work with objects that implement Comparable.",
                ["OB"]
            ],
            [
                "The getCount(Object) and getPct(Object) methods don't fail when given a non-Comparable object (because the class cast exception is caught), however they just return 0 as if the object was not present:",
                ["OB"]
            ],
            ["final Object OBJ = new Object();", "CODE"],
            [
                "f.addValue(OBJ); // This ought to fail, but doesn't, causing the unexpected behaviour below",
                ["OB"]
            ],
            ["System.out.println(f.getCount(OBJ)); // 0", []],
            ["System.out.println(f.getPct(OBJ)); // 0.0", []],
            [
                "Rather than adding extra checks for Comparable, it seems to me that the API would be much improved by using Comparable instead of Object.",
                ["OB", "EB"]
            ],
            [
                "Also, it should make it easier to implement generics.",
                ["OB", "EB"]
            ],
            [
                "However, this would cause compilation failures for some programs that pass Object rather than Comparable to the class.",
                ["OB"]
            ],
            [
                "These would need recoding, but I think they would continue to run OK against the new API.",
                ["SR"]
            ],
            [
                "It would also affect the run-time behaviour slightly, as the first attempt to add a non-Comparable object would fail, rather than the second add of a possibly valid object.",
                ["OB"]
            ],
            ["But is that a viable program?", []],
            [
                "It can only add one object, and any attempt to get statistics will either return 0 or an Exception, and applying the instanceof fix would also cause it to fail.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-36": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["More robust charset detection code"],
        "desc_hints": [
            "Jsoup.connect",
            "IllegalCharsetNameException",
            "kuhkep.net",
            "bright.org"
        ],
        "desc_text": [
            ["With the following HTML:", ["OB", "SR"]],
            ["<html lang=\"en-US\">", []],
            ["<head>", []],
            ["<meta charset=\"UTF-8\">", []],
            [
                "<meta http-equiv=\"Content-Type\" content=\"text/html; \" />",
                []
            ],
            ["</head>", []],
            [
                "jsoup fails to parse the page with a IllegalCharsetNameException.",
                ["OB", "SR"]
            ],
            [
                "I see that http-equiv=\"Content-Type\" has an invalid content-type but it would be possible to still parse it correctly by using the html5 , i.e.",
                ["OB", "SR"]
            ],
            ["jsoup could be more robust on this one.", ["OB"]],
            ["other domains which are not working but could be:", []],
            ["9kuhkep.net", []],
            ["www.a-bright.org", []],
            ["I use this code to parse the sites:", ["SR"]],
            ["Jsoup.connect(url).execute()", ["OB"]]
        ]
    },
    "Csv-4": {
        "code_elements": [
            "Map<String, Integer> header = parser.getHeaderMap();",
            "public Map<String, Integer> getHeaderMap() {",
            "return this.headerMap != null ?",
            "new LinkedHashMap<String, Integer>(this.headerMap)",
            ": null;",
            "}"
        ],
        "stack_traces": [
            "Caused by: java.lang.NullPointerException",
            "at java.util.HashMap.<init>(HashMap.java:318)",
            "at java.util.LinkedHashMap.<init>(LinkedHashMap.java:212)",
            "at org.apache.commons.csv.CSVParser.getHeaderMap(CSVParser.java:288)"
        ],
        "summary_hints": ["getHeaderMap"],
        "summary_text": ["CSVParser: getHeaderMap throws NPE"],
        "desc_hints": [
            "LinkedHashMap.java",
            "org.apache.commons.csv.CSVParser.getHeaderMap",
            "LinkedHashMap",
            "getHeaderMap",
            "parser.getHeaderMap",
            "HashMap.java",
            "java.lang.NullPointerException",
            "java.util.LinkedHashMap",
            "headerMap",
            "this.headerMap",
            "java.util.HashMap",
            "CSVParser.java"
        ],
        "desc_text": [
            ["title nearly says it all", ["OB"]],
            [
                "Given a CSVParser parser, the following line throws an NPE:",
                ["OB", "SR"]
            ],
            ["Map<String, Integer> header = parser.getHeaderMap();", "CODE"],
            ["Stacktrace:", ["OB"]],
            ["Caused by: java.lang.NullPointerException", "STACK_TRACE"],
            ["at java.util.HashMap.<init>(HashMap.java:318)", "STACK_TRACE"],
            [
                "at java.util.LinkedHashMap.<init>(LinkedHashMap.java:212)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.csv.CSVParser.getHeaderMap(CSVParser.java:288)",
                "STACK_TRACE"
            ],
            ["happens if the format doesn't have a headerMap.", ["OB"]],
            [
                "to fix, check if the parser's headerMap is null before trying to create the returned map:",
                []
            ],
            ["public Map<String, Integer> getHeaderMap() {", "CODE"],
            ["return this.headerMap != null ?", "CODE"],
            ["new LinkedHashMap<String, Integer>(this.headerMap)", "CODE"],
            [": null;", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-8": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CharSequence"],
        "summary_text": [
            "Problem with bogus conflict between single-arg-String vs CharSequence constructor"
        ],
        "desc_hints": ["CharSequence", "StringBuilder"],
        "desc_text": [
            [
                "Although it is good idea to allow recognizing CharSequence as almost like an alias for String, this can cause problems for classes like StringBuilder that have separate constructors for both.",
                ["OB"]
            ],
            [
                "This actually throws a bogus exception for 2.5.0, due to introduction of ability to recognize CharSequence.",
                ["OB"]
            ]
        ]
    },
    "Compress-40": {
        "code_elements": [
            "public long readBits(final int count) throws IOException {",
            "if (count < 0 || count > MAXIMUM_CACHE_SIZE)",
            "{",
            "throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);",
            "}",
            "while (bitsCachedSize < count) {",
            "final long nextByte = in.read();",
            "if (nextByte < 0)",
            "{",
            "return nextByte;",
            "}",
            "if (byteOrder == ByteOrder.LITTLE_ENDIAN)",
            "{",
            "bitsCached |= (nextByte << bitsCachedSize);",
            "}",
            "else",
            "{",
            "bitsCached <<= 8;",
            "bitsCached |= nextByte;",
            "}",
            "bitsCachedSize += 8;",
            "}",
            "final long bitsOut;",
            "if (byteOrder == ByteOrder.LITTLE_ENDIAN)",
            "{",
            "bitsOut = (bitsCached & MASKS[count]);",
            "bitsCached >>>= count;",
            "}",
            "else",
            "{",
            "bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];",
            "}",
            "bitsCachedSize -= count;",
            "return bitsOut;",
            "}",
            "public static void test() {",
            "ByteArrayInputStream in = new ByteArrayInputStream(new byte[]",
            "{87, 45, 66, 15,",
            "90, 29, 88, 61, 33, 74}",
            ");",
            "BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);",
            "try",
            "{",
            "long ret = bin.readBits(5);",
            "ret = bin.readBits(63);",
            "ret = bin.readBits(12);",
            "}",
            "catch (Exception e)",
            "{",
            "e.printStackTrace();",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["BitInputStream"],
        "summary_text": ["Overflow in BitInputStream"],
        "desc_hints": [
            "byteOrder",
            "bitsOut",
            "ByteOrder.LITTLE_ENDIAN",
            "nextByte",
            "bitsCachedSize",
            "IllegalArgumentException",
            "BitInputStream",
            "bin.readBits",
            "BitInputStream.java",
            "bitsCached",
            "readBits",
            "in.read",
            "printStackTrace",
            "ByteArrayInputStream"
        ],
        "desc_text": [
            [
                "in Class BitInputStream.java(\\src\\main\\java\\org\\apache\\commons\\compress\\utils),",
                []
            ],
            ["funcion:", []],
            [
                "public long readBits(final int count) throws IOException {",
                "CODE"
            ],
            ["if (count < 0 || count > MAXIMUM_CACHE_SIZE)", "CODE"],
            ["{", "CODE"],
            [
                "throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);",
                "CODE"
            ],
            ["}", "CODE"],
            ["while (bitsCachedSize < count) {", "CODE"],
            ["final long nextByte = in.read();", "CODE"],
            ["if (nextByte < 0)", "CODE"],
            ["{", "CODE"],
            ["return nextByte;", "CODE"],
            ["}", "CODE"],
            ["if (byteOrder == ByteOrder.LITTLE_ENDIAN)", "CODE"],
            ["{", "CODE"],
            ["bitsCached |= (nextByte << bitsCachedSize);", "CODE"],
            ["}", "CODE"],
            ["else", "CODE"],
            ["{", "CODE"],
            ["bitsCached <<= 8;", "CODE"],
            ["bitsCached |= nextByte;", "CODE"],
            ["}", "CODE"],
            ["bitsCachedSize += 8;", "CODE"],
            ["}", "CODE"],
            ["final long bitsOut;", "CODE"],
            ["if (byteOrder == ByteOrder.LITTLE_ENDIAN)", "CODE"],
            ["{", "CODE"],
            ["bitsOut = (bitsCached & MASKS[count]);", "CODE"],
            ["bitsCached >>>= count;", "CODE"],
            ["}", "CODE"],
            ["else", "CODE"],
            ["{", "CODE"],
            [
                "bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];",
                "CODE"
            ],
            ["}", "CODE"],
            ["bitsCachedSize -= count;", "CODE"],
            ["return bitsOut;", "CODE"],
            ["}", "CODE"],
            [
                "I think here \"bitsCached |= (nextByte << bitsCachedSize);\" will overflow in some cases.",
                ["OB"]
            ],
            ["for example, below is a test case:", ["SR"]],
            ["public static void test() {", "CODE"],
            [
                "ByteArrayInputStream in = new ByteArrayInputStream(new byte[]",
                "CODE"
            ],
            ["{87, 45, 66, 15,", "CODE"],
            ["90, 29, 88, 61, 33, 74}", "CODE"],
            [");", "CODE"],
            [
                "BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);",
                "CODE"
            ],
            ["try", "CODE"],
            ["{", "CODE"],
            ["long ret = bin.readBits(5);", "CODE"],
            ["ret = bin.readBits(63);", "CODE"],
            ["ret = bin.readBits(12);", "CODE"],
            ["}", "CODE"],
            ["catch (Exception e)", "CODE"],
            ["{", "CODE"],
            ["e.printStackTrace();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "overflow occur in \"bin.readBits(63);\" , so ,result in wrong result from \"bin.readBits(12);\"",
                ["OB"]
            ]
        ]
    },
    "Gson-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TypeAdapt"],
        "summary_text": [
            "Fixed a regression in Gson 2.6 where Gson caused NPE if the TypeAdapt\u2026"
        ],
        "desc_hints": ["erFactory.create"],
        "desc_text": [["\u2026erFactory.create() returned null.", ["OB"]]]
    },
    "JacksonDatabind-57": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ObjectReader.readValues"],
        "summary_text": [
            "ObjectReader.readValues() ignores offset and length when reading an array"
        ],
        "desc_hints": [
            "ObjectReader.java",
            "github.com",
            "_dataFormatReaders",
            "ObjectReader.readValues",
            "FasterXML"
        ],
        "desc_text": [
            [
                "ObjectReader.readValues ignores offset and length when reading an array.",
                ["OB"]
            ],
            [
                "If _dataFormatReaders it will always use the full array:",
                ["OB"]
            ],
            [
                "https://github.com/FasterXML/jackson-databind/blob/2.7/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java#L1435",
                []
            ]
        ]
    },
    "Closure-90": {
        "code_elements": [
            "goog.provide('bug');",
            "/**",
            "* @this {bug.Thing}",
            "*/",
            "bug.sharedMethod = function() {};",
            "/**",
            "* @constructor",
            "*/",
            "bug.A = function() {};",
            "/**",
            "* @constructor",
            "*/",
            "bug.B = function() {};",
            "/**",
            "* @type {bug.A|bug.B}",
            "*/",
            "bug.Thing = goog.typedef;",
            "bug.sharedMethod = function() {};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["@this emits warning when used with a typedef"],
        "desc_hints": [
            "goog.provide",
            "goog.typedef",
            "code.google.com",
            "NamedPass",
            "compiler_bug_this_typedef.js",
            "bug.sharedMethod",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.LoggerErrorManager",
            "sanityCheckVars",
            "bug.Thing"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile this with r520:", []],
            ["goog.provide('bug');", "CODE"],
            ["/**", "CODE"],
            ["* @this {bug.Thing}", "CODE"],
            ["*/", "CODE"],
            ["bug.sharedMethod = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["bug.A = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["bug.B = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @type {bug.A|bug.B}", "CODE"],
            ["*/", "CODE"],
            ["bug.Thing = goog.typedef;", "CODE"],
            ["2.", ["OB", "SR"]],
            ["Observe this warning:", []],
            [
                "Oct 28, 2010 9:59:15 PM com.google.javascript.jscomp.PhaseOptimizer$NamedPass process",
                []
            ],
            ["INFO: sanityCheckVars", []],
            [
                "Oct 28, 2010 9:59:15 PM com.google.javascript.jscomp.LoggerErrorManager println",
                []
            ],
            [
                "WARNING: /home/elf/JSPATH/compiler_bug_this_typedef.js:6: WARNING - @this type of a function must be an object",
                ["OB"]
            ],
            ["Actual type: (bug.A|bug.B|null)", []],
            ["bug.sharedMethod = function() {};", "CODE"],
            [
                "Note that @this {!bug.Thing} doesn't work either, while @this {bug.A|bug.B} works.",
                []
            ],
            ["This code did not emit a warning in r481.", ["OB"]],
            [
                "This code is what caused me to run into http://code.google.com/p/closure-compiler/issues/detail?id=268",
                ["SR"]
            ]
        ]
    },
    "Codec-5": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NullPointerException", "Base64InputStream"],
        "summary_text": [
            "Base64InputStream causes NullPointerException on some input"
        ],
        "desc_hints": [
            "PvSP1VvMxMDkxcCe6ZuZk5NZ7MPAnemcUZSfl5",
            "1StJLErMKynNSdTLyUxOzStO1fOB0AwQwMjEwOrJwJMbn",
            "QXPFLte9AZe5uBaJvGrKVl",
            "XhbtaHu1kf6mZ9T5g2YED8BwKgj8WAbtIDuUkP5CY9mJt22FSkZEXf",
            "LinKzEu3rigoLQJpXvNZ",
            "oCIGeVRFSYlA",
            "RfzVBIWj0vc82vY7YPvM5eLHHOulV77M6CoB4h",
            "XmpYPXL9Bln",
            "Base64.readResults",
            "Base64.setInitialBuffer",
            "xY7m85nYo",
            "dgYNM1MLUyMKioKAYFOCvIBb8vl8qCOFxA4",
            "wAI1gKJtZEvTws",
            "4rAoYeAN9nA0NTQqBxYMQcGOAG5",
            "mSWFkclpiTmeID4joml2SWpYZk5qaW",
            "n7jNxWfbAXeXJS",
            "nx2quwitN7",
            "NKUvNKShiYop2iGTiLgQoTS0qLUgsZ6hgYfRh4SjJSE3PS84GmZOSWMAj5gMzVz0nMS9cP",
            "1RhJPQarL",
            "zsBCZjq",
            "GdiT8",
            "Base64InputStream.read",
            "DjTV1AfoZn2Im",
            "NullPointerException",
            "ldb6QmSP1ROGwGs",
            "xfnV2i",
            "mIpsRFhU37JPRoZe2ZjiX",
            "jAiRIU7HqgYN8zk",
            "E4tLgOnUKbOk2IuBOzcfzqso6M1QmrzKkedPzcYO3QZu129As4xITlZI6QqYFNhz44v9EkFpCGua",
            "rbrTaXDZO6NwU7gnHOVgzzsmnGX2Y5GDqrst8wcTear0Ab1yj6PrD",
            "H4sIAAAAAAAAAFvzloG1uIhBKiuxLFGvODW5tCizpFIvODM9LzXFPykrNbmE8",
            "Base64InputStream",
            "MEj45Bel62flpyTqlwAF9F2A9oBkrMEqnYtSoXyob1hy4z1dShgEIL4oLcnM0Q8N9XQBqubKjYfa",
            "j3FluPu4lcr7ra9OfHKXIZNTa4FPd8n33J",
            "5iUMg773My5qLLK8OVAu6Tz7Xcyjy9Uym02Z",
            "jE5Tu066K3Mdf17m66mbpXN9y34ZZ3ErRobfn",
            "FjHWHRR",
            "Tn15ZwiCF5n2E",
            "AcbR8gDJgaGigIGBqbLayAuMUxNKdVLTyxJTc7QS07WSyzKLC7JL8lJ",
            "nDUoDhjVfhrpNABdpI5qWTJYmZ5nsD9Cg0pwSWnSyhOCaYXmAerMoDgsxnAkzG1R",
            "inAvail",
            "Base64.decode",
            "LmEQdkktS83JL8gF5g4FqBGlIJ"
        ],
        "desc_text": [
            [
                "Certain (malformed?) input to Base64InputStream causes a NullPointerException in Base64.decode.",
                []
            ],
            [
                "The exception occurs when Base64.decode is entered with the following conditions:",
                ["OB", "SR"]
            ],
            ["buffer is null", []],
            ["modulus is 3 from a previous entry.", ["OB", "SR"]],
            [
                "inAvail is -1 because Base64InputStream.read reached EOF on line 150.",
                ["OB", "SR"]
            ],
            [
                "Under these conditions, Base64.decode reaches line 581 with buffer still null and throws a NullPointerException.",
                ["OB", "SR"]
            ],
            ["Here is some input data that will trigger it:", ["SR"]],
            [
                "H4sIAAAAAAAAAFvzloG1uIhBKiuxLFGvODW5tCizpFIvODM9LzXFPykrNbmE8//eDC2bq/+ZGJij",
                []
            ],
            [
                "GdiT8/NKUvNKShiYop2iGTiLgQoTS0qLUgsZ6hgYfRh4SjJSE3PS84GmZOSWMAj5gMzVz0nMS9cP",
                []
            ],
            [
                "LinKzEu3rigoLQJpXvNZ/AcbR8gDJgaGigIGBqbLayAuMUxNKdVLTyxJTc7QS07WSyzKLC7JL8lJ",
                []
            ],
            [
                "1StJLErMKynNSdTLyUxOzStO1fOB0AwQwMjEwOrJwJMbn+mSWFkclpiTmeID4joml2SWpYZk5qaW",
                []
            ],
            [
                "MEj45Bel62flpyTqlwAF9F2A9oBkrMEqnYtSoXyob1hy4z1dShgEIL4oLcnM0Q8N9XQBqubKjYfa",
                []
            ],
            [
                "DjTV1AfoZn2Im/WTk/XhbtaHu1kf6mZ9T5g2YED8BwKgj8WAbtIDuUkP5CY9mJt22FSkZEXf/QkK",
                []
            ],
            [
                "oCIGeVRFSYlA/zsBCZjq//9/PvSP1VvMxMDkxcCe6ZuZk5NZ7MPAnemcUZSfl5+Tn15ZwiCF5n2E",
                []
            ],
            [
                "nDUoDhjVfhrpNABdpI5qWTJYmZ5nsD9Cg0pwSWnSyhOCaYXmAerMoDgsxnAkzG1R+XmpYPXL9Bln",
                []
            ],
            [
                "1RhJPQarL+dgYNM1MLUyMKioKAYFOCvIBb8vl8qCOFxA4/jAiRIU7HqgYN8zk/n7jNxWfbAXeXJS",
                []
            ],
            [
                "E4tLgOnUKbOk2IuBOzcfzqso6M1QmrzKkedPzcYO3QZu129As4xITlZI6QqYFNhz44v9EkFpCGua",
                []
            ],
            [
                "LmEQdkktS83JL8gF5g4FqBGlIJ+wAI1gKJtZEvTws/j3FluPu4lcr7ra9OfHKXIZNTa4FPd8n33J",
                []
            ],
            [
                "QXPFLte9AZe5uBaJvGrKVl+rbrTaXDZO6NwU7gnHOVgzzsmnGX2Y5GDqrst8wcTear0Ab1yj6PrD",
                []
            ],
            [
                "F977vL/5iUMg773My5qLLK8OVAu6Tz7Xcyjy9Uym02Z/+xY7m85nYo/t4E93FXFKOf9/a3X78neS",
                []
            ],
            [
                "jE5Tu066K3Mdf17m66mbpXN9y34ZZ3ErRobfn+RfzVBIWj0vc82vY7YPvM5eLHHOulV77M6CoB4h",
                []
            ],
            [
                "xb/FjHWHRR+ldb6QmSP1ROGwGs+nx2quwitN7+mIpsRFhU37JPRoZe2ZjiX/70j7CS1tz51YP/3W",
                []
            ],
            ["/xfnV2i/4rAoYeAN9nA0NTQqBxYMQcGOAG5", []],
            [
                "Say this is read from file with a byte[] of size 1024 using Base64InputStream.read(byte[]).",
                []
            ],
            [
                "In the first iteration, all 1190 bytes get read into buf, then it enters Base64.setInitialBuffer and assigns the byte[1024] to buffer and does a round of decoding.",
                ["OB", "SR"]
            ],
            [
                "When it then enters Base64.readResults on line 162 in Base64InputStream, it sets buffer to null, modulus has the left-over value 3, and the NPE occurs the next iteration.",
                ["OB", "SR"]
            ],
            [
                "Base64InputStream could avoid this by returning right away on EOF (-1), but I think the real fix needs to happen in Base64 since it this same situation could be created by direct use.",
                ["SR"]
            ],
            [
                "My guess is either more needs to happen in the body of the if on line 542 (set modulus to 0?) or the condition on line 573 is flawed and needs adjusting.",
                []
            ]
        ]
    },
    "Codec-2": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Base64 bug with empty input (new byte[0])"],
        "desc_hints": ["Base64.encode"],
        "desc_text": [
            [
                "Base64.encode(new byte[0]) doesn't return an empty byte array back!",
                ["OB"]
            ],
            ["It returns CRLF.", ["OB"]]
        ]
    },
    "Math-99": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["MathUtils.gcd", "Integer.MIN_VALUE"],
        "summary_text": [
            "MathUtils.gcd(Integer.MIN_VALUE, 0) should throw an Exception instead of returning Integer.MIN_VALUE"
        ],
        "desc_hints": ["Integer.MIN_VALUE"],
        "desc_text": [
            [
                "The gcd method should throw an Exception for gcd(Integer.MIN_VALUE, 0), like for gcd(Integer.MIN_VALUE, Integer.MIN_VALUE).",
                ["OB", "EB"]
            ],
            ["The method should only return nonnegative results.", ["OB", "EB"]]
        ]
    },
    "Cli-32": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "HelpFormatter.findWrapPos",
            "StringIndexOutOfBoundsException"
        ],
        "summary_text": [
            "StringIndexOutOfBoundsException in HelpFormatter.findWrapPos"
        ],
        "desc_hints": [
            "text.length",
            "svn.apache.org",
            "HelpFormatter.java",
            "HelpFormatter.findWrapPos",
            "text.charAt",
            "StringIndexOutOfBoundsException"
        ],
        "desc_text": [
            [
                "In the last while loop in HelpFormatter.findWrapPos, it can pass text.length() to text.charAt(int), which throws a StringIndexOutOfBoundsException.",
                ["OB"]
            ],
            [
                "The first expression in that while loop condition should use a <, not a <=.",
                ["OB", "EB", "SR"]
            ],
            ["This is on line 908 in r779646:", []],
            [
                "http://svn.apache.org/viewvc/commons/proper/cli/trunk/src/java/org/apache/commons/cli/HelpFormatter.java?revision=779646&view=markup",
                []
            ]
        ]
    },
    "JacksonCore-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonPointer"],
        "summary_text": [
            "JsonPointer should not consider \"00\" to be valid index"
        ],
        "desc_hints": ["JsonPointer"],
        "desc_text": [
            [
                "Although 00 can be parsed as 0 in some cases, it is not a valid JSON number; and is also not legal numeric index for JSON Pointer.",
                ["OB"]
            ],
            [
                "As such, JsonPointer class should ensure it can only match property name \"00\" and not array index.",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonDatabind-48": {
        "code_elements": [
            "public static void main(String [] args) {",
            "class TCls {",
            "@JsonProperty(\"groupname\")",
            "private String groupname;",
            "public void setName(String str) {",
            "this.groupname = str;",
            "}",
            "public String getName() {",
            "return groupname;",
            "}",
            "}",
            "ObjectMapper om = new ObjectMapper();",
            "// Only use explicitly specified values to be serialized/deserialized (i.e., JSONProperty).",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS, false);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS, false);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS, false);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS, false);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS, false);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS, false);",
            "om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS, true);",
            "JavaType javaType = om.getTypeFactory().constructType(TCls.class);",
            "BasicClassIntrospector introspector = new BasicClassIntrospector();",
            "BasicBeanDescription bdesc = introspector.forSerialization(om.getSerializationConfig(), javaType, null);",
            "List<BeanPropertyDefinition> bprops = bdesc.findProperties();",
            "if (1 != bprops.size()) {",
            "System.out.println(\"Found property count \" + bprops.size() + \", there should only be one??\");",
            "}",
            "bprops.forEach(prop -> {",
            "System.out.println(\"Found property: name=\" + prop.getName() + \", internalName=\" + prop.getInternalName());",
            "});",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "BasicClassIntrospector.forSerialization",
            "findProperties",
            "MapperFeature.AUTO_DETECT_GETTERS"
        ],
        "summary_text": [
            "BasicClassIntrospector.forSerialization(...).findProperties should respect MapperFeature.AUTO_DETECT_GETTERS/SETTERS"
        ],
        "desc_hints": [
            "MapperConfig",
            "JsonProperty",
            "constructType",
            "JavaType",
            "getName",
            "prop.getInternalName",
            "TCls.class",
            "bdesc.findProperties",
            "bprops.forEach",
            "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS",
            "this.groupname",
            "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS",
            "BeanPropertyDefinition",
            "AutoDetect",
            "om.getSerializationConfig",
            "bprops.size",
            "ObjectMapper",
            "introspector.forSerialization",
            "om.configure",
            "om.getTypeFactory",
            "BasicClassIntrospector",
            "BasicBeanDescription",
            "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS",
            "setName",
            "com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS",
            "com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS",
            "com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS",
            "com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS",
            "internalName",
            "javaType",
            "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS",
            "prop.getName",
            "System.out.println"
        ],
        "desc_text": [
            [
                "When I set the ObjectMapper MapperConfig to not AutoDetect and use the BasicClassIntrospector to get the properties, I seem to still be getting the Methods.",
                ["OB", "SR"]
            ],
            ["I am currently using version 2.7.3.", ["OB"]],
            ["The following code produces this output:", ["OB", "SR"]],
            ["Found property count 2, there should only be one??", ["EB"]],
            ["Found property: name=name, internalName=name", []],
            ["Found property: name=groupname, internalName=groupname", []],
            ["I think it should produce only this output:", ["EB"]],
            ["Found property: name=groupname, internalName=groupname", []],
            ["public static void main(String [] args) {", "CODE"],
            ["class TCls {", "CODE"],
            ["@JsonProperty(\"groupname\")", "CODE"],
            ["private String groupname;", "CODE"],
            ["public void setName(String str) {", "CODE"],
            ["this.groupname = str;", "CODE"],
            ["}", "CODE"],
            ["public String getName() {", "CODE"],
            ["return groupname;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["ObjectMapper om = new ObjectMapper();", "CODE"],
            [
                "// Only use explicitly specified values to be serialized/deserialized (i.e., JSONProperty).",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS, false);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS, false);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS, false);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS, false);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS, false);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS, false);",
                "CODE"
            ],
            [
                "om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS, true);",
                "CODE"
            ],
            [
                "JavaType javaType = om.getTypeFactory().constructType(TCls.class);",
                "CODE"
            ],
            [
                "BasicClassIntrospector introspector = new BasicClassIntrospector();",
                "CODE"
            ],
            [
                "BasicBeanDescription bdesc = introspector.forSerialization(om.getSerializationConfig(), javaType, null);",
                "CODE"
            ],
            [
                "List<BeanPropertyDefinition> bprops = bdesc.findProperties();",
                "CODE"
            ],
            ["if (1 != bprops.size()) {", "CODE"],
            [
                "System.out.println(\"Found property count \" + bprops.size() + \", there should only be one??\");",
                "CODE"
            ],
            ["}", "CODE"],
            ["bprops.forEach(prop -> {", "CODE"],
            [
                "System.out.println(\"Found property: name=\" + prop.getName() + \", internalName=\" + prop.getInternalName());",
                "CODE"
            ],
            ["});", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonXml-2": {
        "code_elements": [
            "public class WindSpeed {",
            "public static class Radius {",
            "@JacksonXmlProperty(isAttribute = true)",
            "private String sector;",
            "@JacksonXmlProperty(isAttribute = true)",
            "private String units;",
            "@JacksonXmlText",
            "private int value;",
            "..../ Getters and Setters code/....",
            "}",
            "@JacksonXmlProperty(isAttribute = true)",
            "private String units;",
            "@JacksonXmlProperty(isAttribute = true)",
            "private String source;",
            "@JacksonXmlText",
            "private int value;",
            "@JacksonXmlElementWrapper(useWrapping = false)",
            "private List<Radius> radius;",
            "..../ Getters and Setters code/....",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Mixed content not supported if there are child elements."
        ],
        "desc_hints": [
            "JacksonXmlProperty",
            "XmlTokenStream",
            "XmlText",
            "isAttribute",
            "CxmlWindSpeed",
            "JacksonXmlElementWrapper",
            "WindSpeed",
            "JacksonXmlText",
            "useWrapping",
            "windSpeed"
        ],
        "desc_text": [
            [
                "@XmlText is only supported if there are no child elements, support could be improved with some changes in XmlTokenStream.",
                ["OB"]
            ],
            [
                "I successfully made some changes in XmlTokenStream, it's working in my personal case, but it needs more tests.",
                []
            ],
            ["If agreed, I could provide a patch.", []],
            ["Example:", ["OB", "SR"]],
            [
                "Input string : \"<windSpeed units=\\\"kt\\\">27<radius>20</radius></windSpeed>\"",
                []
            ],
            ["\"CxmlWindSpeed\" class :", []],
            ["public class WindSpeed {", "CODE"],
            ["public static class Radius {", "CODE"],
            ["@JacksonXmlProperty(isAttribute = true)", "CODE"],
            ["private String sector;", "CODE"],
            ["@JacksonXmlProperty(isAttribute = true)", "CODE"],
            ["private String units;", "CODE"],
            ["@JacksonXmlText", "CODE"],
            ["private int value;", "CODE"],
            ["..../ Getters and Setters code/....", "CODE"],
            ["}", "CODE"],
            ["@JacksonXmlProperty(isAttribute = true)", "CODE"],
            ["private String units;", "CODE"],
            ["@JacksonXmlProperty(isAttribute = true)", "CODE"],
            ["private String source;", "CODE"],
            ["@JacksonXmlText", "CODE"],
            ["private int value;", "CODE"],
            ["@JacksonXmlElementWrapper(useWrapping = false)", "CODE"],
            ["private List<Radius> radius;", "CODE"],
            ["..../ Getters and Setters code/....", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Time-27": {
        "code_elements": [".appendSuffix(\"S\");"],
        "stack_traces": [],
        "summary_hints": ["PeriodFormatter"],
        "summary_text": ["#64 Different behaviour of PeriodFormatter"],
        "desc_hints": [
            "appendSuffix",
            "PeriodFormatter",
            "appendWeeks",
            "PeriodFormatterBuilder",
            "appendMinutes",
            "appendSecondsWithOptionalMillis",
            "toFormatter",
            "appendMonths",
            "ISOPeriodFormat.standard",
            "appendSeparatorIfFieldsAfter",
            "pfmtbuilder2.append",
            "appendYears",
            "appendHours",
            "appendDays",
            "appendLiteral"
        ],
        "desc_text": [
            [
                "PeriodFormatter pfmt2 = pfmtbuilder2.append(ISOPeriodFormat.standard() ).toFormatter(); is not the same as",
                []
            ],
            [
                "PeriodFormatterBuilder pfmtbuilder1 = new PeriodFormatterBuilder()",
                []
            ],
            [".appendLiteral(\"P\")", ["OB"]],
            [".appendYears()", ["OB"]],
            [".appendSuffix(\"Y\")", ["OB"]],
            [".appendMonths()", ["OB"]],
            [".appendSuffix(\"M\")", ["OB"]],
            [".appendWeeks()", ["OB"]],
            [".appendSuffix(\"W\")", ["OB"]],
            [".appendDays()", ["OB"]],
            [".appendSuffix(\"D\")", ["OB"]],
            [".appendSeparatorIfFieldsAfter(\"T\")", ["OB"]],
            [".appendHours()", ["OB"]],
            [".appendSuffix(\"H\")", ["OB"]],
            [".appendMinutes()", ["OB"]],
            [".appendSuffix(\"M\")", ["OB"]],
            [".appendSecondsWithOptionalMillis()", ["OB"]],
            [".appendSuffix(\"S\");", "CODE"],
            ["which is copied from ISOPeriodFormat.standard() method", []]
        ]
    },
    "JacksonDatabind-105": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["java.lang.Void"],
        "summary_text": [
            "Illegal reflective access operation warning when using java.lang.Void as value type"
        ],
        "desc_hints": [
            "requestUrl",
            "com.fasterxml.jackson.databind.util.ClassUtil",
            "Void.class",
            "java.lang.Void",
            "getRestTemplate",
            "authHeaders",
            "HttpEntity",
            "HttpMethod.PATCH",
            "RestTemplate",
            "ResponseEntity"
        ],
        "desc_text": [
            ["I'm using Jackson (2.9.7) through Spring's RestTemplate:", []],
            ["ResponseEntity<Void> response = getRestTemplate().exchange(", []],
            ["requestUrl,", []],
            ["HttpMethod.PATCH,", []],
            ["new HttpEntity<>(dto, authHeaders),", []],
            ["Void.class", []],
            [");", []],
            [
                "When Void is used to indicate that the ResponseEntity has no body, the following warning appears in the console:",
                ["OB", "SR"]
            ],
            [
                "WARNING: An illegal reflective access operation has occurred",
                []
            ],
            [
                "WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.ClassUtil (file:/<snip>repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar) to constructor java.lang.Void()",
                []
            ],
            [
                "WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.ClassUtil",
                []
            ],
            [
                "WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations",
                ["SR"]
            ],
            [
                "WARNING: All illegal access operations will be denied in a future release",
                ["OB"]
            ],
            [
                "The problem disappears if String is used as generic type.",
                ["OB"]
            ]
        ]
    },
    "Cli-14": {
        "code_elements": [
            "package org.apache.commons.cli2.issues;",
            "import java.io.File;",
            "import org.apache.commons.cli2.CommandLine;",
            "import org.apache.commons.cli2.Group;",
            "import org.apache.commons.cli2.builder.ArgumentBuilder;",
            "import org.apache.commons.cli2.builder.DefaultOptionBuilder;",
            "import org.apache.commons.cli2.builder.GroupBuilder;",
            "import org.apache.commons.cli2.commandline.Parser;",
            "import org.apache.commons.cli2.option.DefaultOption;",
            "import org.apache.commons.cli2.validation.FileValidator;",
            "public class CLI2Sample",
            "{",
            "public static void main(String[] args)",
            "{",
            "final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();",
            "final ArgumentBuilder abuilder = new ArgumentBuilder();",
            "final GroupBuilder gbuilder = new GroupBuilder();",
            "DefaultOption fileNameOption = obuilder",
            ".withShortName(\"f\")",
            ".withLongName(\"file-name\")",
            ".withRequired(true)",
            ".withDescription(\"name of an existing file\")",
            ".withArgument(abuilder",
            ".withName(\"file-name\")",
            ".withValidator(FileValidator.getExistingFileInstance())",
            ".create())",
            ".create();",
            "Group options = gbuilder",
            ".withName(\"options\")",
            ".withOption(fileNameOption)",
            ".create();",
            "Parser parser = new Parser();",
            "parser.setHelpTrigger(\"--help\");",
            "parser.setGroup(options);",
            "CommandLine cl = parser.parseAndHelp(args);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "parser.parseAndHelp",
            "ClassCastException",
            "FileValidator"
        ],
        "summary_text": [
            "adding a FileValidator results in ClassCastException in parser.parseAndHelp(args)"
        ],
        "desc_hints": [
            "withShortName",
            "org.apache.commons.cli2.builder.GroupBuilder",
            "org.apache.commons.cli2.option.GroupImpl.validate",
            "ArgumentImpl.java",
            "withDescription",
            "DefaultOption",
            "FileValidator.getExistingFileInstance",
            "org.apache.commons.cli2.option.ParentImpl.validate",
            "org.apache.commons.cli2.issues.CLI2Sample",
            "org.apache.commons.cli2.validation.FileValidator.validate",
            "org.apache.commons.cli2.builder.DefaultOptionBuilder",
            "java.io.File",
            "Parser.java",
            "org.apache.commons.cli2.Group",
            "withValidator",
            "CommandLine",
            "withOption",
            "GroupBuilder",
            "withRequired",
            "GroupImpl.java",
            "DefaultOption.java",
            "DefaultOptionBuilder",
            "org.apache.commons.cli2.option.DefaultOption.validate",
            "withName",
            "FileValidator.java",
            "org.apache.commons.cli2.commandline.Parser",
            "fileNameOption",
            "ParentImpl.java",
            "org.apache.commons.cli2.commandline.Parser.parse",
            "org.apache.commons.cli2.issues",
            "org.apache.commons.cli2.builder.ArgumentBuilder",
            "java.lang.String",
            "withLongName",
            "parser.setGroup",
            "parser.setHelpTrigger",
            "org.apache.commons.cli2.issues.CLI2Sample.main",
            "java.lang.ClassCastException",
            "parser.parseAndHelp",
            "ArgumentBuilder",
            "org.apache.commons.cli2.option.DefaultOption",
            "SNAPSHOT.jar",
            "org.apache.commons.cli2.CommandLine",
            "ClassCastException",
            "withArgument",
            "NumberValidator.getIntegerInstance",
            "org.apache.commons.cli2.commandline.Parser.parseAndHelp",
            "org.apache.commons.cli2.option.ArgumentImpl.validate",
            "CLI2Sample.java",
            "org.apache.commons.cli2.validation.FileValidator"
        ],
        "desc_text": [
            [
                "When I add a FileValidator.getExistingFileInstance() to an Argument, I get a ClassCastException when I parse args.",
                ["OB", "SR"]
            ],
            ["Below is a testcase invoke with", ["SR"]],
            [
                "java org.apache.commons.cli2.issues.CLI2Sample -classpath commons-cli-2.0-SNAPSHOT.jar --file-name path-to-an-existing-file",
                ["SR"]
            ],
            ["Run it and you get:", ["OB"]],
            [
                "Exception in thread \"main\" java.lang.ClassCastException: java.io.File cannot be cast to java.lang.String",
                []
            ],
            [
                "at org.apache.commons.cli2.validation.FileValidator.validate(FileValidator.java:122)",
                []
            ],
            [
                "at org.apache.commons.cli2.option.ArgumentImpl.validate(ArgumentImpl.java:250)",
                []
            ],
            [
                "at org.apache.commons.cli2.option.ParentImpl.validate(ParentImpl.java:123)",
                []
            ],
            [
                "at org.apache.commons.cli2.option.DefaultOption.validate(DefaultOption.java:175)",
                []
            ],
            [
                "at org.apache.commons.cli2.option.GroupImpl.validate(GroupImpl.java:264)",
                []
            ],
            [
                "at org.apache.commons.cli2.commandline.Parser.parse(Parser.java:105)",
                []
            ],
            [
                "at org.apache.commons.cli2.commandline.Parser.parseAndHelp(Parser.java:125)",
                []
            ],
            [
                "at org.apache.commons.cli2.issues.CLI2Sample.main(CLI2Sample.java:38)",
                []
            ],
            [
                "Comment out the withValidator call and it runs with no exception.",
                ["OB", "SR"]
            ],
            ["I also get a similar ClassCastException if I add a", ["OB"]],
            [".withValidator(NumberValidator.getIntegerInstance())", ["OB"]],
            ["to another option/argument.", ["OB"]],
            ["Here is the source", []],
            ["package org.apache.commons.cli2.issues;", "CODE"],
            ["import java.io.File;", "CODE"],
            ["import org.apache.commons.cli2.CommandLine;", "CODE"],
            ["import org.apache.commons.cli2.Group;", "CODE"],
            ["import org.apache.commons.cli2.builder.ArgumentBuilder;", "CODE"],
            [
                "import org.apache.commons.cli2.builder.DefaultOptionBuilder;",
                "CODE"
            ],
            ["import org.apache.commons.cli2.builder.GroupBuilder;", "CODE"],
            ["import org.apache.commons.cli2.commandline.Parser;", "CODE"],
            ["import org.apache.commons.cli2.option.DefaultOption;", "CODE"],
            [
                "import org.apache.commons.cli2.validation.FileValidator;",
                "CODE"
            ],
            ["public class CLI2Sample", "CODE"],
            ["{", "CODE"],
            ["public static void main(String[] args)", "CODE"],
            ["{", "CODE"],
            [
                "final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();",
                "CODE"
            ],
            ["final ArgumentBuilder abuilder = new ArgumentBuilder();", "CODE"],
            ["final GroupBuilder gbuilder = new GroupBuilder();", "CODE"],
            ["DefaultOption fileNameOption = obuilder", "CODE"],
            [".withShortName(\"f\")", "CODE"],
            [".withLongName(\"file-name\")", "CODE"],
            [".withRequired(true)", "CODE"],
            [".withDescription(\"name of an existing file\")", "CODE"],
            [".withArgument(abuilder", "CODE"],
            [".withName(\"file-name\")", "CODE"],
            [".withValidator(FileValidator.getExistingFileInstance())", "CODE"],
            [".create())", "CODE"],
            [".create();", "CODE"],
            ["Group options = gbuilder", "CODE"],
            [".withName(\"options\")", "CODE"],
            [".withOption(fileNameOption)", "CODE"],
            [".create();", "CODE"],
            ["Parser parser = new Parser();", "CODE"],
            ["parser.setHelpTrigger(\"--help\");", "CODE"],
            ["parser.setGroup(options);", "CODE"],
            ["CommandLine cl = parser.parseAndHelp(args);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Compress-41": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ZipArchiveInputStream.getNextZipEntry"],
        "summary_text": [
            "ZipArchiveInputStream.getNextZipEntry() should differentiate between \"invalid entry encountered\" and \"no more entries\""
        ],
        "desc_hints": ["ZipArchiveInputStream.getNextZipEntry"],
        "desc_text": [
            [
                "ZipArchiveInputStream.getNextZipEntry() currently returns null if an invalid entry is encountered.",
                ["OB"]
            ],
            [
                "Thus, it's not possible to differentiate between \"no more entries\" and \"invalid entry encountered\" conditions.",
                ["OB"]
            ],
            [
                "Instead, it should throw an exception if an invalid entry is encountered.",
                ["OB", "EB"]
            ],
            ["I've created a test case and fix.", ["SR"]],
            ["I will submit a pull request shortly.", ["OB"]]
        ]
    },
    "Closure-128": {
        "code_elements": [
            "1. Compile alert({0:0, 1:1});",
            "alert({0:0, 1:1});",
            "alert({\"0\":0, 1:1});"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "The compiler quotes the \"0\" keys in object literals"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1. Compile alert({0:0, 1:1});", "CODE"],
            ["What is the expected output?", "QUERY"],
            ["alert({0:0, 1:1});", "CODE"],
            ["What do you see instead?", "QUERY"],
            ["alert({\"0\":0, 1:1});", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Latest version on Goobuntu.", ["OB"]]
        ]
    },
    "Closure-153": {
        "code_elements": [
            "if (!Node) var Node = { };",
            "if(!Node)var Node={};",
            "Node||(Node={});"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Namespace definition in Prototype is broken"],
        "desc_hints": ["prototype.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Namespace definition in prototype.js (Prototype library) looks like:",
                []
            ],
            ["if (!Node) var Node = { };", "CODE"],
            ["2.", ["OB", "SR"]],
            [
                "Compile with latest command line compiler (Version: 20100917 (revision 440) Built on: 2010/09/17 17:55), with default options",
                ["SR"]
            ],
            ["3.", ["OB", "SR"]],
            [
                "Open html which uses this script in IE8 - IE will show error message (something like \"Node - definition is missing\", I use localized version and cannot write exact english message).",
                ["OB", "SR"]
            ],
            ["What is the expected output?", "QUERY"],
            ["Something like:", []],
            ["if(!Node)var Node={};", "CODE"],
            ["What do you see instead?", "QUERY"],
            ["Node||(Node={});", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "Command line compiler (Version: 20100917 (revision 440) Built on: 2010/09/17 17:55), with default options, OS Linux Mint 7.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-109": {
        "code_elements": [
            "/** @type {function(new:?)} */ var foo = function() {};",
            "/** @type {function(new:*)} */ var bar = function() {};",
            "/** @type {function(new:?)} */ var foo = function() {};",
            "/** @type {function(new:*)} */ var bar = function() {};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Constructor types that return all or unknown fail to parse"
        ],
        "desc_hints": ["foo.js"],
        "desc_text": [
            [
                "Constructor types that return the all type or the unknown type currently fail to parse:",
                ["OB", "SR"]
            ],
            ["/** @type {function(new:?)} */ var foo = function() {};", "CODE"],
            ["/** @type {function(new:*)} */ var bar = function() {};", "CODE"],
            ["foo.js:1: ERROR - Bad type annotation.", ["OB"]],
            ["type not recognized due to syntax error", ["OB"]],
            ["/** @type {function(new:?)} */ var foo = function() {};", "CODE"],
            ["^", []],
            ["foo.js:2: ERROR - Bad type annotation.", ["OB"]],
            ["type not recognized due to syntax error", ["OB"]],
            ["/** @type {function(new:*)} */ var bar = function() {};", "CODE"],
            ["^", []],
            ["This is an issue for a code generator that I'm working on.", []]
        ]
    },
    "Time-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["org.joda.time.field.FieldUtils.safeMultipl"],
        "summary_text": [
            "#147 possibly a bug in org.joda.time.field.FieldUtils.safeMultipl"
        ],
        "desc_hints": [
            "SourceForge",
            "Long.MIN_VALUE",
            "org.joda.time.field.FieldUtils.safeMultiply"
        ],
        "desc_text": [
            [
                "It seems to me that as currently written in joda-time-2.1.jar",
                ["OB"]
            ],
            [
                "org.joda.time.field.FieldUtils.safeMultiply(long val1, int scalar)",
                []
            ],
            [
                "doesn't detect the overflow if the long val1 == Long.MIN_VALUE and the int scalar == -1.",
                ["OB"]
            ],
            [
                "The attached file demonstrates what I think is the bug and suggests a patch.",
                []
            ],
            [
                "I looked at the Joda Time bugs list in SourceForge but couldn't see anything that looked relevant: my apologies if I've missed something, or if I'm making a mistake with this bug report.",
                []
            ],
            ["Colin Bartlett", []]
        ]
    },
    "Closure-21": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Classify non-rightmost expressions as problematic"],
        "desc_hints": [],
        "desc_text": [
            ["Purpose of code changes:", []],
            [
                "When it comes to an expression involving the comma operator, only the",
                ["OB", "SR"]
            ],
            [
                "first element of such a sequence is checked for being free of side",
                []
            ],
            ["effects.", ["OB"]],
            ["If the element is free of side effects, it is classified as", []],
            ["problematic and a warning is issued.", ["OB"]],
            [
                "As other non-rightmost elements are not checked for being free of side",
                []
            ],
            [
                "effects and therefore cannot be classified as problematic, this leads",
                ["OB"]
            ],
            ["to unexpected behavior:", ["OB"]],
            ["1.", ["OB", "SR"]],
            [
                "foo((1, 2, 42)) is transformed into foo((1, 3)) and a warning is",
                ["OB", "SR"]
            ],
            ["issued only with regard to the first element.", ["OB", "SR"]],
            ["2.", ["OB", "SR"]],
            [
                "foo((bar(), 2, 42)) is transformed into foo((bar(), 3)) and no",
                ["OB", "SR"]
            ],
            ["warning is issued.", ["OB"]],
            ["3.", ["OB", "SR"]],
            [
                "foo(((1, 2, 3), (4, 5, 42))) is transformed into foo((1, 4, 42)) and",
                ["OB", "SR"]
            ],
            [
                "warnings are issued with regard to the first elements of inner",
                ["OB"]
            ],
            ["sequences only.", ["OB"]]
        ]
    },
    "Math-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "new multivariate vector optimizers cannot be used with large number of weights"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "When using the Weigth class to pass a large number of weights to multivariate vector optimizers, an nxn full matrix is created (and copied) when a n elements vector is used.",
                ["OB", "SR"]
            ],
            ["This exhausts memory when n is large.", ["OB"]],
            [
                "This happens for example when using curve fitters (even simple curve fitters like polynomial ones for low degree) with large number of points.",
                ["OB", "SR"]
            ],
            [
                "I encountered this with curve fitting on 41200 points, which created a matrix with 1.7 billion elements.",
                ["OB", "SR"]
            ]
        ]
    },
    "Jsoup-93": {
        "code_elements": [
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.FormElement;",
            "class Scratch {",
            "public static void main(String[] args) {",
            "System.out.println(((FormElement) Jsoup.parse(\"<form id=f><input type=image name=x></form>\").getElementById(\"f\")).formData());",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["formData"],
        "summary_text": [
            "<input type=\"image\"> is not special cased in formData method"
        ],
        "desc_hints": [
            "formData",
            "org.jsoup.Jsoup",
            "FormElement",
            "Jsoup.parse",
            "org.jsoup.nodes.FormElement",
            "System.out.println",
            "getElementById"
        ],
        "desc_text": [
            ["The following code:", ["OB", "SR"]],
            ["import org.jsoup.Jsoup;", "CODE"],
            ["import org.jsoup.nodes.FormElement;", "CODE"],
            ["class Scratch {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            [
                "System.out.println(((FormElement) Jsoup.parse(\"<form id=f><input type=image name=x></form>\").getElementById(\"f\")).formData());",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Returns the following output:", ["OB"]],
            ["[x=]", []],
            [
                "When either [] or [x.x=0, x.y=0] is expected (not sure which, but [x=] is definitely wrong).",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-43": {
        "code_elements": [
            "if (phased &&  !isZip64Required(entry.entry, zip64Mode)){",
            "putShort(INITIAL_VERSION, buf, LFH_VERSION_NEEDED_OFFSET);",
            "} else {",
            "putShort(versionNeededToExtract(zipMethod, hasZip64Extra(ze)), buf, LFH_VERSION_NEEDED_OFFSET);",
            "}",
            "private int versionNeededToExtract(final int zipMethod, final boolean zip64) {",
            "if (zip64) {",
            "return ZIP64_MIN_VERSION;",
            "}",
            "// requires version 2 as we are going to store length info",
            "// in the data descriptor",
            "return (isDeflatedToOutputStream(zipMethod)) ?",
            "DATA_DESCRIPTOR_MIN_VERSION :",
            "INITIAL_VERSION;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "[Zip] Local `Version Needed To Extract` does not match Central Directory"
        ],
        "desc_hints": [
            "isDeflatedToOutputStream",
            "zipMethod",
            "isZip64Required",
            "hasZip64Extra",
            "github.com",
            "ZipArchiveOutputStream",
            "BufferedOutputStream",
            "versionNeededToExtract",
            "entry.entry",
            "putShort"
        ],
        "desc_text": [
            ["Hi,", []],
            [
                "This is followup on an issue reported on Plexus Archiver - https://github.com/codehaus-plexus/plexus-archiver/issues/57",
                []
            ],
            [
                "Plexus Archiver uses ZipArchiveOutputStream to create zip archives.",
                ["OB", "SR"]
            ],
            [
                "It constructs the ZipArchiveOutputStream using BufferedOutputStream.",
                ["OB", "SR"]
            ],
            [
                "As a result the output do not provide random access and additional data descriptor records are added.",
                ["OB"]
            ],
            [
                "Unfortunately this leads to different values being set for version needed to extract field in the local file header and in the central directory.",
                ["OB", "SR"]
            ],
            [
                "It looks like that the root cause is the way the local header version needed to extract field value is calculated:",
                []
            ],
            [
                "if (phased &&  !isZip64Required(entry.entry, zip64Mode)){",
                "CODE"
            ],
            [
                "putShort(INITIAL_VERSION, buf, LFH_VERSION_NEEDED_OFFSET);",
                "CODE"
            ],
            ["} else {", "CODE"],
            [
                "putShort(versionNeededToExtract(zipMethod, hasZip64Extra(ze)), buf, LFH_VERSION_NEEDED_OFFSET);",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "As you can see the need for data descriptors is not taken into account.",
                ["OB"]
            ],
            [
                "On other hand when the central directory is created the following is used to determine the minimum required version",
                ["OB", "SR"]
            ],
            [
                "private int versionNeededToExtract(final int zipMethod, final boolean zip64) {",
                "CODE"
            ],
            ["if (zip64) {", "CODE"],
            ["return ZIP64_MIN_VERSION;", "CODE"],
            ["}", "CODE"],
            [
                "// requires version 2 as we are going to store length info",
                "CODE"
            ],
            ["// in the data descriptor", "CODE"],
            ["return (isDeflatedToOutputStream(zipMethod)) ?", "CODE"],
            ["DATA_DESCRIPTOR_MIN_VERSION :", "CODE"],
            ["INITIAL_VERSION;", "CODE"],
            ["}", "CODE"],
            [
                "As a side note: I'm not a zip expert by any means so I could be wrong, but my understanding is that if Deflate compression is used then the minimum required version should be 2.0 regardless if data descriptors are used or not.",
                ["EB"]
            ]
        ]
    },
    "Closure-92": {
        "code_elements": [
            "// Module A",
            "goog.provide('apps');",
            "// Module B",
            "goog.provide('apps.foo.bar.B');",
            "// Module C",
            "goog.provide('apps.foo.bar.C');",
            "// Module A",
            "var apps={};apps.foo.bar={};apps.foo={};",
            "// Module B",
            "apps.foo.bar.B={};",
            "// Module C",
            "apps.foo.bar.C={};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["bug with implicit namespaces across modules"],
        "desc_hints": [
            "goog.provide",
            "codereview.appspot.com",
            "apps.foo.bar",
            "apps.foo"
        ],
        "desc_text": [
            [
                "If there are three modules, the latter two of which depend on the root module:",
                []
            ],
            ["// Module A", "CODE"],
            ["goog.provide('apps');", "CODE"],
            ["// Module B", "CODE"],
            ["goog.provide('apps.foo.bar.B');", "CODE"],
            ["// Module C", "CODE"],
            ["goog.provide('apps.foo.bar.C');", "CODE"],
            [
                "and this is compiled in SIMPLE_OPTIMIZATIONS mode, the following code will be produced:",
                ["OB", "SR"]
            ],
            ["// Module A", "CODE"],
            ["var apps={};apps.foo.bar={};apps.foo={};", "CODE"],
            ["// Module B", "CODE"],
            ["apps.foo.bar.B={};", "CODE"],
            ["// Module C", "CODE"],
            ["apps.foo.bar.C={};", "CODE"],
            [
                "This will result in a runtime error in Module A because apps.foo.bar is assigned before apps.foo.",
                ["OB"]
            ],
            [
                "The patch for the fix (with regression test) is available at:",
                []
            ],
            ["http://codereview.appspot.com/2416041", []]
        ]
    },
    "Compress-29": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArchiveStreamFactory"],
        "summary_text": [
            "ArchiveStreamFactory fails to pass on the encoding when creating some streams"
        ],
        "desc_hints": [
            "JarArchiveOutputStream",
            "JarArchiveInputStream",
            "ArjArchiveInputStream",
            "DumpArchiveInputStream",
            "CpioArchiveInputStream",
            "ArchiveStreamFactory"
        ],
        "desc_text": [
            [
                "ArchiveStreamFactory fails to pass on the encoding when creating the following streams (in some or all cases):",
                ["OB", "SR"]
            ],
            ["ArjArchiveInputStream", []],
            ["CpioArchiveInputStream", []],
            ["DumpArchiveInputStream", []],
            ["JarArchiveInputStream", []],
            ["JarArchiveOutputStream", []]
        ]
    },
    "JacksonDatabind-68": {
        "code_elements": [
            "public class Test {",
            "private static final String JSON = \"[{\\\"message\\\":\\\"messageHere\\\"}]\";",
            "static class A {",
            "List<B> bs = Collections.emptyList();",
            "@JsonCreator",
            "A(final List<B> bs) {",
            "this.bs = bs;",
            "}",
            "}",
            "static class B {",
            "List<C> cs = Collections.emptyList();",
            "@JsonCreator",
            "B(final List<C> cs) {",
            "this.cs = cs;",
            "}",
            "}",
            "public static class C {",
            "String message;",
            "@JsonCreator",
            "C(@JsonProperty(\"message\") String message) {",
            "this.message = message;",
            "}",
            "}",
            "@Test",
            "public void test() throws IOException {",
            "ObjectMapper om = new ObjectMapper();",
            "om.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);",
            "om.readValue(JSON, A.class);",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.exc.InputMismatchException.from(InputMismatchException.java:58)",
            "at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1354)",
            "at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1019)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1207)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:314)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:289)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:261)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromArray(BeanDeserializerBase.java:1336)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:174)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:150)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3806)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2849)",
            "at com.fasterxml.jackson.databind.creators.JsonCreatorWithCollectionTest.test(JsonCreatorWithCollectionTest.java:51)"
        ],
        "summary_hints": [],
        "summary_text": [
            "ACCEPT_SINGLE_VALUE_AS_ARRAY partially broken in 2.7.x, 2.8.x"
        ],
        "desc_hints": [
            "this.message",
            "JsonProperty",
            "com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator",
            "CollectionDeserializer.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "this.bs",
            "com.fasterxml.jackson.databind.creators.JsonCreatorWithCollectionTest.test",
            "java.util.ArrayList",
            "JsonCreatorWithCollectionTest.java",
            "messageHere",
            "Collections.emptyList",
            "BeanDeserializer.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject",
            "ObjectMapper",
            "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize",
            "_readMapAndClose",
            "om.configure",
            "com.fasterxml.jackson.databind.exc.InputMismatchException.from",
            "BeanDeserializerBase.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer",
            "_deserializeOther",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault",
            "this.cs",
            "InputMismatchException.java",
            "DeserializationContext.java",
            "ObjectMapper.java",
            "com.fasterxml.jackson.databind.creators.JsonCreatorWithCollectionTest",
            "JsonCreator",
            "com.fasterxml.jackson.databind.exc.InputMismatchException",
            "om.readValue",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromArray",
            "DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
        ],
        "desc_text": [
            [
                "In 2.7.x, 2.8.x versions following test fails with an exception:",
                ["OB", "SR"]
            ],
            ["public class Test {", "CODE"],
            [
                "private static final String JSON = \"[{\\\"message\\\":\\\"messageHere\\\"}]\";",
                "CODE"
            ],
            ["static class A {", "CODE"],
            ["List<B> bs = Collections.emptyList();", "CODE"],
            ["@JsonCreator", "CODE"],
            ["A(final List<B> bs) {", "CODE"],
            ["this.bs = bs;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["static class B {", "CODE"],
            ["List<C> cs = Collections.emptyList();", "CODE"],
            ["@JsonCreator", "CODE"],
            ["B(final List<C> cs) {", "CODE"],
            ["this.cs = cs;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public static class C {", "CODE"],
            ["String message;", "CODE"],
            ["@JsonCreator", "CODE"],
            ["C(@JsonProperty(\"message\") String message) {", "CODE"],
            ["this.message = message;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void test() throws IOException {", "CODE"],
            ["ObjectMapper om = new ObjectMapper();", "CODE"],
            [
                "om.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);",
                "CODE"
            ],
            ["om.readValue(JSON, A.class);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "com.fasterxml.jackson.databind.exc.InputMismatchException: Can not construct instance of com.fasterxml.jackson.databind.creators.JsonCreatorWithCollectionTest$B, problem: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)",
                []
            ],
            [
                "at [Source: [{\"message\":\"site is missing from bid request (breq) object\"}]; line: 1, column: 3] (through reference chain: java.util.ArrayList[0])",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.exc.InputMismatchException.from(InputMismatchException.java:58)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1354)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1019)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1207)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:314)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:289)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:261)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromArray(BeanDeserializerBase.java:1336)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:174)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:150)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3806)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2849)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.creators.JsonCreatorWithCollectionTest.test(JsonCreatorWithCollectionTest.java:51)",
                "STACK_TRACE"
            ],
            ["While on 2.5 and 2.6 it works fine.", ["OB"]]
        ]
    },
    "JacksonDatabind-34": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BigDecimal"],
        "summary_text": [
            "Regression in 2.7.0-rc2, for schema/introspection for BigDecimal"
        ],
        "desc_hints": ["BigDecimal", "BigInteger"],
        "desc_text": [
            [
                "(found via Avro module, but surprisingly json schema module has not test to catch it)",
                ["OB"]
            ],
            [
                "Looks like schema type for BigDecimal is not correctly produced, due to an error in refactoring (made to simplify introspection for simple serializers): it is seen as BigInteger (and for Avro, for example, results in long getting written).",
                ["OB"]
            ]
        ]
    },
    "Closure-122": {
        "code_elements": [
            "/* @preserve Foo License */",
            "alert(\"foo\");",
            "/* @license Foo License */",
            "alert(\"foo\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Inconsistent handling of non-JSDoc comments"],
        "desc_hints": ["OpenJDK", "code.google.com", "ArchLinux", "IcedTea"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["2.", ["OB", "SR"]],
            ["3.", ["OB", "SR"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["When given:", ["OB"]],
            ["/* @preserve Foo License */", "CODE"],
            ["alert(\"foo\");", "CODE"],
            ["It spits out:", []],
            ["stdin:1: WARNING - Parse error.", ["OB"]],
            ["Non-JSDoc comment has annotations.", ["OB"]],
            ["Did you mean to start it with '/**'?", []],
            ["/* @license Foo License */", "CODE"],
            ["^", []],
            ["0 error(s), 1 warning(s)", ["OB"]],
            ["alert(\"foo\");", "CODE"],
            [
                "If I take the suggestion and change the opening of the comment to '/**', everything is great.",
                ["OB"]
            ],
            [
                "However, if I change it to '/*!', the warning goes away, but it doesn't preserve the comment either.",
                []
            ],
            [
                "I expect it to print the above warning, or preserve the comment.",
                ["OB", "EB", "SR"]
            ],
            [
                "That it does neither when starting with \"/*!\" (and every other character I tried) is confusing.",
                []
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Tested with my compilation of the \"v20130603\" tag:", []],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: v20130603", []],
            ["Built on: 2013/07/07 15:04", []],
            ["And with the provided binary:", []],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: v20130411-90-g4e19b4e", []],
            ["Built on: 2013/06/03 12:07", []],
            ["I'm on Parabola GNU/Linux-libre with Java:", []],
            ["java version \"1.7.0_40\"", []],
            [
                "OpenJDK Runtime Environment (IcedTea 2.4.0) (ArchLinux build 7.u40_2.4.0-1-i686)",
                []
            ],
            ["OpenJDK Server VM (build 24.0-b40, mixed mode)", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Closure-52": {
        "code_elements": [
            "var lit = {\"0102\":\"Zero One Zero Two\"};",
            "alert(lit[\"0102\"]);",
            "var lit={\"0102\":\"Zero One Zero Two\"};alert(lit[\"0102\"]);",
            "var lit={102:\"Zero One Zero Two\"};alert(lit[\"0102\"]);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Converts string properties into numbers in literal object definitions"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Minimize the following script:", ["OB", "SR"]],
            ["var lit = {\"0102\":\"Zero One Zero Two\"};", "CODE"],
            ["alert(lit[\"0102\"]);", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected:", ["EB"]],
            [
                "var lit={\"0102\":\"Zero One Zero Two\"};alert(lit[\"0102\"]);",
                "CODE"
            ],
            ["Actual:", ["OB"]],
            [
                "var lit={102:\"Zero One Zero Two\"};alert(lit[\"0102\"]);",
                "CODE"
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["r1459", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Mockito-2": {
        "code_elements": ["Runnable runnable = Mockito.mock(Runnable.class);"],
        "stack_traces": [],
        "summary_hints": ["Mockito.after"],
        "summary_text": [
            "Mockito.after() method accepts negative timeperiods and subsequent verifications always pass"
        ],
        "desc_hints": [
            "atLeastOnce",
            "Runnable.class",
            "Mockito.verify",
            "Mockito.never",
            "Mockito.after",
            "Mockito.mock"
        ],
        "desc_text": [
            ["e.g.", []],
            ["Runnable runnable = Mockito.mock(Runnable.class);", "CODE"],
            [
                "Mockito.verify(runnable, Mockito.never()).run(); // passes as expected",
                []
            ],
            [
                "Mockito.verify(runnable, Mockito.after(1000).never()).run(); // passes as expected",
                ["OB"]
            ],
            [
                "Mockito.verify(runnable, Mockito.after(-1000).atLeastOnce()).run(); // passes incorrectly",
                ["OB"]
            ]
        ]
    },
    "Mockito-21": {
        "code_elements": [
            "List<String> getEmails();",
            "void addEmail(String email);",
            "// 12 other methods ...",
            "}",
            "void getAccount(String id, AsyncCallback<UserAccount> callback);",
            "}",
            "when(service.getAccount(eq(id), any(AsyncCallback.class)).thenAnswer(new Answer<Void>() {",
            "AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];",
            "...",
            "FutureAccount getAccount(RpcContext context, String id);",
            "}",
            "when(service.getAccount(isA(RpcContext.class), eq(\"id\")).thenReturn(...);",
            "abstract class FakeUserAccount implements UserAccount {",
            "private final List<String> emails = new ArrayList<>();",
            "@Override public void addEmail(String email) {",
            "emails.add(email);",
            "}",
            "@Override List<String> getEmails() {",
            "return ImmutableList.copyOf(emails);",
            "}",
            "}",
            "abstract class MockAccountService implements AccountService {",
            "@Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {",
            "callback.onSuccess(getAccount(id));",
            "}",
            "abstract UserAccount getAccount(String id);",
            "}",
            "...",
            "when(service.getAccount(\"id\")).thenReturn(account);",
            "abstract class MockAccountRpcService implements AccountRpcService {",
            "@Override Future<Account> getAccount(RpcContext context, String id) {",
            "checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.",
            "return getAccount(id);",
            "}",
            "abstract Future<Account> getAccount(String id);",
            "}",
            "when(service.getAccount(\"id\")).thenReturn(...);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Allow convenient spying on abstract classes"],
        "desc_hints": [
            "UserAccount",
            "addEmail",
            "getAccount",
            "GoogleCode",
            "AccountService",
            "RpcContext.class",
            "RpcContext",
            "emails.add",
            "thenReturn",
            "ArrayList",
            "FutureAccount",
            "checkNotNull",
            "thenAnswer",
            "MockAccountService",
            "MockAccountRpcService",
            "AsyncCallback.class",
            "callback.onSuccess",
            "userAccount",
            "service.getAccount",
            "getEmails",
            "getArguments",
            "FakeUserAccount",
            "ImmutableList.copyOf",
            "AccountRpcService",
            "AsyncCallback"
        ],
        "desc_text": [
            [
                "I posted this in GoogleCode and was asked to submit in github.",
                ["OB"]
            ],
            [
                "Mockito is easy to use when the test needs to provide canned values for a certain method.",
                ["OB", "EB", "SR"]
            ],
            [
                "But it gets harder when a canned value isn't sufficient.",
                ["OB"]
            ],
            ["Example 1: Fake with trivial Logic", ["SR"]],
            ["interface UserAccount {", []],
            ["List<String> getEmails();", "CODE"],
            ["void addEmail(String email);", "CODE"],
            ["// 12 other methods ...", "CODE"],
            ["}", "CODE"],
            [
                "When mocking such domain entity object, it's tedious to manually program getEmails()/addEmail() with when().thenReturn() and to make sure the two methods are logically consistent, that is, getEmails() returns all emails added.",
                ["OB"]
            ],
            ["Example 2: callback-style API", ["SR"]],
            ["interface AccountService {", []],
            [
                "void getAccount(String id, AsyncCallback<UserAccount> callback);",
                "CODE"
            ],
            ["}", "CODE"],
            ["Stubbing AccountService isn't easy.", ["OB"]],
            [
                "It'd require use of Answer, and the Answer API isn't statically type safe:",
                []
            ],
            [
                "when(service.getAccount(eq(id), any(AsyncCallback.class)).thenAnswer(new Answer<Void>() {",
                "CODE"
            ],
            [
                "AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];",
                "CODE"
            ],
            ["...", "CODE"],
            ["});", []],
            ["Example 3: Uninteresting parameters", ["SR"]],
            ["interface AccountRpcService {", []],
            [
                "FutureAccount getAccount(RpcContext context, String id);",
                "CODE"
            ],
            ["}", "CODE"],
            ["None of the tests care about the context object.", ["OB"]],
            [
                "It's an uninteresting parameter imposed by the framework.",
                ["OB"]
            ],
            [
                "If AccountRpcService were directly mocked, all tests would have to use isA() to repetitively mention this uninteresting parameter, like this:",
                ["SR"]
            ],
            [
                "when(service.getAccount(isA(RpcContext.class), eq(\"id\")).thenReturn(...);",
                "CODE"
            ],
            [
                "And all other parameters are required to be wrapped in eq().",
                ["OB"]
            ],
            ["Proposal", []],
            [
                "I propose adding support for abstract classes to mockito to make it easier to deal with tests like above:",
                []
            ],
            ["For example 1", ["SR"]],
            ["abstract class FakeUserAccount implements UserAccount {", "CODE"],
            ["private final List<String> emails = new ArrayList<>();", "CODE"],
            ["@Override public void addEmail(String email) {", "CODE"],
            ["emails.add(email);", "CODE"],
            ["}", "CODE"],
            ["@Override List<String> getEmails() {", "CODE"],
            ["return ImmutableList.copyOf(emails);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "@Fake private FakeUserAccount userAccount; // Mockito instantiates abstract class.",
                []
            ],
            ["For example 2", ["SR"]],
            [
                "abstract class MockAccountService implements AccountService {",
                "CODE"
            ],
            [
                "@Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {",
                "CODE"
            ],
            ["callback.onSuccess(getAccount(id));", "CODE"],
            ["}", "CODE"],
            ["abstract UserAccount getAccount(String id);", "CODE"],
            ["}", "CODE"],
            ["@Fake private MockAccountService service;", []],
            ["...", "CODE"],
            ["when(service.getAccount(\"id\")).thenReturn(account);", "CODE"],
            ["For example 3", ["SR"]],
            [
                "abstract class MockAccountRpcService implements AccountRpcService {",
                "CODE"
            ],
            [
                "@Override Future<Account> getAccount(RpcContext context, String id) {",
                "CODE"
            ],
            [
                "checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.",
                "CODE"
            ],
            ["return getAccount(id);", "CODE"],
            ["}", "CODE"],
            ["abstract Future<Account> getAccount(String id);", "CODE"],
            ["}", "CODE"],
            ["@Fake private MockAccountRpcService service;", []],
            ["when(service.getAccount(\"id\")).thenReturn(...);", "CODE"],
            [
                "My work place internally implemented a default Answer to support abstract classes.",
                []
            ],
            [
                "We found that the support of abstract classes helps us to avoid overusing mocks when we should be using fakes.",
                ["EB"]
            ],
            ["And in situations like above we get cleaner test code.", ["OB"]],
            [
                "But because it's not integrated in the core Mockito, there are gotchas with our implementation (like, you can't have private/final methods in your fake).",
                ["OB"]
            ],
            [
                "If the idea sounds okay to give a try, I'll volunteer to submit a patch.",
                ["OB", "SR"]
            ],
            ["Thanks!", []]
        ]
    },
    "JxPath-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Core union operation does not sort result nodes according to document order"
        ],
        "desc_hints": ["CoreOperationUnion"],
        "desc_text": [
            ["Source document:", []],
            ["<MAIN><A>avalue</A><B>bvalue</B></MAIN>", []],
            ["According to string() function defintion:", []],
            [
                "\"A node-set is converted to a string by returning the string-value of the node in the node-set that is first in document order.",
                ["OB", "EB", "SR"]
            ],
            [
                "If the node-set is empty, an empty string is returned.\"",
                ["OB"]
            ],
            ["Following XPath calculated incorrectly:", ["OB"]],
            ["string(/MAIN/B | /MAIN/A)", []],
            ["Expected result: \"avalue\"", ["OB", "EB"]],
            ["Actual value: \"bvalue\"", ["OB"]],
            ["Reason:", ["OB"]],
            [
                "sorting of result nodes is missing from CoreOperationUnion",
                ["OB"]
            ]
        ]
    },
    "JacksonCore-22": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["_matchCount", "FilteringParserDelegate"],
        "summary_text": ["Make use of _matchCount in FilteringParserDelegate"],
        "desc_hints": [
            "_matchCount",
            "groups.google.com",
            "JGFozl6lCQAJ",
            "FilteringGeneratorDelegate",
            "VzZ94G9hvrs"
        ],
        "desc_text": [
            [
                "Currently, it looks like that the _matchCount attribute in FilteringGeneratorDelegate is not utilised (i.e.",
                ["OB"]
            ],
            ["no value is assigned to this variable).", ["OB"]],
            ["Re.", ["OB"]],
            [
                "the documentation this attribute offers some useful functionality.",
                ["OB"]
            ],
            ["So it would be nice, if it could be implemented properly.", []],
            [
                "See https://groups.google.com/d/msg/jackson-user/VzZ94G9hvrs/JGFozl6lCQAJ",
                ["OB"]
            ]
        ]
    },
    "Codec-10": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Caverphone encodes names starting and ending with \"mb\" incorrectly."
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "Caverphone encode names starting and ending with \"mb\" incorrectly.",
                ["OB"]
            ],
            ["According to the spec:", []],
            ["\"If the name ends with mb make it m2\".", ["OB"]],
            ["This has been coded as:", []],
            ["\"If the name starts with mb make it m2\".", ["OB"]]
        ]
    },
    "Cli-40": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TypeHandler", "ParseException"],
        "summary_text": [
            "TypeHandler should throw ParseException for an unsupported class"
        ],
        "desc_hints": [
            "createValue",
            "TypeHandler",
            "ParseException",
            "JavaDoc"
        ],
        "desc_text": [
            ["JavaDoc for TypeHandler states that createValue will", ["OB"]],
            [
                "* @throws ParseException if the value creation for the given object type failedtype",
                ["OB", "SR"]
            ],
            [
                "However createValue(String str, Class<?> clazz) will return null if the clazz is unknown.",
                []
            ]
        ]
    },
    "Time-12": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Calendar.ERA", "LocalDate.fromCalendarFields"],
        "summary_text": ["Check Calendar.ERA in LocalDate.fromCalendarFields"],
        "desc_hints": [],
        "desc_text": [["No description provided.", ["OB"]]]
    },
    "Math-24": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BrentOptimizer"],
        "summary_text": [
            "\"BrentOptimizer\" not always reporting the best point"
        ],
        "desc_hints": ["BrentOptimizer", "optimization.univariate"],
        "desc_text": [
            [
                "BrentOptimizer (package \"o.a.c.m.optimization.univariate\") does not check that the point it is going to return is indeed the best one it has encountered.",
                ["OB"]
            ],
            [
                "Indeed, the last evaluated point might be slightly worse than the one before last.",
                ["OB"]
            ]
        ]
    },
    "Math-71": {
        "code_elements": [
            "public void testMissedEvent() throws IntegratorException, DerivativeException {",
            "final double t0 = 1878250320.0000029;",
            "final double t =  1878250379.9999986;",
            "FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {",
            "public int getDimension() {",
            "return 1;",
            "}",
            "public void computeDerivatives(double t, double[] y, double[] yDot)",
            "throws DerivativeException {",
            "yDot[0] = y[0] * 1.0e-6;",
            "}",
            "};",
            "DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,",
            "1.0e-10, 1.0e-10);",
            "double[] y = { 1.0 };",
            "integrator.setInitialStepSize(60.0);",
            "double finalT = integrator.integrate(ode, t0, y, t, y);",
            "Assert.assertEquals(t, finalT, 1.0e-6);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "ODE integrator goes past specified end of integration range"
        ],
        "desc_hints": [
            "DormandPrince853Integrator",
            "IntegratorException",
            "FirstOrderDifferentialEquations",
            "Assert.assertEquals",
            "integrator.integrate",
            "getDimension",
            "computeDerivatives",
            "integrator.setInitialStepSize",
            "DerivativeException",
            "testMissedEvent"
        ],
        "desc_text": [
            [
                "End of integration range in ODE solving is handled as an event.",
                ["OB"]
            ],
            [
                "In some cases, numerical accuracy in events detection leads to error in events location.",
                ["OB"]
            ],
            [
                "The following test case shows the end event is not handled properly and an integration that should cover a 60s range in fact covers a 160s range, more than twice the specified range.",
                ["OB", "EB", "SR"]
            ],
            [
                "public void testMissedEvent() throws IntegratorException, DerivativeException {",
                "CODE"
            ],
            ["final double t0 = 1878250320.0000029;", "CODE"],
            ["final double t =  1878250379.9999986;", "CODE"],
            [
                "FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {",
                "CODE"
            ],
            ["public int getDimension() {", "CODE"],
            ["return 1;", "CODE"],
            ["}", "CODE"],
            [
                "public void computeDerivatives(double t, double[] y, double[] yDot)",
                "CODE"
            ],
            ["throws DerivativeException {", "CODE"],
            ["yDot[0] = y[0] * 1.0e-6;", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            [
                "DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,",
                "CODE"
            ],
            ["1.0e-10, 1.0e-10);", "CODE"],
            ["double[] y = { 1.0 };", "CODE"],
            ["integrator.setInitialStepSize(60.0);", "CODE"],
            ["double finalT = integrator.integrate(ode, t0, y, t, y);", "CODE"],
            ["Assert.assertEquals(t, finalT, 1.0e-6);", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-30": {
        "code_elements": [
            "sgxColorRGBA.prototype.asHex = function() {",
            "var hexString = \"\";",
            "str = (sgxFloor(this.r*255)).toString(16);",
            "if (str.length < 2) { str = \"0\"+str; }",
            "hexString += str;",
            "str = (sgxFloor(this.g*255)).toString(16);",
            "if (str.length < 2) { str = \"0\"+str; }",
            "hexString += str;",
            "str = (sgxFloor(this.b*255)).toString(16);",
            "if (str.length < 2) { str = \"0\"+str; }",
            "hexString += str;",
            "str = (sgxFloor(this.a*255)).toString(16);",
            "if (str.length < 2) { str = \"0\"+str; }",
            "hexString += str;",
            "return hexString;",
            "}",
            "sgxColorRGBA.prototype.pb = function() {",
            "str = A(255 * this.A).toString(16);",
            "2 > str.length && (str = \"0\" + str);",
            "str = A(255 * this.w).toString(16);",
            "2 > str.length && (str = \"0\" + str);",
            "str = A(255 * this.s).toString(16);",
            "2 > str.length && (str = \"0\" + str);",
            "str = A(255 * this.r).toString(16);",
            "2 > str.length && (str = \"0\" + str);",
            "return\"\" + str + str + str + str"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Combining temporary strings are over-optimized in advanced build"
        ],
        "desc_hints": [
            "compiler.appspot.com",
            "toString",
            "hexString",
            "sgxColorRGBA.prototype.pb",
            "sgxFloor",
            "str.length",
            "sgxColorRGBA.prototype.asHex"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["This bug only manifests itself in large code bases.", ["OB"]],
            [
                "How large, and what the specifics are, I haven't yet worked out, since the output differs.",
                ["OB"]
            ],
            ["But the principle code is:", ["OB"]],
            ["sgxColorRGBA.prototype.asHex = function() {", "CODE"],
            ["var hexString = \"\";", "CODE"],
            ["str = (sgxFloor(this.r*255)).toString(16);", "CODE"],
            ["if (str.length < 2) { str = \"0\"+str; }", "CODE"],
            ["hexString += str;", "CODE"],
            ["str = (sgxFloor(this.g*255)).toString(16);", "CODE"],
            ["if (str.length < 2) { str = \"0\"+str; }", "CODE"],
            ["hexString += str;", "CODE"],
            ["str = (sgxFloor(this.b*255)).toString(16);", "CODE"],
            ["if (str.length < 2) { str = \"0\"+str; }", "CODE"],
            ["hexString += str;", "CODE"],
            ["str = (sgxFloor(this.a*255)).toString(16);", "CODE"],
            ["if (str.length < 2) { str = \"0\"+str; }", "CODE"],
            ["hexString += str;", "CODE"],
            ["return hexString;", "CODE"],
            ["}", "CODE"],
            ["Note that 'str' is not declared as var.", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I see this:", []],
            ["sgxColorRGBA.prototype.pb = function() {", "CODE"],
            ["str = A(255 * this.A).toString(16);", "CODE"],
            ["2 > str.length && (str = \"0\" + str);", "CODE"],
            ["str = A(255 * this.w).toString(16);", "CODE"],
            ["2 > str.length && (str = \"0\" + str);", "CODE"],
            ["str = A(255 * this.s).toString(16);", "CODE"],
            ["2 > str.length && (str = \"0\" + str);", "CODE"],
            ["str = A(255 * this.r).toString(16);", "CODE"],
            ["2 > str.length && (str = \"0\" + str);", "CODE"],
            ["return\"\" + str + str + str + str", "CODE"],
            ["};", []],
            [
                "Obviously, repeatedly adding 'str' is broken in the final line, compared to the original.",
                ["OB"]
            ],
            [
                "So whatever is aggregating the result is seeing a temporary 'str' reference and combining it, I guess.",
                ["OB"]
            ],
            ["If 'str' is declared as var, the problem goes away.", []],
            ["I'd expect a warning, at least.", ["EB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Live at http://closure-compiler.appspot.com", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "As a stand-alone method, both 'var str' and 'str' works.",
                ["OB"]
            ],
            [
                "It's only when the project hits a certain (undetermined) size that it fails.",
                ["OB"]
            ]
        ]
    },
    "Cli-5": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.cli.Util.stripLeadingHyphens(Util.java:39)",
            "at org.apache.commons.cli.CommandLine.resolveOption(CommandLine.java:166)",
            "at org.apache.commons.cli.CommandLine.hasOption(CommandLine.java:68)"
        ],
        "summary_hints": ["NullPointerException", "Util.stripLeadingHyphens"],
        "summary_text": [
            "NullPointerException in Util.stripLeadingHyphens when passed a null argument"
        ],
        "desc_hints": [
            "Util.java",
            "org.apache.commons.cli.CommandLine.resolveOption",
            "hasOption",
            "java.lang.NullPointerException",
            "org.apache.commons.cli.CommandLine.hasOption",
            "CommandLine.java",
            "org.apache.commons.cli.Util.stripLeadingHyphens"
        ],
        "desc_text": [
            [
                "If you try to do a hasOption(null), you get a NPE:",
                ["OB", "SR"]
            ],
            ["java.lang.NullPointerException", []],
            [
                "at org.apache.commons.cli.Util.stripLeadingHyphens(Util.java:39)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.cli.CommandLine.resolveOption(CommandLine.java:166)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.cli.CommandLine.hasOption(CommandLine.java:68)",
                "STACK_TRACE"
            ],
            [
                "Either hasOption should reject the null argument, or the function should simply return false.",
                ["OB", "EB"]
            ],
            [
                "I think the latter makes more since, as this is how Java collections generally work.",
                []
            ]
        ]
    },
    "Math-86": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CholeskyDecomposition"],
        "summary_text": [
            "testing for symmetric positive definite matrix in CholeskyDecomposition"
        ],
        "desc_hints": [],
        "desc_text": [
            ["I used this matrix:", ["SR"]],
            ["double[][] cv = {", []],
            ["{0.40434286, 0.09376327, 0.30328980, 0.04909388}", []],
            [",", []],
            ["{0.09376327, 0.10400408, 0.07137959, 0.04762857}", []],
            [",", []],
            ["{0.30328980, 0.07137959, 0.30458776, 0.04882449},", []],
            ["{0.04909388, 0.04762857, 0.04882449, 0.07543265}", []],
            ["};", []],
            [
                "And it works fine, because it is symmetric positive definite",
                []
            ],
            ["I tried this matrix:", ["SR"]],
            ["double[][] cv = {", []],
            ["{0.40434286, -0.09376327, 0.30328980, 0.04909388},", []],
            ["{-0.09376327, 0.10400408, 0.07137959, 0.04762857},", []],
            ["{0.30328980, 0.07137959, 0.30458776, 0.04882449}", []],
            [",", []],
            ["{0.04909388, 0.04762857, 0.04882449, 0.07543265}", []],
            ["};", []],
            ["And it should throw an exception but it does not.", ["OB", "EB"]],
            [
                "I tested the matrix in R and R's cholesky decomposition method returns that the matrix is not symmetric positive definite.",
                ["OB"]
            ],
            ["Obviously your code is not catching this appropriately.", ["OB"]],
            [
                "By the way (in my opinion) the use of exceptions to check these conditions is not the best design or use for exceptions.",
                ["OB"]
            ],
            [
                "If you are going to force the use to try and catch these exceptions at least provide methods to test the conditions prior to the possibility of the exception.",
                ["OB", "EB"]
            ]
        ]
    },
    "Lang-39": {
        "code_elements": [
            "import static org.junit.Assert.assertEquals;",
            "import org.apache.commons.lang.StringUtils;",
            "import org.junit.Test;",
            "public class StringUtilsTest {",
            "@Test",
            "public void replaceEach(){",
            "String original = \"Hello World!\";",
            "String[] searchList = {\"Hello\", \"World\"};",
            "String[] replacementList = {\"Greetings\", null};",
            "String result = StringUtils.replaceEach(original, searchList, replacementList);",
            "assertEquals(\"Greetings !\", result);",
            "//perhaps this is ok as well",
            "//assertEquals(\"Greetings World!\", result);",
            "//or even",
            "//assertEquals(\"Greetings null!\", result);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["replaceEach", "StringUtils"],
        "summary_text": [
            "StringUtils replaceEach - Bug or Missing Documentation"
        ],
        "desc_hints": [
            "org.apache.commons.lang.StringUtils",
            "searchList",
            "assertEquals",
            "StringUtilsTest",
            "org.junit.Test",
            "StringUtils",
            "org.junit.Assert.assertEquals",
            "replaceEach",
            "replacementList",
            "StringUtils.replaceEach"
        ],
        "desc_text": [
            [
                "The following Test Case for replaceEach fails with a null pointer exception.",
                ["OB", "SR"]
            ],
            [
                "I have expected that all StringUtils methods are \"null-friendly\"",
                ["EB"]
            ],
            [
                "The use case is that i will stuff Values into the replacementList of which I do not want to check whether they are null.",
                ["OB"]
            ],
            [
                "I admit the use case is not perfect, because it is unclear what happens on the replace.",
                ["OB"]
            ],
            [
                "I outlined three expectations in the test case, of course only one should be met.",
                ["OB", "EB"]
            ],
            [
                "If it is decided that none of them should be possible, I propose to update the documentation with what happens when null is passed as replacement string",
                ["EB"]
            ],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["import org.apache.commons.lang.StringUtils;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["public class StringUtilsTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void replaceEach(){", "CODE"],
            ["String original = \"Hello World!\";", "CODE"],
            ["String[] searchList = {\"Hello\", \"World\"};", "CODE"],
            ["String[] replacementList = {\"Greetings\", null};", "CODE"],
            [
                "String result = StringUtils.replaceEach(original, searchList, replacementList);",
                "CODE"
            ],
            ["assertEquals(\"Greetings !\", result);", "CODE"],
            ["//perhaps this is ok as well", "CODE"],
            ["//assertEquals(\"Greetings World!\", result);", "CODE"],
            ["//or even", "CODE"],
            ["//assertEquals(\"Greetings null!\", result);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Mockito-31": {
        "code_elements": [
            "Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));",
            "String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.').replace('\\\\', '.');"
        ],
        "stack_traces": [
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
            "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:497)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
            "Caused by: java.lang.NoClassDefFoundError: org\\mockito\\configuration\\MockitoConfiguration (wrong name: org/mockito/configuration/MockitoConfiguration)",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
            "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "at java.lang.Class.forName0(Native Method)",
            "at java.lang.Class.forName(Class.java:348)",
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
            "... 24 more",
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
            "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:497)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
            "Caused by: java.lang.NoClassDefFoundError: junit/framework/Assert",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
            "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
            "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "at java.lang.Class.forName0(Native Method)",
            "at java.lang.Class.forName(Class.java:348)",
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
            "... 24 more",
            "Caused by: java.lang.ClassNotFoundException: classes with prefix : [junit, org.junit] are excluded",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:155)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "... 51 more"
        ],
        "summary_hints": [],
        "summary_text": ["Failing tests on Windows machine"],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "ReflectiveCallable.java",
            "org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy",
            "java.net.URLClassLoader",
            "FrameworkMethod.java",
            "NativeMethodAccessorImpl.java",
            "SecureClassLoader.java",
            "java.lang.AssertionError",
            "JUnit4TestReference.java",
            "org.junit",
            "TimesTest",
            "root.getAbsolutePath",
            "extraInterfaces",
            "java.security.AccessController.doPrivileged",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "TestExecution.java",
            "URLClassLoader.java",
            "MockitoConfiguration",
            "org.mockitoutil.ClassLoaders",
            "java.lang.ClassNotFoundException",
            "java.net.URLClassLoader.defineClass",
            "org.junit.runners.ParentRunner.runLeaf",
            "org.junit.runners.ParentRunner.access",
            "InvokeMethod.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "DefaultMockingDetailsTest.should_get_extra_interfaces",
            "java.lang.ClassLoader.defineClass",
            "ClassLoaders.java",
            "ClassLoader.java",
            "org.junit.runners.ParentRunner.runChildren",
            "org.junit.runners.ParentRunner",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "Observer.class",
            "List.class",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "java.lang.NoClassDefFoundError",
            "file.getAbsolutePath",
            "github.com",
            "BlockJUnit4ClassRunner.java",
            "org.mockito.internal.progress.TimesTest",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "withSettings",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "ClassLoadersTest.excluding_class_loader_cannot_load_classes_when_no_correct_source_url_set",
            "DefaultMockingDetailsTest.java",
            "org.mockitointegration.NoJUnitDependenciesTest.checkDependency",
            "java.security.SecureClassLoader.defineClass",
            "LocalExcludingURLClassLoader.findClass",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "java.net.URLClassLoader.findClass",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy",
            "java.lang.Class.forName0",
            "NoJUnitDependenciesTest.java",
            "java.lang.ClassLoader.defineClass1",
            "java.lang.reflect.Method.invoke",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "java.lang.Class.forName",
            "Class.java",
            "Bar.class",
            "org.junit.runners.model.FrameworkMethod",
            "org.junit.runners.ParentRunner.run",
            "Method.java",
            "runReflectiveCall",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "java.net.URLClassLoader.access",
            "java.lang.ClassLoader.loadClass",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "ParentRunner.java"
        ],
        "desc_text": [
            [
                "I just posted on the Google Forums, but someway somehow my post immediately disappeared in the void.",
                ["OB"]
            ],
            ["So I am reposting it again here.", []],
            ["I have 3 failing tests on my Windows 8.1 machine.", ["OB", "SR"]],
            ["DefaultMockingDetailsTest.should_get_extra_interfaces", []],
            [
                "NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy",
                []
            ],
            [
                "ClassLoadersTest.excluding_class_loader_cannot_load_classes_when_no_correct_source_url_set",
                []
            ],
            [
                "For the first test, I was able to let it pass by changing line https://github.com/mockito/mockito/blob/master/test/org/mockito/internal/util/DefaultMockingDetailsTest.java#L56 to",
                ["SR"]
            ],
            [
                "Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));",
                "CODE"
            ],
            [
                "I am not sure if this is indeed the correct test, so please let me know.",
                []
            ],
            ["For the 2nd test, I first get the stack trace", ["OB"]],
            [
                "java.lang.AssertionError: 'org\\mockito\\configuration\\MockitoConfiguration' has some dependency to JUnit",
                []
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:497)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.NoClassDefFoundError: org\\mockito\\configuration\\MockitoConfiguration (wrong name: org/mockito/configuration/MockitoConfiguration)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            ["at java.lang.Class.forName0(Native Method)", "STACK_TRACE"],
            ["at java.lang.Class.forName(Class.java:348)", "STACK_TRACE"],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
                "STACK_TRACE"
            ],
            ["... 24 more", "STACK_TRACE"],
            [
                "When I change line https://github.com/mockito/mockito/blob/master/test/org/mockitoutil/ClassLoaders.java#L361 to",
                ["OB", "SR"]
            ],
            [
                "String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.').replace('\\\\', '.');",
                "CODE"
            ],
            ["I get the following stack trace:", ["OB"]],
            [
                "java.lang.AssertionError: 'org.mockito.internal.progress.TimesTest' has some dependency to JUnit",
                []
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:497)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.NoClassDefFoundError: junit/framework/Assert",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            ["at java.lang.Class.forName0(Native Method)", "STACK_TRACE"],
            ["at java.lang.Class.forName(Class.java:348)", "STACK_TRACE"],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
                "STACK_TRACE"
            ],
            ["... 24 more", "STACK_TRACE"],
            [
                "Caused by: java.lang.ClassNotFoundException: classes with prefix : [junit, org.junit] are excluded",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:155)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            ["... 51 more", "STACK_TRACE"],
            [
                "The reason I changed that line is because the temp result does not contain dots on windows machines, due to the fact that absolutepath does not return a path seperated by / but by \\\\.",
                ["OB", "SR"]
            ],
            [
                "However then the test fails because the TimesTest in test/ does indeed depend on junit.",
                ["OB", "SR"]
            ],
            ["Shouldn't it only load classes that are under src/?", ["EB"]],
            [
                "The 3rd test I sadly have no clue why it is succeeding and not throwing an exception.",
                ["OB"]
            ],
            ["Looking forward to your responses =]", ["OB"]]
        ]
    },
    "Math-98": {
        "code_elements": [
            "double[] out = new double[nRows];",
            "double[] out = new double[v.length];"
        ],
        "stack_traces": [],
        "summary_hints": ["RealMatrixImpl"],
        "summary_text": [
            "RealMatrixImpl#operate gets result vector dimensions wrong"
        ],
        "desc_hints": [
            "org.apache.commons.math.linear.RealMatrixImpl",
            "RealMatrixImpl.java"
        ],
        "desc_text": [
            [
                "org.apache.commons.math.linear.RealMatrixImpl#operate tries to create a result vector that always has the same length as the input vector.",
                ["OB", "SR"]
            ],
            [
                "This can result in runtime exceptions if the matrix is non-square and it always yields incorrect results if the matrix is non-square.",
                ["OB"]
            ],
            [
                "The correct behaviour would of course be to create a vector with the same length as the row dimension of the matrix.",
                []
            ],
            ["Thus line 640 in RealMatrixImpl.java should read", ["EB"]],
            ["double[] out = new double[nRows];", "CODE"],
            ["instead of", ["OB", "EB"]],
            ["double[] out = new double[v.length];", "CODE"]
        ]
    },
    "JxPath-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["JXpath automatically trims string values"],
        "desc_hints": [],
        "desc_text": [
            [
                "When an xml contains a value with leading or trailing spaces, JXPath trims this value.",
                ["OB", "SR"]
            ],
            [
                "example: <value>   12324 56</value> is retrieved by JXPath as : '1234 56' while I expect '     1234 56'.",
                ["EB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-112": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["StringCollectionDeserializer"],
        "summary_text": [
            "StringCollectionDeserializer fails with custom collection"
        ],
        "desc_hints": ["StringCollectionDeserializer"],
        "desc_text": [
            ["Seeing this with Jackson 2.9.8.", ["OB"]],
            [
                "We have a custom collection implementation, which is wired to use its \"immutable\" version for deserialization.",
                []
            ],
            [
                "The rationale is that we don't want accidental modifications to the data structures that come from the wire, so they all are forced to be immutable.",
                []
            ],
            [
                "After upgrade from 2.6.3 to 2.9.8, the deserialization started breaking with the message:",
                ["OB"]
            ],
            [
                "Cannot construct instance of XXX (although at least one Creator exists): no default no-arguments constructor found",
                []
            ],
            [
                "This happens ONLY when you deserialize a custom collection of strings as a property of the other object.",
                ["OB"]
            ],
            [
                "Deserializing the custom collection of strings directly works fine, and so does the deserialization of custom collection of non-strings.",
                ["OB"]
            ],
            [
                "I believe either the StringCollectionDeserializer should not be invoked for custom collections, or perhaps it does not handle the delegation as expected.",
                ["EB"]
            ],
            ["Please see comments for repro and workaround.", ["OB"]],
            ["Thanks!", []]
        ]
    },
    "Closure-108": {
        "code_elements": [
            "var goog = {};",
            "var ns = {};",
            "ns.sub = {};",
            "/** @constructor */",
            "ns.sub.C = function() {};",
            "goog.scope(function() {",
            "var sub = ns.sub;",
            "/** @type {sub.C} */",
            "var x = null;"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.scope"],
        "summary_text": [
            "precondition crash: goog.scope local with aliased in the type declaration"
        ],
        "desc_hints": [
            "Preconditions.java",
            "com.google.javascript.jscomp.ScopedAliases",
            "ns.sub",
            "java.lang.IllegalStateException",
            "ScopedAliases.java",
            "com.google.common.base.Preconditions.checkState",
            "AliasedTypeNode.applyAlias",
            "com.google.javascript.jscomp.ScopedAliases.process",
            "goog.scope",
            "com.google.javascript.jscomp.ScopedAliases.hotSwapScript"
        ],
        "desc_text": [
            ["var goog = {};", "CODE"],
            ["goog.scope;", []],
            ["var ns = {};", "CODE"],
            ["ns.sub = {};", "CODE"],
            ["/** @constructor */", "CODE"],
            ["ns.sub.C = function() {};", "CODE"],
            ["goog.scope(function() {", "CODE"],
            ["var sub = ns.sub;", "CODE"],
            ["/** @type {sub.C} */", "CODE"],
            ["var x = null;", "CODE"],
            ["});", []],
            ["produces:", []],
            [
                "java.lang.IllegalStateException at com.google.common.base.Preconditions.checkState(Preconditions.java:137) at com.google.javascript.jscomp.ScopedAliases$AliasedTypeNode.applyAlias(ScopedAliases.java:236) at com.google.javascript.jscomp.ScopedAliases.hotSwapScript(ScopedAliases.java:147) at com.google.javascript.jscomp.ScopedAliases.process(ScopedAliases.java:128) at",
                []
            ]
        ]
    },
    "Cli-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser ignores unrecognized tokens starting with '-'"
        ],
        "desc_hints": ["stopAtNonOption", "PosixParser"],
        "desc_text": [
            [
                "PosixParser doesn't handle properly unrecognized tokens starting with '-' when stopAtNonOption is enabled, the token is simply ignored.",
                ["OB"]
            ],
            [
                "For example, if the option 'a' is defined, the following command line:",
                ["SR"]
            ],
            ["-z -a foo", []],
            ["is interpreted as:", []],
            ["-a foo", []]
        ]
    },
    "JacksonCore-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FilteringParserDelegate", "_allowMultipleMatches"],
        "summary_text": [
            "Make use of _allowMultipleMatches in FilteringParserDelegate"
        ],
        "desc_hints": [
            "groups.google.com",
            "JGFozl6lCQAJ",
            "FilteringGeneratorDelegate",
            "VzZ94G9hvrs",
            "_allowMultipleMatches"
        ],
        "desc_text": [
            [
                "Currently, it looks like that the _allowMultipleMatches attribute in FilteringGeneratorDelegate is not utilised (i.e.",
                ["OB"]
            ],
            ["no value is assigned to this variable).", ["OB"]],
            ["Re.", ["OB"]],
            [
                "the documentation this attribute offers some useful functionality.",
                ["OB"]
            ],
            ["So it would be nice, if it could be implemented properly.", []],
            [
                "See https://groups.google.com/d/msg/jackson-user/VzZ94G9hvrs/JGFozl6lCQAJ",
                ["OB"]
            ]
        ]
    },
    "Math-17": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FieldElement.multiply", "Dfp.multiply"],
        "summary_text": [
            "Dfp Dfp.multiply(int x) does not comply with the general contract FieldElement.multiply(int n)"
        ],
        "desc_hints": ["FieldElement.multiply", "org.apache.commons.math3.Dfp"],
        "desc_text": [
            [
                "In class org.apache.commons.math3.Dfp, the method multiply(int n) is limited to 0 <= n <= 9999.",
                ["OB"]
            ],
            [
                "This is not consistent with the general contract of FieldElement.multiply(int n), where there should be no limitation on the values of n.",
                ["OB", "EB"]
            ]
        ]
    },
    "Math-40": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BracketingNthOrderBrentSolver", "maxIterationCount"],
        "summary_text": [
            "BracketingNthOrderBrentSolver exceeds maxIterationCount while updating always the same boundary"
        ],
        "desc_hints": ["BracketingNthOrderBrentSolver"],
        "desc_text": [
            [
                "In some cases, the aging feature in BracketingNthOrderBrentSolver fails.",
                ["OB"]
            ],
            [
                "It attempts to balance the bracketing points by targeting a non-zero value instead of the real root.",
                ["OB", "EB", "SR"]
            ],
            [
                "However, the chosen target is too close too zero, and the inverse polynomial approximation is always on the same side, thus always updates the same bracket.",
                ["OB"]
            ],
            [
                "In the real used case for a large program, I had a bracket point xA = 12500.0, yA = 3.7e-16, agingA = 0, which is the (really good) estimate of the zero on one side of the root and xB = 12500.03, yB = -7.0e-5, agingB = 97.",
                ["SR"]
            ],
            [
                "This shows that the bracketing interval is completely unbalanced, and we never succeed to rebalance it as we always updates (xA, yA) and never updates (xB, yB).",
                ["OB"]
            ]
        ]
    },
    "JxPath-18": {
        "code_elements": [
            "if (!(nodeTest instanceof NodeNameTest))",
            "{",
            "return false;",
            "}",
            "QName name = ((NodeNameTest) nodeTest).getNodeName();",
            "private static final QName WILDCARD = new QName(\"\", \"*\");",
            "if (nodeTest instanceof NodeTypeTest)",
            "{",
            "if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE)",
            "name = WILDCARD;",
            "else return false;",
            "}",
            "else if (nodeTest instanceof NodeNameTest) {",
            "name = ((NodeNameTest) nodeTest).getNodeName();",
            "}",
            "else",
            "{",
            "return false;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Issue with attribute::"],
        "desc_hints": [
            "nodeTest",
            "NodeNameTest",
            "getNodeType",
            "Issue172_CountAttributeNode",
            "NodeTypeTest",
            "getNodeName",
            "AttributeContext",
            "Compiler.NODE_TYPE_NODE"
        ],
        "desc_text": [
            [
                "Checking test (Issue172_CountAttributeNode) I came with the following fix for the code in AttributeContext line 72",
                ["SR"]
            ],
            ["from", []],
            ["if (!(nodeTest instanceof NodeNameTest))", "CODE"],
            ["{", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["QName name = ((NodeNameTest) nodeTest).getNodeName();", "CODE"],
            ["------", []],
            ["'", []],
            ["to", []],
            ["\u2014 (outside method)", []],
            [
                "private static final QName WILDCARD = new QName(\"\", \"*\");",
                "CODE"
            ],
            ["\u2014 (in method)", []],
            ["final QName name ;", []],
            ["if (nodeTest instanceof NodeTypeTest)", "CODE"],
            ["{", "CODE"],
            [
                "if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE)",
                "CODE"
            ],
            ["name = WILDCARD;", "CODE"],
            ["else return false;", "CODE"],
            ["}", "CODE"],
            ["else if (nodeTest instanceof NodeNameTest) {", "CODE"],
            ["name = ((NodeNameTest) nodeTest).getNodeName();", "CODE"],
            ["}", "CODE"],
            ["else", "CODE"],
            ["{", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Chart-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["#834 Bug propgated from v1.0.5 on to present"],
        "desc_hints": [
            "getRowCount",
            "seriesKeys",
            "org.jfree.data.category.DefaultIntervalCategoryDataset"
        ],
        "desc_text": [
            [
                "The method getRowCount() in class org.jfree.data.category.DefaultIntervalCategoryDataset says that it \"Returns the number of series in the dataset (possibly zero).\"",
                ["OB"]
            ],
            [
                "The implementation from v1.0.5 on no longer checks for a null condition (which would then return a zero) on the seriesKeys as it did in v1.0.4 and previous.",
                ["OB", "EB"]
            ],
            [
                "This now throws a Null Pointer if seriesKeys never got initialized and the getRowCount() method is called.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-51": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Generic type returned from type id resolver seems to be ignored"
        ],
        "desc_hints": ["TypeIdResolver", "github.com", "JavaType"],
        "desc_text": [
            ["https://github.com/benson-basis/jackson-custom-mess-tc", []],
            ["Here's the situation, with Jackson 2.7.4.", ["OB", "SR"]],
            [
                "I have a TypeIdResolver that returns a JavaType for a generic type.",
                ["OB"]
            ],
            [
                "However, something seems to be forgetting/erasing the generic, as it is failing to use the generic type param to understand the type of a field in the class.",
                ["OB"]
            ],
            [
                "All the information is in the test case, so I'm not putting any code to read here in the issue.",
                ["SR"]
            ]
        ]
    },
    "Math-83": {
        "code_elements": [
            "r1: x0 + x2 + x4 = 23.0;",
            "r2: x1 + x3 + x5 = 23.0;",
            "r3: x0 >= 10.0;",
            "r4: x2 >= 8.0;",
            "r5: x4 >= 5.0;",
            "LPSolve returns 25.8, with x0 = 10.0, x1 = 0.0, x2 = 8.0, x3 = 0.0, x4 = 5.0, x5 = 23.0;",
            "Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();",
            "RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);",
            "that returns 22.20, with x0 = 15.0, x1 = 23.0, x2 = 8.0, x3 = 0.0, x4 = 0.0, x5 = 0.0;"
        ],
        "stack_traces": [],
        "summary_hints": ["SimplexSolver"],
        "summary_text": ["SimplexSolver not working as expected?"],
        "desc_hints": [
            "Relationship.GEQ",
            "LinearObjectiveFunction",
            "LinearConstraint",
            "RealPointValuePair",
            "GoalType.MAXIMIZE",
            "ArrayList",
            "Relationship.EQ",
            "SimplexSolver",
            "constraints.add"
        ],
        "desc_text": [
            [
                "I guess (but I could be wrong) that SimplexSolver does not always return the optimal solution, nor satisfies all the constraints...",
                ["OB"]
            ],
            ["Consider this LP:", []],
            ["max: 0.8 x0 + 0.2 x1 + 0.7 x2 + 0.3 x3 + 0.6 x4 + 0.4 x5;", []],
            ["r1: x0 + x2 + x4 = 23.0;", "CODE"],
            ["r2: x1 + x3 + x5 = 23.0;", "CODE"],
            ["r3: x0 >= 10.0;", "CODE"],
            ["r4: x2 >= 8.0;", "CODE"],
            ["r5: x4 >= 5.0;", "CODE"],
            [
                "LPSolve returns 25.8, with x0 = 10.0, x1 = 0.0, x2 = 8.0, x3 = 0.0, x4 = 5.0, x5 = 23.0;",
                "CODE"
            ],
            ["The same LP expressed in Apache commons math is:", []],
            [
                "LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]",
                []
            ],
            ["{ 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }", []],
            [", 0 );", []],
            [
                "Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();",
                "CODE"
            ],
            ["constraints.add(new LinearConstraint(new double[]", []],
            ["{ 1, 0, 1, 0, 1, 0 }", []],
            [", Relationship.EQ, 23.0));", []],
            ["constraints.add(new LinearConstraint(new double[]", []],
            ["{ 0, 1, 0, 1, 0, 1 }", []],
            [", Relationship.EQ, 23.0));", []],
            ["constraints.add(new LinearConstraint(new double[]", []],
            ["{ 1, 0, 0, 0, 0, 0 }", []],
            [", Relationship.GEQ, 10.0));", []],
            ["constraints.add(new LinearConstraint(new double[]", []],
            ["{ 0, 0, 1, 0, 0, 0 }", []],
            [", Relationship.GEQ, 8.0));", []],
            ["constraints.add(new LinearConstraint(new double[]", []],
            ["{ 0, 0, 0, 0, 1, 0 }", []],
            [", Relationship.GEQ, 5.0));", []],
            [
                "RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);",
                "CODE"
            ],
            [
                "that returns 22.20, with x0 = 15.0, x1 = 23.0, x2 = 8.0, x3 = 0.0, x4 = 0.0, x5 = 0.0;",
                "CODE"
            ],
            ["Is it possible SimplexSolver is buggy that way?", []],
            [
                "The returned value is 22.20 instead of 25.8, and the last constraint (x4 >= 5.0) is not satisfied...",
                ["OB", "EB"]
            ],
            ["Am I using the interface wrongly?", []]
        ]
    },
    "Jsoup-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Elements.attr"],
        "summary_text": [
            "abs: attribute prefix does not work on Elements.attr()"
        ],
        "desc_hints": ["Elements.attr", "element.hasAttr"],
        "desc_text": [
            [
                "Elements.attr() iterates on its element to look for the first one with the given attrbute.",
                ["OB", "SR"]
            ],
            [
                "If I try to get the attribute abs:href, the test element.hasAttr(\"abs:herf\") fails, and the returned value is an empty string.",
                ["OB", "SR"]
            ]
        ]
    },
    "Compress-36": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "SevenZFile.read",
            "IllegalStateException",
            "SevenZArchiveEntry"
        ],
        "summary_text": [
            "Calling SevenZFile.read() on empty SevenZArchiveEntry throws IllegalStateException"
        ],
        "desc_hints": [
            "IllegalStateException",
            "entry.getSize",
            "SevenZFile.class",
            "entry.read",
            "getNextEntry",
            "deferredBlockStreams"
        ],
        "desc_text": [
            [
                "I'm pretty sure COMPRESS-340 breaks reading empty archive entries.",
                ["OB"]
            ],
            [
                "When calling getNextEntry() and that entry has no content, the code jumps into the first block at line 830 (SevenZFile.class), clearing the deferredBlockStreams.",
                ["OB", "SR"]
            ],
            [
                "When calling entry.read(...) afterwards an IllegalStateException (\"No current 7z entry (call getNextEntry() first).\") is thrown.",
                ["OB"]
            ],
            [
                "IMHO, there should be another check for entry.getSize() == 0.",
                ["OB", "EB"]
            ],
            ["This worked correctly up until 1.10.", ["OB"]]
        ]
    },
    "Mockito-24": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["fix some rawtype warnings in tests"],
        "desc_hints": [],
        "desc_text": [
            ["Current coverage is 87.76%", []],
            ["Merging #467 into master will not change coverage", ["OB"]],
            ["@@           master       #467   diff @@", []],
            ["==========================================", []],
            ["Files         263        263", []],
            ["Lines        4747       4747", []],
            ["Methods         0          0", []],
            ["Messages        0          0", ["OB"]],
            ["Branches      767        767", []],
            ["==========================================", []],
            ["Hits         4166       4166", []],
            ["Misses        416        416", ["OB"]],
            ["Partials      165        165", []],
            ["Powered by Codecov.", ["OB"]],
            ["Last updated by 3fe0fd7...03d9a48", []]
        ]
    },
    "Codec-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Base64InputStream"],
        "summary_text": [
            "Base64InputStream#read(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long"
        ],
        "desc_hints": [
            "java.io.IOException",
            "InputStreamReader",
            "Base64InputStream"
        ],
        "desc_text": [
            [
                "Using new InputStreamReader(new Base64InputStream(in, true)) sometimes fails with \"java.io.IOException: Underlying input stream returned zero bytes\".",
                ["OB", "SR"]
            ],
            [
                "This is been tracked down that Base64InputStream#read(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long.",
                ["OB"]
            ]
        ]
    },
    "Codec-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "maxResultSize",
            "urlSafe",
            "Base64.encodeBase64",
            "isChunked",
            "binaryData"
        ],
        "summary_text": [
            "Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize if isChunked is false"
        ],
        "desc_hints": [
            "maxResultSize",
            "urlSafe",
            "Base64.encodeBase64",
            "isChunked",
            "binaryData"
        ],
        "desc_text": [
            [
                "If isChunked is false, Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize.",
                ["OB"]
            ],
            ["Test case and fix will be applied shortly.", ["OB"]]
        ]
    },
    "Gson-1": {
        "code_elements": [
            "public class Foo<T> {",
            "private final T someField;",
            "public Foo(T value) {",
            "this.someField = value;",
            "}",
            "public boolean equals(Object o) {",
            "if (!(o instanceof Foo)) {",
            "return false;",
            "} else {",
            "return someField.equals(((Foo)o).someField);",
            "}",
            "}",
            "}",
            "public class Bar extends Foo<Integer> {",
            "public Bar(Integer i) {",
            "super(i);",
            "}",
            "}",
            "Gson gson = new Gson();",
            "Bar bar1 = new Bar(1);",
            "assertEquals(bar1, bar2);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Fails to serialize/deserialize a class where a super-class has a type parameter"
        ],
        "desc_hints": [
            "this.someField",
            "code.google.com",
            "assertEquals",
            "gmail.com",
            "TypeVariable",
            "joel.leitch",
            "Bar.class",
            "gson.fromJson",
            "someField.equals",
            "gson.toJson",
            "someField"
        ],
        "desc_text": [
            [
                "Unfortunately, shortly after the Gson 1.2 release, I found a bug in the",
                []
            ],
            ["TypeVariable support.", ["OB"]],
            ["Basically, the following class can not be serialized", ["OB"]],
            ["or deserialized using Gson:", ["SR"]],
            ["public class Foo<T> {", "CODE"],
            ["private final T someField;", "CODE"],
            ["public Foo(T value) {", "CODE"],
            ["this.someField = value;", "CODE"],
            ["}", "CODE"],
            ["public boolean equals(Object o) {", "CODE"],
            ["if (!(o instanceof Foo)) {", "CODE"],
            ["return false;", "CODE"],
            ["} else {", "CODE"],
            ["return someField.equals(((Foo)o).someField);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public class Bar extends Foo<Integer> {", "CODE"],
            ["public Bar(Integer i) {", "CODE"],
            ["super(i);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Gson gson = new Gson();", "CODE"],
            ["Bar bar1 = new Bar(1);", "CODE"],
            ["String json = gson.toJson(bar1); // Fails", []],
            [
                "Bar bar2 = gson.fromJson(\"{\\\"someField\\\":1\", Bar.class);  // Fails",
                []
            ],
            ["assertEquals(bar1, bar2);", "CODE"],
            [
                "Original issue reported on code.google.com by joel.leitch@gmail.com on 29 Aug 2008 at 11:53",
                []
            ],
            ["Merged into: #168", []]
        ]
    },
    "Mockito-20": {
        "code_elements": [
            "List<String> getEmails();",
            "void addEmail(String email);",
            "// 12 other methods ...",
            "}",
            "void getAccount(String id, AsyncCallback<UserAccount> callback);",
            "}",
            "when(service.getAccount(eq(id), any(AsyncCallback.class)).thenAnswer(new Answer<Void>() {",
            "AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];",
            "...",
            "FutureAccount getAccount(RpcContext context, String id);",
            "}",
            "when(service.getAccount(isA(RpcContext.class), eq(\"id\")).thenReturn(...);",
            "abstract class FakeUserAccount implements UserAccount {",
            "private final List<String> emails = new ArrayList<>();",
            "@Override public void addEmail(String email) {",
            "emails.add(email);",
            "}",
            "@Override List<String> getEmails() {",
            "return ImmutableList.copyOf(emails);",
            "}",
            "}",
            "abstract class MockAccountService implements AccountService {",
            "@Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {",
            "callback.onSuccess(getAccount(id));",
            "}",
            "abstract UserAccount getAccount(String id);",
            "}",
            "...",
            "when(service.getAccount(\"id\")).thenReturn(account);",
            "abstract class MockAccountRpcService implements AccountRpcService {",
            "@Override Future<Account> getAccount(RpcContext context, String id) {",
            "checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.",
            "return getAccount(id);",
            "}",
            "abstract Future<Account> getAccount(String id);",
            "}",
            "when(service.getAccount(\"id\")).thenReturn(...);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Allow convenient spying on abstract classes"],
        "desc_hints": [
            "UserAccount",
            "addEmail",
            "getAccount",
            "GoogleCode",
            "AccountService",
            "RpcContext.class",
            "RpcContext",
            "emails.add",
            "thenReturn",
            "ArrayList",
            "FutureAccount",
            "checkNotNull",
            "thenAnswer",
            "MockAccountService",
            "MockAccountRpcService",
            "AsyncCallback.class",
            "callback.onSuccess",
            "userAccount",
            "service.getAccount",
            "getEmails",
            "getArguments",
            "FakeUserAccount",
            "ImmutableList.copyOf",
            "AccountRpcService",
            "AsyncCallback"
        ],
        "desc_text": [
            [
                "I posted this in GoogleCode and was asked to submit in github.",
                ["OB"]
            ],
            [
                "Mockito is easy to use when the test needs to provide canned values for a certain method.",
                ["OB", "EB", "SR"]
            ],
            [
                "But it gets harder when a canned value isn't sufficient.",
                ["OB"]
            ],
            ["Example 1: Fake with trivial Logic", ["SR"]],
            ["interface UserAccount {", []],
            ["List<String> getEmails();", "CODE"],
            ["void addEmail(String email);", "CODE"],
            ["// 12 other methods ...", "CODE"],
            ["}", "CODE"],
            [
                "When mocking such domain entity object, it's tedious to manually program getEmails()/addEmail() with when().thenReturn() and to make sure the two methods are logically consistent, that is, getEmails() returns all emails added.",
                ["OB"]
            ],
            ["Example 2: callback-style API", ["SR"]],
            ["interface AccountService {", []],
            [
                "void getAccount(String id, AsyncCallback<UserAccount> callback);",
                "CODE"
            ],
            ["}", "CODE"],
            ["Stubbing AccountService isn't easy.", ["OB"]],
            [
                "It'd require use of Answer, and the Answer API isn't statically type safe:",
                []
            ],
            [
                "when(service.getAccount(eq(id), any(AsyncCallback.class)).thenAnswer(new Answer<Void>() {",
                "CODE"
            ],
            [
                "AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];",
                "CODE"
            ],
            ["...", "CODE"],
            ["});", []],
            ["Example 3: Uninteresting parameters", ["SR"]],
            ["interface AccountRpcService {", []],
            [
                "FutureAccount getAccount(RpcContext context, String id);",
                "CODE"
            ],
            ["}", "CODE"],
            ["None of the tests care about the context object.", ["OB"]],
            [
                "It's an uninteresting parameter imposed by the framework.",
                ["OB"]
            ],
            [
                "If AccountRpcService were directly mocked, all tests would have to use isA() to repetitively mention this uninteresting parameter, like this:",
                ["SR"]
            ],
            [
                "when(service.getAccount(isA(RpcContext.class), eq(\"id\")).thenReturn(...);",
                "CODE"
            ],
            [
                "And all other parameters are required to be wrapped in eq().",
                ["OB"]
            ],
            ["Proposal", []],
            [
                "I propose adding support for abstract classes to mockito to make it easier to deal with tests like above:",
                []
            ],
            ["For example 1", ["SR"]],
            ["abstract class FakeUserAccount implements UserAccount {", "CODE"],
            ["private final List<String> emails = new ArrayList<>();", "CODE"],
            ["@Override public void addEmail(String email) {", "CODE"],
            ["emails.add(email);", "CODE"],
            ["}", "CODE"],
            ["@Override List<String> getEmails() {", "CODE"],
            ["return ImmutableList.copyOf(emails);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "@Fake private FakeUserAccount userAccount; // Mockito instantiates abstract class.",
                []
            ],
            ["For example 2", ["SR"]],
            [
                "abstract class MockAccountService implements AccountService {",
                "CODE"
            ],
            [
                "@Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {",
                "CODE"
            ],
            ["callback.onSuccess(getAccount(id));", "CODE"],
            ["}", "CODE"],
            ["abstract UserAccount getAccount(String id);", "CODE"],
            ["}", "CODE"],
            ["@Fake private MockAccountService service;", []],
            ["...", "CODE"],
            ["when(service.getAccount(\"id\")).thenReturn(account);", "CODE"],
            ["For example 3", ["SR"]],
            [
                "abstract class MockAccountRpcService implements AccountRpcService {",
                "CODE"
            ],
            [
                "@Override Future<Account> getAccount(RpcContext context, String id) {",
                "CODE"
            ],
            [
                "checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.",
                "CODE"
            ],
            ["return getAccount(id);", "CODE"],
            ["}", "CODE"],
            ["abstract Future<Account> getAccount(String id);", "CODE"],
            ["}", "CODE"],
            ["@Fake private MockAccountRpcService service;", []],
            ["when(service.getAccount(\"id\")).thenReturn(...);", "CODE"],
            [
                "My work place internally implemented a default Answer to support abstract classes.",
                []
            ],
            [
                "We found that the support of abstract classes helps us to avoid overusing mocks when we should be using fakes.",
                ["EB"]
            ],
            ["And in situations like above we get cleaner test code.", ["OB"]],
            [
                "But because it's not integrated in the core Mockito, there are gotchas with our implementation (like, you can't have private/final methods in your fake).",
                ["OB"]
            ],
            [
                "If the idea sounds okay to give a try, I'll volunteer to submit a patch.",
                ["OB", "SR"]
            ],
            ["Thanks!", []]
        ]
    },
    "Math-48": {
        "code_elements": [
            "public void testBug() {",
            "final UnivariateRealFunction f = new UnivariateRealFunction() {",
            "@Override",
            "public double value(double x) {",
            "return Math.exp(x) - Math.pow(Math.PI, 3.0);",
            "}",
            "};",
            "UnivariateRealSolver solver = new RegulaFalsiSolver();",
            "double root = solver.solve(100, f, 1, 10);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["RegulaFalsiSolver"],
        "summary_text": ["\"RegulaFalsiSolver\" failure"],
        "desc_hints": [
            "Math.exp",
            "UnivariateRealSolver",
            "PegasusSolver",
            "UnivariateRealFunction",
            "solver.solve",
            "testBug",
            "RegulaFalsiSolver",
            "Math.pow",
            "Math.PI"
        ],
        "desc_text": [
            ["The following unit test:", ["OB", "SR"]],
            ["@Test", []],
            ["public void testBug() {", "CODE"],
            [
                "final UnivariateRealFunction f = new UnivariateRealFunction() {",
                "CODE"
            ],
            ["@Override", "CODE"],
            ["public double value(double x) {", "CODE"],
            ["return Math.exp(x) - Math.pow(Math.PI, 3.0);", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["UnivariateRealSolver solver = new RegulaFalsiSolver();", "CODE"],
            ["double root = solver.solve(100, f, 1, 10);", "CODE"],
            ["}", "CODE"],
            ["fails with", ["OB"]],
            [
                "illegal state: maximal count (100) exceeded: evaluations",
                ["OB"]
            ],
            [
                "Using \"PegasusSolver\", the answer is found after 17 evaluations.",
                ["OB"]
            ]
        ]
    },
    "Cli-10": {
        "code_elements": [
            "import org.apache.commons.cli.CommandLine;",
            "import org.apache.commons.cli.GnuParser;",
            "import org.apache.commons.cli.OptionBuilder;",
            "import org.apache.commons.cli.Options;",
            "import org.apache.commons.cli.ParseException;",
            "public class Example",
            "{",
            "public static void main(String[] args) throws ParseException",
            "{",
            "brokenExample();",
            "workingExample();",
            "}",
            "// throws exception as expected",
            "private static void workingExample() throws ParseException",
            "{",
            "String[] args = {};",
            "Options opts = new Options();",
            "opts.addOption(OptionBuilder.isRequired().create('v'));",
            "GnuParser parser = new GnuParser();",
            "CommandLine secondCL = parser.parse(opts, args);",
            "System.out.println(\"Done workingExample\");",
            "}",
            "// fails to throw exception on second invocation of parse",
            "private static void brokenExample() throws ParseException",
            "{",
            "String[] firstArgs = { \"-v\" };",
            "String[] secondArgs = {};",
            "Options opts = new Options();",
            "opts.addOption(OptionBuilder.isRequired().create('v'));",
            "GnuParser parser = new GnuParser();",
            "CommandLine firstCL = parser.parse(opts, firstArgs);",
            "CommandLine secondCL = parser.parse(opts, secondArgs);",
            "System.out.println(\"Done brokenExample\");",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["MissingOptionException"],
        "summary_text": [
            "Missing required options not throwing MissingOptionException"
        ],
        "desc_hints": [
            "parser.parse",
            "brokenExample",
            "firstArgs",
            "org.apache.commons.cli.CommandLine",
            "org.apache.commons.cli.GnuParser",
            "GnuParser",
            "OptionBuilder.isRequired",
            "CommandLine",
            "org.apache.commons.cli.OptionBuilder",
            "firstCL",
            "opts.addOption",
            "org.apache.commons.cli.ParseException",
            "secondArgs",
            "secondCL",
            "org.apache.commons.cli.Options",
            "workingExample",
            "MissingOptionException",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "When an Options object is used to parse a second set of command arguments it won't throw a MissingOptionException.",
                ["OB", "SR"]
            ],
            ["import org.apache.commons.cli.CommandLine;", "CODE"],
            ["import org.apache.commons.cli.GnuParser;", "CODE"],
            ["import org.apache.commons.cli.OptionBuilder;", "CODE"],
            ["import org.apache.commons.cli.Options;", "CODE"],
            ["import org.apache.commons.cli.ParseException;", "CODE"],
            ["public class Example", "CODE"],
            ["{", "CODE"],
            [
                "public static void main(String[] args) throws ParseException",
                "CODE"
            ],
            ["{", "CODE"],
            ["brokenExample();", "CODE"],
            ["workingExample();", "CODE"],
            ["}", "CODE"],
            ["// throws exception as expected", "CODE"],
            [
                "private static void workingExample() throws ParseException",
                "CODE"
            ],
            ["{", "CODE"],
            ["String[] args = {};", "CODE"],
            ["Options opts = new Options();", "CODE"],
            ["opts.addOption(OptionBuilder.isRequired().create('v'));", "CODE"],
            ["GnuParser parser = new GnuParser();", "CODE"],
            ["CommandLine secondCL = parser.parse(opts, args);", "CODE"],
            ["System.out.println(\"Done workingExample\");", "CODE"],
            ["}", "CODE"],
            [
                "// fails to throw exception on second invocation of parse",
                "CODE"
            ],
            [
                "private static void brokenExample() throws ParseException",
                "CODE"
            ],
            ["{", "CODE"],
            ["String[] firstArgs = { \"-v\" };", "CODE"],
            ["String[] secondArgs = {};", "CODE"],
            ["Options opts = new Options();", "CODE"],
            ["opts.addOption(OptionBuilder.isRequired().create('v'));", "CODE"],
            ["GnuParser parser = new GnuParser();", "CODE"],
            ["CommandLine firstCL = parser.parse(opts, firstArgs);", "CODE"],
            ["CommandLine secondCL = parser.parse(opts, secondArgs);", "CODE"],
            ["System.out.println(\"Done brokenExample\");", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "This is a result of the Options object returning the reference to its own list and the parsers modifying that list.",
                ["OB", "EB"]
            ],
            [
                "The first call is removing the required options as they are found and subsequent calls get back an empty list.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-73": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "In w3c dom, siblings are incorrectly inheriting namespaces"
        ],
        "desc_hints": ["test.zip"],
        "desc_text": [
            [
                "I am not sure if this is a bug or I am missing something that is defined in specification.",
                []
            ],
            [
                "When I am parsing (W3C DOM) html file without namespace that have some element(s) with defined namespace, elements that are following will inherit that namespace.",
                ["OB", "SR"]
            ],
            ["Small test case and test html are included.", ["OB", "SR"]],
            ["test.zip", []]
        ]
    },
    "Compress-14": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:201)",
            "at Extractor.extract(Extractor.java:13)",
            "at Extractor.main(Extractor.java:28)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
            "at java.lang.reflect.Method.invoke(Method.java:597)",
            "at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:217)",
            "at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:152)",
            "at org.apache.tools.ant.taskdefs.Java.run(Java.java:771)",
            "at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:221)",
            "at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:135)",
            "at org.apache.tools.ant.taskdefs.Java.execute(Java.java:108)",
            "at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
            "at java.lang.reflect.Method.invoke(Method.java:597)",
            "at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)",
            "at org.apache.tools.ant.Task.perform(Task.java:348)",
            "at org.apache.tools.ant.Target.execute(Target.java:390)",
            "at org.apache.tools.ant.Target.performTasks(Target.java:411)",
            "at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)",
            "at org.apache.tools.ant.Project.executeTarget(Project.java:1368)",
            "at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)",
            "at org.apache.tools.ant.Project.executeTargets(Project.java:1251)",
            "at org.apache.tools.ant.Main.runBuild(Main.java:809)",
            "at org.apache.tools.ant.Main.startAnt(Main.java:217)",
            "at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)",
            "at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
            "Caused by: java.lang.IllegalArgumentException: Invalid byte 0 at offset 0 in '{NUL}1722000726 ' len=12",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:99)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:819)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:314)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:199)",
            "... 29 more"
        ],
        "summary_hints": ["TarArchiveInputStream"],
        "summary_text": [
            "Tar files created by AIX native tar, and which contain symlinks, cannot be read by TarArchiveInputStream"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "Extractor.main",
            "DispatchUtils.java",
            "org.apache.tools.ant.Target.performTasks",
            "org.apache.tools.ant.launch.Launcher.main",
            "Extractor.java",
            "org.apache.tools.ant.launch.Launcher.run",
            "Main.java",
            "TarArchiveEntry.java",
            "org.apache.tools.ant.Main.startAnt",
            "NativeMethodAccessorImpl.java",
            "org.apache.tools.ant.Main.runBuild",
            "TarArchiveInputStream.java",
            "org.apache.tools.ant.Target.execute",
            "Java.java",
            "Task.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
            "UnknownElement.java",
            "TarArchiveInputStream",
            "org.apache.tools.ant.taskdefs.Java.execute",
            "org.apache.tools.ant.UnknownElement.execute",
            "org.apache.tools.ant.Project.executeTarget",
            "Project.java",
            "org.apache.tools.ant.Project.executeTargets",
            "org.apache.tools.ant.taskdefs.ExecuteJava.execute",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "DefaultExecutor.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry",
            "Extractor.extract",
            "org.apache.tools.ant.Task.perform",
            "java.lang.IllegalArgumentException",
            "org.apache.tools.ant.taskdefs.ExecuteJava.run",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal",
            "org.apache.tools.ant.helper.DefaultExecutor.executeTargets",
            "Launcher.java",
            "TarUtils.java",
            "org.apache.tools.ant.taskdefs.Java.executeJava",
            "org.apache.tools.ant.dispatch.DispatchUtils.execute",
            "java.io.IOException",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader",
            "org.apache.tools.ant.taskdefs.Java.run",
            "Target.java",
            "java.lang.reflect.Method.invoke",
            "DelegatingMethodAccessorImpl.java",
            "Method.java",
            "org.apache.tools.ant.Project.executeSortedTargets",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "ExecuteJava.java"
        ],
        "desc_text": [
            [
                "A simple tar file created on AIX using the native (/usr/bin/tar tar utility) and which contains a symbolic link, cannot be loaded by TarArchiveInputStream:",
                ["OB", "SR"]
            ],
            ["java.io.IOException: Error detected parsing the header", ["OB"]],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:201)",
                "STACK_TRACE"
            ],
            ["at Extractor.extract(Extractor.java:13)", "STACK_TRACE"],
            ["at Extractor.main(Extractor.java:28)", "STACK_TRACE"],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:597)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:217)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:152)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.taskdefs.Java.run(Java.java:771)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:221)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:135)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.taskdefs.Java.execute(Java.java:108)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:597)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Task.perform(Task.java:348)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Target.execute(Target.java:390)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Target.performTasks(Target.java:411)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Project.executeTarget(Project.java:1368)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Project.executeTargets(Project.java:1251)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Main.runBuild(Main.java:809)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.Main.startAnt(Main.java:217)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.IllegalArgumentException: Invalid byte 0 at offset 0 in '{NUL}1722000726 ' len=12",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:99)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:819)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:314)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:199)",
                "STACK_TRACE"
            ],
            ["... 29 more", "STACK_TRACE"],
            [
                "Tested with 1.2 and the 1.4 nightly build from Feb 23 (Implementation-Build: trunk@r1292625; 2012-02-23 03:20:30+0000)",
                []
            ]
        ]
    },
    "Compress-44": {
        "code_elements": [
            "public void testGetValueThrowsNullPointerException() {",
            "ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,null);",
            "checksumCalculatingInputStream.getValue();",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "getValue",
            "ChecksumCalculatingInputStream",
            "NullPointerException"
        ],
        "summary_text": [
            "NullPointerException defect in ChecksumCalculatingInputStream#getValue()"
        ],
        "desc_hints": [
            "ChecksumCalculatingInputStream",
            "NullPointerException.class",
            "getValue",
            "NullPointerException",
            "checksumCalculatingInputStream.getValue",
            "github.com",
            "checksumCalculatingInputStream",
            "testGetValueThrowsNullPointerException"
        ],
        "desc_text": [
            [
                "NullPointerException defect in ChecksumCalculatingInputStream#getValue() detected as stated in pull request 33: https://github.com/apache/commons-compress/pull/33",
                []
            ],
            ["Furthermore the following test describes the problem:", ["SR"]],
            [
                "@Test(expected = NullPointerException.class) //I assume this behaviour to be a bug or at least a defect.",
                ["EB"]
            ],
            ["public void testGetValueThrowsNullPointerException() {", "CODE"],
            [
                "ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,null);",
                "CODE"
            ],
            ["checksumCalculatingInputStream.getValue();", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Math-25": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["HarmonicFitter.ParameterGuesser"],
        "summary_text": [
            "\"HarmonicFitter.ParameterGuesser\" sometimes fails to return sensible values"
        ],
        "desc_hints": [
            "HarmonicFitter",
            "optimization.fitting",
            "ParameterGuesser"
        ],
        "desc_text": [
            [
                "The inner class \"ParameterGuesser\" in \"HarmonicFitter\" (package \"o.a.c.m.optimization.fitting\") fails to compute a usable guess for the \"amplitude\" parameter.",
                ["OB", "SR"]
            ]
        ]
    },
    "Cli-21": {
        "code_elements": [
            "Argument numArg = aBuilder.withValidator(NumberValidator.getNumberInstance()).withMinimum(1).withMaximum(1).create();",
            "Option numOpt = oBuilder.withLongName(\"num\").withArgument(numArg).create();",
            "Group options = gBuilder.withOption(numOpt).create();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Negative numbers mistaken for options"],
        "desc_hints": [
            "numArg",
            "withArgument",
            "aBuilder.withValidator",
            "withMinimum",
            "numOpt",
            "withMaximum",
            "gBuilder.withOption",
            "NumberValidator.getNumberInstance",
            "oBuilder.withLongName"
        ],
        "desc_text": [
            [
                "If an option has a negative numerical argument, the parser mistakes it for another option and throws an error.",
                ["OB", "EB"]
            ],
            ["For example, consider:", ["SR"]],
            [
                "Argument numArg = aBuilder.withValidator(NumberValidator.getNumberInstance()).withMinimum(1).withMaximum(1).create();",
                "CODE"
            ],
            [
                "Option numOpt = oBuilder.withLongName(\"num\").withArgument(numArg).create();",
                "CODE"
            ],
            ["Group options = gBuilder.withOption(numOpt).create();", "CODE"],
            ["Then parsing --num -0.1 results in:", ["OB", "SR"]],
            ["Unexpected -0.1 while processing --num", []]
        ]
    },
    "Math-30": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Mann-Whitney U Test Suffers From Integer Overflow With Large Data Sets"
        ],
        "desc_hints": ["calculateAsymptoticPValue"],
        "desc_text": [
            [
                "When performing a Mann-Whitney U Test on large data sets (the attached test uses two 1500 element sets), intermediate integer values used in calculateAsymptoticPValue can overflow, leading to invalid results, such as p-values of NaN, or incorrect calculations.",
                ["OB", "SR"]
            ],
            [
                "Attached is a patch, including a test, and a fix, which modifies the affected code to use doubles",
                ["SR"]
            ]
        ]
    },
    "Csv-16": {
        "code_elements": [
            "public void newIteratorSameLexer() throws Exception {",
            "String fiveRows = \"1\\n2\\n3\\n4\\n5\\n\";",
            "System.out.println(\"Enhanced for loop, no peeking:\");",
            "CSVParser parser =",
            "new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);",
            "int recordNumber = 0;",
            "for (CSVRecord record : parser) {",
            "recordNumber++;",
            "System.out.println(recordNumber + \" -> \" + record.get(0));",
            "if (recordNumber >= 2) {",
            "break;",
            "}",
            "}",
            "// CSVParser.iterator() returns a new iterator, but the lexer isn't reset so we can pick up",
            "// where we left off.",
            "for (CSVRecord record : parser) {",
            "recordNumber++;",
            "System.out.println(recordNumber + \" -> \" + record.get(0));",
            "}",
            "// Enhanced for loop, no peeking:",
            "// 1 -> 1",
            "// 2 -> 2",
            "// 3 -> 3",
            "// 4 -> 4",
            "// 5 -> 5",
            "System.out.println(\"\\nEnhanced for loop, with peek:\");",
            "parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);",
            "recordNumber = 0;",
            "for (CSVRecord record : parser) {",
            "recordNumber++;",
            "System.out.println(recordNumber + \" -> \" + record.get(0));",
            "if (recordNumber >= 2) {",
            "break;",
            "}",
            "}",
            "// CSVParser.iterator() returns a new iterator, but we call hasNext before next, so we queue",
            "// one element for consumption. This element is discarded by the new iterator, even though the",
            "// lexer has advanced a row, so we've consumed an element with the peek!",
            "System.out.println(\"hasNext(): \" + parser.iterator().hasNext());",
            "for (CSVRecord record : parser) {",
            "recordNumber++;",
            "System.out.println(recordNumber + \" -> \" + record.get(0));",
            "}",
            "// Enhanced for loop, with peek:",
            "// 1 -> 1",
            "// 2 -> 2",
            "// hasNext(): true",
            "// 3 -> 4",
            "// 4 -> 5",
            "System.out.println(\"\\nIterator while, with peek:\");",
            "parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);",
            "recordNumber = 0;",
            "Iterator<CSVRecord> iter = parser.iterator();",
            "while (iter.hasNext()) {",
            "CSVRecord record = iter.next();",
            "recordNumber++;",
            "System.out.println(recordNumber + \" -> \" + record.get(0));",
            "if (recordNumber >= 2) {",
            "break;",
            "}",
            "}",
            "// When we use the same iterator, iterator and lexer are in sequence.",
            "System.out.println(\"hasNext(): \" + iter.hasNext());",
            "while (iter.hasNext()) {",
            "CSVRecord record = iter.next();",
            "recordNumber++;",
            "System.out.println(recordNumber + \" -> \" + record.get(0));",
            "}",
            "// Iterator while, with peek:",
            "// 1 -> 1",
            "// 2 -> 2",
            "// hasNext(): true",
            "// 3 -> 3",
            "// 4 -> 4",
            "// 5 -> 5",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Some multi-iterator parsing peek sequences incorrectly consume elements"
        ],
        "desc_hints": [
            "Iterator.hasNext",
            "parser.iterator",
            "record.get",
            "recordNumber",
            "iter.next",
            "iter.hasNext",
            "fiveRows",
            "StringReader",
            "BufferedReader",
            "newIteratorSameLexer",
            "Iterator.next",
            "CSVFormat.DEFAULT",
            "CSVParser.iterator",
            "System.out.println",
            "hasNext"
        ],
        "desc_text": [
            [
                "Repeated calls to CSVParser Iterable return new Iterators that each reference the same underlying parser lexer.",
                ["OB"]
            ],
            [
                "Within the scope of a\u00a0single Iterator, row peeking with Iterator.hasNext() works as intended.",
                ["OB"]
            ],
            [
                "When row peeking with Iterator.hasNext()\u00a0under circumstances that create a new Iterator, an element is consumed by the iterator which cannot be\u00a0accessed by subsequent, newly created Iterators and Iterator.next()s.",
                ["OB", "SR"]
            ],
            [
                "Effectively, the record Iterator and the lexer get out of sequence.",
                ["OB"]
            ],
            ["See snippet below.", ["OB"]],
            [
                "The \"right thing\" is keeping the Iterator in sequence with the lexer, and since this is reading from a buffer, there seem to me to be only two resolutions:",
                []
            ],
            ["One lexer, one Iterator.", ["OB"]],
            [
                "New Iterators, but peeking with hasNext doesn't advance the lexer.",
                ["OB"]
            ],
            [
                "If there's a consensus on one of these, I can put up a PR.",
                ["OB", "SR"]
            ],
            ["@Test", []],
            ["public void newIteratorSameLexer() throws Exception {", "CODE"],
            ["String fiveRows = \"1\\n2\\n3\\n4\\n5\\n\";", "CODE"],
            ["System.out.println(\"Enhanced for loop, no peeking:\");", "CODE"],
            ["CSVParser parser =", "CODE"],
            [
                "new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);",
                "CODE"
            ],
            ["int recordNumber = 0;", "CODE"],
            ["for (CSVRecord record : parser) {", "CODE"],
            ["recordNumber++;", "CODE"],
            [
                "System.out.println(recordNumber + \" -> \" + record.get(0));",
                "CODE"
            ],
            ["if (recordNumber >= 2) {", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "// CSVParser.iterator() returns a new iterator, but the lexer isn't reset so we can pick up",
                "CODE"
            ],
            ["// where we left off.", "CODE"],
            ["for (CSVRecord record : parser) {", "CODE"],
            ["recordNumber++;", "CODE"],
            [
                "System.out.println(recordNumber + \" -> \" + record.get(0));",
                "CODE"
            ],
            ["}", "CODE"],
            ["// Enhanced for loop, no peeking:", "CODE"],
            ["// 1 -> 1", "CODE"],
            ["// 2 -> 2", "CODE"],
            ["// 3 -> 3", "CODE"],
            ["// 4 -> 4", "CODE"],
            ["// 5 -> 5", "CODE"],
            [
                "System.out.println(\"\\nEnhanced for loop, with peek:\");",
                "CODE"
            ],
            [
                "parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);",
                "CODE"
            ],
            ["recordNumber = 0;", "CODE"],
            ["for (CSVRecord record : parser) {", "CODE"],
            ["recordNumber++;", "CODE"],
            [
                "System.out.println(recordNumber + \" -> \" + record.get(0));",
                "CODE"
            ],
            ["if (recordNumber >= 2) {", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "// CSVParser.iterator() returns a new iterator, but we call hasNext before next, so we queue",
                "CODE"
            ],
            [
                "// one element for consumption. This element is discarded by the new iterator, even though the",
                "CODE"
            ],
            [
                "// lexer has advanced a row, so we've consumed an element with the peek!",
                "CODE"
            ],
            [
                "System.out.println(\"hasNext(): \" + parser.iterator().hasNext());",
                "CODE"
            ],
            ["for (CSVRecord record : parser) {", "CODE"],
            ["recordNumber++;", "CODE"],
            [
                "System.out.println(recordNumber + \" -> \" + record.get(0));",
                "CODE"
            ],
            ["}", "CODE"],
            ["// Enhanced for loop, with peek:", "CODE"],
            ["// 1 -> 1", "CODE"],
            ["// 2 -> 2", "CODE"],
            ["// hasNext(): true", "CODE"],
            ["// 3 -> 4", "CODE"],
            ["// 4 -> 5", "CODE"],
            ["System.out.println(\"\\nIterator while, with peek:\");", "CODE"],
            [
                "parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);",
                "CODE"
            ],
            ["recordNumber = 0;", "CODE"],
            ["Iterator<CSVRecord> iter = parser.iterator();", "CODE"],
            ["while (iter.hasNext()) {", "CODE"],
            ["CSVRecord record = iter.next();", "CODE"],
            ["recordNumber++;", "CODE"],
            [
                "System.out.println(recordNumber + \" -> \" + record.get(0));",
                "CODE"
            ],
            ["if (recordNumber >= 2) {", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "// When we use the same iterator, iterator and lexer are in sequence.",
                "CODE"
            ],
            ["System.out.println(\"hasNext(): \" + iter.hasNext());", "CODE"],
            ["while (iter.hasNext()) {", "CODE"],
            ["CSVRecord record = iter.next();", "CODE"],
            ["recordNumber++;", "CODE"],
            [
                "System.out.println(recordNumber + \" -> \" + record.get(0));",
                "CODE"
            ],
            ["}", "CODE"],
            ["// Iterator while, with peek:", "CODE"],
            ["// 1 -> 1", "CODE"],
            ["// 2 -> 2", "CODE"],
            ["// hasNext(): true", "CODE"],
            ["// 3 -> 3", "CODE"],
            ["// 4 -> 4", "CODE"],
            ["// 5 -> 5", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Compress-33": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CompressorStreamFactory"],
        "summary_text": [
            "CompressorStreamFactory doesn't handle deflate streams with a zlib header"
        ],
        "desc_hints": [
            "CompressorException",
            "CompressorStreamFactory.createCompressorInputStream",
            "bla.tar.deflatez"
        ],
        "desc_text": [
            [
                "If you take a zlib / deflate compressed file, with the zlib header (eg the test file bla.tar.deflatez) and pass it to CompressorStreamFactory.createCompressorInputStream, it won't be detected and you'll get a CompressorException(\"No Compressor found for the stream signature.\")",
                ["OB", "SR"]
            ],
            [
                "While detecting header-less zlib files is probably too tricky to manage, those with the header ought to be possible to spot and handle",
                ["SR"]
            ]
        ]
    },
    "Closure-2": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @warning_level VERBOSE",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler==",
            "/**",
            "* @interface",
            "* @extends {unknown_1}",
            "* @extends {unknown_2}",
            "*/",
            "function Foo() {}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "combining @interface and multiple @extends can crash compiler"
        ],
        "desc_hints": [
            "WebAppContext.java",
            "com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable",
            "com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter",
            "TraceContext.java",
            "Thread.java",
            "com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile",
            "org.mortbay.jetty.servlet.ServletHandler",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "ServletHolder.java",
            "NodeTraversal.java",
            "DefaultPassConfig.java",
            "Server.java",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "org.mortbay.jetty.HttpConnection",
            "RequestRunnable.run",
            "com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost",
            "TransactionCleanupFilter.java",
            "JavaRuntime.java",
            "org.mortbay.jetty.servlet.SessionHandler.handle",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch",
            "CompilationRequestHandler.java",
            "PhaseOptimizer.java",
            "com.google.javascript.jscomp.TypeCheck.process",
            "SaveSessionFilter.java",
            "TypeCheck.java",
            "AbstractTraceContextCallback.runInInheritedContext",
            "com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service",
            "NamedPass.process",
            "com.google.javascript.jscomp.TypeCheck.checkInterfaceConflictProperties",
            "ContextHandler.java",
            "com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle",
            "com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest",
            "com.google.tracing.TraceContext.runInContext",
            "HttpConnection.java",
            "HttpServlet.java",
            "com.google.javascript.jscomp.DefaultPassConfig",
            "AppVersionHandlerMap.java",
            "TraceContextRunnable",
            "com.google.javascript.jscomp.TypeCheck.visit",
            "com.google.javascript.jscomp.TypeCheck.check",
            "default.js",
            "JettyServletEngineAdapter.java",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest",
            "org.mortbay.jetty.security.SecurityHandler.handle",
            "com.google.apphosting.runtime.JavaRuntime",
            "RequestHandler.headerComplete",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "TraceContextRunnable.run",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "SessionHandler.java",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "org.mortbay.jetty.webapp.WebAppContext.handle",
            "com.google.javascript.jscomp.TypeCheck.visitFunction",
            "java.lang.NullPointerException",
            "Compiler.java",
            "ThreadGroupPool.java",
            "com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter",
            "org.mortbay.jetty.handler.HandlerWrapper.handle",
            "org.mortbay.jetty.HttpConnection.handle",
            "CachedChain.doFilter",
            "CompilationServlet.java",
            "org.mortbay.jetty.servlet.ServletHolder.handle",
            "HandlerWrapper.java",
            "SecurityHandler.java",
            "TraceContextRunnable.runInContext",
            "javax.servlet.http.HttpServlet.service",
            "com.google.tracing.TraceContext",
            "org.mortbay.jetty.HttpConnection.handleRequest",
            "com.google.javascript.jscomp.Compiler",
            "com.google.javascript.jscomp.NodeTraversal.traverseWithScope",
            "org.mortbay.jetty.Server.handle",
            "RpcRequestParser.java",
            "ClosureCompiler",
            "org.mortbay.jetty.servlet.ServletHandler.handle",
            "ServerController.java",
            "com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest",
            "com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter",
            "AbstractTraceContextCallback.runInInheritedContextNoUnref",
            "ParseBlobUploadFilter.java",
            "org.mortbay.jetty.handler.ContextHandler.handle",
            "com.google.apphosting.runtime.ThreadGroupPool",
            "PoolEntry.run",
            "CompilerInvokerImpl.java",
            "com.google.javascript.jscomp.Compiler.check",
            "ServletHandler.java"
        ],
        "desc_text": [
            ["Compile this:", []],
            ["---------------------------------", []],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            ["// @warning_level VERBOSE", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["/**", "CODE"],
            ["* @interface", "CODE"],
            ["* @extends {unknown_1}", "CODE"],
            ["* @extends {unknown_2}", "CODE"],
            ["*/", "CODE"],
            ["function Foo() {}", "CODE"],
            ["---------------------------------", []],
            ["=> Get this..", ["OB"]],
            ["---------------------------------------", []],
            ["23: java.lang.NullPointerException", []],
            [
                "at com.google.javascript.jscomp.TypeCheck.checkInterfaceConflictProperties(TypeCheck.java:1544)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.visitFunction(TypeCheck.java:1635)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.visit(TypeCheck.java:761)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:509)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:502)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:502)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:347)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.check(TypeCheck.java:400)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.process(TypeCheck.java:371)",
                []
            ],
            [
                "at com.google.javascript.jscomp.DefaultPassConfig$29$1.process(DefaultPassConfig.java:1209)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:303)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:279)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:191)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.check(Compiler.java:814)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:729)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:85)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:637)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:634)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:694)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:634)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:590)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile(CompilerInvokerImpl.java:47)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest(ServerController.java:177)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest(CompilationRequestHandler.java:180)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service(CompilationRequestHandler.java:162)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost(CompilationServlet.java:83)",
                []
            ],
            [
                "at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)",
                []
            ],
            [
                "at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)",
                []
            ],
            [
                "at com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter(ParseBlobUploadFilter.java:102)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter(SaveSessionFilter.java:35)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)",
                []
            ],
            [
                "at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)",
                []
            ],
            [
                "at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)",
                []
            ],
            [
                "at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle(AppVersionHandlerMap.java:266)",
                []
            ],
            [
                "at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)",
                []
            ],
            ["at org.mortbay.jetty.Server.handle(Server.java:326)", []],
            [
                "at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)",
                []
            ],
            [
                "at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable(RpcRequestParser.java:76)",
                []
            ],
            [
                "at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:146)",
                []
            ],
            [
                "at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:447)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:454)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:461)",
                []
            ],
            [
                "at com.google.tracing.TraceContext.runInContext(TraceContext.java:703)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:338)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:330)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:458)",
                []
            ],
            [
                "at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251)",
                []
            ],
            ["at java.lang.Thread.run(Thread.java:679)", []],
            ["Original Post Data:", []],
            [
                "output_format=json&output_info=compiled_code&output_info=warnings&output_info=errors&output_info=statistics&compilation_level=SIMPLE_OPTIMIZATIONS&warning_level=VERBOSE&output_file_name=default.js&js_code=%2F**%0A*%20%40interface%0A*%20%40extends%20%7BA%7D%0A*%20%40extends%20%7BB%7D%0A*%2F%0Afunction%20Foo()%20%7B%7D",
                []
            ],
            ["------------------", []],
            [
                "Seems like a combination of @interface plus more than one @extend and where at least one of the @extend types are unknown causes a crash.",
                ["OB"]
            ],
            ["Regards", []],
            ["/ Fredrik Blomqvist", []]
        ]
    },
    "Math-5": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Complex.ZERO.reciprocal"],
        "summary_text": [
            "Complex.ZERO.reciprocal() returns NaN but should return INF."
        ],
        "desc_hints": [
            "Complex.java",
            "Complex.ZERO.reciprocal",
            "org.apache.commons.math3.complex.Complex"
        ],
        "desc_text": [
            [
                "Complex.ZERO.reciprocal() returns NaN but should return INF.",
                ["OB", "EB"]
            ],
            ["Class: org.apache.commons.math3.complex.Complex;", []],
            ["Method: reciprocal()", []],
            ["@version $Id: Complex.java 1416643 2012-12-03 19:37:14Z tn $", []]
        ]
    },
    "JacksonDatabind-87": {
        "code_elements": [
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.setTimeZone(TimeZone.getTimeZone(\"GMT+2\");",
            "Date date = mapper.readValue(\"\\\"1970-01-01T00:00:00.000\\\"\", java.util.Date.class);",
            "// date == \"1970-01-01T00:00:00.000+02.00\" with Jackson < 2.8.9",
            "// date == \"1970-01-01T00:00:00.000+00.00\" with Jackson  2.8.9"
        ],
        "stack_traces": [],
        "summary_hints": ["StdDateFormat"],
        "summary_text": [
            "StdDateFormat deserializes dates with no tz/offset as UTC instead of configured timezone"
        ],
        "desc_hints": [
            "java.util.Date.class",
            "mapper.readValue",
            "TimeZone.getTimeZone",
            "ObjectMapper",
            "mapper.setTimeZone",
            "TimeZone"
        ],
        "desc_text": [
            [
                "Prior to version 2.8.9, dates without time zone or time offset (eg 1970-01-01T00:00:00.000) were deserialised in the TimeZone set on the ObjectMapper.",
                ["OB", "SR"]
            ],
            [
                "Starting from 2.8.9, these dates are deserialised in UTC - which is a major (breaking) change in behaviour...",
                []
            ],
            ["Example:", ["OB", "SR"]],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["mapper.setTimeZone(TimeZone.getTimeZone(\"GMT+2\");", "CODE"],
            [
                "Date date = mapper.readValue(\"\\\"1970-01-01T00:00:00.000\\\"\", java.util.Date.class);",
                "CODE"
            ],
            [
                "// date == \"1970-01-01T00:00:00.000+02.00\" with Jackson < 2.8.9",
                "CODE"
            ],
            [
                "// date == \"1970-01-01T00:00:00.000+00.00\" with Jackson  2.8.9",
                "CODE"
            ]
        ]
    },
    "Time-1": {
        "code_elements": [
            "new Partial(yearOfCentury(),  1).with(weekyear(), 1);",
            "// NullPointerException",
            "// org.joda.time.Partial.with (Partial.java:447)"
        ],
        "stack_traces": [],
        "summary_hints": ["Partial.with"],
        "summary_text": ["Partial.with fails with NPE"],
        "desc_hints": [
            "org.joda.time.Partial.with",
            "Partial.java",
            "NullPointerException",
            "yearOfCentury",
            "yearOfEra"
        ],
        "desc_text": [
            ["With the latest master:", []],
            ["new Partial(yearOfCentury(),  1).with(weekyear(), 1);", "CODE"],
            ["// NullPointerException", "CODE"],
            ["// org.joda.time.Partial.with (Partial.java:447)", "CODE"],
            ["Fails with yearOfCentury, year and yearOfEra.", ["OB"]],
            ["Probably because weekyear has a null range duration type.", []]
        ]
    },
    "Math-45": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["OpenMapRealMatrix"],
        "summary_text": ["Integer overflow in OpenMapRealMatrix"],
        "desc_hints": ["computeKey", "OpenMapRealMatrix"],
        "desc_text": [
            ["computeKey() has an integer overflow.", ["OB"]],
            [
                "Since it is a sparse matrix, this is quite easily encountered long before heap space is exhausted.",
                []
            ],
            [
                "The attached code demonstrates the problem, which could potentially be a security vulnerability (for example, if one was to use this matrix to store access control information).",
                ["SR"]
            ],
            [
                "Workaround: never create an OpenMapRealMatrix with more cells than are addressable with an int.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-33": {
        "code_elements": [
            "/**",
            "* @param {{text: string}} opt_data",
            "* @return {string}",
            "*/",
            "function temp1(opt_data) {",
            "return opt_data.text;",
            "}",
            "/**",
            "* @param {{activity: (boolean|number|string|null|Object)}} opt_data",
            "* @return {string}",
            "*/",
            "function temp2(opt_data) {",
            "/** @notypecheck */",
            "function __inner() {",
            "return temp1(opt_data.activity);",
            "}",
            "return __inner();",
            "}",
            "/**",
            "* @param {{n: number, text: string, b: boolean}} opt_data",
            "* @return {string}",
            "*/",
            "function temp3(opt_data) {",
            "return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';",
            "}",
            "function callee() {",
            "var output = temp3({",
            "n: 0,",
            "text: 'a string',",
            "b: true",
            "})",
            "alert(output);",
            "}",
            "callee();",
            "var output = temp3({"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "weird object literal invalid property error on unrelated object prototype"
        ],
        "desc_hints": [
            "repro3.js",
            "opt_data.activity",
            "opt_data.text",
            "repro2.js",
            "checkTypes",
            "compiler.jar",
            "accessControls",
            "checkVars",
            "repro.js"
        ],
        "desc_text": [
            [
                "Apologies in advance for the convoluted repro case and the vague summary.",
                ["OB", "SR"]
            ],
            [
                "Compile the following code (attached as repro.js) with:",
                ["OB", "SR"]
            ],
            [
                "java -jar build/compiler.jar --compilation_level=ADVANCED_OPTIMIZATIONS --jscomp_error=accessControls --jscomp_error=checkTypes --jscomp_error=checkVars --js repro.js *",
                []
            ],
            ["/**", "CODE"],
            ["* @param {{text: string}} opt_data", "CODE"],
            ["* @return {string}", "CODE"],
            ["*/", "CODE"],
            ["function temp1(opt_data) {", "CODE"],
            ["return opt_data.text;", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            [
                "* @param {{activity: (boolean|number|string|null|Object)}} opt_data",
                "CODE"
            ],
            ["* @return {string}", "CODE"],
            ["*/", "CODE"],
            ["function temp2(opt_data) {", "CODE"],
            ["/** @notypecheck */", "CODE"],
            ["function __inner() {", "CODE"],
            ["return temp1(opt_data.activity);", "CODE"],
            ["}", "CODE"],
            ["return __inner();", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            [
                "* @param {{n: number, text: string, b: boolean}} opt_data",
                "CODE"
            ],
            ["* @return {string}", "CODE"],
            ["*/", "CODE"],
            ["function temp3(opt_data) {", "CODE"],
            [
                "return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';",
                "CODE"
            ],
            ["}", "CODE"],
            ["function callee() {", "CODE"],
            ["var output = temp3({", "CODE"],
            ["n: 0,", "CODE"],
            ["text: 'a string',", "CODE"],
            ["b: true", "CODE"],
            ["})", "CODE"],
            ["alert(output);", "CODE"],
            ["}", "CODE"],
            ["callee();", "CODE"],
            ["yields:", []],
            [
                "repro.js:30: ERROR - actual parameter 1 of temp3 does not match formal parameter",
                ["OB"]
            ],
            ["found : {b: boolean, n: number, text: (string|undefined)}", []],
            ["required: {b: boolean, n: number, text: string}", []],
            ["var output = temp3({", "CODE"],
            [
                "It seems like temp3 is actually being called with the right type {b: boolean, n: number, text: string} though it seems to think that text is a (string|undefined)",
                ["OB", "SR"]
            ],
            [
                "This seems to happen because of the seemingly unrelated code in functions temp1 and temp2.",
                ["OB"]
            ],
            [
                "If I change the name of the text property (as in repro3.js) it works.",
                ["OB"]
            ],
            [
                "Additionally, if I fix the type of the activity property in the record type of temp2 it works (as in repro2.js)",
                []
            ],
            [
                "This comes up in our codebase in some situations where we don't have type info for all the objects being passed into a function.",
                ["OB"]
            ],
            [
                "It's always a tricky one to find because it reports an error at a location that looks correct.",
                ["OB"]
            ],
            ["* it also fails with SIMPLE_OPTIMIZATIONS", ["OB"]]
        ]
    },
    "JacksonCore-17": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["writeRaw", "JsonGenerationException"],
        "summary_text": [
            "JsonGenerationException: Split surrogate on writeRaw() input thrown for input of a certain size"
        ],
        "desc_hints": [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue",
            "BadMsg.java",
            "writeRaw",
            "SNAPSHOT.jar",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator",
            "_reportError",
            "com.fasterxml.jackson.core.JsonGenerator",
            "BadMsg.main",
            "BadMsg",
            "_writeSegmentedRaw",
            "_outputRawMultiByteChar",
            "GeneratorBase.java",
            "com.fasterxml.jackson.core.JsonGenerationException",
            "JsonGenerator.java",
            "UTF8JsonGenerator.java"
        ],
        "desc_text": [
            [
                "In short, I am seeing the following exception while processing text that includes valid multi-byte Unicode characters, and adding or removing characters before the \"problematic\" characters can affect whether the exception is thrown.",
                ["OB", "SR"]
            ],
            [
                "$ java -classpath .:../../jackson-core/target/jackson-core-2.8.2-SNAPSHOT.jar BadMsg com.fasterxml.jackson.core.JsonGenerationException: Split surrogate on writeRaw() input (last character) at com.fasterxml.jackson.core.JsonGenerator._reportError(JsonGenerator.java:1887) at com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(UTF8JsonGenerator.java:1916) at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(UTF8JsonGenerator.java:697) at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(UTF8JsonGenerator.java:611) at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(UTF8JsonGenerator.java:560) at com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(GeneratorBase.java:306) at BadMsg.main(BadMsg.java:17)",
                ["OB"]
            ],
            [
                "The simplest way to demonstrate this is code, so I will attach a sample program with a document that causes the error.",
                ["OB", "SR"]
            ],
            [
                "Sorry for the ugly redacted text, but you can imagine some real words and other interesting strings in place of all the x's.",
                ["OB"]
            ],
            [
                "Note that if I delete or add enough of the 'x' characters (doesn't matter where in the JSON they appear, as long as it's before the character that causes the exception) the exception will not be thrown.",
                ["OB"]
            ],
            [
                "I believe the problem is in buffering the data that is passed to the lower level functions, but I have not debugged to that level.",
                []
            ]
        ]
    },
    "Math-61": {
        "code_elements": [
            "public PoissonDistributionImpl(double p, NormalDistribution z) {",
            "super();",
            "setNormal(z);",
            "setMean(p);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["PoissonDistributionImpl"],
        "summary_text": ["Dangerous code in \"PoissonDistributionImpl\""],
        "desc_hints": [
            "setMean",
            "PoissonDistributionImpl",
            "PoissonDistributionImpl.java",
            "setNormal",
            "NormalDistribution"
        ],
        "desc_text": [
            [
                "In the following excerpt from class \"PoissonDistributionImpl\":",
                ["OB", "SR"]
            ],
            ["PoissonDistributionImpl.java", []],
            [
                "public PoissonDistributionImpl(double p, NormalDistribution z) {",
                "CODE"
            ],
            ["super();", "CODE"],
            ["setNormal(z);", "CODE"],
            ["setMean(p);", "CODE"],
            ["}", "CODE"],
            [
                "(1) Overridable methods are called within the constructor.",
                ["OB"]
            ],
            [
                "(2) The reference \"z\" is stored and modified within the class.",
                ["OB"]
            ],
            [
                "I've encountered problem (1) in several classes while working on issue 348.",
                ["OB", "SR"]
            ],
            [
                "In those cases, in order to remove potential problems, I copied/pasted the body of the \"setter\" methods inside the constructor but I think that a more elegant solution would be to remove the \"setters\" altogether (i.e.",
                []
            ],
            ["make the classes immutable).", ["OB"]],
            ["Problem (2) can also create unexpected behaviour.", ["OB"]],
            [
                "Is it really necessary to pass the \"NormalDistribution\" object; can't it be always created within the class?",
                []
            ]
        ]
    },
    "Cli-30": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "The state of the option groups is not updated by the default options"
        ],
        "desc_hints": ["CommandLine"],
        "desc_text": [
            [
                "The state of the option groups is neither checked nor updated when the default options passed as a Properties instance to the parse method are processed.",
                ["OB", "EB"]
            ],
            [
                "For example if 'a' and 'b' are two mutually exclusive options, the command line argument could specify 'a' and the default options could contain 'b', the parser will not complain and the resulting CommandLine will contain 'a' and 'b'.",
                ["OB", "SR"]
            ]
        ]
    },
    "Jsoup-51": {
        "code_elements": [
            "//// ****  Source Code  ******",
            "Document doc = Jsoup.parse(XMLString.toString(),\"UTF-8\",Parser.xmlParser());",
            "Elements objElementCollection = doc.getAllElements();",
            "int iElementsSize=objElementCollection.size();",
            "for(Element objCurrent : objElementCollection)",
            "{",
            "String szTag=objCurrent.tagName();",
            "for (TextNode tnTextNode : objCurrent.textNodes())",
            "{",
            "String szVal=tnTextNode.text();",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Problem in reading XML file containing Japanese tag names"
        ],
        "desc_hints": [
            "objCurrent.tagName",
            "objCurrent",
            "szVal",
            "objCurrent.textNodes",
            "tnTextNode",
            "objElementCollection.size",
            "objElementCollection",
            "Jsoup.parse",
            "szTag",
            "TextNode",
            "doc.getAllElements",
            "XMLString.toString",
            "Parser.xmlParser",
            "iElementsSize",
            "tnTextNode.text"
        ],
        "desc_text": [
            ["Hello,", []],
            [
                "I have XML file containing Japanese tag names and values.",
                ["OB", "SR"]
            ],
            ["JSOUP is not parsing this Japanese tags.", ["OB"]],
            ["I am using JSOUP library (version: 1.8.3).", []],
            ["Please help me to solve this issue.", []],
            ["e.g.", []],
            ["( XML File to reproduce problem )", ["SR"]],
            ["<\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>", []],
            [
                "<\u958b\u59cb\u4e88\u5b9a\u51e1\u4f8b\u540d \u8868\u793a\u72b6\u614b=\"0\" \u7dda\u8272=\"00CED1\">&#9312;&#35373;&#35336; &#38283;&#22987;&#20104;&#23450;</\u958b\u59cb\u4e88\u5b9a\u51e1\u4f8b\u540d>",
                []
            ],
            ["</\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>", []],
            ["//// ****  Source Code  ******", "CODE"],
            [
                "Document doc = Jsoup.parse(XMLString.toString(),\"UTF-8\",Parser.xmlParser());",
                "CODE"
            ],
            ["Elements objElementCollection = doc.getAllElements();", "CODE"],
            ["int iElementsSize=objElementCollection.size();", "CODE"],
            ["for(Element objCurrent : objElementCollection)", "CODE"],
            ["{", "CODE"],
            ["String szTag=objCurrent.tagName();", "CODE"],
            ["for (TextNode tnTextNode : objCurrent.textNodes())", "CODE"],
            ["{", "CODE"],
            ["String szVal=tnTextNode.text();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-70": {
        "code_elements": [
            "public class Person {",
            "@JsonUnwrapped(prefix = \"businessAddress.\")",
            "public Address businessAddress;",
            "}",
            "public class Address {",
            "public String street;",
            "public String addon;",
            "public String zip = \"\";",
            "public String town;",
            "public String country;",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.remove(BeanPropertyMap.java:447)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:534)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)"
        ],
        "summary_hints": ["JsonUnwrapped"],
        "summary_text": [
            "ACCEPT_CASE_INSENSITIVE_PROPERTIES fails with @JsonUnwrapped"
        ],
        "desc_hints": [
            "com.fasterxml.jackson.databind.deser.DeserializerCache",
            "MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES",
            "BeanDeserializerBase.java",
            "JsonUnwrapped",
            "_createAndCache2",
            "businessAddress",
            "mapper.enable",
            "DeserializerCache.java",
            "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.remove",
            "FasterXML",
            "java.util.NoSuchElementException",
            "BeanPropertyMap.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve"
        ],
        "desc_text": [
            ["(note: moved from FasterXML/jackson-dataformat-csv#133)", []],
            ["When trying to deserialize type like:", ["OB", "SR"]],
            ["public class Person {", "CODE"],
            ["@JsonUnwrapped(prefix = \"businessAddress.\")", "CODE"],
            ["public Address businessAddress;", "CODE"],
            ["}", "CODE"],
            ["public class Address {", "CODE"],
            ["public String street;", "CODE"],
            ["public String addon;", "CODE"],
            ["public String zip = \"\";", "CODE"],
            ["public String town;", "CODE"],
            ["public String country;", "CODE"],
            ["}", "CODE"],
            [
                "with case-insensitive mapper (mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);) I get exception:",
                ["OB"]
            ],
            [
                "java.util.NoSuchElementException: No entry 'businessAddress' found, can't remove",
                ["OB"]
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.remove(BeanPropertyMap.java:447)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:534)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)",
                "STACK_TRACE"
            ],
            ["...", []]
        ]
    },
    "Math-63": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["NaN in \"equals\" methods"],
        "desc_hints": ["MathUtils"],
        "desc_text": [
            [
                "In \"MathUtils\", some \"equals\" methods will return true if both argument are NaN.",
                ["OB"]
            ],
            [
                "Unless I'm mistaken, this contradicts the IEEE standard.",
                ["OB"]
            ],
            ["If nobody objects, I'm going to make the changes.", ["OB", "SR"]]
        ]
    },
    "Math-51": {
        "code_elements": [
            "public void testBug() {",
            "final UnivariateRealFunction f = new UnivariateRealFunction() {",
            "@Override",
            "public double value(double x) {",
            "return Math.exp(x) - Math.pow(Math.PI, 3.0);",
            "}",
            "};",
            "UnivariateRealSolver solver = new RegulaFalsiSolver();",
            "double root = solver.solve(100, f, 1, 10);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["RegulaFalsiSolver"],
        "summary_text": ["\"RegulaFalsiSolver\" failure"],
        "desc_hints": [
            "Math.exp",
            "UnivariateRealSolver",
            "PegasusSolver",
            "UnivariateRealFunction",
            "solver.solve",
            "testBug",
            "RegulaFalsiSolver",
            "Math.pow",
            "Math.PI"
        ],
        "desc_text": [
            ["The following unit test:", ["OB", "SR"]],
            ["@Test", []],
            ["public void testBug() {", "CODE"],
            [
                "final UnivariateRealFunction f = new UnivariateRealFunction() {",
                "CODE"
            ],
            ["@Override", "CODE"],
            ["public double value(double x) {", "CODE"],
            ["return Math.exp(x) - Math.pow(Math.PI, 3.0);", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["UnivariateRealSolver solver = new RegulaFalsiSolver();", "CODE"],
            ["double root = solver.solve(100, f, 1, 10);", "CODE"],
            ["}", "CODE"],
            ["fails with", ["OB"]],
            [
                "illegal state: maximal count (100) exceeded: evaluations",
                ["OB"]
            ],
            [
                "Using \"PegasusSolver\", the answer is found after 17 evaluations.",
                ["OB"]
            ]
        ]
    },
    "Math-82": {
        "code_elements": [
            "/* Objective function */",
            "/* Constraints */",
            "R1: +3 a -5 c <= 0;",
            "R2: +2 a -5 d <= 0;",
            "R3: +2 b -5 c <= 0;",
            "R4: +3 b -5 d <= 0;",
            "R5: +3 a +2 b <= 5;",
            "R6: +2 a +3 b <= 5;",
            "/* Variable bounds */",
            "a <= 1;",
            "b <= 1;",
            "Collection<LinearConstraint> podmienky = new ArrayList<LinearConstraint>();",
            "SimplexSolver solver = new SimplexSolver();",
            "RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);"
        ],
        "stack_traces": [],
        "summary_hints": ["SimplexSolver"],
        "summary_text": ["SimplexSolver not working as expected 2"],
        "desc_hints": [
            "SimplexSolve",
            "kritFcia",
            "LinearObjectiveFunction",
            "LinearConstraint",
            "RealPointValuePair",
            "Relationship.LEQ",
            "GoalType.MAXIMIZE",
            "ArrayList",
            "solver.optimize",
            "SimplexSolver",
            "podmienky.add"
        ],
        "desc_text": [
            ["SimplexSolver didn't find the optimal solution.", ["OB"]],
            ["Program for Lpsolve:", []],
            ["=====================", []],
            ["/* Objective function */", "CODE"],
            ["max: 7 a 3 b;", ["SR"]],
            ["/* Constraints */", "CODE"],
            ["R1: +3 a -5 c <= 0;", "CODE"],
            ["R2: +2 a -5 d <= 0;", "CODE"],
            ["R3: +2 b -5 c <= 0;", "CODE"],
            ["R4: +3 b -5 d <= 0;", "CODE"],
            ["R5: +3 a +2 b <= 5;", "CODE"],
            ["R6: +2 a +3 b <= 5;", "CODE"],
            ["/* Variable bounds */", "CODE"],
            ["a <= 1;", "CODE"],
            ["b <= 1;", "CODE"],
            ["=====================", []],
            ["Results(correct): a = 1, b = 1, value = 10", ["OB"]],
            ["Program for SimplexSolve:", []],
            ["=====================", []],
            [
                "LinearObjectiveFunction kritFcia = new LinearObjectiveFunction(new double[]",
                []
            ],
            ["{7, 3, 0, 0}", []],
            [", 0);", []],
            [
                "Collection<LinearConstraint> podmienky = new ArrayList<LinearConstraint>();",
                "CODE"
            ],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{1, 0, 0, 0}", []],
            [", Relationship.LEQ, 1));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{0, 1, 0, 0}", []],
            [", Relationship.LEQ, 1));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{3, 0, -5, 0}", ["SR"]],
            [", Relationship.LEQ, 0));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{2, 0, 0, -5}", ["SR"]],
            [", Relationship.LEQ, 0));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{0, 2, -5, 0}", []],
            [", Relationship.LEQ, 0));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{0, 3, 0, -5}", ["SR"]],
            [", Relationship.LEQ, 0));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{3, 2, 0, 0}", ["SR"]],
            [", Relationship.LEQ, 5));", []],
            ["podmienky.add(new LinearConstraint(new double[]", []],
            ["{2, 3, 0, 0}", ["SR"]],
            [", Relationship.LEQ, 5));", []],
            ["SimplexSolver solver = new SimplexSolver();", "CODE"],
            [
                "RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);",
                "CODE"
            ],
            ["=====================", []],
            ["Results(incorrect): a = 1, b = 0.5, value = 8.5", ["OB"]],
            ["P.S.", []],
            [
                "I used the latest software from the repository (including MATH-286 fix).",
                []
            ]
        ]
    },
    "Closure-34": {
        "code_elements": [],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:643)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:588)",
            "at com.google.javascript.jscomp.Compiler.toSource(Compiler.java:1492)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.processResults(AbstractCommandLineRunner.java:788)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:726)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:334)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:871)",
            "Caused by: java.lang.RuntimeException: java.lang.StackOverflowError",
            "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:643)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:588)",
            "at com.google.javascript.jscomp.Compiler.toSource(Compiler.java:1608)",
            "at com.google.javascript.jscomp.Compiler$5.call(Compiler.java:1503)",
            "at com.google.javascript.jscomp.Compiler$5.call(Compiler.java:1492)",
            "at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:615)",
            "at java.lang.Thread.run(Unknown Source)",
            "Caused by: java.lang.StackOverflowError",
            "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:91)",
            "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
            "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
            "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
            "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
            "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
            "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
            "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
            "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
            "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
            "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
            "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)"
        ],
        "summary_hints": ["StackOverflowError"],
        "summary_text": [
            "StackOverflowError exception when running closure compiler (javascript attached)"
        ],
        "desc_hints": [
            "AdMedia.eam.min.js",
            "CodeGenerator.java",
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.processResults",
            "com.google.javascript.jscomp.Compiler.toSource",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "java.lang.StackOverflowError",
            "java.lang.Thread.run",
            "AbstractCommandLineRunner.java",
            "com.google.javascript.jscomp.CodeGenerator.add",
            "CommandLineRunner.java",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.CodeGenerator.addExpr",
            "com.google.javascript.jscomp.Compiler",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "code.google.com",
            "AdMedia.eam.js",
            "compiler.jar",
            "Compiler.java",
            "HotSpot",
            "com.google.javascript.jscomp.Compiler.runCallable"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "I'm trying to run: java -jar compiler.jar --js AdMedia.eam.js --js_output_file AdMedia.eam.min.js",
                ["SR"]
            ],
            ["2.", ["OB", "SR"]],
            ["AdMedia.eam.js is attached.", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I get the following exception:", ["OB"]],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: java.lang.StackOverflowError",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:643)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:588)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.toSource(Compiler.java:1492)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.processResults(AbstractCommandLineRunner.java:788)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:726)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:334)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:871)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.RuntimeException: java.lang.StackOverflowError",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:643)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:588)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.toSource(Compiler.java:1608)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$5.call(Compiler.java:1503)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$5.call(Compiler.java:1492)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:615)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Unknown Source)", "STACK_TRACE"],
            ["Caused by: java.lang.StackOverflowError", "STACK_TRACE"],
            [
                "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:91)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:103)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:881)",
                "STACK_TRACE"
            ],
            [".", ["OB"]],
            [".", ["OB"]],
            [".", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Closure:", []],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: 20120305 (revision 1810)", []],
            ["Built on: 2012/03/05 20:55", []],
            ["Java:", []],
            ["java version \"1.6.0_31\"", []],
            ["Java(TM) SE Runtime Environment (build 1.6.0_31-b05)", []],
            [
                "Java HotSpot(TM) Client VM (build 20.6-b01, mixed mode, sharing)",
                []
            ],
            ["Windows 7 (64-bit)", []],
            ["Please provide any additional information below.", "QUERY"],
            ["Works fine on the following Java version:", ["OB", "SR"]],
            ["java version \"1.7.0\"", []],
            ["Java(TM) SE Runtime Environment (build 1.7.0-b147)", []],
            [
                "Java HotSpot(TM) 64-Bit Server VM (build 21.0-b17, mixed mode)",
                []
            ]
        ]
    },
    "Jsoup-80": {
        "code_elements": [
            "public void parseFaultyXml() {",
            "String xml = \"<?xml version='1.0'><val>One</val>\";",
            "Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());",
            "}"
        ],
        "stack_traces": [
            "at java.util.ArrayList.rangeCheck(ArrayList.java:657)",
            "at java.util.ArrayList.get(ArrayList.java:433)",
            "at org.jsoup.nodes.Element.child(Element.java:254)",
            "at org.jsoup.parser.XmlTreeBuilder.insert(XmlTreeBuilder.java:91)",
            "at org.jsoup.parser.XmlTreeBuilder.process(XmlTreeBuilder.java:49)",
            "at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:52)",
            "at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:45)",
            "at org.jsoup.parser.Parser.parseInput(Parser.java:34)",
            "at org.jsoup.Jsoup.parse(Jsoup.java:45)"
        ],
        "summary_hints": ["IndexOutOfBoundsException"],
        "summary_text": ["Faulty Xml Causes IndexOutOfBoundsException"],
        "desc_hints": [
            "org.jsoup.Jsoup.parse",
            "org.jsoup.parser.Parser.parseInput",
            "parseFaultyXml",
            "Parser.java",
            "java.lang.IndexOutOfBoundsException",
            "Jsoup.parse",
            "TreeBuilder.java",
            "Parser.xmlParser",
            "org.jsoup.parser.XmlTreeBuilder.insert",
            "java.util.ArrayList.rangeCheck",
            "ArrayList.java",
            "XmlTreeBuilder.java",
            "Jsoup.java",
            "org.jsoup.parser.TreeBuilder.runParser",
            "Element.java",
            "org.jsoup.parser.TreeBuilder.parse",
            "org.jsoup.parser.XmlTreeBuilder.process",
            "org.jsoup.nodes.Element.child",
            "java.util.ArrayList.get"
        ],
        "desc_text": [
            ["@Test", []],
            ["public void parseFaultyXml() {", "CODE"],
            ["String xml = \"<?xml version='1.0'><val>One</val>\";", "CODE"],
            [
                "Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());",
                "CODE"
            ],
            ["}", "CODE"],
            ["Results in:", ["OB"]],
            ["java.lang.IndexOutOfBoundsException: Index: 0, Size: 0", []],
            [
                "at java.util.ArrayList.rangeCheck(ArrayList.java:657)",
                "STACK_TRACE"
            ],
            ["at java.util.ArrayList.get(ArrayList.java:433)", "STACK_TRACE"],
            [
                "at org.jsoup.nodes.Element.child(Element.java:254)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.XmlTreeBuilder.insert(XmlTreeBuilder.java:91)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.XmlTreeBuilder.process(XmlTreeBuilder.java:49)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:52)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:45)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.Parser.parseInput(Parser.java:34)",
                "STACK_TRACE"
            ],
            ["at org.jsoup.Jsoup.parse(Jsoup.java:45)", "STACK_TRACE"]
        ]
    },
    "Math-66": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BrentOptimizer"],
        "summary_text": ["Bugs in \"BrentOptimizer\""],
        "desc_hints": [
            "BrentMinimizerTest",
            "BrentOptimizerTest",
            "optimization.univariate",
            "changes.xml",
            "BrentOptimizer"
        ],
        "desc_text": [
            [
                "I apologize for having provided a buggy implementation of Brent's optimization algorithm (class \"BrentOptimizer\" in package \"optimization.univariate\").",
                []
            ],
            [
                "The unit tests didn't show that there was something wrong, although (from the \"changes.xml\" file) I discovered that, at the time, Luc had noticed something weird in the implementation's behaviour.",
                ["OB"]
            ],
            [
                "Comparing with an implementation in Python, I could figure out the fixes.",
                ["SR"]
            ],
            ["I'll modify \"BrentOptimizer\" and add a test.", ["OB"]],
            [
                "I also propose to change the name of the unit test class from \"BrentMinimizerTest\" to \"BrentOptimizerTest\".",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-157": {
        "code_elements": [
            "var x = { get 'x'() { return 1 } };",
            "var x = { get 1() { return 1 } };"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Numbers and quoted property names reject for get and set properties."
        ],
        "desc_hints": [],
        "desc_text": [
            ["- Use --language_in=ECMASCRIPT5.", ["OB"]],
            ["- Note that these definitions cause parse errors:", ["OB"]],
            ["var x = { get 'x'() { return 1 } };", "CODE"],
            ["var x = { get 1() { return 1 } };", "CODE"],
            ["ES5 allow these.", ["OB"]],
            ["The Rhino parser needs to be updated.", ["OB", "EB"]]
        ]
    },
    "Math-92": {
        "code_elements": [
            "MathUtils.binomialCoefficient(66,33));",
            "assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66,33));",
            "/**",
            "* Exact implementation using BigInteger and the explicit formula",
            "* (n, k) == ((k-1)*...*n) / (1*...*(n-k))",
            "*/",
            "public static long binomialCoefficient(int n, int k) {",
            "if (k == 0 || k == n)",
            "return 1;",
            "BigInteger result = BigInteger.ONE;",
            "for (int i = k + 1; i <= n; i++) {",
            "result = result.multiply(BigInteger.valueOf(i));",
            "}",
            "for (int i = 1; i <= n - k; i++) {",
            "result = result.divide(BigInteger.valueOf(i));",
            "}",
            "if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {",
            "throw new ArithmeticException(",
            "\"Binomial coefficient overflow: \" + n + \", \" + k);",
            "}",
            "return result.longValue();",
            "}",
            "assertEquals(binomialCoefficient(66,33), MathUtils.binomialCoefficient(66,33));"
        ],
        "stack_traces": [],
        "summary_hints": ["MathUtils.binomialCoefficient"],
        "summary_text": [
            "MathUtils.binomialCoefficient(n,k) fails for large results"
        ],
        "desc_hints": [
            "BigInteger.ONE",
            "result.divide",
            "result.compareTo",
            "assertEquals",
            "result.multiply",
            "binomialCoefficient",
            "Long.MAX_VALUE",
            "MathUtils.binomialCoefficient",
            "ArithmeticException",
            "BigInteger",
            "BigInteger.valueOf",
            "MathUtilsTest.java",
            "result.longValue"
        ],
        "desc_text": [
            [
                "Probably due to rounding errors, MathUtils.binomialCoefficient(n,k) fails for results near Long.MAX_VALUE.",
                ["OB"]
            ],
            [
                "The existence of failures can be demonstrated by testing the recursive property:",
                []
            ],
            [
                "assertEquals(MathUtils.binomialCoefficient(65,32) + MathUtils.binomialCoefficient(65,33),",
                []
            ],
            ["MathUtils.binomialCoefficient(66,33));", "CODE"],
            [
                "Or by directly using the (externally calculated and hopefully correct) expected value:",
                ["EB", "SR"]
            ],
            [
                "assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66,33));",
                "CODE"
            ],
            [
                "I suggest a nonrecursive test implementation along the lines of",
                []
            ],
            ["MathUtilsTest.java", []],
            ["/**", "CODE"],
            [
                "* Exact implementation using BigInteger and the explicit formula",
                "CODE"
            ],
            ["* (n, k) == ((k-1)*...*n) / (1*...*(n-k))", "CODE"],
            ["*/", "CODE"],
            ["public static long binomialCoefficient(int n, int k) {", "CODE"],
            ["if (k == 0 || k == n)", "CODE"],
            ["return 1;", "CODE"],
            ["BigInteger result = BigInteger.ONE;", "CODE"],
            ["for (int i = k + 1; i <= n; i++) {", "CODE"],
            ["result = result.multiply(BigInteger.valueOf(i));", "CODE"],
            ["}", "CODE"],
            ["for (int i = 1; i <= n - k; i++) {", "CODE"],
            ["result = result.divide(BigInteger.valueOf(i));", "CODE"],
            ["}", "CODE"],
            [
                "if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {",
                "CODE"
            ],
            ["throw new ArithmeticException(", "CODE"],
            ["\"Binomial coefficient overflow: \" + n + \", \" + k);", "CODE"],
            ["}", "CODE"],
            ["return result.longValue();", "CODE"],
            ["}", "CODE"],
            [
                "Which would allow you to test the expected values directly:",
                ["OB", "EB"]
            ],
            [
                "assertEquals(binomialCoefficient(66,33), MathUtils.binomialCoefficient(66,33));",
                "CODE"
            ]
        ]
    },
    "Math-12": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["GammaDistribution"],
        "summary_text": ["GammaDistribution cloning broken"],
        "desc_hints": [
            "GammaDistribution",
            "AbstractRealDistribution",
            "nextGaussian",
            "AbstractWell",
            "BitStreamGenerator",
            "BitsStreamGenerator"
        ],
        "desc_text": [
            [
                "Serializing a GammaDistribution and deserializing it, does not result in a cloned distribution that produces the same samples.",
                ["OB"]
            ],
            [
                "Cause: GammaDistribution inherits from AbstractRealDistribution, which implements Serializable.",
                ["OB"]
            ],
            [
                "AbstractRealDistribution has random, in which we have a Well19937c instance, which inherits from AbstractWell.",
                ["OB"]
            ],
            ["AbstractWell implements Serializable.", ["OB"]],
            [
                "AbstractWell inherits from BitsStreamGenerator, which is not Serializable, but does have a private field 'nextGaussian'.",
                ["OB"]
            ],
            [
                "Solution: Make BitStreamGenerator implement Serializable as well.",
                []
            ],
            ["This probably affects other distributions as well.", []]
        ]
    },
    "JacksonCore-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonParserSequence"],
        "summary_text": [
            "JsonParserSequence skips a token on a switched Parser."
        ],
        "desc_hints": [
            "JsonParserSequence.createFlattened",
            "nextToken",
            "JsonParserSequence"
        ],
        "desc_text": [
            [
                "Having 2 parsers concatenated with JsonParserSequence.createFlattened(parser1, parser2).",
                ["OB", "SR"]
            ],
            [
                "If the second parser is on a token that is not null and should not be skipped, the JsonParserSequence will still skip it.",
                ["OB", "EB"]
            ],
            [
                "JsonParserSequence's nextToken() calls nextToken() on the new delegate which may cause that we miss a token.",
                ["OB", "SR"]
            ],
            ["For more details : forum question", []],
            ["I'll open a PR for this.", ["OB", "SR"]],
            ["Thanks.", ["OB"]]
        ]
    },
    "JacksonXml-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ToXMLGenerator", "writeBinary", "InputStream"],
        "summary_text": [
            "Add support for writeBinary() with InputStream to ToXMLGenerator"
        ],
        "desc_hints": [
            "dataLength",
            "writeBinary",
            "GitHub",
            "ToXmlGenerator",
            "InputStream"
        ],
        "desc_text": [
            ["The regular UTF8JSONGenerator has a method:", []],
            [
                "writeBinary(Base64Variant b64variant, InputStream data, int dataLength)",
                []
            ],
            [
                "That supports reading an InputStream, converting the binary stream to Base64, and directly writing to the content output.",
                ["OB"]
            ],
            [
                "Thereby saving some memory by not having to load the entire stream's content into memory all at once.",
                ["OB", "SR"]
            ],
            ["However, ToXmlGenerator does not implement this method.", ["OB"]],
            [
                "It only implements a writeBinary overload that takes an already existing byte[].",
                []
            ],
            [
                "I first reported this issue on the jackson-user google group, and @cowtowncoder suggested I open an issue on GitHub.",
                ["OB", "SR"]
            ]
        ]
    },
    "Math-36": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BigFraction.doubleValue", "Double.NaN"],
        "summary_text": [
            "BigFraction.doubleValue() returns Double.NaN for large numerators or denominators"
        ],
        "desc_hints": [
            "doubleValue",
            "denominator.doubleValue",
            "BigInteger.doubleValue",
            "numerator.doubleValue",
            "Double.MAX_VALUE"
        ],
        "desc_text": [
            [
                "The current implementation of doubleValue() divides numerator.doubleValue() / denominator.doubleValue().",
                ["OB"]
            ],
            [
                "BigInteger.doubleValue() fails for any number greater than Double.MAX_VALUE.",
                ["OB"]
            ],
            [
                "So if the user has 308-digit numerator or denominator, the resulting quotient fails, even in cases where the result would be well inside Double's range.",
                ["OB"]
            ],
            [
                "I have a patch to fix it, if I can figure out how to attach it here I will.",
                []
            ]
        ]
    },
    "Closure-112": {
        "code_elements": [
            "/**",
            "* @constructor",
            "* @template CLASS",
            "*/",
            "var Class = function() {};",
            "/**",
            "* @param {function(CLASS):CLASS} a",
            "* @template T",
            "*/",
            "Class.prototype.foo = function(a) {",
            "return 'string';",
            "/** @param {number} a",
            "* @return {string} */",
            "var a = function(a) { return '' };",
            "new Class().foo(a);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Template types on methods incorrectly trigger inference of a template on the class if that template type is unknown"
        ],
        "desc_hints": ["Class.prototype.foo"],
        "desc_text": [
            ["See i.e.", ["OB"]],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @template CLASS", "CODE"],
            ["*/", "CODE"],
            ["var Class = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @param {function(CLASS):CLASS} a", "CODE"],
            ["* @template T", "CODE"],
            ["*/", "CODE"],
            ["Class.prototype.foo = function(a) {", "CODE"],
            ["return 'string';", "CODE"],
            ["};", []],
            ["/** @param {number} a", "CODE"],
            ["* @return {string} */", "CODE"],
            ["var a = function(a) { return '' };", "CODE"],
            ["new Class().foo(a);", "CODE"],
            ["The CLASS type is never specified.", ["OB"]],
            [
                "If the @template T line is removed from the foo method, the block compiles with but with the @annotation on the method, the compiler seems to try to infer CLASS from the usage and fails compilation.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-27": {
        "code_elements": [
            "IR.tryCatch(nodeTry, nodeCatch);",
            "function tt() {"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Error trying to build try-catch block (AST)"],
        "desc_hints": [
            "nodeCatch",
            "nodeTry",
            "java.lang.RuntimeException",
            "IR.name",
            "IR.tryCatch",
            "input.js",
            "IR.catchNode",
            "IR.number",
            "IR.var",
            "IR.block"
        ],
        "desc_text": [
            ["1.", ["OB", "SR"]],
            ["EXAMPLE", ["SR"]],
            ["Node nodeTry = IR.block(", []],
            ["IR.var(", []],
            ["IR.name(\"testing\"),", []],
            ["IR.number(11)", []],
            [")", []],
            [");", []],
            ["Node nodeCatch = IR.catchNode(", []],
            ["IR.name(\"blabla\"),", []],
            ["IR.block(", []],
            ["IR.var(", []],
            ["IR.name(\"testing\"),", []],
            ["IR.number(22)", []],
            [")", []],
            [")", []],
            [");", []],
            ["IR.tryCatch(nodeTry, nodeCatch);", "CODE"],
            ["2.", ["OB", "SR"]],
            ["THROWS ERROR", ["OB"]],
            [
                "Exception in thread \"main\" java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["null", []],
            ["Node(FUNCTION tt): input.js:2:4", []],
            ["function tt() {", "CODE"],
            ["Parent(BLOCK): input.js:1:4", []],
            ["try {", []],
            ["3.", ["OB", "SR"]],
            ["SOLUTION", []],
            [
                "IR.block is verifing the catch node is a statement which it isnt.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-72": {
        "code_elements": [
            "Jsoup.parse(new URL(\"https://gist.githubusercontent.com/valodzka/91ed27043628e9023009e503d41f1aad/raw/a15f68671e6f0517e48fdac812983b85fea27c16/test.html\"), 10_000);"
        ],
        "stack_traces": [],
        "summary_hints": ["StringIndexOutOfBoundsException"],
        "summary_text": ["StringIndexOutOfBoundsException as of jsoup 1.11.1"],
        "desc_hints": [
            "Jsoup.parse",
            "test.html",
            "gist.githubusercontent.com"
        ],
        "desc_text": [
            ["Example:", ["OB", "SR"]],
            [
                "Jsoup.parse(new URL(\"https://gist.githubusercontent.com/valodzka/91ed27043628e9023009e503d41f1aad/raw/a15f68671e6f0517e48fdac812983b85fea27c16/test.html\"), 10_000);",
                "CODE"
            ]
        ]
    },
    "Csv-10": {
        "code_elements": [
            ".print(Files.newBufferedWriter(Paths.get(\"data.csv\")));",
            "csvPrinter.printRecord(42);",
            "csvPrinter.close();"
        ],
        "stack_traces": [],
        "summary_hints": ["withHeader"],
        "summary_text": ["CSVFormat#withHeader doesn't work with CSVPrinter"],
        "desc_hints": [
            "CSVFormat.TDF",
            "csvPrinter.printRecord",
            "Paths.get",
            "Files.newBufferedWriter",
            "data.csv",
            "withHeader",
            "csvPrinter.close",
            "csvPrinter"
        ],
        "desc_text": [
            [
                "In the current version CSVFormat#withHeader is only used by CSVParser.",
                ["OB"]
            ],
            ["It would be nice if CSVPrinter also supported it.", ["EB"]],
            ["Ideally, the following line of code", []],
            ["CSVPrinter csvPrinter", []],
            ["= CSVFormat.TDF", []],
            [".withHeader(\"x\")", ["OB"]],
            [
                ".print(Files.newBufferedWriter(Paths.get(\"data.csv\")));",
                "CODE"
            ],
            ["csvPrinter.printRecord(42);", "CODE"],
            ["csvPrinter.close();", "CODE"],
            ["should produce", ["OB", "EB"]],
            ["x", []],
            ["42", []],
            [
                "If you're alright with the idea of automatically inserting headers, I can attach a patch.",
                ["OB"]
            ]
        ]
    },
    "Closure-73": {
        "code_elements": ["alert(\"\u007f\");"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Codepoint U+007f appears raw in output"],
        "desc_hints": [
            "compiler.appspot.com",
            "index.htm",
            "www.fileformat.info"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Open http://closure-compiler.appspot.com/home in your browser",
                ["OB", "SR"]
            ],
            ["2.", ["OB", "SR"]],
            ["Enter the source code: alert('\\x7f')", ["SR"]],
            ["3.", ["OB", "SR"]],
            ["Hit the \"Compile\" button.", ["OB", "SR"]],
            ["What is the expected output?", "QUERY"],
            ["alert(\"\\x7f\")", []],
            ["What do you see instead?", "QUERY"],
            ["alert(\"\u007f\");", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["The version live on 11 April 2011.", ["OB", "EB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Codepoint U+007f is a delete control character and is the only non-printable ASCII codepoint that is not <= U+0020.",
                ["OB"]
            ],
            ["http://www.fileformat.info/info/unicode/char/7f/index.htm", []],
            [
                "It should probably not appear raw in emitted source code because, it can confuse encoders.",
                ["OB", "EB"]
            ]
        ]
    },
    "Lang-32": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ThreadLocals", "HashCodeBuilder", "ToStringStyle"],
        "summary_text": [
            "Use of ThreadLocals in ToStringStyle and HashCodeBuilder trigger memory leaks in container environments"
        ],
        "desc_hints": [
            "org.apache.commons.lang3.builder.ToStringStyle",
            "markmail.org"
        ],
        "desc_text": [
            [
                "The thread local in org.apache.commons.lang3.builder.ToStringStyle is created but never removed and no API is provided to remove it.",
                ["OB"]
            ],
            [
                "If a webapp's use of LANG triggers the loading of this class, a reference chain will be created that will cause a memory leak on web application reload.",
                ["OB", "SR"]
            ],
            [
                "See http://markmail.org/thread/uetw2fdrsqgbh2cv for more info.",
                ["OB"]
            ]
        ]
    },
    "Gson-2": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Fix type hierarchy adapters to do a runtime check."],
        "desc_hints": [],
        "desc_text": [
            [
                "Otherwise if we have a type hierarchy adapter for Vehicle, and we",
                []
            ],
            [
                "attempt to decode a JSON string as a Car, we get the right exception",
                ["OB"]
            ],
            ["if the JSON string is actually decoded as a Truck.", ["OB"]]
        ]
    },
    "Closure-124": {
        "code_elements": [
            "\"var foreignObject = gfx.parentNode.parentNode;",
            "The command line converts it into: var b=a=a.parentNode.parentNode;",
            "// ==ClosureCompiler==",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @output_file_name default.js"
        ],
        "stack_traces": [],
        "summary_hints": ["RestAPI"],
        "summary_text": ["Different output from RestAPI and command line jar"],
        "desc_hints": [
            "compiler.appspot.com",
            "foreignObject",
            "parentContainer",
            "ClosureCompiler",
            "compiler.jar",
            "parentNode.parentNode",
            "gfx.parentNode.parentNode",
            "foreignObject.parentNode.parentNode",
            "appendChild",
            "default.js",
            "test.js"
        ],
        "desc_text": [
            [
                "When I compile using the jar file from the command line I get a result that is not correct.",
                ["OB", "SR"]
            ],
            [
                "However, when I test it via the REST API or the Web UI I get a correct output.",
                ["OB"]
            ],
            [
                "I've attached a file with the code that we are compiling.",
                ["SR"]
            ],
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile the attached file with \"java -jar compiler.jar --js test.js\"",
                ["SR"]
            ],
            ["2.", ["OB", "SR"]],
            [
                "Compile the content of the attached file on http://closure-compiler.appspot.com/home",
                ["OB", "SR"]
            ],
            ["3.", ["OB", "SR"]],
            [
                "Compare the output, note how the following part is converted in the two cases:",
                ["OB"]
            ],
            ["\"var foreignObject = gfx.parentNode.parentNode;", "CODE"],
            [
                "var parentContainer = foreignObject.parentNode.parentNode;\"",
                []
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "The Web UI converts the lines into: if(b){if(a=b.parentNode.parentNode,b=a.parentNode.parentNode,null!==b)",
                []
            ],
            [
                "The command line converts it into: var b=a=a.parentNode.parentNode;",
                "CODE"
            ],
            [
                "The Web UI results in correct code, the other results in code that tries to do \"c.appendChild(b)\" with c = b (c=a=a.parentNode.parentNode)",
                ["OB", "SR"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["compiler.jar: v20130411-90-g4e19b4e", []],
            ["Mac OSX 10.8.3", []],
            ["Java: java 1.6.0_45", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "We are also using the compiler form within our java code, with the same result.",
                ["OB"]
            ],
            ["Web UI was called with:", ["OB"]],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", []]
        ]
    },
    "JacksonCore-1": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BigDecimal", "NullPointerException"],
        "summary_text": [
            "NullPointerException thrown when NaN read as BigDecimal"
        ],
        "desc_hints": [
            "_parseNumericValue",
            "getDecimalNumber",
            "com.fasterxml.jackson.core.base.ParserBase.getDecimalValue",
            "com.fasterxml.jackson.core.base.ParserBase",
            "Double.NaN",
            "TextBuffer.java",
            "ParserBase.java",
            "NullPointerException",
            "github.com",
            "NumberFormatException",
            "JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS",
            "FasterXML",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal",
            "BigDecimal",
            "_parseSlowFloatValue"
        ],
        "desc_text": [
            [
                "(moved from https://github.com/FasterXML/jackson/issues/4 reported by @jroper)",
                []
            ],
            [
                "If JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS is turned on, then when NaN is encountered, it will be reported as being a float number token.",
                ["OB", "SR"]
            ],
            ["Subsequently invoking getDecimalNumber throws an NPE:", ["OB"]],
            ["NullPointerException: null (TextBuffer.java:394)", []],
            [
                "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal(TextBuffer.java:394)",
                []
            ],
            [
                "com.fasterxml.jackson.core.base.ParserBase._parseSlowFloatValue(ParserBase.java:799)",
                []
            ],
            [
                "com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(ParserBase.java:781)",
                []
            ],
            [
                "com.fasterxml.jackson.core.base.ParserBase.getDecimalValue(ParserBase.java:711)",
                []
            ],
            [
                "By the way, the expected behaviour here I would say would be to throw NumberFormatException, this is what is thrown by the BigDecimal constructor when you pass in Double.NaN or any of the infinity double values.",
                ["OB"]
            ],
            [
                "I'm not sure, but maybe this NPE is also an issue for integers too, and the expected behaviour for them would also be to throw NumberFormatException.",
                ["OB"]
            ]
        ]
    },
    "Closure-141": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "The side effects of function1||function2 are not calculated"
        ],
        "desc_hints": ["goog.now", "Math.sin", "Math.cos"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile (Math.sin||Math.cos)(0)", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Empty output.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["The closure-compiler web service at r114.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "As a result of this issue goog.now() is considered to have side effects.",
                ["OB"]
            ]
        ]
    },
    "Compress-37": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NegativeArraySizeException"],
        "summary_text": [
            "Parsing PAX headers fails with NegativeArraySizeException"
        ],
        "desc_hints": [
            "TarArchiveInputStream.parsePaxHeaders",
            "NegativeArraySizeException"
        ],
        "desc_text": [
            [
                "The TarArchiveInputStream.parsePaxHeaders method fails with a NegativeArraySizeException when there is an empty line at the end of the headers.",
                ["OB", "SR"]
            ],
            [
                "The inner loop starts reading the length, but it gets a newline (10) and ends up subtracting '0' (48) from it; the result is a negative length that blows up an attempt to allocate the rest array.",
                ["OB"]
            ],
            [
                "I would say that a check to see if ch is less the '0' and break the loop if it is.",
                ["OB"]
            ],
            [
                "I used npm pack aws-sdk@2.2.16 to generate a tarball with this issue.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-14": {
        "code_elements": ["/**", "* @return {boolean}", "*/", "a = 5;"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["bogus 'missing return' warning"],
        "desc_hints": [],
        "desc_text": [
            [
                "The following sample code compiles with \"Missing return statement.",
                ["OB", "SR"]
            ],
            ["Function expected to return boolean.\" warning:", ["OB", "EB"]],
            ["/**", "CODE"],
            ["* @return {boolean}", "CODE"],
            ["*/", "CODE"],
            ["function fb(a)", []],
            ["{", []],
            ["try", []],
            ["{", []],
            ["alert(a);    // Some method, which can throw", []],
            ["if (a > 0)", []],
            ["return false;", []],
            ["}", []],
            ["finally", []],
            ["{", []],
            ["a = 5;", "CODE"],
            ["}", []],
            ["return true;", []],
            ["}", []]
        ]
    },
    "Jsoup-88": {
        "code_elements": [
            "Document doc = Jsoup.parse(\"<div hidden>\");",
            "Attributes attributes = doc.body().child(0).attributes();",
            "attributes.get(\"hidden\")));",
            "Attribute first = attributes.iterator().next();",
            "first.getKey(), first.getValue()));"
        ],
        "stack_traces": [],
        "summary_hints": ["Attribute.getValue"],
        "summary_text": [
            "Attribute.getValue() broken for empty attributes since 1.11.1"
        ],
        "desc_hints": [
            "Jsoup.parse",
            "String.format",
            "doc.body",
            "attributes.iterator",
            "first.getValue",
            "attributes.get",
            "System.out.println",
            "first.getKey"
        ],
        "desc_text": [
            ["Document doc = Jsoup.parse(\"<div hidden>\");", "CODE"],
            [
                "Attributes attributes = doc.body().child(0).attributes();",
                "CODE"
            ],
            [
                "System.out.println(String.format(\"Attr: '%s', value: '%s'\", \"hidden\",",
                ["OB"]
            ],
            ["attributes.get(\"hidden\")));", "CODE"],
            ["Attribute first = attributes.iterator().next();", "CODE"],
            [
                "System.out.println(String.format(\"Attr: '%s', value: '%s'\",",
                ["OB"]
            ],
            ["first.getKey(), first.getValue()));", "CODE"],
            ["Expected output, as in 1.10.x", ["EB"]],
            ["Attr: 'hidden', value: ''", []],
            ["Attr: 'hidden', value: ''", []],
            ["Output in 1.11.1-1.11.3:", ["OB"]],
            ["Attr: 'hidden', value: ''", []],
            ["Attr: 'hidden', value: 'null'", []]
        ]
    },
    "Math-6": {
        "code_elements": [
            "public void testGetIterations() {",
            "// setup",
            "LevenbergMarquardtOptimizer otim = new LevenbergMarquardtOptimizer();",
            "// action",
            "otim.optimize(new MaxEval(100), new Target(new double[] { 1 }),",
            "new Weight(new double[] { 1 }), new InitialGuess(",
            "new double[] { 3 }), new ModelFunction(",
            "new MultivariateVectorFunction() {",
            "@Override",
            "public double[] value(double[] point)",
            "throws IllegalArgumentException {",
            "return new double[] { FastMath.pow(point[0], 4) };",
            "}",
            "}), new ModelFunctionJacobian(",
            "new MultivariateMatrixFunction() {",
            "@Override",
            "public double[][] value(double[] point)",
            "throws IllegalArgumentException {",
            "return new double[][] { { 0.25 * FastMath.pow(",
            "point[0], 3) } };",
            "}",
            "}));",
            "// verify",
            "assertThat(otim.getEvaluations(), greaterThan(1));",
            "assertThat(otim.getIterations(), greaterThan(1));",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["LevenbergMarquardtOptimizer"],
        "summary_text": ["LevenbergMarquardtOptimizer reports 0 iterations"],
        "desc_hints": [
            "testGetIterations",
            "FastMath.pow",
            "MultivariateVectorFunction",
            "MaxEval",
            "otim.optimize",
            "LevenbergMarquardtOptimizer",
            "otim.getEvaluations",
            "IllegalArgumentException",
            "LevenbergMarquardtOptimizer.getIterations",
            "BaseOptimizer.incrementEvaluationsCount",
            "MultivariateMatrixFunction",
            "ModelFunction",
            "assertThat",
            "greaterThan",
            "ModelFunctionJacobian",
            "otim.getIterations",
            "SimplexOptimizer",
            "InitialGuess"
        ],
        "desc_text": [
            [
                "The method LevenbergMarquardtOptimizer.getIterations() does not report the correct number of iterations; It always returns 0.",
                ["OB"]
            ],
            [
                "A quick look at the code shows that only SimplexOptimizer calls BaseOptimizer.incrementEvaluationsCount()",
                []
            ],
            ["I've put a test case below.", ["SR"]],
            [
                "Notice how the evaluations count is correctly incremented, but the iterations count is not.",
                ["OB"]
            ],
            ["@Test", []],
            ["public void testGetIterations() {", "CODE"],
            ["// setup", "CODE"],
            [
                "LevenbergMarquardtOptimizer otim = new LevenbergMarquardtOptimizer();",
                "CODE"
            ],
            ["// action", "CODE"],
            [
                "otim.optimize(new MaxEval(100), new Target(new double[] { 1 }),",
                "CODE"
            ],
            ["new Weight(new double[] { 1 }), new InitialGuess(", "CODE"],
            ["new double[] { 3 }), new ModelFunction(", "CODE"],
            ["new MultivariateVectorFunction() {", "CODE"],
            ["@Override", "CODE"],
            ["public double[] value(double[] point)", "CODE"],
            ["throws IllegalArgumentException {", "CODE"],
            ["return new double[] { FastMath.pow(point[0], 4) };", "CODE"],
            ["}", "CODE"],
            ["}), new ModelFunctionJacobian(", "CODE"],
            ["new MultivariateMatrixFunction() {", "CODE"],
            ["@Override", "CODE"],
            ["public double[][] value(double[] point)", "CODE"],
            ["throws IllegalArgumentException {", "CODE"],
            ["return new double[][] { { 0.25 * FastMath.pow(", "CODE"],
            ["point[0], 3) } };", "CODE"],
            ["}", "CODE"],
            ["}));", "CODE"],
            ["// verify", "CODE"],
            ["assertThat(otim.getEvaluations(), greaterThan(1));", "CODE"],
            ["assertThat(otim.getIterations(), greaterThan(1));", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JxPath-8": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Comparing with NaN is incorrect"],
        "desc_hints": [],
        "desc_text": [["'NaN' > 'NaN' is true, but should be FALSE", ["EB"]]]
    },
    "Math-87": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Basic variable is not found correctly in simplex tableau"
        ],
        "desc_hints": ["SimplexTableau"],
        "desc_text": [
            [
                "The last patch to SimplexTableau caused an automated test suite I'm running at work to go down a new code path and uncover what is hopefully the last bug remaining in the Simplex code.",
                []
            ],
            [
                "SimplexTableau was assuming an entry in the tableau had to be nonzero to indicate a basic variable, which is incorrect - the entry should have a value equal to 1.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "JxPath-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Comparing with NaN is incorrect"],
        "desc_hints": [],
        "desc_text": [["'NaN' > 'NaN' is true, but should be FALSE", ["EB"]]]
    },
    "Compress-28": {
        "code_elements": [
            "public void testCorruptedBzip2() throws IOException {",
            "String archivePath = PathUtil.join(testdataDir, \"test.tar.bz2\");",
            "TarArchiveInputStream input = null;",
            "input = new TarArchiveInputStream(new BZip2CompressorInputStream(",
            "GoogleFile.SYSTEM.newInputStream(archivePath), true));",
            "ArchiveEntry nextMatchedEntry = input.getNextEntry();",
            "while (nextMatchedEntry != null)",
            "{",
            "logger.infofmt(\"Extracting %s\", nextMatchedEntry.getName());",
            "String outputPath = PathUtil.join(\"/tmp/\", nextMatchedEntry.getName());",
            "OutputStream out = new FileOutputStream(outputPath);",
            "ByteStreams.copy(input, out);",
            "out.close();",
            "nextMatchedEntry = input.getNextEntry();",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TarArchiveInputStream"],
        "summary_text": [
            "TarArchiveInputStream silently finished when unexpected EOF occured"
        ],
        "desc_hints": [
            "test.tar.bz2",
            "out.close",
            "BZip2CompressorInputStream",
            "outputPath",
            "GoogleFile.SYSTEM.newInputStream",
            "PathUtil.join",
            "TarArchiveInputStream",
            "nextMatchedEntry.getName",
            "ArchiveEntry",
            "OutputStream",
            "archivePath",
            "FileOutputStream",
            "testCorruptedBzip2",
            "input.getNextEntry",
            "logger.infofmt",
            "ByteStreams.copy",
            "nextMatchedEntry",
            "testdataDir"
        ],
        "desc_text": [
            [
                "I just found the following test case didn't raise an IOException as it used to be for a tar trimmed on purpose",
                ["OB", "SR"]
            ],
            ["@Test", []],
            ["public void testCorruptedBzip2() throws IOException {", "CODE"],
            [
                "String archivePath = PathUtil.join(testdataDir, \"test.tar.bz2\");",
                "CODE"
            ],
            ["TarArchiveInputStream input = null;", "CODE"],
            [
                "input = new TarArchiveInputStream(new BZip2CompressorInputStream(",
                "CODE"
            ],
            ["GoogleFile.SYSTEM.newInputStream(archivePath), true));", "CODE"],
            ["ArchiveEntry nextMatchedEntry = input.getNextEntry();", "CODE"],
            ["while (nextMatchedEntry != null)", "CODE"],
            ["{", "CODE"],
            [
                "logger.infofmt(\"Extracting %s\", nextMatchedEntry.getName());",
                "CODE"
            ],
            [
                "String outputPath = PathUtil.join(\"/tmp/\", nextMatchedEntry.getName());",
                "CODE"
            ],
            ["OutputStream out = new FileOutputStream(outputPath);", "CODE"],
            ["ByteStreams.copy(input, out);", "CODE"],
            ["out.close();", "CODE"],
            ["nextMatchedEntry = input.getNextEntry();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Jsoup-74": {
        "code_elements": [
            "public void testIfShyIsStripped(){",
            "String htmlwithSHY = \"<html><body>quite&shy;a&shy;long&shy;word</body></html>\";",
            "Document parse = Jsoup.parse(htmlwithSHY);",
            "String text = parse.body().text();",
            "assertEquals(\"quitealongword\", text);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Node.text"],
        "summary_text": ["&shy; renders as '-' when Node.text() is called"],
        "desc_hints": [
            "assertEquals",
            "parse.body",
            "testIfShyIsStripped",
            "htmlwithSHY",
            "Jsoup.parse"
        ],
        "desc_text": [
            ["Consider the following JUnit4 test", ["OB", "SR"]],
            ["@Test", []],
            ["public void testIfShyIsStripped(){", "CODE"],
            [
                "String htmlwithSHY = \"<html><body>quite&shy;a&shy;long&shy;word</body></html>\";",
                "CODE"
            ],
            ["Document parse = Jsoup.parse(htmlwithSHY);", "CODE"],
            ["String text = parse.body().text();", "CODE"],
            ["assertEquals(\"quitealongword\", text);", "CODE"],
            ["}", "CODE"],
            [
                "This test fails as text is parsed as quite-a-long-word rather then it's actual textual representation that would have been quitealongword in any browser.",
                ["OB"]
            ],
            [
                "Perhaps this is working as intended, but it would be interesting to understand the reasoning behind it.",
                []
            ]
        ]
    },
    "Mockito-29": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Fixes #228: fixed a verify() call example in @Captor javadoc"
        ],
        "desc_hints": [],
        "desc_text": [["Thanks for the fix :)", []]]
    },
    "Collections-28": {
        "code_elements": [
            "public class PatriciaTrieTest {",
            "private Trie<String, Integer> trie;",
            "@Before",
            "public void setUp() {",
            "trie = new PatriciaTrie<Integer>();",
            "trie.put(\"Anna\", 1);",
            "trie.put(\"Anael\", 2);",
            "trie.put(\"Analu\", 3);",
            "trie.put(\"Andreas\", 4);",
            "trie.put(\"Andrea\", 5);",
            "trie.put(\"Andres\", 6);",
            "trie.put(\"Anatole\", 7);",
            "}",
            "@Test",
            "public void testPrefixMapClear() {",
            "SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");",
            "assertEquals(new HashSet<>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());",
            "assertEquals(Arrays.asList(5, 4, 6), new ArrayList<>(prefixMap.values()));",
            "prefixMap.clear();",
            "assertTrue(prefixMap.keySet().isEmpty());",
            "assertTrue(prefixMap.values().isEmpty());",
            "assertEquals(new HashSet<>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());",
            "assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<>(trie.values()));",
            "}",
            "@Test",
            "public void testPrefixMapClearUsingRemove() {",
            "SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");",
            "assertEquals(new HashSet<>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());",
            "assertEquals(Arrays.asList(5, 4, 6), new ArrayList<>(prefixMap.values()));",
            "Set<String> keys = new HashSet<String>(prefixMap.keySet());",
            "for (final String key : keys) {",
            "prefixMap.remove(key);",
            "}",
            "assertTrue(prefixMap.keySet().isEmpty());",
            "assertTrue(prefixMap.values().isEmpty());",
            "assertEquals(new HashSet<>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());",
            "assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<>(trie.values()));",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove(AbstractPatriciaTrie.java:2370)",
            "at java.util.AbstractCollection.clear(AbstractCollection.java:432)",
            "at java.util.AbstractMap.clear(AbstractMap.java:288)",
            "at PatriciaTrieTest.testPrefixMapClear(PatriciaTrieTest.java:39)"
        ],
        "summary_hints": ["prefixMap", "NullPointerException", "PatriciaTrie"],
        "summary_text": [
            "PatriciaTrie prefixMap clear throws NullPointerException"
        ],
        "desc_hints": [
            "trie.prefixMap",
            "assertEquals",
            "prefixMap.keySet",
            "EntryIterator.remove",
            "java.util.AbstractMap.clear",
            "AbstractPatriciaTrie.java",
            "PatriciaTrie",
            "SortedMap",
            "prefixMap",
            "PatriciaTrieTest.java",
            "HashSet",
            "testPrefixMapClearUsingRemove",
            "ArrayList",
            "trie.keySet",
            "prefixMap.remove",
            "AbstractCollection.java",
            "PatriciaTrieTest.testPrefixMapClear",
            "testPrefixMapClear",
            "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
            "PatriciaTrieTest",
            "NullPointerException",
            "assertTrue",
            "java.util.AbstractCollection.clear",
            "trie.values",
            "setUp",
            "trie.put",
            "isEmpty",
            "prefixMap.clear",
            "java.lang.NullPointerException",
            "prefixMap.values",
            "Arrays.asList",
            "PrefixRangeEntrySet",
            "AbstractMap.java"
        ],
        "desc_text": [
            [
                "Clearing all entries of a prefixMap returned by PatriciaTrie using the clear method throws a NullPointerException.",
                ["OB"]
            ],
            [
                "The workaround of removing each entry using the remove method seems to work.",
                ["OB"]
            ],
            ["Here are the test cases for the bug and the workaround:", ["SR"]],
            ["public class PatriciaTrieTest {", "CODE"],
            ["private Trie<String, Integer> trie;", "CODE"],
            ["@Before", "CODE"],
            ["public void setUp() {", "CODE"],
            ["trie = new PatriciaTrie<Integer>();", "CODE"],
            ["trie.put(\"Anna\", 1);", "CODE"],
            ["trie.put(\"Anael\", 2);", "CODE"],
            ["trie.put(\"Analu\", 3);", "CODE"],
            ["trie.put(\"Andreas\", 4);", "CODE"],
            ["trie.put(\"Andrea\", 5);", "CODE"],
            ["trie.put(\"Andres\", 6);", "CODE"],
            ["trie.put(\"Anatole\", 7);", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void testPrefixMapClear() {", "CODE"],
            [
                "SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");",
                "CODE"
            ],
            [
                "assertEquals(new HashSet<>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());",
                "CODE"
            ],
            [
                "assertEquals(Arrays.asList(5, 4, 6), new ArrayList<>(prefixMap.values()));",
                "CODE"
            ],
            ["prefixMap.clear();", "CODE"],
            ["assertTrue(prefixMap.keySet().isEmpty());", "CODE"],
            ["assertTrue(prefixMap.values().isEmpty());", "CODE"],
            [
                "assertEquals(new HashSet<>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());",
                "CODE"
            ],
            [
                "assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<>(trie.values()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void testPrefixMapClearUsingRemove() {", "CODE"],
            [
                "SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");",
                "CODE"
            ],
            [
                "assertEquals(new HashSet<>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());",
                "CODE"
            ],
            [
                "assertEquals(Arrays.asList(5, 4, 6), new ArrayList<>(prefixMap.values()));",
                "CODE"
            ],
            [
                "Set<String> keys = new HashSet<String>(prefixMap.keySet());",
                "CODE"
            ],
            ["for (final String key : keys) {", "CODE"],
            ["prefixMap.remove(key);", "CODE"],
            ["}", "CODE"],
            ["assertTrue(prefixMap.keySet().isEmpty());", "CODE"],
            ["assertTrue(prefixMap.values().isEmpty());", "CODE"],
            [
                "assertEquals(new HashSet<>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());",
                "CODE"
            ],
            [
                "assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<>(trie.values()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "The stacktrace of the NullPointerException thrown by the testPrefixMapClear test case is:",
                ["SR"]
            ],
            ["java.lang.NullPointerException", []],
            [
                "at org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove(AbstractPatriciaTrie.java:2370)",
                "STACK_TRACE"
            ],
            [
                "at java.util.AbstractCollection.clear(AbstractCollection.java:432)",
                "STACK_TRACE"
            ],
            [
                "at java.util.AbstractMap.clear(AbstractMap.java:288)",
                "STACK_TRACE"
            ],
            [
                "at PatriciaTrieTest.testPrefixMapClear(PatriciaTrieTest.java:39)",
                "STACK_TRACE"
            ]
        ]
    },
    "Jsoup-34": {
        "code_elements": ["// ]]"],
        "stack_traces": [
            "at org.jsoup.parser.CharacterReader.nextIndexOf(CharacterReader.java:92)",
            "at org.jsoup.parser.CharacterReader.consumeTo(CharacterReader.java:112)",
            "at org.jsoup.parser.TokeniserState$67.read(TokeniserState.java:1789)",
            "at org.jsoup.parser.Tokeniser.read(Tokeniser.java:42)",
            "at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:47)",
            "at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:41)",
            "at org.jsoup.parser.HtmlTreeBuilder.parse(HtmlTreeBuilder.java:37)",
            "at org.jsoup.parser.Parser.parse(Parser.java:90)",
            "at org.jsoup.Jsoup.parse(Jsoup.java:58)"
        ],
        "summary_hints": [],
        "summary_text": ["Parser error on commented CDATA"],
        "desc_hints": [
            "org.jsoup.parser.Tokeniser.read",
            "org.jsoup.parser.CharacterReader.nextIndexOf",
            "HtmlTreeBuilder.java",
            "CharacterReader.java",
            "Parser.java",
            "org.jsoup.Jsoup.parse",
            "org.jsoup.parser.Parser.parse",
            "TreeBuilder.java",
            "org.jsoup.parser.CharacterReader.consumeTo",
            "org.jsoup.parser.HtmlTreeBuilder.parse",
            "Jsoup.java",
            "org.jsoup.parser.TokeniserState",
            "java.lang.ArrayIndexOutOfBoundsException",
            "gist.github.com",
            "org.jsoup.parser.TreeBuilder.runParser",
            "TokeniserState.java",
            "Tokeniser.java",
            "org.jsoup.parser.TreeBuilder.parse"
        ],
        "desc_text": [
            [
                "Jsoup gives the following error when trying to parse this HTML: https://gist.github.com/felipehummel/6122799",
                ["OB", "SR"]
            ],
            ["java.lang.ArrayIndexOutOfBoundsException: 8666", []],
            [
                "at org.jsoup.parser.CharacterReader.nextIndexOf(CharacterReader.java:92)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.CharacterReader.consumeTo(CharacterReader.java:112)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.TokeniserState$67.read(TokeniserState.java:1789)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.Tokeniser.read(Tokeniser.java:42)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:41)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.HtmlTreeBuilder.parse(HtmlTreeBuilder.java:37)",
                "STACK_TRACE"
            ],
            ["at org.jsoup.parser.Parser.parse(Parser.java:90)", "STACK_TRACE"],
            ["at org.jsoup.Jsoup.parse(Jsoup.java:58)", "STACK_TRACE"],
            ["...", []],
            ["The HTML is from a entry in a RSS feed.", ["OB"]],
            ["If I remove the line:", ["OB"]],
            ["// ]]", "CODE"],
            ["or just the", []],
            ["]]", []],
            ["Then it parses the HTML nicely.", ["OB"]],
            [
                "Does this syntax error should really throw an exception or it should be silently ignored?",
                ["EB"]
            ]
        ]
    },
    "Closure-47": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Original source line numbers are one-based in source maps."
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "Generated source line/column numbers and original column numbers are zero-based.",
                ["OB"]
            ],
            [
                "Original source line numbers should be zero based as well.",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-47": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Jsoup not retaining &lt in data attributes"],
        "desc_hints": ["notes.io"],
        "desc_text": [
            [
                "Jsoup not retaining &lt in data attributes value if there is <",
                ["OB"]
            ],
            [
                "In the example below &lt; is converted to < in the output after parsing.",
                ["OB", "SR"]
            ],
            ["Please let me know how to retain it.", []],
            ["Example:", ["OB", "SR"]],
            ["http://notes.io/Gww", []],
            ["@uggedal", []],
            ["@krystiangor", []],
            ["@tc", []],
            ["@bbeck", []]
        ]
    },
    "JacksonDatabind-88": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Missing type checks when using polymorphic type ids"],
        "desc_hints": ["EnumMap", "JavaType"],
        "desc_text": [
            ["(report by Lukes Euler)", []],
            [
                "JavaType supports limited amount of generic typing for textual representation, originally just to support typing needed for EnumMap (I think).",
                []
            ],
            [
                "Based on some reports, it appears that some of type compatibility checks are not performed in those cases; if so, they should be made since there is potential for abuse.",
                ["EB"]
            ],
            [
                "The problem here although actual type assignment will fail later on, ability to trigger some of processing (instantiation of incompatible classes, perhaps assingnment of properties) may itself be vulnerability.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-98": {
        "code_elements": [],
        "stack_traces": [
            "Caused by: java.lang.IllegalArgumentException: argument type mismatch",
            "at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
            "at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)",
            "at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)",
            "at java.lang.reflect.Constructor.newInstance(Constructor.java:423)",
            "at com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call(AnnotatedConstructor.java:124)",
            "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:274)",
            "... 15 more"
        ],
        "summary_hints": [],
        "summary_text": [
            "External property polymorphic deserialization does not work with enums"
        ],
        "desc_hints": [
            "enum.Invite",
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "com.intellij.rt.execution.application.AppMain.main",
            "StdValueInstantiator.java",
            "enum.Reproduction_KindEnumKt.main",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "NativeMethodAccessorImpl.java",
            "com.fasterxml.jackson.databind.DeserializationContext.instantiationException",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith",
            "com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith",
            "Constructor.java",
            "sun.reflect.NativeConstructorAccessorImpl.newInstance0",
            "BeanDeserializer.java",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "PropertyBasedCreator.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject",
            "AppMain.java",
            "DelegatingConstructorAccessorImpl.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "java.lang.reflect.Constructor.newInstance",
            "java.lang.IllegalArgumentException",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId",
            "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build",
            "JsonMappingException.java",
            "_readMapAndClose",
            "ExternalTypeHandler.java",
            "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.rewrapCtorProblem",
            "github.com",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "KindEnum.kt",
            "sun.reflect.DelegatingConstructorAccessorImpl.newInstance",
            "KotlinValueInstantiator.kt",
            "com.fasterxml.jackson.databind.JsonMappingException.from",
            "sun.reflect.NativeConstructorAccessorImpl.newInstance",
            "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call",
            "DeserializationContext.java",
            "DelegatingMethodAccessorImpl.java",
            "java.lang.reflect.Method.invoke",
            "ObjectMapper.java",
            "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.complete",
            "NativeConstructorAccessorImpl.java",
            "Method.java",
            "AnnotatedConstructor.java",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapAsJsonMappingException"
        ],
        "desc_text": [
            ["versions: Jackson 2.8.1, Jackson-module-kotlin 2.8.1", []],
            [
                "Attempting to deserialize a class using external_property.",
                ["OB", "SR"]
            ],
            [
                "In my case, the property is an Enum type with values matching the type name.",
                ["OB", "SR"]
            ],
            [
                "Now that issue #999 is fixed, I thought this would work, but now I'm getting a different error:",
                []
            ],
            [
                "Exception in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of enum.Invite, problem: argument type mismatch",
                ["OB"]
            ],
            ["at [Source: {", []],
            ["\"kind\": \"CONTACT\",", []],
            ["\"to\": {", []],
            ["\"name\": \"Foo\"", []],
            ["}", []],
            ["}; line: 6, column: 1]", ["SR"]],
            [
                "at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:268)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1405)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapAsJsonMappingException(StdValueInstantiator.java:468)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.rewrapCtorProblem(StdValueInstantiator.java:487)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:276)",
                []
            ],
            [
                "at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:30)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:135)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.complete(ExternalTypeHandler.java:225)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(BeanDeserializer.java:937)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(BeanDeserializer.java:792)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:312)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3789)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2852)",
                []
            ],
            [
                "at enum.Reproduction_KindEnumKt.main(Reproduction-KindEnum.kt:49)",
                []
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                []
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                []
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                []
            ],
            ["at java.lang.reflect.Method.invoke(Method.java:498)", []],
            [
                "at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)",
                []
            ],
            [
                "Caused by: java.lang.IllegalArgumentException: argument type mismatch",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Constructor.newInstance(Constructor.java:423)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call(AnnotatedConstructor.java:124)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:274)",
                "STACK_TRACE"
            ],
            ["... 15 more", "STACK_TRACE"],
            ["Process finished with exit code 1", ["OB", "SR"]],
            [
                "Here is the reproduction recipe: https://github.com/rocketraman/jackson-issue-enum-polymorphism/blob/master/src/main/kotlin/enumtype/Reproduction-KindEnum.kt",
                []
            ]
        ]
    },
    "JacksonDatabind-31": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonStreamContexts"],
        "summary_text": [
            "JsonStreamContexts are not build the same way for write.. and convert methods"
        ],
        "desc_hints": ["writeContext", "TestCase"],
        "desc_text": [
            ["HI", []],
            [
                "I got an issue reported in my jackson-antpathfilter project that the filtering is not working correctly when it is used together with Jackson's convert feature: Antibrumm/jackson-antpathfilter#2",
                ["OB", "SR"]
            ],
            [
                "During the investigation i found out that the cause is that the writeContext is created differently and I am wondering if this is the desired behavior or if that's a bug for you.",
                []
            ],
            [
                "In this comment (Antibrumm/jackson-antpathfilter#2 (comment)) I print out what is found in the writeContext and I have created a TestCase to reproduce the error.",
                ["OB", "SR"]
            ],
            ["Please let me know what you think.", []]
        ]
    },
    "JacksonCore-25": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["LGTM.com", "ArrayIndexOutofBoundsException"],
        "summary_text": [
            "Fix ArrayIndexOutofBoundsException found by LGTM.com"
        ],
        "desc_hints": [],
        "desc_text": [
            ["First of all, thank you for reporting this.", []],
            [
                "But would it be possible to write a test that shows how this actually works?",
                []
            ],
            [
                "It would be great to have a regression test, to guard against this happening in future.",
                []
            ]
        ]
    },
    "Gson-5": {
        "code_elements": [],
        "stack_traces": [
            "Caused by: com.google.gson.JsonSyntaxException: 2016-01-11T11:06:14.000-02",
            "at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:107)",
            "at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:84)",
            "at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:38)",
            "at com.google.gson.TreeTypeAdapter.read(TreeTypeAdapter.java:58)",
            "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)",
            "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)",
            "at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)",
            "at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)",
            "at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)",
            "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)",
            "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)",
            "at com.google.gson.Gson.fromJson(Gson.java:861)",
            "at com.google.gson.Gson.fromJson(Gson.java:926)",
            "at com.google.gson.Gson.fromJson(Gson.java:899)",
            "Caused by: java.text.ParseException: Failed to parse date [\"2016-01-11T11:06:14.000-02']: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00",
            "... 31 more",
            "Caused by: java.lang.IndexOutOfBoundsException: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00",
            "at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:236)",
            "... 32 more"
        ],
        "summary_hints": [],
        "summary_text": ["ISO8601 is not fully implemented"],
        "desc_hints": [
            "CollectionTypeAdapterFactory.java",
            "Adapter.read",
            "com.google.gson.JsonSyntaxException",
            "java.util.Date",
            "java.lang.IndexOutOfBoundsException",
            "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
            "com.google.gson.DefaultDateTypeAdapter.deserialize",
            "TypeAdapterRuntimeTypeWrapper.java",
            "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read",
            "java.text.ParseException",
            "ISO8601Utils.java",
            "Gson.java",
            "TreeTypeAdapter.java",
            "com.google.gson.Gson.fromJson",
            "DefaultDateTypeAdapter.java",
            "com.google.gson.internal.bind.util.ISO8601Utils.parse",
            "com.google.gson.DefaultDateTypeAdapter.deserializeToDate",
            "com.google.gson.TreeTypeAdapter.read",
            "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
            "ReflectiveTypeAdapterFactory.java"
        ],
        "desc_text": [
            ["Hi guys,", []],
            [
                "I'm working on a project where I have to parse 2016-01-11T11:06:14.000-02 to java.util.Date which is a valid date according to RFC3339 on page 12.",
                ["SR"]
            ],
            ["But I got an Exception trying to archive it", ["OB", "SR"]],
            [
                "Caused by: com.google.gson.JsonSyntaxException: 2016-01-11T11:06:14.000-02",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:107)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:84)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:38)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.TreeTypeAdapter.read(TreeTypeAdapter.java:58)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)",
                "STACK_TRACE"
            ],
            ["at com.google.gson.Gson.fromJson(Gson.java:861)", "STACK_TRACE"],
            ["at com.google.gson.Gson.fromJson(Gson.java:926)", "STACK_TRACE"],
            ["at com.google.gson.Gson.fromJson(Gson.java:899)", "STACK_TRACE"],
            ["at ...", []],
            [
                "Caused by: java.text.ParseException: Failed to parse date [\"2016-01-11T11:06:14.000-02']: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:270)",
                []
            ],
            [
                "at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:105)",
                []
            ],
            ["... 31 more", "STACK_TRACE"],
            [
                "Caused by: java.lang.IndexOutOfBoundsException: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00",
                "STACK_TRACE"
            ],
            [
                "at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:236)",
                "STACK_TRACE"
            ],
            ["... 32 more", "STACK_TRACE"],
            ["I'm able to fix this if it sounds reasonable.", []]
        ]
    },
    "JacksonDatabind-107": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "DeserializationProblemHandler.handleUnknownTypeId",
            "Void.class",
            "enableDefaultTyping"
        ],
        "summary_text": [
            "DeserializationProblemHandler.handleUnknownTypeId() returning Void.class, enableDefaultTyping causing NPE"
        ],
        "desc_hints": [
            "DeserializationProblemHandler",
            "com.fasterxml.jackson.databind.deser.HandleUnknowTypeIdTest.testDeserializationWithDeserializationProblemHandler",
            "handleUnknownTypeId",
            "JavaType",
            "TypeIdResolver",
            "Void.class",
            "DeserializationContext"
        ],
        "desc_text": [
            [
                "Returning Void.class from com.fasterxml.jackson.databind.deser.HandleUnknowTypeIdTest.testDeserializationWithDeserializationProblemHandler().new DeserializationProblemHandler() {...}.handleUnknownTypeId(DeserializationContext, JavaType, String, TypeIdResolver, String) is causing a NPE in jackson 2.9.",
                ["OB"]
            ],
            [
                "I'll provide a pull request illustrating the issue in a test.",
                []
            ]
        ]
    },
    "Jsoup-81": {
        "code_elements": [
            "String encoding = \"iso-8859-1\";",
            ").getBytes(encoding));",
            "System.out.println(Jsoup.parse(soup, null, \"\"));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Failure to guess correct XHTML encoding even when explicitly declared"
        ],
        "desc_hints": [
            "getBytes",
            "strict.dtd",
            "ByteArrayInputStream",
            "Jsoup.parse",
            "www.w3.org",
            "InputStream",
            "System.out.println"
        ],
        "desc_text": [
            ["String encoding = \"iso-8859-1\";", "CODE"],
            ["InputStream soup = new ByteArrayInputStream((", []],
            [
                "\"<?xml version=\\\"1.0\\\" encoding=\\\"\" + encoding + \"\\\"?>\" +",
                []
            ],
            [
                "\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\" +",
                []
            ],
            [
                "\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">Hell\u00f6 W\u00f6rld!</html>\"",
                []
            ],
            [").getBytes(encoding));", "CODE"],
            ["System.out.println(Jsoup.parse(soup, null, \"\"));", "CODE"],
            ["prints:", []],
            [
                "<!--?xml version=\"1.0\" encoding=\"iso-8859-1\"?--><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
                []
            ],
            [
                "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">",
                []
            ],
            ["<head></head>", []],
            ["<body>", []],
            ["Hell\ufffd W\ufffdrld!", []],
            ["</body>", []],
            ["</html>", []],
            ["instead of expected output:", ["OB"]],
            [
                "<!--?xml version=\"1.0\" encoding=\"iso-8859-1\"?--><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
                []
            ],
            [
                "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">",
                []
            ],
            ["<head></head>", []],
            ["<body>", []],
            ["Hell\u00f6 W\u00f6rld!", []],
            ["</body>", []],
            ["</html>", []]
        ]
    },
    "Jsoup-4": {
        "code_elements": [
            "System.out.println(Jsoup.clean(\"<h1>\u00dcberschrift</h1>\", Whitelist.none()));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "uppercase umlauts get replaced by lowercase umlaut entities"
        ],
        "desc_hints": [
            "Whitelist.none",
            "baseArray",
            "Entities.java",
            "Jsoup.clean",
            "System.out.println"
        ],
        "desc_text": [
            ["The line", ["OB"]],
            [
                "System.out.println(Jsoup.clean(\"<h1>\u00dcberschrift</h1>\", Whitelist.none()));",
                "CODE"
            ],
            ["should print", ["OB", "EB"]],
            ["&Uuml;berschrift", []],
            ["but prints", ["OB"]],
            ["&uuml;berschrift", []],
            [
                "This used to work correctly in v0.3.1, but fails in v1.2.3.",
                ["OB"]
            ],
            [
                "While baseArray in Entities.java distinguishes between lowercase and uppercase umlauts, the above call yields the wrong result.",
                ["OB"]
            ]
        ]
    },
    "Lang-13": {
        "code_elements": [
            "import org.apache.commons.lang3.SerializationUtils;",
            "import org.junit.Test;",
            "public class SerializationUtilsTest {",
            "@Test",
            "public void primitiveTypeClassSerialization(){",
            "Class<?> primitiveType = int.class;",
            "Class<?> clone = SerializationUtils.clone(primitiveType);",
            "assertEquals(primitiveType, clone);",
            "}",
            "}",
            "protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {",
            "String name = desc.getName();",
            "try {",
            "return Class.forName(name, false, classLoader);",
            "} catch (ClassNotFoundException ex) {",
            "try {",
            "return Class.forName(name, false, Thread.currentThread().getContextClassLoader());",
            "} catch (Exception e) {",
            "return super.resolveClass(desc);",
            "}",
            "}",
            "}",
            "String name = desc.getName();",
            "try {",
            "return Class.forName(name, false, latestUserDefinedLoader());",
            "} catch (ClassNotFoundException ex) {",
            "Class cl = (Class) primClasses.get(name);",
            "if (cl != null) {",
            "return cl;",
            "} else {",
            "throw ex;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["SerializationUtils", "ClassNotFoundException"],
        "summary_text": [
            "SerializationUtils throws ClassNotFoundException when cloning primitive classes"
        ],
        "desc_hints": [
            "ObjectStreamClass",
            "assertEquals",
            "primitiveType",
            "latestUserDefinedLoader",
            "ClassNotFoundException",
            "resolveClass",
            "desc.getName",
            "classLoader",
            "SerializationUtilsTest",
            "resoleClass",
            "org.apache.commons.lang3.SerializationUtils",
            "Class.forName",
            "Thread.currentThread",
            "view_bug.do",
            "primitiveTypeClassSerialization",
            "SerializationUtils",
            "super.resolveClass",
            "bugs.sun.com",
            "ObjectInputStream",
            "int.class",
            "org.junit.Test",
            "getContextClassLoader",
            "ClassLoaderAwareObjectInputStream",
            "SerializationUtils.clone",
            "primClasses.get"
        ],
        "desc_text": [
            [
                "If a serializable object contains a reference to a primitive class, e.g.",
                ["OB", "SR"]
            ],
            [
                "int.class or int[].class, the SerializationUtils throw a ClassNotFoundException when trying to clone that object.",
                ["OB"]
            ],
            ["import org.apache.commons.lang3.SerializationUtils;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["public class SerializationUtilsTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void primitiveTypeClassSerialization(){", "CODE"],
            ["Class<?> primitiveType = int.class;", "CODE"],
            [
                "Class<?> clone = SerializationUtils.clone(primitiveType);",
                "CODE"
            ],
            ["assertEquals(primitiveType, clone);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "The problem was already reported as a java bug http://bugs.sun.com/view_bug.do?bug_id=4171142 and ObjectInputStream is fixed since java version 1.4.",
                []
            ],
            [
                "The SerializationUtils problem arises because the SerializationUtils internally use the ClassLoaderAwareObjectInputStream that overrides the ObjectInputStream's",
                []
            ],
            [
                "resoleClass method without delegating to the super method in case of a ClassNotFoundException.",
                ["OB"]
            ],
            [
                "I understand the intention of the ClassLoaderAwareObjectInputStream, but this implementation should also implement a fallback to the original implementation.",
                ["EB"]
            ],
            ["For example:", ["OB", "SR"]],
            [
                "protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {",
                "CODE"
            ],
            ["String name = desc.getName();", "CODE"],
            ["try {", "CODE"],
            ["return Class.forName(name, false, classLoader);", "CODE"],
            ["} catch (ClassNotFoundException ex) {", "CODE"],
            ["try {", "CODE"],
            [
                "return Class.forName(name, false, Thread.currentThread().getContextClassLoader());",
                "CODE"
            ],
            ["} catch (Exception e) {", "CODE"],
            ["return super.resolveClass(desc);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Here is the code in ObjectInputStream that fixed the java bug.",
                []
            ],
            ["protected Class<?> resolveClass(ObjectStreamClass desc)", []],
            ["throws IOException, ClassNotFoundException", ["OB"]],
            ["{", []],
            ["String name = desc.getName();", "CODE"],
            ["try {", "CODE"],
            [
                "return Class.forName(name, false, latestUserDefinedLoader());",
                "CODE"
            ],
            ["} catch (ClassNotFoundException ex) {", "CODE"],
            ["Class cl = (Class) primClasses.get(name);", "CODE"],
            ["if (cl != null) {", "CODE"],
            ["return cl;", "CODE"],
            ["} else {", "CODE"],
            ["throw ex;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Cli-36": {
        "code_elements": [
            "OptionGroup group = new OptionGroup();",
            "Option h = Option.builder(\"h\").build();",
            "Option s = Option.builder(\"s\").build();",
            "Option b = Option.builder(\"b\").build();",
            "Option t = Option.builder(\"t\").build();",
            ".addOption(t);",
            "Options options = new Options();",
            "options.addOptionGroup(group);",
            "options.addOption(Option.builder(\"o\").build());",
            "HelpFormatter formatter = new HelpFormatter();",
            "formatter.setOptionComparator(null);",
            "formatter.printHelp(\"cmd\", \"\", options, null);"
        ],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter", "setOptionComparator"],
        "summary_text": [
            "HelpFormatter#setOptionComparator(null) doesn't display the values in inserted order"
        ],
        "desc_hints": [
            "LinkedHashMap",
            "HelpFormatter",
            "formatter.printHelp",
            "formatter.setOptionComparator",
            "addOption",
            "options.addOption",
            "group.addOption",
            "OptionGroup",
            "HashMap",
            "options.addOptionGroup",
            "Option.builder"
        ],
        "desc_text": [
            ["OptionGroup group = new OptionGroup();", "CODE"],
            ["Option h = Option.builder(\"h\").build();", "CODE"],
            ["Option s = Option.builder(\"s\").build();", "CODE"],
            ["Option b = Option.builder(\"b\").build();", "CODE"],
            ["Option t = Option.builder(\"t\").build();", "CODE"],
            ["group.addOption(h)", []],
            [".addOption(s)", ["OB"]],
            [".addOption(b)", ["OB"]],
            [".addOption(t);", "CODE"],
            ["Options options = new Options();", "CODE"],
            ["options.addOptionGroup(group);", "CODE"],
            ["options.addOption(Option.builder(\"o\").build());", "CODE"],
            ["HelpFormatter formatter = new HelpFormatter();", "CODE"],
            ["formatter.setOptionComparator(null);", "CODE"],
            ["formatter.printHelp(\"cmd\", \"\", options, null);", "CODE"],
            ["This code does print the options(1.", ["OB", "SR"]],
            ["Group, 2.", ["OB", "SR"]],
            [
                "Option \"o\") in the order of insertion but the groups order of display is messed up.",
                ["OB"]
            ],
            ["The OptionGroup internally uses a HashMap.", ["OB", "SR"]],
            [
                "If that could be replaced with a LinkedHashMap this issue can be solved.",
                []
            ]
        ]
    },
    "Mockito-1": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArgumentCaptor"],
        "summary_text": ["ArgumentCaptor no longer working for varargs"],
        "desc_hints": ["stackoverflow.com"],
        "desc_text": [
            [
                "I ran into the issue described here: http://stackoverflow.com/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor",
                ["SR"]
            ]
        ]
    },
    "Compress-25": {
        "code_elements": [
            "package com.example.jrn;",
            "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;",
            "import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.IOException;",
            "import java.lang.System;",
            "/**",
            "Hello world!",
            "*",
            "*/",
            "public class App {",
            "public static void main(String[] args) {",
            "byte[] zip =",
            "{",
            "(byte)0x50, (byte)0x4b, (byte)0x03, (byte)0x04, (byte)0x0a, (byte)0x00,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x7b,",
            "(byte)0xd1, (byte)0x42, (byte)0x82, (byte)0xc5, (byte)0xc1, (byte)0xe6,",
            "(byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05, (byte)0x00,",
            "(byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x1c, (byte)0x00,",
            "(byte)0x74, (byte)0x65, (byte)0x73, (byte)0x74, (byte)0x2e, (byte)0x74,",
            "(byte)0x78, (byte)0x74, (byte)0x55, (byte)0x54, (byte)0x09, (byte)0x00,",
            "(byte)0x03, (byte)0x56, (byte)0x62, (byte)0xbf, (byte)0x51, (byte)0x2a,",
            "(byte)0x63, (byte)0xbf, (byte)0x51, (byte)0x75, (byte)0x78, (byte)0x0b,",
            "(byte)0x00, (byte)0x01, (byte)0x04, (byte)0x01, (byte)0xff, (byte)0x01,",
            "(byte)0x00, (byte)0x04, (byte)0x88, (byte)0x13, (byte)0x00, (byte)0x00,",
            "(byte)0x64, (byte)0x61, (byte)0x74, (byte)0x61, (byte)0x0a, (byte)0x50,",
            "(byte)0x4b, (byte)0x01, (byte)0x02, (byte)0x1e, (byte)0x03, (byte)0x0a,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03,",
            "(byte)0x7b, (byte)0xd1, (byte)0x42, (byte)0x82, (byte)0xc5, (byte)0xc1,",
            "(byte)0xe6, (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x18,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0xa0, (byte)0x81, (byte)0x00,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x74, (byte)0x65, (byte)0x73,",
            "(byte)0x74, (byte)0x2e, (byte)0x74, (byte)0x78, (byte)0x74, (byte)0x55,",
            "(byte)0x54, (byte)0x05, (byte)0x00, (byte)0x03, (byte)0x56, (byte)0x62,",
            "(byte)0xbf, (byte)0x51, (byte)0x75, (byte)0x78, (byte)0x0b, (byte)0x00,",
            "(byte)0x01, (byte)0x04, (byte)0x01, (byte)0xff, (byte)0x01, (byte)0x00,",
            "(byte)0x04, (byte)0x88, (byte)0x13, (byte)0x00, (byte)0x00, (byte)0x50,",
            "(byte)0x4b, (byte)0x05, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x00,",
            "(byte)0x00, (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x4e,",
            "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x47, (byte)0x00, (byte)0x00,",
            "(byte)0x00, (byte)0x00, (byte)00",
            "}",
            ";",
            "ByteArrayInputStream bin = new ByteArrayInputStream(zip);",
            "try {",
            "ZipArchiveInputStream in = new ZipArchiveInputStream(bin);",
            "try {",
            "while (true) {",
            "ZipArchiveEntry entry = in.getNextZipEntry();",
            "if (entry == null)",
            "{",
            "break;",
            "}",
            "byte[] buf = new byte[(int) entry.getSize()];",
            "in.read(buf);",
            "System.out.println(\"Content of \" + entry.getName() + \":\");",
            "System.out.write(buf);",
            "}",
            "} finally",
            "{",
            "in.close();",
            "}",
            "} catch (IOException e)",
            "{",
            "System.err.println(\"IOException: \" + e);",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "ZIP reads correctly with commons-compress 1.6, gives NUL bytes in 1.7"
        ],
        "desc_hints": [
            "java.io.ByteArrayInputStream",
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
            "in.close",
            "System.err.println",
            "System.out.write",
            "entry.getSize",
            "com.example.jrn",
            "ZipArchiveInputStream",
            "in.read",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
            "ByteArrayInputStream",
            "entry.getName",
            "test.txt",
            "java.io.IOException",
            "in.getNextZipEntry",
            "ZipArchiveEntry",
            "System.out.println",
            "java.lang.System"
        ],
        "desc_text": [
            [
                "When running the code below, commons-compress 1.6 writes:",
                ["OB", "SR"]
            ],
            ["Content of test.txt:", []],
            ["data", []],
            ["By comparison, commons-compress 1.7 writes", []],
            ["Content of test.txt:", []],
            ["@@@@^@", []],
            ["package com.example.jrn;", "CODE"],
            [
                "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;",
                "CODE"
            ],
            [
                "import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;",
                "CODE"
            ],
            ["import java.io.ByteArrayInputStream;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import java.lang.System;", "CODE"],
            ["/**", "CODE"],
            ["Hello world!", "CODE"],
            ["*", "CODE"],
            ["*/", "CODE"],
            ["public class App {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["byte[] zip =", "CODE"],
            ["{", "CODE"],
            [
                "(byte)0x50, (byte)0x4b, (byte)0x03, (byte)0x04, (byte)0x0a, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x7b,",
                "CODE"
            ],
            [
                "(byte)0xd1, (byte)0x42, (byte)0x82, (byte)0xc5, (byte)0xc1, (byte)0xe6,",
                "CODE"
            ],
            [
                "(byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x1c, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x74, (byte)0x65, (byte)0x73, (byte)0x74, (byte)0x2e, (byte)0x74,",
                "CODE"
            ],
            [
                "(byte)0x78, (byte)0x74, (byte)0x55, (byte)0x54, (byte)0x09, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x03, (byte)0x56, (byte)0x62, (byte)0xbf, (byte)0x51, (byte)0x2a,",
                "CODE"
            ],
            [
                "(byte)0x63, (byte)0xbf, (byte)0x51, (byte)0x75, (byte)0x78, (byte)0x0b,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x01, (byte)0x04, (byte)0x01, (byte)0xff, (byte)0x01,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x04, (byte)0x88, (byte)0x13, (byte)0x00, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x64, (byte)0x61, (byte)0x74, (byte)0x61, (byte)0x0a, (byte)0x50,",
                "CODE"
            ],
            [
                "(byte)0x4b, (byte)0x01, (byte)0x02, (byte)0x1e, (byte)0x03, (byte)0x0a,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03,",
                "CODE"
            ],
            [
                "(byte)0x7b, (byte)0xd1, (byte)0x42, (byte)0x82, (byte)0xc5, (byte)0xc1,",
                "CODE"
            ],
            [
                "(byte)0xe6, (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x18,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0xa0, (byte)0x81, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x74, (byte)0x65, (byte)0x73,",
                "CODE"
            ],
            [
                "(byte)0x74, (byte)0x2e, (byte)0x74, (byte)0x78, (byte)0x74, (byte)0x55,",
                "CODE"
            ],
            [
                "(byte)0x54, (byte)0x05, (byte)0x00, (byte)0x03, (byte)0x56, (byte)0x62,",
                "CODE"
            ],
            [
                "(byte)0xbf, (byte)0x51, (byte)0x75, (byte)0x78, (byte)0x0b, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x01, (byte)0x04, (byte)0x01, (byte)0xff, (byte)0x01, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x04, (byte)0x88, (byte)0x13, (byte)0x00, (byte)0x00, (byte)0x50,",
                "CODE"
            ],
            [
                "(byte)0x4b, (byte)0x05, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x00,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x4e,",
                "CODE"
            ],
            [
                "(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x47, (byte)0x00, (byte)0x00,",
                "CODE"
            ],
            ["(byte)0x00, (byte)0x00, (byte)00", "CODE"],
            ["}", "CODE"],
            [";", "CODE"],
            [
                "ByteArrayInputStream bin = new ByteArrayInputStream(zip);",
                "CODE"
            ],
            ["try {", "CODE"],
            [
                "ZipArchiveInputStream in = new ZipArchiveInputStream(bin);",
                "CODE"
            ],
            ["try {", "CODE"],
            ["while (true) {", "CODE"],
            ["ZipArchiveEntry entry = in.getNextZipEntry();", "CODE"],
            ["if (entry == null)", "CODE"],
            ["{", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["byte[] buf = new byte[(int) entry.getSize()];", "CODE"],
            ["in.read(buf);", "CODE"],
            [
                "System.out.println(\"Content of \" + entry.getName() + \":\");",
                "CODE"
            ],
            ["System.out.write(buf);", "CODE"],
            ["}", "CODE"],
            ["} finally", "CODE"],
            ["{", "CODE"],
            ["in.close();", "CODE"],
            ["}", "CODE"],
            ["} catch (IOException e)", "CODE"],
            ["{", "CODE"],
            ["System.err.println(\"IOException: \" + e);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-100": {
        "code_elements": [
            "//////////////////////////////////////////",
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler==",
            "/** @constructor */",
            "this._bar = null;",
            "/** @this {Foo} */",
            "}",
            "/** @this {Foo} */",
            "}",
            "//----",
            "}",
            "}",
            "//////////////////////////////////////////",
            "/**",
            "* Returns the roster widget element.",
            "* @this {Widget} <-- currently this doesn't matter",
            "* @return {Element}",
            "*/",
            "function() {",
            "return this.getComponent().getElement();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Only assignment to \"this\" issues a \"dangerous use of the global this object\" warning."
        ],
        "desc_hints": [
            "writeMethodWithAnnotation",
            "ClosureCompiler",
            "code.google.com",
            "compiler.html",
            "this.getComponent",
            "readMethodWithoutAnnotation",
            "getElement",
            "readMethodWithAnnotation",
            "writeMethodWithoutAnnotation",
            "default.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile this:", []],
            ["//////////////////////////////////////////", "CODE"],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["/** @constructor */", "CODE"],
            ["function Foo()", []],
            ["{", []],
            ["this._bar = null;", "CODE"],
            ["};", []],
            ["/** @this {Foo} */", "CODE"],
            ["function writeMethodWithAnnotation()", []],
            ["{", []],
            ["this._bar = 123; // no warning.", []],
            ["ok", []],
            ["}", "CODE"],
            ["/** @this {Foo} */", "CODE"],
            ["function readMethodWithAnnotation()", []],
            ["{", []],
            ["return this._bar; // no warning.", ["OB"]],
            ["ok", []],
            ["}", "CODE"],
            ["//----", "CODE"],
            ["function writeMethodWithoutAnnotation()", []],
            ["{", []],
            ["this._bar = 123; // warning.", []],
            ["ok.", ["OB"]],
            ["}", "CODE"],
            ["function readMethodWithoutAnnotation()", []],
            ["{", []],
            ["return this._bar; // <- No warning!", []],
            ["}", "CODE"],
            ["//////////////////////////////////////////", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "- Should get two \"dangerous use of the global this object\" warnings in the",
                ["OB", "EB"]
            ],
            [
                "readMethodWithAnnotation and writeMethodWithoutAnnotation functions.",
                ["OB"]
            ],
            ["- Only writeMethodWithoutAnnotation warns.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Both 20100330 and online compiler.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "ref: http://code.google.com/closure/compiler/docs/js-for-compiler.html",
                []
            ],
            [
                "\"To prevent compiler warnings, you must use a @this annotation whenever",
                []
            ],
            [
                "this appears in a function that is neither a prototype method nor a",
                []
            ],
            ["function marked as a @constructor.\"", ["OB"]],
            [
                "This also means the example code in the docs won't trig a warning.",
                ["OB", "SR"]
            ],
            ["-----", []],
            ["/**", "CODE"],
            ["* Returns the roster widget element.", "CODE"],
            ["* @this {Widget} <-- currently this doesn't matter", "CODE"],
            ["* @return {Element}", "CODE"],
            ["*/", "CODE"],
            ["function() {", "CODE"],
            ["return this.getComponent().getElement();", "CODE"],
            ["});", []],
            ["------", []],
            ["// Fredrik", []]
        ]
    },
    "Mockito-14": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["fix proposal for #114"],
        "desc_hints": [],
        "desc_text": [
            ["@bric3, can you take a look at this one?", []],
            ["If you don't have time I'll just merge it.", ["OB"]],
            ["All existing tests are passing.", ["OB"]],
            ["Thanks for the fix!!!", []]
        ]
    },
    "Math-26": {
        "code_elements": ["this(value, 0, maxDenominator, 100);"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Fraction(double, int) constructor strange behaviour"],
        "desc_hints": [
            "FractionConversionException",
            "testing.html",
            "org.apache.commons.math3.fraction",
            "maxDenominator",
            "FractionTestByAxiom",
            "bldl.ii.uib.no",
            "FractionTest"
        ],
        "desc_text": [
            [
                "The Fraction constructor Fraction(double, int) takes a double value and a int maximal denominator, and approximates a fraction.",
                ["OB", "SR"]
            ],
            [
                "When the double value is a large, negative number with many digits in the fractional part, and the maximal denominator is a big, positive integer (in the 100'000s), two distinct bugs can manifest:",
                ["OB", "SR"]
            ],
            ["1: the constructor returns a positive Fraction.", ["OB", "SR"]],
            [
                "Calling Fraction(-33655.1677817278, 371880) returns the fraction 410517235/243036, which both has the wrong sign, and is far away from the absolute value of the given value",
                ["OB"]
            ],
            [
                "2: the constructor does not manage to reduce the Fraction properly.",
                ["OB", "SR"]
            ],
            [
                "Calling Fraction(-43979.60679604749, 366081) returns the fraction -1651878166/256677, which should have* been reduced to -24654898/3831.",
                ["OB", "EB"]
            ],
            ["I have, as of yet, not found a solution.", []],
            ["The constructor looks like this:", ["OB", "SR"]],
            ["public Fraction(double value, int maxDenominator)", []],
            ["throws FractionConversionException", ["OB"]],
            ["{", []],
            ["this(value, 0, maxDenominator, 100);", "CODE"],
            ["}", []],
            [
                "Increasing the 100 value (max iterations) does not fix the problem for all cases.",
                ["OB"]
            ],
            [
                "Changing the 0-value (the epsilon, maximum allowed error) to something small does not work either, as this breaks the tests in FractionTest.",
                ["OB"]
            ],
            [
                "The problem is not neccissarily that the algorithm is unable to approximate a fraction correctly.",
                ["OB"]
            ],
            [
                "A solution where a FractionConversionException had been thrown in each of these examples would probably be the best solution if an improvement on the approximation algorithm turns out to be hard to find.",
                ["SR"]
            ],
            [
                "This bug has been found when trying to explore the idea of axiom-based testing (http://bldl.ii.uib.no/testing.html).",
                ["OB"]
            ],
            [
                "Attached is a java test class FractionTestByAxiom (junit, goes into org.apache.commons.math3.fraction) which shows these bugs through a simplified approach to this kind of testing, and a text file describing some of the value/maxDenominator combinations which causes one of these failures.",
                ["SR"]
            ],
            [
                "It is never specified in the documentation that the Fraction class guarantees that completely reduced rational numbers are constructed, but a comment inside the equals method claims that \"since fractions are always in lowest terms, numerators and can be compared directly for equality\", so it seems like this is the intention.",
                ["OB"]
            ]
        ]
    },
    "Lang-63": {
        "code_elements": [
            "Calendar cal = Calendar.getInstance();",
            "cal.set(Calendar.MONTH, Calendar.DECEMBER);",
            "cal.set(Calendar.DAY_OF_MONTH, 31);",
            "cal.set(Calendar.YEAR, 2005);",
            "cal.set(Calendar.HOUR_OF_DAY, 0);",
            "cal.set(Calendar.MINUTE, 0);",
            "cal.set(Calendar.SECOND, 0);",
            "cal.set(Calendar.MILLISECOND, 0);",
            "String result = DurationFormatUtils.formatPeriod(cal.getTimeInMillis(), System.currentTimeMillis(), \"MM\");",
            "System.out.println(result);"
        ],
        "stack_traces": [],
        "summary_hints": ["DurationFormatUtils"],
        "summary_text": ["DurationFormatUtils returns wrong result"],
        "desc_hints": [
            "Calendar.getInstance",
            "Calendar.MILLISECOND",
            "Calendar.MONTH",
            "cal.set",
            "Calendar.MINUTE",
            "Calendar.SECOND",
            "Calendar.DECEMBER",
            "System.currentTimeMillis",
            "DurationFormatUtils.formatPeriod",
            "Calendar.YEAR",
            "Calendar.DAY_OF_MONTH",
            "Calendar.HOUR_OF_DAY",
            "cal.getTimeInMillis",
            "DurationFormatUtils",
            "System.out.println"
        ],
        "desc_text": [
            ["DurationFormatUtils returns wrong result.", ["OB"]],
            ["oddly, it is only when Date is set to Dec 31, 2005", ["OB"]],
            [
                "The following code will result in a String of -2 which is way off.",
                ["OB", "SR"]
            ],
            ["I've tested against 2.1 and 2.2.", []],
            ["Calendar cal = Calendar.getInstance();", "CODE"],
            ["cal.set(Calendar.MONTH, Calendar.DECEMBER);", "CODE"],
            ["cal.set(Calendar.DAY_OF_MONTH, 31);", "CODE"],
            ["cal.set(Calendar.YEAR, 2005);", "CODE"],
            ["cal.set(Calendar.HOUR_OF_DAY, 0);", "CODE"],
            ["cal.set(Calendar.MINUTE, 0);", "CODE"],
            ["cal.set(Calendar.SECOND, 0);", "CODE"],
            ["cal.set(Calendar.MILLISECOND, 0);", "CODE"],
            [
                "String result = DurationFormatUtils.formatPeriod(cal.getTimeInMillis(), System.currentTimeMillis(), \"MM\");",
                "CODE"
            ],
            ["System.out.println(result);", "CODE"]
        ]
    },
    "Compress-5": {
        "code_elements": [
            "if (read == 0 && inf.finished()) {",
            "return -1;",
            "}",
            "if (read == 0 && inf.finished()) {",
            "return -1;",
            "} else if (read == 0 && lengthOfLastRead == -1) {",
            "throw new IOException(\"Truncated ZIP file\");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["ZipArchiveInputStream"],
        "summary_text": [
            "ZipArchiveInputStream doesn't report the end of a truncated archive"
        ],
        "desc_hints": [
            "ZipArchiveInputStream.read",
            "inf.finished",
            "ZipArchiveInputStream.java",
            "lengthOfLastRead"
        ],
        "desc_text": [
            ["If a Zip archive is truncated, (e.g.", []],
            [
                "because it is the first volume in a multi-volume archive) the ZipArchiveInputStream.read() method will not detect that fact.",
                ["OB"]
            ],
            ["All calls to read() will return 0 bytes read.", ["OB"]],
            [
                "They will not return -1 (end of stream), nor will they throw any exception (which would seem like a good idea to me because the archive is truncated).",
                ["OB"]
            ],
            [
                "I have tracked this problem to ZipArchiveInputStream.java, line 239.",
                []
            ],
            ["It contains a check", []],
            ["if (read == 0 && inf.finished()) {", "CODE"],
            ["return -1;", "CODE"],
            ["}", "CODE"],
            [
                "For truncated archives the read is always zero but the inf is never finished().",
                ["OB"]
            ],
            ["I suggest adding two lines below:", []],
            ["if (read == 0 && inf.finished()) {", "CODE"],
            ["return -1;", "CODE"],
            ["} else if (read == 0 && lengthOfLastRead == -1) {", "CODE"],
            ["throw new IOException(\"Truncated ZIP file\");", "CODE"],
            ["}", "CODE"],
            ["This solves the problem in my tests.", []]
        ]
    },
    "Cli-25": {
        "code_elements": [
            "Options options = new Options();",
            "options.addOption(\"h\", \"help\", false, \"This is a looooong description\");",
            "HelpFormatter formatter = new HelpFormatter();",
            "formatter.setWidth(20);"
        ],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter"],
        "summary_text": ["infinite loop in the wrapping code of HelpFormatter"],
        "desc_hints": [
            "HelpFormatter",
            "OutOfMemoryError",
            "formatter.setWidth",
            "formatter.printHelp",
            "options.addOption"
        ],
        "desc_text": [
            [
                "If there is not enough space to display a word on a single line, HelpFormatter goes into a infinite loops until the JVM crashes with an OutOfMemoryError.",
                ["OB", "EB", "SR"]
            ],
            ["Test case:", []],
            ["Options options = new Options();", "CODE"],
            [
                "options.addOption(\"h\", \"help\", false, \"This is a looooong description\");",
                "CODE"
            ],
            ["HelpFormatter formatter = new HelpFormatter();", "CODE"],
            ["formatter.setWidth(20);", "CODE"],
            ["formatter.printHelp(\"app\", options); // hang & crash", ["OB"]],
            [
                "An helpful exception indicating the insufficient width would be more appropriate than an OutOfMemoryError.",
                ["OB"]
            ]
        ]
    },
    "Csv-6": {
        "code_elements": [
            "public void testToMapWhenHeaderTooLong() throws Exception {",
            "final CSVParser parser = new CSVParser(\"a,b\", CSVFormat.newBuilder().withHeader(\"A\", \"B\", \"C\").build());",
            "final CSVRecord record = parser.iterator().next();",
            "record.toMap();",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["CSVRecord.toMap"],
        "summary_text": [
            "CSVRecord.toMap() fails if row length shorter than header length"
        ],
        "desc_hints": [
            "parser.iterator",
            "record.toMap",
            "ArrayOutOfBoundsException",
            "withHeader",
            "testToMapWhenHeaderTooLong",
            "toMap",
            "CSVFormat.newBuilder"
        ],
        "desc_text": [
            [
                "Similar to CSV-96, if .toMap() is called on a record that has fewer fields than we have header columns we'll get an ArrayOutOfBoundsException.",
                ["OB"]
            ],
            ["@Test", []],
            [
                "public void testToMapWhenHeaderTooLong() throws Exception {",
                "CODE"
            ],
            [
                "final CSVParser parser = new CSVParser(\"a,b\", CSVFormat.newBuilder().withHeader(\"A\", \"B\", \"C\").build());",
                "CODE"
            ],
            ["final CSVRecord record = parser.iterator().next();", "CODE"],
            ["record.toMap();", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JxPath-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JXPathContext.iteratePointers"],
        "summary_text": [
            "JXPathContext.iteratePointers() does not work with multiple prefixes for a single namespace URI"
        ],
        "desc_hints": [
            "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
            "nm.equals",
            "node.getNodeName",
            "getRelativePositionByName",
            "JXPathContext.iteratePointers"
        ],
        "desc_text": [
            ["Have a look at the following document:", ["SR"]],
            ["<a:doc xmlns:a=\"ns\">", []],
            ["<a:elem />", []],
            ["<b:elem xmlns:b=\"ns\" />", []],
            ["</a:doc>", []],
            ["We have two elements 'elem' in the same namespace 'ns'.", ["OB"]],
            ["They have a different prefix, however.", ["OB"]],
            [
                "When we use JXPathContext.iteratePointers() to iterate over them, the first element is returned two times.",
                ["OB", "SR"]
            ],
            ["The second element is not returned.", ["OB"]],
            ["This is because", []],
            [
                "in class org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
                []
            ],
            ["in method getRelativePositionByName() (line 546)", []],
            ["we have:", []],
            ["if (nm.equals(node.getNodeName()))", []],
            ["In the example, we have", []],
            ["nm == \"a:elem\" and node == \"b:elem\"", []],
            ["Thus, equals() returns false.", ["OB"]],
            [
                "But since 'a' and 'b' are just different prefixes for the same namespace URI, we should have 'true'.",
                ["EB"]
            ],
            ["I attached a testcase which reproduces the bug.", ["SR"]]
        ]
    },
    "Time-24": {
        "code_elements": [
            "DateTimeFormatter dtf = DateTimeFormat.forPattern(\"xxxxMM'w'ww\");",
            "System.out.println(dt);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "#107 Incorrect date parsed when week and month used together"
        ],
        "desc_hints": [
            "xxxxMM",
            "dtf.parseDateTime",
            "DateTimeFormat.forPattern",
            "DateTimeFormatter",
            "DateTime",
            "System.out.println"
        ],
        "desc_text": [
            ["I have following code snippet :", ["SR"]],
            [
                "DateTimeFormatter dtf = DateTimeFormat.forPattern(\"xxxxMM'w'ww\");",
                "CODE"
            ],
            ["DateTime dt = dtf.parseDateTime(\"201101w01\");", []],
            ["System.out.println(dt);", "CODE"],
            [
                "It should print 2011-01-03 but it is printing 2010-01-04.",
                ["OB", "EB"]
            ],
            ["Please let me know if I am doing something wrong here.", []]
        ]
    },
    "Jsoup-20": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Some html file's head element will be empty"],
        "desc_hints": ["dl.dropbox.com", "test.html"],
        "desc_text": [
            ["Hello, Jonathan", []],
            ["I love Jsoup, and handling many html files.", ["OB"]],
            ["But today, I'm under the problem.", []],
            [
                "When parse with Jsoup, some html file's head element will be empty.",
                ["OB", "SR"]
            ],
            [
                "Sample html is here -> http://dl.dropbox.com/u/972460/test.html",
                []
            ],
            ["Please help me.", []]
        ]
    },
    "Closure-44": {
        "code_elements": [
            "alert(/ / / / /);",
            "output: alert(/ /// /);",
            "should be: alert(/ // / /);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["alert(/ / / / /)"],
        "desc_hints": [],
        "desc_text": [
            ["alert(/ / / / /);", "CODE"],
            ["output: alert(/ /// /);", "CODE"],
            ["should be: alert(/ // / /);", "CODE"]
        ]
    },
    "Time-4": {
        "code_elements": [
            "Partial a = new Partial(new DateTimeFieldType[] { year(), hourOfDay() }, new int[] { 1, 1});",
            "Partial b = new Partial(year(), 1).with(hourOfDay(), 1);",
            "assert(a == b);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Constructing invalid Partials"],
        "desc_hints": [
            "DateTimeFieldType",
            "isEqual",
            "clockhourOfDay",
            "hourOfDay"
        ],
        "desc_text": [
            [
                "Partials can be constructed by invoking a constructor Partial(DateTimeFieldType[], int[]) or by merging together a set of partials using with, each constructed by calling Partial(DateTimeFieldType, int), e.g.:",
                ["SR"]
            ],
            [
                "Partial a = new Partial(new DateTimeFieldType[] { year(), hourOfDay() }, new int[] { 1, 1});",
                "CODE"
            ],
            [
                "Partial b = new Partial(year(), 1).with(hourOfDay(), 1);",
                "CODE"
            ],
            ["assert(a == b);", "CODE"],
            ["However, the above doesn't work in all cases:", ["OB"]],
            [
                "new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1}); // throws Types array must not contain duplicate",
                []
            ],
            [
                "new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1); // #<Partial [clockhourOfDay=1, hourOfDay=1]>",
                ["OB"]
            ],
            [
                "I suppose the Partials should not allow to be constructed in either case.",
                ["OB", "EB"]
            ],
            ["Is that right?", []],
            [
                "There's also a related issue (probably stems from the fact that the Partial is invalid):",
                []
            ],
            [
                "new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay() ,1).with(clockhourOfDay(), 1)) // throws objects must have matching field types",
                ["OB"]
            ]
        ]
    },
    "Math-50": {
        "code_elements": [
            "public void testBug() {",
            "final UnivariateRealFunction f = new UnivariateRealFunction() {",
            "@Override",
            "public double value(double x) {",
            "return Math.exp(x) - Math.pow(Math.PI, 3.0);",
            "}",
            "};",
            "UnivariateRealSolver solver = new RegulaFalsiSolver();",
            "double root = solver.solve(100, f, 1, 10);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["RegulaFalsiSolver"],
        "summary_text": ["\"RegulaFalsiSolver\" failure"],
        "desc_hints": [
            "Math.exp",
            "UnivariateRealSolver",
            "PegasusSolver",
            "UnivariateRealFunction",
            "solver.solve",
            "testBug",
            "RegulaFalsiSolver",
            "Math.pow",
            "Math.PI"
        ],
        "desc_text": [
            ["The following unit test:", ["OB", "SR"]],
            ["@Test", []],
            ["public void testBug() {", "CODE"],
            [
                "final UnivariateRealFunction f = new UnivariateRealFunction() {",
                "CODE"
            ],
            ["@Override", "CODE"],
            ["public double value(double x) {", "CODE"],
            ["return Math.exp(x) - Math.pow(Math.PI, 3.0);", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["UnivariateRealSolver solver = new RegulaFalsiSolver();", "CODE"],
            ["double root = solver.solve(100, f, 1, 10);", "CODE"],
            ["}", "CODE"],
            ["fails with", ["OB"]],
            [
                "illegal state: maximal count (100) exceeded: evaluations",
                ["OB"]
            ],
            [
                "Using \"PegasusSolver\", the answer is found after 17 evaluations.",
                ["OB"]
            ]
        ]
    },
    "Closure-1": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler==",
            "function foo (bar, baz) {",
            "return bar;",
            "}",
            "alert (foo.length);",
            "function foo (bar, baz) {",
            "return bar;",
            "}",
            "alert (foo.length);",
            "function foo(a,b){return a}alert(foo.length);",
            "function foo(a){return a}alert(foo.length);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["function arguments should not be optimized away"],
        "desc_hints": [
            "foo.length",
            "compiler.appspot.com",
            "default.js",
            "ClosureCompiler"
        ],
        "desc_text": [
            [
                "Function arguments should not be optimized away, as this comprimizes the function's length property.",
                ["OB", "EB"]
            ],
            ["What steps will reproduce the problem?", "QUERY"],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["function foo (bar, baz) {", "CODE"],
            ["return bar;", "CODE"],
            ["}", "CODE"],
            ["alert (foo.length);", "CODE"],
            ["function foo (bar, baz) {", "CODE"],
            ["return bar;", "CODE"],
            ["}", "CODE"],
            ["alert (foo.length);", "CODE"],
            ["--------------------------------------", []],
            ["What is the expected output?", "QUERY"],
            ["function foo(a,b){return a}alert(foo.length);", "CODE"],
            ["--------------------------------------", []],
            ["What do you see instead?", "QUERY"],
            ["function foo(a){return a}alert(foo.length);", "CODE"],
            ["--------------------------------------", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "I'm using the product from the web page http://closure-compiler.appspot.com/home",
                []
            ],
            ["I'm using Firefox 3.6.10 on Ubuntu 10.0.4", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "The function's length property is essential to many techniques, such as currying functions.",
                ["OB"]
            ]
        ]
    },
    "Lang-14": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["StringUtils"],
        "summary_text": ["StringUtils equals() relies on undefined behavior"],
        "desc_hints": [
            "java.lang.CharSequence",
            "hashCode",
            "JavaDoc",
            "StringUtils",
            "CharSequence",
            "javax.lang.model.element.Name",
            "CharSequences"
        ],
        "desc_text": [
            [
                "Since the java.lang.CharSequence class was first introduced in 1.4, the JavaDoc block has contained the following note:",
                ["SR"]
            ],
            [
                "This interface does not refine the general contracts of the equals and hashCode methods.",
                ["OB"]
            ],
            [
                "The result of comparing two objects that implement CharSequence is therefore, in general, undefined.",
                ["OB"]
            ],
            [
                "Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other.",
                ["OB"]
            ],
            [
                "When the signature of the StringUtils equals() method was changed from equals(String, String) to equals(CharSequence, CharSequence) in R920543, the implementation still relied on calling CharSequence#equals(Object) even though, in general, the result is undefined.",
                ["OB"]
            ],
            [
                "One example where equals(Object) returns false even though, as CharSequences, two objects represent equal sequences is when one object is an instance of javax.lang.model.element.Name and the other object is a String.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Math-14": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "new multivariate vector optimizers cannot be used with large number of weights"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "When using the Weigth class to pass a large number of weights to multivariate vector optimizers, an nxn full matrix is created (and copied) when a n elements vector is used.",
                ["OB", "SR"]
            ],
            ["This exhausts memory when n is large.", ["OB"]],
            [
                "This happens for example when using curve fitters (even simple curve fitters like polynomial ones for low degree) with large number of points.",
                ["OB", "SR"]
            ],
            [
                "I encountered this with curve fitting on 41200 points, which created a matrix with 1.7 billion elements.",
                ["OB", "SR"]
            ]
        ]
    },
    "Jsoup-44": {
        "code_elements": [
            "public void testInvalidTableContents() throws IOException {",
            "File in = getFile(\"/htmltests/table-invalid-elements.html\");",
            "Document doc = Jsoup.parse(in, \"UTF-8\");",
            "doc.outputSettings().prettyPrint(true);",
            "String rendered = doc.toString();",
            "int endOfEmail = rendered.indexOf(\"Comment\");",
            "int guarantee = rendered.indexOf(\"Why am I here?\");",
            "assertTrue(\"Comment not found\", endOfEmail > -1);",
            "assertTrue(\"Search text not found\", guarantee > -1);",
            "assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Unexpected elements inside table are moved to wrong location"
        ],
        "desc_hints": [
            "rendered.indexOf",
            "assertTrue",
            "doc.outputSettings",
            "getFile",
            "prettyPrint",
            "Jsoup.parse",
            "endOfEmail",
            "testInvalidTableContents",
            "elements.html",
            "doc.toString"
        ],
        "desc_text": [
            [
                "This commit e991936 introduced a bug where handling of unexpected elements inside a table element changed, resulting in the unexpected elements being pushed further up the document than before.",
                ["OB"]
            ],
            ["I have constructed a minimal repro.", ["SR"]],
            [
                "Before the commit in question, the unexpected p tag would continue to be positioned after the comment (with some elements being closed early etc.",
                ["OB"]
            ],
            ["to support this).", []],
            [
                "After the commit, the p tag and its contents are moved up more than one table level, and now appear after the comment tag.",
                ["OB"]
            ],
            [
                "Obviously this input HTML is very broken and bad, but it seems that the change in behaviour was unintended.",
                ["OB"]
            ],
            ["copying @jaredstehler", []],
            ["@Test", []],
            [
                "public void testInvalidTableContents() throws IOException {",
                "CODE"
            ],
            [
                "File in = getFile(\"/htmltests/table-invalid-elements.html\");",
                "CODE"
            ],
            ["Document doc = Jsoup.parse(in, \"UTF-8\");", "CODE"],
            ["doc.outputSettings().prettyPrint(true);", "CODE"],
            ["String rendered = doc.toString();", "CODE"],
            ["int endOfEmail = rendered.indexOf(\"Comment\");", "CODE"],
            ["int guarantee = rendered.indexOf(\"Why am I here?\");", "CODE"],
            ["assertTrue(\"Comment not found\", endOfEmail > -1);", "CODE"],
            ["assertTrue(\"Search text not found\", guarantee > -1);", "CODE"],
            [
                "assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);",
                "CODE"
            ],
            ["}", "CODE"],
            ["Uses the following fixture:", ["OB", "SR"]],
            ["<html>", []],
            ["<body>", []],
            ["<table>", []],
            ["<tr>", []],
            ["<td>", []],
            ["<table>", []],
            ["<tr>", []],
            ["<!--Comment-->", []],
            ["<table>", []],
            ["<p>Why am I here?</p>", []],
            ["</tr>", []],
            ["</table>", []],
            ["</td>", []],
            ["</tr>", []],
            ["</table>", []],
            ["</body>", []],
            ["</html>", []]
        ]
    },
    "JacksonDatabind-67": {
        "code_elements": [
            "// the only non-standard thing is this:",
            "if (deser == null) {",
            "if (type.isEnumType()) {",
            "return _createEnumKeyDeserializer(ctxt, type);",
            "}",
            "deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);",
            "}",
            "setDeserializerModifier(new BeanDeserializerModifier() {",
            "@Override",
            "@SuppressWarnings(\"unchecked\")",
            "public JsonDeserializer<Enum> modifyEnumDeserializer(",
            "DeserializationConfig config,",
            "final JavaType type,",
            "BeanDescription beanDesc,",
            "final JsonDeserializer<?> deserializer) {",
            "return new JsonDeserializer<Enum>() {",
            "@Override",
            "public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {",
            "Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();",
            "return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());",
            "}",
            "};",
            "}",
            "@Override",
            "public KeyDeserializer modifyKeyDeserializer(",
            "DeserializationConfig config,",
            "JavaType type,",
            "KeyDeserializer deserializer) {",
            "if (!type.isEnumType()) {",
            "return super.modifyKeyDeserializer(config, type, deserializer);",
            "}",
            "return new KeyDeserializer() {",
            "@Override",
            "@SuppressWarnings(\"unchecked\")",
            "public Object deserializeKey(String key, DeserializationContext ctxt)",
            "throws IOException, JsonProcessingException {",
            "Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();",
            "return Enum.valueOf(rawClass, key.toUpperCase());",
            "}",
            "};",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["deserializerModifiers"],
        "summary_text": ["Map key deserializerModifiers ignored"],
        "desc_hints": [
            "com.fasterxml.jackson.datatype.guava.deser.ImmutableMapDeserializer.createContextual",
            "type.isEnumType",
            "_createEnumKeyDeserializer",
            "JavaType",
            "setDeserializerModifier",
            "JsonProcessingException",
            "key.toUpperCase",
            "rawClass",
            "BasicDeserializerFactory.createKeyDeserializer",
            "jp.getValueAsString",
            "DeserializationContext.findKeyDeserializer",
            "type.getRawClass",
            "toUpperCase",
            "BeanDescription",
            "JsonParser",
            "modifyKeyDeserializer",
            "modifyEnumDeserializer",
            "KeyDeserializer",
            "DeserializerCache.findKeyDeserializer",
            "Enum.valueOf",
            "hasDeserializerModifiers",
            "SuppressWarnings",
            "deserializeKey",
            "DeserializationConfig",
            "JsonDeserializer",
            "DeserializationContext",
            "BeanDeserializerModifier",
            "beanDesc",
            "StdKeyDeserializers.findStringBasedKeyDeserializer",
            "super.modifyKeyDeserializer"
        ],
        "desc_text": [
            [
                "We have a module that extends simple model to allow us to accept enum names in lower case in a fairly generic manner",
                []
            ],
            ["Inside that we add the modifyKeyDeserializer", []],
            [
                "The incoming class (using immutables) is mapped to a guava immutable map.",
                ["OB", "SR"]
            ],
            ["Walking through the code:", ["SR"]],
            [
                "com.fasterxml.jackson.datatype.guava.deser.ImmutableMapDeserializer.createContextual",
                []
            ],
            ["calls DeserializationContext.findKeyDeserializer", []],
            ["calls DeserializerCache.findKeyDeserializer", []],
            ["calls BasicDeserializerFactory.createKeyDeserializer", []],
            ["which has the code:", ["SR"]],
            ["// the only non-standard thing is this:", "CODE"],
            ["if (deser == null) {", "CODE"],
            ["if (type.isEnumType()) {", "CODE"],
            ["return _createEnumKeyDeserializer(ctxt, type);", "CODE"],
            ["}", "CODE"],
            [
                "deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "Since we are an enum type, it returns the value in the _createEnumKeyDeserializer, which is the standard enum deserializer.",
                ["OB"]
            ],
            [
                "Below that block is the check for the hasDeserializerModifiers, but since we have returned already, it is never called, so we can't override the behaviour.",
                ["OB"]
            ],
            ["Module fragment:", []],
            [
                "setDeserializerModifier(new BeanDeserializerModifier() {",
                "CODE"
            ],
            ["@Override", "CODE"],
            ["@SuppressWarnings(\"unchecked\")", "CODE"],
            ["public JsonDeserializer<Enum> modifyEnumDeserializer(", "CODE"],
            ["DeserializationConfig config,", "CODE"],
            ["final JavaType type,", "CODE"],
            ["BeanDescription beanDesc,", "CODE"],
            ["final JsonDeserializer<?> deserializer) {", "CODE"],
            ["return new JsonDeserializer<Enum>() {", "CODE"],
            ["@Override", "CODE"],
            [
                "public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {",
                "CODE"
            ],
            [
                "Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();",
                "CODE"
            ],
            [
                "return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());",
                "CODE"
            ],
            ["}", "CODE"],
            ["};", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["public KeyDeserializer modifyKeyDeserializer(", "CODE"],
            ["DeserializationConfig config,", "CODE"],
            ["JavaType type,", "CODE"],
            ["KeyDeserializer deserializer) {", "CODE"],
            ["if (!type.isEnumType()) {", "CODE"],
            [
                "return super.modifyKeyDeserializer(config, type, deserializer);",
                "CODE"
            ],
            ["}", "CODE"],
            ["return new KeyDeserializer() {", "CODE"],
            ["@Override", "CODE"],
            ["@SuppressWarnings(\"unchecked\")", "CODE"],
            [
                "public Object deserializeKey(String key, DeserializationContext ctxt)",
                "CODE"
            ],
            ["throws IOException, JsonProcessingException {", "CODE"],
            [
                "Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();",
                "CODE"
            ],
            ["return Enum.valueOf(rawClass, key.toUpperCase());", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["}", "CODE"],
            ["});", []],
            [
                "I appreciate the code around here is fairly complex.",
                ["OB", "SR"]
            ],
            ["Related issues (possibly):", []],
            ["#749", []],
            ["#1313", []]
        ]
    },
    "Closure-46": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TypeCheck", "ClassCastException"],
        "summary_text": ["ClassCastException during TypeCheck pass"],
        "desc_hints": ["RecordType", "NamedType", "ProxyObjectType"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile code that has a ProxyObjectType that references a RecordType.",
                ["OB", "SR"]
            ],
            [
                "For example, we have a NamedType in a typedef that references a RecordType.",
                ["SR"]
            ],
            ["Please provide any additional information below.", "QUERY"],
            ["Patch attached.", ["OB"]],
            ["Is this the correct fix?", []]
        ]
    },
    "Lang-50": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "Locale.getDefault",
            "getDateTimeInstance",
            "FastDateFormat",
            "getDateInstance"
        ],
        "summary_text": [
            "FastDateFormat getDateInstance() and getDateTimeInstance() assume Locale.getDefault() won't change"
        ],
        "desc_hints": [
            "FastDateFormat",
            "getDateTimeInstance",
            "HashMap",
            "getDateInstance"
        ],
        "desc_text": [
            [
                "The FastDateFormat getDateInstance() and getDateTimeInstance() methods create the HashMap key from various items including the locale.",
                ["OB", "SR"]
            ],
            [
                "If the locale is null, then it is not made part of the key, but the stored object is created using the current default locale.",
                ["OB"]
            ],
            [
                "If the Locale is changed subsequently, then the wrong locale is applied.",
                ["OB"]
            ],
            ["Patch for test case to follow.", ["OB", "SR"]]
        ]
    },
    "Jsoup-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DocumentType.outerHtmlHead"],
        "summary_text": ["DocumentType.outerHtmlHead missing quote"],
        "desc_hints": ["systemId"],
        "desc_text": [
            [
                "There's just a doublequote missing from the append sequence right before the systemId.",
                ["OB"]
            ],
            ["For example:", ["OB", "SR"]]
        ]
    },
    "Mockito-34": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Source files should not be put in binary JAR"],
        "desc_hints": ["core.jar"],
        "desc_text": [
            [
                "Source files (*.java) should not be put into binary mockito-core.jar.",
                ["OB"]
            ],
            [
                "It stupefies Idea to show decompiled file even when source jar is available.",
                ["OB"]
            ]
        ]
    },
    "Chart-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ShapeUtilities.equal"],
        "summary_text": [
            "#868 JCommon 1.0.12 ShapeUtilities.equal(path1,path2)"
        ],
        "desc_hints": ["GeneralPath", "PathIterator", "windingRule"],
        "desc_text": [
            [
                "The comparison of two GeneralPath objects uses the same PathIterator for both objects.",
                ["OB"]
            ],
            [
                "equal(GeneralPath path1, GeneralPath path2) will thus return true for any pair of non-null GeneralPath instances having the same windingRule.",
                ["OB"]
            ]
        ]
    },
    "Closure-168": {
        "code_elements": [
            "var makeClass = function(protoMethods) {",
            "var clazz = function() {",
            "this.initialize.apply(this, arguments);",
            "}",
            "for (var i in protoMethods) {",
            "clazz.prototype[i] = protoMethods[i];",
            "}",
            "return clazz;",
            "}",
            "/** @constructor */",
            "var Person = function(name){};",
            "/** @this {Person} */",
            "initialize: function(name) {",
            "this.name = name;",
            "/** @this {Person} */",
            "/**",
            "* @param {string} message",
            "* @this {Person}",
            "*/",
            "say: function(message) {",
            "window.console.log(this.getName(1) + ' says: ' + message);",
            "}",
            "var joe = new Person('joe');",
            "joe.say('hi');",
            "var jane = new Person('jane');",
            "jane.say('hello');",
            "var makeClass = function(protoMethods) {",
            "var clazz = function() {",
            "this.initialize.apply(this, arguments);",
            "}",
            "for (var i in protoMethods) {",
            "clazz.prototype[i] = protoMethods[i];",
            "}",
            "return clazz;",
            "}",
            "/** @constructor */",
            "var Person = function(name){};",
            "/** @this {Person} */",
            "initialize: function(name) {",
            "this.name = name;",
            "/** @this {Person} */",
            "/**",
            "* @param {string} message",
            "* @this {Person}",
            "*/",
            "say: function(message) {",
            "// window.console.log(this.getName(1) + ' says: ' + message);",
            "var self = this;",
            "setTimeout(function() {",
            "window.console.log(self.getName(1) + ' says: ' + message);",
            "}, 500);",
            "}",
            "var joe = new Person('joe');",
            "joe.say('hi');",
            "var jane = new Person('jane');",
            "jane.say('hello');"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Wrong argument count error not reported on this aliasing (on function with @this annotation)"
        ],
        "desc_hints": [
            "this.name",
            "accessControls",
            "uselessCode",
            "getName",
            "globalThis",
            "joe.say",
            "this.getName",
            "protoMethods",
            "test2.js",
            "self.getName",
            "Person.prototype.getName",
            "checkTypes",
            "checkVars",
            "Person.prototype",
            "setTimeout",
            "window.console.log",
            "compiler.jar",
            "makeClass",
            "this.initialize.apply",
            "clazz.prototype",
            "jane.say"
        ],
        "desc_text": [
            [
                "The following code (attached as test2-1.js) when compiled with:",
                ["OB", "SR"]
            ],
            [
                "java -jar build/compiler.jar --compilation_level=ADVANCED_OPTIMIZATIONS --jscomp_error=accessControls --jscomp_error=checkTypes --jscomp_error=checkVars --jscomp_error=uselessCode --jscomp_off=globalThis --js ~/Desktop/test2.js",
                []
            ],
            ["correctly fails with:", ["OB"]],
            [
                "/Users/dolapo/Desktop/test2.js:28: ERROR - Function Person.prototype.getName: called with 1 argument(s).",
                ["OB"]
            ],
            [
                "Function requires at least 0 argument(s) and no more than 0 argument(s).",
                ["OB"]
            ],
            [
                "However, if the say function is modified such that this is aliased and the function is called within a setTimeout (test2-2.js), the error is not caught",
                ["OB"]
            ],
            ["test2-1.js:", []],
            ["var makeClass = function(protoMethods) {", "CODE"],
            ["var clazz = function() {", "CODE"],
            ["this.initialize.apply(this, arguments);", "CODE"],
            ["}", "CODE"],
            ["for (var i in protoMethods) {", "CODE"],
            ["clazz.prototype[i] = protoMethods[i];", "CODE"],
            ["}", "CODE"],
            ["return clazz;", "CODE"],
            ["}", "CODE"],
            ["/** @constructor */", "CODE"],
            ["var Person = function(name){};", "CODE"],
            ["Person = makeClass(/** @lends Person.prototype */ {", []],
            ["/** @this {Person} */", "CODE"],
            ["initialize: function(name) {", "CODE"],
            ["this.name = name;", "CODE"],
            ["},", []],
            ["/** @this {Person} */", "CODE"],
            ["getName: function() { return this.name; },", []],
            ["/**", "CODE"],
            ["* @param {string} message", "CODE"],
            ["* @this {Person}", "CODE"],
            ["*/", "CODE"],
            ["say: function(message) {", "CODE"],
            [
                "window.console.log(this.getName(1) + ' says: ' + message);",
                "CODE"
            ],
            ["}", "CODE"],
            ["});", []],
            ["var joe = new Person('joe');", "CODE"],
            ["joe.say('hi');", "CODE"],
            ["var jane = new Person('jane');", "CODE"],
            ["jane.say('hello');", "CODE"],
            ["test2-2.js:", []],
            ["var makeClass = function(protoMethods) {", "CODE"],
            ["var clazz = function() {", "CODE"],
            ["this.initialize.apply(this, arguments);", "CODE"],
            ["}", "CODE"],
            ["for (var i in protoMethods) {", "CODE"],
            ["clazz.prototype[i] = protoMethods[i];", "CODE"],
            ["}", "CODE"],
            ["return clazz;", "CODE"],
            ["}", "CODE"],
            ["/** @constructor */", "CODE"],
            ["var Person = function(name){};", "CODE"],
            ["Person = makeClass(/** @lends Person.prototype */ {", []],
            ["/** @this {Person} */", "CODE"],
            ["initialize: function(name) {", "CODE"],
            ["this.name = name;", "CODE"],
            ["},", []],
            ["/** @this {Person} */", "CODE"],
            ["getName: function() { return this.name; },", []],
            ["/**", "CODE"],
            ["* @param {string} message", "CODE"],
            ["* @this {Person}", "CODE"],
            ["*/", "CODE"],
            ["say: function(message) {", "CODE"],
            [
                "// window.console.log(this.getName(1) + ' says: ' + message);",
                "CODE"
            ],
            ["var self = this;", "CODE"],
            ["setTimeout(function() {", "CODE"],
            [
                "window.console.log(self.getName(1) + ' says: ' + message);",
                "CODE"
            ],
            ["}, 500);", "CODE"],
            ["}", "CODE"],
            ["});", []],
            ["var joe = new Person('joe');", "CODE"],
            ["joe.say('hi');", "CODE"],
            ["var jane = new Person('jane');", "CODE"],
            ["jane.say('hello');", "CODE"]
        ]
    },
    "Lang-6": {
        "code_elements": [
            "public void testEscapeSurrogatePairs() throws Exception {",
            "assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));",
            "}"
        ],
        "stack_traces": [
            "at java.lang.String.charAt(String.java:658)",
            "at java.lang.Character.codePointAt(Character.java:4668)",
            "at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:95)",
            "at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)",
            "at org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)"
        ],
        "summary_hints": [
            "StringIndexOutOfBoundsException",
            "CharSequenceTranslator"
        ],
        "summary_text": [
            "StringIndexOutOfBoundsException in CharSequenceTranslator"
        ],
        "desc_hints": [
            "testEscapeSurrogatePairs",
            "java.lang.StringIndexOutOfBoundsException",
            "CharSequenceTranslator.java",
            "assertEquals",
            "org.apache.commons.lang3.StringEscapeUtils.escapeCsv",
            "java.lang.String.charAt",
            "StringEscapeUtils.java",
            "CharSequenceTranslator",
            "java.lang.Character.codePointAt",
            "StringEscapeUtils.escapeCsv",
            "Character.java",
            "CharSequence",
            "String.java",
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate"
        ],
        "desc_text": [
            [
                "I found that there is bad surrogate pair handling in the CharSequenceTranslator",
                []
            ],
            ["This is a simple test case for this problem.", ["SR"]],
            ["\\uD83D\\uDE30 is a surrogate pair.", ["OB"]],
            ["@Test", []],
            [
                "public void testEscapeSurrogatePairs() throws Exception {",
                "CODE"
            ],
            [
                "assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));",
                "CODE"
            ],
            ["}", "CODE"],
            ["You'll get the exception as shown below.", ["OB"]],
            [
                "java.lang.StringIndexOutOfBoundsException: String index out of range: 2",
                []
            ],
            ["at java.lang.String.charAt(String.java:658)", "STACK_TRACE"],
            [
                "at java.lang.Character.codePointAt(Character.java:4668)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:95)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)",
                "STACK_TRACE"
            ],
            ["Patch attached, the method affected:", []],
            [
                "public final void translate(CharSequence input, Writer out) throws IOException",
                []
            ]
        ]
    },
    "Time-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["#130 GJChronology rejects valid Julian dates"],
        "desc_hints": [
            "GJChronology.getInstanceUTC",
            "dayOfMonth",
            "org.joda.time.IllegalFieldValueException",
            "DateTime",
            "JulianChronology.getInstanceUTC"
        ],
        "desc_text": [
            ["Example:", ["OB", "SR"]],
            [
                "DateTime jdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, JulianChronology.getInstanceUTC()); // Valid.",
                []
            ],
            [
                "DateTime gjdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, GJChronology.getInstanceUTC()); // Invalid.",
                []
            ],
            [
                "The 2nd statement fails with \"org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\".",
                ["OB"]
            ],
            [
                "Given that I left the cutover date at the default (October 15, 1582), isn't 1500/02/29 a valid date in the GJChronology?",
                []
            ]
        ]
    },
    "Closure-144": {
        "code_elements": ["alert(f());"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Auto-identify void functions"],
        "desc_hints": [],
        "desc_text": [
            ["function f() {", []],
            ["}", []],
            ["alert(f());", "CODE"],
            ["should emit a warning", ["EB"]]
        ]
    },
    "Closure-123": {
        "code_elements": [
            "window.Foo = function(A, B, C, D) {",
            "if ( A ) {",
            "if ( B ) {",
            "C = 0;",
            "} else {",
            "C = 0 in D;",
            "}",
            "while ( C-- ) {}",
            "}",
            "}",
            "window.Foo=function(b,c,a,d){if(b)for(a=c?0:(0 in d);a--;);};",
            "window.Foo=function(b,c,a,d){if(b)for(a=c?0:0 in d;a--;);};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Generates code with invalid for/in left-hand assignment"
        ],
        "desc_hints": ["SyntaxError", "compiler.appspot.com", "window.Foo"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile this:", []],
            ["window.Foo = function(A, B, C, D) {", "CODE"],
            ["if ( A ) {", "CODE"],
            ["if ( B ) {", "CODE"],
            ["C = 0;", "CODE"],
            ["} else {", "CODE"],
            ["C = 0 in D;", "CODE"],
            ["}", "CODE"],
            ["while ( C-- ) {}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "Expected: Something that doesn't have a syntax error, maybe",
                ["EB"]
            ],
            [
                "window.Foo=function(b,c,a,d){if(b)for(a=c?0:(0 in d);a--;);};",
                "CODE"
            ],
            ["Actual:", ["OB"]],
            [
                "window.Foo=function(b,c,a,d){if(b)for(a=c?0:0 in d;a--;);};",
                "CODE"
            ],
            ["SyntaxError: Unexpected token ; (Chrome)", []],
            ["invalid for/in left-hand side (Firefox)", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["http://closure-compiler.appspot.com/home", []],
            ["Please provide any additional information below.", "QUERY"],
            ["I noticed this while attempting to minify jquery", []]
        ]
    },
    "Codec-11": {
        "code_elements": [
            "assertEquals( expected,  new QuotedPrintableCodec().decode(qpdata) );"
        ],
        "stack_traces": [],
        "summary_hints": ["QuotedPrintableCodec"],
        "summary_text": [
            "QuotedPrintableCodec does not support soft line break per the 'quoted-printable' example on Wikipedia"
        ],
        "desc_hints": [
            "QuotedPrintableCodec",
            "en.wikipedia.org",
            "assertEquals"
        ],
        "desc_text": [
            [
                "Writing a unit test I discovered that the example Wikipedia uses for quoted-printable data does not decode but instead throws an exception.",
                ["OB", "SR"]
            ],
            [
                "Their example is here: http://en.wikipedia.org/wiki/Quoted-printable#Example",
                ["SR"]
            ],
            ["test:", ["SR"]],
            [
                "String qpdata = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\n\" +",
                []
            ],
            [
                "\"mathematics is the most beautiful branch of philosophy.\";",
                ["OB"]
            ],
            [
                "String expected = \"If you believe that truth=beauty, then surely \" +",
                ["EB"]
            ],
            [
                "\"mathematics is the most beautiful branch of philosophy.\";",
                ["OB"]
            ],
            [
                "assertEquals( expected,  new QuotedPrintableCodec().decode(qpdata) );",
                "CODE"
            ],
            [
                "I suppose I could fix if you like but currently I'm not a registered developer.",
                ["OB"]
            ]
        ]
    },
    "Closure-61": {
        "code_elements": [
            "Math.blah = function(test) { test.a = 5; };",
            "var test = new Object();",
            "Math.blah=function(a){a.a=5};var test={};",
            "var n = {};",
            "n.blah = function(test) { test.a = 5; };",
            "var test = new Object();",
            "n.blah(test);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Closure removes needed code."],
        "desc_hints": ["Math.blah"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Try the following code, in Simple mode", ["OB", "SR"]],
            ["Math.blah = function(test) { test.a = 5; };", "CODE"],
            ["var test = new Object();", "CODE"],
            ["Math.blah(test);", []],
            ["2.", ["OB", "SR"]],
            ["The output is", ["OB"]],
            ["Math.blah=function(a){a.a=5};var test={};", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Note that Math.blah(test) was removed.", ["OB"]],
            ["It should not be.", ["OB", "EB"]],
            ["It issues a warning: JSC_USELESS_CODE: Suspicious code.", []],
            ["This code lacks side-effects.", ["OB"]],
            ["Is there a bug?", []],
            ["at line 4 character 9", ["SR"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Tested on Google hosted Closure service.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Closure seems to be protective about Math in particular, and doesn't like people messing around with her?",
                ["OB"]
            ],
            ["So, when I try the following code:-", ["OB", "SR"]],
            ["var n = {};", "CODE"],
            ["n.blah = function(test) { test.a = 5; };", "CODE"],
            ["var test = new Object();", "CODE"],
            ["n.blah(test);", "CODE"],
            ["It works.", ["OB"]],
            [
                "When I replace n by Math, then again, Closure kicks out blah.",
                ["OB", "SR"]
            ],
            ["I need that poor fellow.", ["OB"]],
            ["Please talk some sense into it.", ["OB"]]
        ]
    },
    "Closure-107": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Variable names prefixed with MSG_ cause error with advanced optimizations"
        ],
        "desc_hints": ["goog.getMsg"],
        "desc_text": [
            [
                "Variables named something with MSG_ seem to cause problems with the module system, even if no modules are used in the code.",
                ["OB"]
            ],
            [
                "$ echo \"var MSG_foo='bar'\" | closure --compilation_level ADVANCED_OPTIMIZATIONS",
                []
            ],
            [
                "stdin:1: ERROR - message not initialized using goog.getMsg",
                ["OB"]
            ],
            ["var MSG_foo='bar'", []],
            ["^", []],
            ["It works fine with msg_foo, MSG2_foo, etc.", ["OB"]]
        ]
    },
    "Math-68": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "VectorialConvergenceChecker",
            "LevenbergMarquardtOptimizer"
        ],
        "summary_text": [
            "LevenbergMarquardtOptimizer ignores the VectorialConvergenceChecker parameter passed to it"
        ],
        "desc_hints": [
            "VectorialConvergenceChecker",
            "LevenbergMarquardtOptimizer"
        ],
        "desc_text": [
            [
                "LevenbergMarquardtOptimizer ignores the VectorialConvergenceChecker parameter passed to it.",
                ["OB"]
            ],
            [
                "This makes it hard to specify custom stopping criteria for the optimizer.",
                ["SR"]
            ]
        ]
    },
    "Jsoup-49": {
        "code_elements": [
            "public void mustCorrectlyMoveChildrenInsideOneParentElement() {",
            "Document doc = new Document( \"\" );",
            "Element body = doc.appendElement( \"body\" );",
            "body.appendElement( \"div1\" );",
            "body.appendElement( \"div2\" );",
            "Element div3 = body.appendElement( \"div3\" );",
            "Element div4 = body.appendElement( \"div4\" );",
            "ArrayList<Element> toMove = new ArrayList<Element>() {",
            "{",
            "add( div3 );",
            "add( div4 );",
            "}",
            "};",
            "body.insertChildren( 0, toMove );",
            "String result = doc.toString().replaceAll( \"\\\\s+\", \"\" );",
            "assertEquals( \"<body><div3></div3><div4></div4><div1></div1><div2></div2></body>\", result );",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Element.insertChildren"],
        "summary_text": ["Bug in Element.insertChildren()"],
        "desc_hints": [
            "siblingIndex",
            "org.jsoup.nodes.Element.insertChildren",
            "replaceAll",
            "assertEquals",
            "addChildren",
            "body.appendElement",
            "reindexChildren",
            "insertChildren",
            "ArrayList",
            "doc.appendElement",
            "toMove",
            "mustCorrectlyMoveChildrenInsideOneParentElement",
            "doc.toString",
            "body.insertChildren"
        ],
        "desc_text": [
            [
                "When using org.jsoup.nodes.Element.insertChildren(int, Collection<?",
                []
            ],
            [
                "extends Node>) to move (more than one!) child-elements from one parent-element to the same parent, but different index then it produces wrong results.",
                []
            ],
            [
                "The problem is that the first Element's 'move' leaves the siblingIndex unchanged and then the second 'move' removes a wrong element and produces some crap.",
                ["OB"]
            ],
            [
                "Maybe calling reindexChildren() inside the loop in addChildren() fixes this.",
                []
            ],
            ["Version 1.8.3.", ["OB"]],
            [
                "Workaround: call remove() on the elements before passing them to insertChildren()",
                []
            ],
            ["Easy Test Case:", []],
            ["@Test", []],
            [
                "public void mustCorrectlyMoveChildrenInsideOneParentElement() {",
                "CODE"
            ],
            ["Document doc = new Document( \"\" );", "CODE"],
            ["Element body = doc.appendElement( \"body\" );", "CODE"],
            ["body.appendElement( \"div1\" );", "CODE"],
            ["body.appendElement( \"div2\" );", "CODE"],
            ["Element div3 = body.appendElement( \"div3\" );", "CODE"],
            ["Element div4 = body.appendElement( \"div4\" );", "CODE"],
            ["ArrayList<Element> toMove = new ArrayList<Element>() {", "CODE"],
            ["{", "CODE"],
            ["add( div3 );", "CODE"],
            ["add( div4 );", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["body.insertChildren( 0, toMove );", "CODE"],
            [
                "String result = doc.toString().replaceAll( \"\\\\s+\", \"\" );",
                "CODE"
            ],
            [
                "assertEquals( \"<body><div3></div3><div4></div4><div1></div1><div2></div2></body>\", result );",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Jsoup-37": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Element.html"],
        "summary_text": ["Whitespaces are discared in Element.html() method"],
        "desc_hints": ["Parsers.xml", "Element.html", "prettyPrint"],
        "desc_text": [
            ["Hi,", []],
            [
                "I'm trying to make an exact copy of a document (changing just a couple of attributes and appending a few nodes) and the trim() inside the Element.html() is killing me.",
                ["OB", "SR"]
            ],
            ["I'm using Parsers.xml() and no prettyPrint.", ["OB"]],
            [
                "I think this trim should be enabled for prettyPrint only.",
                ["EB"]
            ]
        ]
    },
    "Closure-173": {
        "code_elements": ["Expected: probably x=a%b/b*c*2;"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Operator precedence breaks with certain combinations of *, / and %."
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Try to compile this: x = a % b / b * c * 2; using either simple or advanced optimizations",
                ["SR"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected: probably x=a%b/b*c*2;", "CODE"],
            [
                "Actual: x=2*a%b/b*c; (2 is incorrectly bumped to the beginning)",
                []
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Happens on latest version and online.", ["OB"]],
            [
                "By the looks of things the change occurred somewhere between versions 20111003 and 20111114.",
                ["OB"]
            ],
            ["Please provide any additional information below.", "QUERY"],
            [
                "As *, / and % all have the same operator precedence they should be left-to-right, but hoisting the 2 to the beginning means it's on the wrong side of the modulus operator.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Jsoup-1": {
        "code_elements": [
            "String html = \"foo <b>bar</b> baz\";",
            "String text = Jsoup.parse(html).text();",
            "System.out.println(text);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Parsing a HTML snippet causes the leading text to be moved to back"
        ],
        "desc_hints": ["Jsoup.parse", "System.out.println"],
        "desc_text": [
            ["Code:", ["SR"]],
            ["String html = \"foo <b>bar</b> baz\";", "CODE"],
            ["String text = Jsoup.parse(html).text();", "CODE"],
            ["System.out.println(text);", "CODE"],
            ["Result:", ["OB"]],
            ["bar baz foo", ["OB"]],
            ["Expected:", ["EB"]],
            ["foo bar baz", ["OB"]]
        ]
    },
    "Math-31": {
        "code_elements": [
            "System.out.println(new BinomialDistributionImpl(1000000, 0.5).inverseCumulativeProbability(0.5));"
        ],
        "stack_traces": [],
        "summary_hints": [
            "inverseCumulativeProbability",
            "BinomialDistribution"
        ],
        "summary_text": [
            "inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials."
        ],
        "desc_hints": [
            "inverseCumulativeProbability",
            "checkedCumulativeProbability",
            "BinomialDistributionImpl",
            "System.out.println",
            "cumulativeProbability"
        ],
        "desc_text": [
            [
                "The inverseCumulativeProbability method of the BinomialDistributionImpl class returns wrong value for large trials.",
                ["OB"]
            ],
            ["Following code will be reproduce the problem.", ["OB", "SR"]],
            [
                "System.out.println(new BinomialDistributionImpl(1000000, 0.5).inverseCumulativeProbability(0.5));",
                "CODE"
            ],
            ["This returns 499525, though it should be 499999.", ["OB", "EB"]],
            [
                "I'm not sure how it should be fixed, but the cause is that the cumulativeProbability method returns Infinity, not NaN.",
                ["OB", "EB"]
            ],
            [
                "As the result the checkedCumulativeProbability method doesn't work as expected.",
                ["OB", "EB"]
            ]
        ]
    },
    "Math-80": {
        "code_elements": [
            "// the reference values have been computed using routine DSTEMR",
            "// from the fortran library LAPACK version 3.2.1",
            "// the following line triggers the exception",
            "new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);",
            "double[] eigenValues = decomposition.getRealEigenvalues();",
            "for (int i = 0; i < refEigenValues.length; ++i) {",
            "assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);",
            "if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {",
            "assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);",
            "} else {",
            "assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["wrong result in eigen decomposition"],
        "desc_hints": [
            "refEigenValues.length",
            "dotProduct",
            "refEigenVectors",
            "refEigenValues",
            "mainTridiagonal",
            "assertEquals",
            "EigenDecomposition",
            "eigenValues",
            "testMathpbx02",
            "MathUtils.SAFE_MIN",
            "decomposition.getEigenvector",
            "secondaryTridiagonal",
            "ArrayRealVector",
            "EigenDecompositionImpl",
            "RealVector",
            "getNorm",
            "decomposition.getRealEigenvalues"
        ],
        "desc_text": [
            [
                "Some results computed by EigenDecompositionImpl are wrong.",
                ["OB"]
            ],
            [
                "The following case computed by Fortran Lapack fails with version 2.0",
                ["OB", "SR"]
            ],
            ["public void testMathpbx02() {", []],
            ["double[] mainTridiagonal = {", []],
            ["7484.860960227216, 18405.28129035345, 13855.225609560746,", []],
            ["10016.708722343366, 559.8117399576674, 6750.190788301587,", []],
            ["71.21428769782159", []],
            ["};", []],
            ["double[] secondaryTridiagonal = {", []],
            ["-4175.088570476366,1975.7955858241994,5193.178422374075,", []],
            ["1995.286659169179,75.34535882933804,-234.0808002076056", []],
            ["};", []],
            [
                "// the reference values have been computed using routine DSTEMR",
                "CODE"
            ],
            ["// from the fortran library LAPACK version 3.2.1", "CODE"],
            ["double[] refEigenValues = {", []],
            ["20654.744890306974412,16828.208208485466457,", []],
            ["6893.155912634994820,6757.083016675340332,", []],
            ["5887.799885688558788,64.309089923240379,", []],
            ["57.992628792736340", []],
            ["};", []],
            ["RealVector[] refEigenVectors = {", []],
            [
                "new ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),",
                []
            ],
            [
                "new ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),",
                []
            ],
            [
                "new ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),",
                []
            ],
            [
                "new ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),",
                []
            ],
            [
                "new ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),",
                []
            ],
            [
                "new ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),",
                []
            ],
            [
                "new ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})",
                []
            ],
            ["};", []],
            ["// the following line triggers the exception", "CODE"],
            ["EigenDecomposition decomposition =", []],
            [
                "new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);",
                "CODE"
            ],
            [
                "double[] eigenValues = decomposition.getRealEigenvalues();",
                "CODE"
            ],
            ["for (int i = 0; i < refEigenValues.length; ++i) {", "CODE"],
            [
                "assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);",
                "CODE"
            ],
            [
                "if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {",
                "CODE"
            ],
            [
                "assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);",
                "CODE"
            ],
            ["} else {", "CODE"],
            [
                "assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Cli-9": {
        "code_elements": [
            "// loop through the required options",
            "buff.append(iter.next());",
            "// loop through the required options",
            "buff.append(\" -\" + iter.next());"
        ],
        "stack_traces": [],
        "summary_hints": ["MissingOptionException.getMessage"],
        "summary_text": [
            "MissingOptionException.getMessage() changed from CLI 1.0 > 1.1"
        ],
        "desc_hints": [
            "Options.addOption",
            "MissingOptionException.getMessage",
            "iter.next",
            "Parser.checkRequiredOptions",
            "iter.hasNext",
            "buff.append"
        ],
        "desc_text": [
            [
                "The MissingOptionException.getMessage() string changed from CLI 1.0 > 1.1.",
                ["OB"]
            ],
            ["CLI 1.0 was poorly formatted but readable:", ["OB"]],
            ["Missing required options: -format-source-properties", ["OB"]],
            ["CLI 1.1 is almost unreadable:", []],
            ["Missing required options: formatsourceproperties", ["OB"]],
            [
                "In CLI 1.0 Options.addOption(Option) prefixed the stored options with a \"-\" and in CLI 1.1 it doesn't.",
                ["OB"]
            ],
            [
                "I would suggest changing Parser.checkRequiredOptions() to add the options to the error message with a prefix of \" -\":",
                ["OB"]
            ],
            ["OLD:", []],
            ["// loop through the required options", "CODE"],
            ["while (iter.hasNext())", []],
            ["{", []],
            ["buff.append(iter.next());", "CODE"],
            ["}", []],
            ["NEW:", []],
            ["// loop through the required options", "CODE"],
            ["while (iter.hasNext())", []],
            ["{", []],
            ["buff.append(\" -\" + iter.next());", "CODE"],
            ["}", []],
            ["Resulting in:", ["OB"]],
            ["Missing required options: -format -source -properties", ["OB"]]
        ]
    },
    "Math-54": {
        "code_elements": [
            "import org.apache.commons.math.dfp.DfpField;",
            "public class test {",
            "/**",
            "@param args",
            "*/",
            "public static void main(String[] args)",
            "{",
            "DfpField field = new DfpField(100);",
            "System.out.println(\"toDouble value of getZero() =\"+field.getZero().toDouble()+",
            "\"\\ntoDouble value of newDfp(0.0) =\"+",
            "field.newDfp(0.0).toDouble());",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["toDouble"],
        "summary_text": [
            "class Dfp toDouble method return -inf whan Dfp value is 0 \"zero\""
        ],
        "desc_hints": [
            "field.newDfp",
            "newDfp",
            "toDouble",
            "org.apache.commons.math.dfp.DfpField",
            "field.getZero",
            "ntoDouble",
            "DfpField",
            "0xFFF",
            "getZero",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I found a bug in the toDouble() method of the Dfp class.",
                ["OB"]
            ],
            [
                "If the Dfp's value is 0 \"zero\", the toDouble() method returns a negative infini.",
                ["OB"]
            ],
            [
                "This is because the double value returned has an exposant equal to 0xFFF",
                []
            ],
            ["and a significand is equal to 0.", ["OB"]],
            ["In the IEEE754 this is a -inf.", ["OB"]],
            [
                "To be equal to zero, the exposant and the significand must be equal to zero.",
                ["OB"]
            ],
            ["A simple test case is :", ["SR"]],
            ["----------------------------------------------", []],
            ["import org.apache.commons.math.dfp.DfpField;", "CODE"],
            ["public class test {", "CODE"],
            ["/**", "CODE"],
            ["@param args", "CODE"],
            ["*/", "CODE"],
            ["public static void main(String[] args)", "CODE"],
            ["{", "CODE"],
            ["DfpField field = new DfpField(100);", "CODE"],
            [
                "System.out.println(\"toDouble value of getZero() =\"+field.getZero().toDouble()+",
                "CODE"
            ],
            ["\"\\ntoDouble value of newDfp(0.0) =\"+", "CODE"],
            ["field.newDfp(0.0).toDouble());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "May be the simplest way to fix it is to test the zero equality at the begin of the toDouble() method, to be able to return the correctly signed zero ?",
                []
            ]
        ]
    },
    "Compress-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["createArchiveInputStream"],
        "summary_text": [
            "createArchiveInputStream detects text files less than 100 bytes as tar archives"
        ],
        "desc_hints": ["createArchiveInputStream", "ArchiveStreamFactory"],
        "desc_text": [
            [
                "The fix for COMPRESS-117 which modified ArchiveStreamFactory().createArchiveInputStream(inputstream) results in short text files (empirically seems to be those <= 100 bytes) being detected as tar archives which obviously is not desirable if one wants to know whether or not the files are archives.",
                []
            ],
            [
                "I'm not an expert on compressed archives but perhaps the heuristic that if a stream is interpretable as a tar file without an exception being thrown should only be applied on archives greater than 100 bytes?",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-12": {
        "code_elements": [
            "var x = '1';",
            "x += somefunction();",
            "} catch(e) {",
            "}",
            "x += \"2\";",
            "x += somefunction();",
            "} catch(e) {",
            "}",
            "document.write(x);",
            "}",
            "a();",
            "a();",
            "}catch(c) {",
            "}",
            "}catch(d) {",
            "}",
            "}",
            "b();",
            "b();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Try/catch blocks incorporate code not inside original blocks"
        ],
        "desc_hints": ["document.write", "HotSpot", "code.google.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Starting with this code:", ["SR"]],
            ["-----", []],
            ["function a() {", []],
            ["var x = '1';", "CODE"],
            ["try {", []],
            ["x += somefunction();", "CODE"],
            ["} catch(e) {", "CODE"],
            ["}", "CODE"],
            ["x += \"2\";", "CODE"],
            ["try {", []],
            ["x += somefunction();", "CODE"],
            ["} catch(e) {", "CODE"],
            ["}", "CODE"],
            ["document.write(x);", "CODE"],
            ["}", "CODE"],
            ["a();", "CODE"],
            ["a();", "CODE"],
            ["-----", []],
            ["It gets compiled to:", ["OB"]],
            ["-----", []],
            ["function b() {", []],
            ["var a;", []],
            ["try {", []],
            ["a = \"1\" + somefunction()", []],
            ["}catch(c) {", "CODE"],
            ["}", "CODE"],
            ["try {", []],
            ["a = a + \"2\" + somefunction()", []],
            ["}catch(d) {", "CODE"],
            ["}", "CODE"],
            ["document.write(a)", []],
            ["}", "CODE"],
            ["b();", "CODE"],
            ["b();", "CODE"],
            ["-----", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "The problem is that it's including the constant \"1\" and \"2\" inside the try block when the shouldn't be.",
                ["OB", "EB", "SR"]
            ],
            [
                "When executed uncompiled, the script prints \"1212\".",
                ["OB", "SR"]
            ],
            [
                "When compiled, the script prints \"undefinedundefined\".",
                ["OB", "SR"]
            ],
            [
                "This behavior doesn't happen if the entire function gets inlined, or if the code between the two try blocks is sufficiently complex.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: 20120430 (revision 1918)", []],
            ["Built on: 2012/04/30 18:02", []],
            ["java version \"1.6.0_33\"", []],
            [
                "Java(TM) SE Runtime Environment (build 1.6.0_33-b03-424-11M3720)",
                []
            ],
            [
                "Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode)",
                []
            ]
        ]
    },
    "Closure-142": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Internet Explorer runtime error after compilation."],
        "desc_hints": ["latest.zip"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            [
                "See attached HTML file in IE6+ (does not work in IE8 unless Compatibility View is turned *on* for",
                ["OB"]
            ],
            ["some reason).", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "Expected output is on the left-hand side of the page (it is generated by the raw source).",
                ["OB", "EB"]
            ],
            ["Google", []],
            ["Closure's output is on the right-hand side of the page.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["I downloaded compiler-latest.zip today (Nov.", ["OB"]],
            ["24, 2009, ~ 12:00 PM EST)", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "There is a variable called \"threshold\" which is used to generate an array of arrays in the attached",
                ["SR"]
            ],
            ["HTML file.", ["OB"]],
            [
                "If it is a small number, IE seems to pass arrays into the sort method (sorting an array",
                []
            ],
            ["of arrays) by value like all other browsers do.", ["OB"]],
            ["But when threshold is large enough (on my", ["OB"]],
            [
                "machine that happens around 250) IE starts passing the arrays in by value.",
                ["OB"]
            ],
            ["Google Closure", []],
            [
                "compiler has changed my original source from making local copies to modifying the arguments",
                []
            ],
            ["being passed into the sort comparator ...", []],
            [
                "but as a result of this IE behavior the Closure compiled",
                ["OB"]
            ],
            ["code breaks.", ["OB"]]
        ]
    },
    "Mockito-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["InjectMocks"],
        "summary_text": ["InjectMocks injects mock into wrong field"],
        "desc_hints": [
            "txtGateView",
            "txtGateLabel",
            "github.com",
            "InjectMocks",
            "txtNextView",
            "txtNextStep",
            "TextViews"
        ],
        "desc_text": [
            ["Using 1.10.19.", ["OB"]],
            [
                "When using @InjectMocks on some Android TextViews, the mock is injected into the wrong field.",
                ["OB", "SR"]
            ],
            [
                "We have two fields, txtGateView & txtNextStep in a class, and our test mocks out txtNextStep, then tried to inject.",
                ["OB", "SR"]
            ],
            ["This field is injected wrong, see screenshot.", ["OB"]],
            [
                "From our quick testing, the name txtNextView doesn't matter, that can be changed.",
                ["OB"]
            ],
            ["But both txtGateView and txtGateLabel messed things up.", ["OB"]],
            ["If we mock out both fields, it works correctly.", ["OB"]],
            ["Testproject: https://github.com/SimenB/emptyandroid", []],
            [
                "I don't know if it's because it's Android, but it was easiest for me to create a minimal test from existing code.",
                ["SR"]
            ]
        ]
    },
    "Jsoup-41": {
        "code_elements": [
            "Document doc = Jsoup.parse(html);",
            "Elements elements = doc.select(\"[style]\");",
            "for (Element e : elements) {",
            "System.out.println(e.hashCode());",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Element.hashCode"],
        "summary_text": [
            "Element.hashCode() ignores the content text of the element."
        ],
        "desc_hints": [
            "doc.select",
            "hashCode",
            "Element.hashCode",
            "Jsoup.parse",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Found this question on SO, OP was using Element.hashCode() and it wasn't woring right.",
                []
            ],
            [
                "The problem is that when jsoup generates the hashCode of an Element, the content text of the element will be ignored, and the hashCode is generated only based on the attributes, and the hashCode of the parent Element.",
                ["OB"]
            ],
            ["Using the following HTML:", ["OB", "SR"]],
            ["<html>", []],
            ["<head>", []],
            ["</head>", []],
            ["<body>", []],
            ["<div style=\"blah\">TODO: write content</div>", []],
            ["<div style=\"blah\">Nothing here</div>", ["OB"]],
            ["<p style=\"test\">Empty</p>", []],
            ["<p style=\"nothing\">Empty</p>", ["OB"]],
            ["</body>", []],
            ["</html>", []],
            ["And the following code:", ["OB", "SR"]],
            ["String html = //HTML posted above", []],
            ["Document doc = Jsoup.parse(html);", "CODE"],
            ["Elements elements = doc.select(\"[style]\");", "CODE"],
            ["for (Element e : elements) {", "CODE"],
            ["System.out.println(e.hashCode());", "CODE"],
            ["}", "CODE"],
            ["It gives:", ["OB"]],
            ["-148184373", []],
            ["-148184373", []],
            ["-1050420242", []],
            ["2013043377", []],
            [
                "I believe the hashCode should be different for the first two Elements, since the content is text is different.",
                ["OB", "EB"]
            ],
            ["Or is this intended behaviour?", []]
        ]
    },
    "Lang-53": {
        "code_elements": [
            "public void testRound()",
            "{",
            "Calendar testCalendar = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));",
            "testCalendar.set(2007, 6, 2, 8, 9, 50);",
            "Date date = testCalendar.getTime();",
            "System.out.println(\"Before round() \" + date);",
            "System.out.println(\"After round()  \" + DateUtils.round(date, Calendar.MINUTE));",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Dates.round"],
        "summary_text": [
            "Dates.round() behaves incorrectly for minutes and seconds"
        ],
        "desc_hints": [
            "testRound",
            "Calendar.getInstance",
            "Calendar.MINUTE",
            "testCalendar.set",
            "testCalendar.getTime",
            "DateUtils.round",
            "TimeZone.getTimeZone",
            "testCalendar",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Get unexpected output for rounding by minutes or seconds.",
                ["OB"]
            ],
            ["public void testRound()", "CODE"],
            ["{", "CODE"],
            [
                "Calendar testCalendar = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));",
                "CODE"
            ],
            ["testCalendar.set(2007, 6, 2, 8, 9, 50);", "CODE"],
            ["Date date = testCalendar.getTime();", "CODE"],
            ["System.out.println(\"Before round() \" + date);", "CODE"],
            [
                "System.out.println(\"After round()  \" + DateUtils.round(date, Calendar.MINUTE));",
                "CODE"
            ],
            ["}", "CODE"],
            ["--2.1 produces", ["OB"]],
            ["Before round() Mon Jul 02 03:09:50 CDT 2007", []],
            [
                "After round() Mon Jul 02 03:10:00 CDT 2007 \u2013 this is what I would expect",
                ["EB"]
            ],
            ["--2.2 and 2.3 produces", ["OB"]],
            ["Before round() Mon Jul 02 03:09:50 CDT 2007", []],
            [
                "After round() Mon Jul 02 03:01:00 CDT 2007 \u2013 this appears to be wrong",
                ["OB"]
            ]
        ]
    },
    "Closure-129": {
        "code_elements": [
            "console.log( /** @type {function(!string):!string} */ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable'])( '$version' ) );",
            "'use strict';console.log((0,(new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable)(\"$version\"));",
            "'use strict';console.log((new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable(\"$version\"));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Casting a function before calling it produces bad code and breaks plugin code"
        ],
        "desc_hints": [
            "ShockwaveFlash.ShockwaveFlash",
            "console.log",
            "GetVariable",
            "window.ActiveXObject"
        ],
        "desc_text": [
            ["1.", ["OB", "SR"]],
            ["Compile this code with ADVANCED_OPTIMIZATIONS:", ["SR"]],
            [
                "console.log( /** @type {function(!string):!string} */ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable'])( '$version' ) );",
                "CODE"
            ],
            ["produces:", []],
            [
                "'use strict';console.log((0,(new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable)(\"$version\"));",
                "CODE"
            ],
            ["2.", ["OB", "SR"]],
            ["Compare with this code:", ["SR"]],
            [
                "console.log( /** @type {!string} */ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable']( '$version' )) )",
                []
            ],
            ["produces:", []],
            [
                "'use strict';console.log((new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable(\"$version\"));",
                "CODE"
            ],
            [
                "Notice the (0,...) wrapping around the GetVariable function in the first example.",
                ["OB", "SR"]
            ],
            [
                "This causes the call to fail in every browser (this code is IE-only but it's just for a minimal example).",
                ["OB", "SR"]
            ],
            [
                "The second version produces a warning that the type of GetVariable could not be determined (I enabled type warnings), and it wouldn't be possible to define these in an externs file without making a horrible mess.",
                ["OB"]
            ],
            [
                "This applies to all cases where functions are cast, but only causes problems (other than bloat) with plugins like this.",
                ["OB", "SR"]
            ],
            [
                "It seems to serve no purpose whatsoever, so I assume it is a bug.",
                []
            ],
            [
                "Running on a mac, not sure what version but it reports Built on: 2013/02/12 17:00, so will have been downloaded about that time.",
                []
            ]
        ]
    },
    "Lang-57": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NullPointerException", "isAvailableLocale"],
        "summary_text": ["NullPointerException in isAvailableLocale(Locale)"],
        "desc_hints": [
            "org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet",
            "FindBugs",
            "NullPointerException",
            "cAvailableSet",
            "availableLocaleSet"
        ],
        "desc_text": [
            ["FindBugs pointed out:", []],
            [
                "UwF: Field not initialized in constructor: org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet",
                ["OB"]
            ],
            [
                "cAvailableSet is used directly once in the source - and if availableLocaleSet() hasn't been called it will cause a NullPointerException.",
                ["OB"]
            ]
        ]
    },
    "Closure-10": {
        "code_elements": [
            "var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;",
            "var a = (0.5 < Math.random() ? 1 : 2) + 7;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Wrong code generated if mixing types in ternary operator"
        ],
        "desc_hints": ["Math.random"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Use Google Closure Compiler to compile this code:", ["SR"]],
            ["var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;", "CODE"],
            ["You can either simple or advanced.", ["OB"]],
            ["It doesn't matter", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I'm seeing this as a result:", ["OB"]],
            ["var a = (0.5 < Math.random() ? 1 : 2) + 7;", "CODE"],
            [
                "This is obviously wrong as the '1' string literal got converted to a number, and 3+4 got combined into 7 while that's not ok as '1' + 3 + 4 = '134', not '17'.",
                ["OB", "SR"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Seems like this issue happens only when you are mixing types together.",
                ["OB"]
            ],
            [
                "If both 1 and 2 are string literals or if they are both numbers it won't happen.",
                ["OB", "SR"]
            ],
            [
                "I was also a little surprised to see this happening in simple mode as it actually breaks the behavior.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-58": {
        "code_elements": [
            "public class MyException extends RuntimeException { ... }"
        ],
        "stack_traces": [
            "Caused by: java.lang.IllegalArgumentException: Can not access private java.lang.Throwable java.lang.Throwable.cause (from class java.lang.Throwable; failed to set access: java.lang.IllegalAccessException: Reflection is not allowed on private java.lang.Throwable java.lang.Throwable.cause",
            "at com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:505)",
            "at com.fasterxml.jackson.databind.introspect.AnnotatedMember.fixAccess(AnnotatedMember.java:123)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSettableProperty(BeanDeserializerFactory.java:704)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(BeanDeserializerFactory.java:501)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer(BeanDeserializerFactory.java:356)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:114)"
        ],
        "summary_hints": ["JsonIgnoreProperties"],
        "summary_text": [
            "@JsonIgnoreProperties: ignoring the \"cause\" property of Throwable on GAE"
        ],
        "desc_hints": [
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer",
            "JsonIgnoreProperties",
            "AnnotatedMember.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSettableProperty",
            "BeanDeserializerFactory.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer",
            "java.lang.Throwable",
            "RuntimeException",
            "MyException",
            "com.fasterxml.jackson.databind.introspect.AnnotatedMember.fixAccess",
            "ClassUtil.java",
            "java.lang.Throwable.cause",
            "MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS",
            "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess",
            "java.lang.IllegalArgumentException",
            "java.lang.IllegalAccessException"
        ],
        "desc_text": [
            [
                "Deserializing an exception class from json on Google App Engine causes this error:",
                ["OB"]
            ],
            [
                "Caused by: java.lang.IllegalArgumentException: Can not access private java.lang.Throwable java.lang.Throwable.cause (from class java.lang.Throwable; failed to set access: java.lang.IllegalAccessException: Reflection is not allowed on private java.lang.Throwable java.lang.Throwable.cause",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:505)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.introspect.AnnotatedMember.fixAccess(AnnotatedMember.java:123)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSettableProperty(BeanDeserializerFactory.java:704)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(BeanDeserializerFactory.java:501)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer(BeanDeserializerFactory.java:356)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:114)",
                "STACK_TRACE"
            ],
            ["I tried preventing this by using @JsonIgnoreProperties:", ["SR"]],
            ["@JsonIgnoreProperties(\"cause\")", ["OB"]],
            [
                "public class MyException extends RuntimeException { ... }",
                "CODE"
            ],
            ["...", []],
            ["but the same error still occurs.", ["OB"]],
            ["What am I doing wrong?", []],
            ["What else could I do?", []],
            [
                "I've also considered setting MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS to false, but I don't like this solution because I need this setting to be true in some other cases (in particular, I provide no-arg constructors for Jackson, but they should't be public in my API).",
                []
            ]
        ]
    },
    "Math-72": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Brent solver returns the wrong value if either bracket endpoint is root"
        ],
        "desc_hints": ["UnivariateRealFunction"],
        "desc_text": [
            [
                "The solve(final UnivariateRealFunction f, final double min, final double max, final double initial) function returns yMin or yMax if min or max are deemed to be roots, respectively, instead of min or max.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-71": {
        "code_elements": [
            "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }",
            "/** @constructor",
            "* @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "no warnings when @private prop is redeclared on subclass"
        ],
        "desc_hints": ["SubFoo", "this.x_"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            [
                "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }",
                "CODE"
            ],
            ["then, in a separate file:", []],
            ["/** @constructor", "CODE"],
            [
                "* @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }",
                "CODE"
            ],
            ["then, compile with --jscomp_error=visibility", ["SR"]],
            ["Expected: You should get an error.", ["OB", "EB"]],
            ["Actual: No error.", ["OB", "EB"]],
            [
                "You get an error as appropriate if the second @private annotation is removed.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-22": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BZip2CompressorInputStream"],
        "summary_text": [
            "BZip2CompressorInputStream reads fewer bytes from truncated file than CPython's bz2 implementation"
        ],
        "desc_hints": ["test_bz2.py", "BZip2CompressorInputStream"],
        "desc_text": [
            [
                "Jython includes support for decompressing bz2 files using commons compress and shares regression tests with CPython.",
                ["OB", "SR"]
            ],
            [
                "The CPython test test_read_truncated in test_bz2.py passes under CPython but fails under Jython.",
                ["OB"]
            ],
            [
                "The BZip2CompressorInputStream is able to read 769 bytes from the truncated data rather than the 770 bytes that the CPython bz2 implementation can read.",
                ["OB"]
            ]
        ]
    },
    "JacksonCore-23": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DefaultPrettyPrinter.createInstance"],
        "summary_text": [
            "Make DefaultPrettyPrinter.createInstance() to fail for sub-classes"
        ],
        "desc_hints": ["DefaultPrettyPrinter"],
        "desc_text": [
            [
                "Pattern of \"blueprint object\" (that is, having an instance not used as-is, but that has factory method for creating actual instance) is used by Jackson in couple of places; often for things that implement Instantiatable.",
                []
            ],
            [
                "But one problem is that unless method is left abstract, sub-classing can be problematic -- if sub-class does not override method, then calls will result in an instance of wrong type being created.",
                ["OB"]
            ],
            [
                "And this is what can easily happen with DefaultPrettyPrinter.",
                ["OB"]
            ],
            [
                "A simple solution is for base class to make explicit that if base implementation is called, then instance can not be a sub-class (that is, it is only legal to call on DefaultPrettyPrinter, but no sub-class).",
                ["OB"]
            ],
            [
                "This is not optimal (ideally check would be done compile-time), but better than getting a mysterious failure.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-56": {
        "code_elements": ["int ix = value.indexOf('_');"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Deserializing locale assumes JDK separator (underscore), does not accept RFC specified (hyphen)"
        ],
        "desc_hints": [
            "FromStringDeserializer.java",
            "value.indexOf",
            "tools.ietf.org"
        ],
        "desc_text": [
            [
                "When deserializing a locale Jackson currently uses the underscore character as the separator rather than the dash.",
                ["OB", "SR"]
            ],
            ["Specifically, in FromStringDeserializer.java line 234:", []],
            ["int ix = value.indexOf('_');", "CODE"],
            [
                "Many locale implementations use dash as the separator as per https://tools.ietf.org/html/rfc5646",
                []
            ],
            [
                "Given the RFC states that only the characters a-z A-Z and - are valid it should be possible to leave the current code in for backward-compatibility but it should also check for '-' as a separator.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-111": {
        "code_elements": [
            "class MyBean {",
            "private AtomicReference<AtomicReference<Integer>> refRef;",
            "public AtomicReference<AtomicReference<Integer>> getRefRef() {",
            "return refRef;",
            "}",
            "public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {",
            "this.refRef = refRef;",
            "}",
            "}",
            "void myTest() throws IOException {",
            "ObjectMapper objectMapper = new ObjectMapper();",
            "ObjectReader objectReader = objectMapper.readerFor(MyBean.class);",
            "MyBean intRef = objectReader.readValue(\" {\\\"refRef\\\": 2 } \");",
            "Assertions.assertNotNull(intRef.refRef); // succeeds",
            "Assertions.assertNotNull(intRef.refRef.get()); // succeeds",
            "Assertions.assertEquals(intRef.refRef.get().get(), new Integer(2)); // succeeds",
            "MyBean nullRef = objectReader.readValue(\" {\\\"refRef\\\": null } \");",
            "Assertions.assertNotNull(intRef.refRef); // succeeds",
            "Assertions.assertNotNull(intRef.refRef.get()); // fails",
            "Assertions.assertNull(intRef.refRef.get().get()); // fails",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TypeRef"],
        "summary_text": [
            "Deserialize null, when java type is \"TypeRef of TypeRef of T\", does not provide \"Type(Type(null))\""
        ],
        "desc_hints": [
            "_valueDeserializer",
            "setRefRef",
            "fullType",
            "intRef",
            "nullProvider",
            "propertyCreator",
            "nullRef",
            "valueDeserializer.getNull",
            "ReferenceTypeDeserializer",
            "Assertions.assertNotNull",
            "getRefRef",
            "ObjectReader",
            "this.refRef",
            "Assertions.assertNull",
            "ObjectMapper",
            "intRef.refRef.get",
            "objectMapper.readerFor",
            "Assertions.assertEquals",
            "getNull",
            "refRef",
            "objectReader",
            "AtomicReference",
            "intRef.refRef",
            "myTest",
            "objectReader.readValue",
            "objectMapper",
            "MyBean.class",
            "MyBean",
            "com.fasterxml.jackson.core"
        ],
        "desc_text": [
            ["Dependency", []],
            ["jackson = '2.9.7'", []],
            [
                "compile \"com.fasterxml.jackson.core:jackson-databind:$jackson\"",
                []
            ],
            ["Short explanation", []],
            [
                "In Kotlin, I got an issue when I deserialize the value in the context of a reference type that include another reference type.",
                ["OB", "SR"]
            ],
            [
                "I provide here a reproduction scenario in Java based on AtomicReference (I don't think there is a real use-case that use an AR of AR of Integer, but with a kind of DSL, it may happen to have a similar inclusion...)",
                ["SR"]
            ],
            [
                "So, when we deserialize an 22, we get an AR of AR of 22 as expected.",
                ["OB", "EB"]
            ],
            [
                "But when we deserialize the null value, we get an AR of null (instead of AR of AR of null).",
                ["OB", "EB"]
            ],
            ["I think there is 2 issues:", []],
            [
                "(1) the getNull method of AtomicReference always returns \"new AtomicReference()\".",
                ["OB"]
            ],
            [
                "I think it should be smarter and use contextual information such fullType or simply call _valueDeserializer.getNull() -- but _valueDeserializer was null during my tests because of (2).",
                ["EB", "SR"]
            ],
            [
                "(2) the bean propertyCreator has distinct deserializer and nullProvider.",
                ["OB", "SR"]
            ],
            [
                "In the case of ReferenceTypeDeserializer, a new contextual deserializer is created, which is able to deserialize its content.",
                ["OB"]
            ],
            [
                "Then the deserializer of the bean propertyCreator is updated, but not its nullProvider",
                ["OB"]
            ],
            ["To reproduce", ["SR"]],
            ["class MyBean {", "CODE"],
            [
                "private AtomicReference<AtomicReference<Integer>> refRef;",
                "CODE"
            ],
            [
                "public AtomicReference<AtomicReference<Integer>> getRefRef() {",
                "CODE"
            ],
            ["return refRef;", "CODE"],
            ["}", "CODE"],
            [
                "public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {",
                "CODE"
            ],
            ["this.refRef = refRef;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@Test", []],
            ["void myTest() throws IOException {", "CODE"],
            ["ObjectMapper objectMapper = new ObjectMapper();", "CODE"],
            [
                "ObjectReader objectReader = objectMapper.readerFor(MyBean.class);",
                "CODE"
            ],
            [
                "MyBean intRef = objectReader.readValue(\" {\\\"refRef\\\": 2 } \");",
                "CODE"
            ],
            ["Assertions.assertNotNull(intRef.refRef); // succeeds", "CODE"],
            [
                "Assertions.assertNotNull(intRef.refRef.get()); // succeeds",
                "CODE"
            ],
            [
                "Assertions.assertEquals(intRef.refRef.get().get(), new Integer(2)); // succeeds",
                "CODE"
            ],
            [
                "MyBean nullRef = objectReader.readValue(\" {\\\"refRef\\\": null } \");",
                "CODE"
            ],
            ["Assertions.assertNotNull(intRef.refRef); // succeeds", "CODE"],
            ["Assertions.assertNotNull(intRef.refRef.get()); // fails", "CODE"],
            [
                "Assertions.assertNull(intRef.refRef.get().get()); // fails",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Lang-59": {
        "code_elements": [
            "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {",
            "if (width > 0) {",
            "ensureCapacity(size + width);",
            "String str = (obj == null ? getNullText() : obj.toString());",
            "int strLen = str.length();",
            "if (strLen >= width)",
            "{",
            "==>            str.getChars(0, strLen, buffer, size);   <==== BUG: it should be str.getChars(0, width, buffer, size);",
            "}",
            "else {",
            "int padLen = width - strLen;",
            "str.getChars(0, strLen, buffer, size);",
            "for (int i = 0; i < padLen; i++)",
            "{",
            "buffer[size + strLen + i] = padChar;",
            "}",
            "}",
            "size += width;",
            "}",
            "return this;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "StrBuilder",
            "appendFixedWidthPadRight",
            "ArrayIndexOutOfBoundsException"
        ],
        "summary_text": [
            "Bug in method appendFixedWidthPadRight of class StrBuilder causes an ArrayIndexOutOfBoundsException"
        ],
        "desc_hints": [
            "padLen",
            "obj.toString",
            "padChar",
            "StrBuilder",
            "ArrayIndexOutOfBoundsException",
            "ensureCapacity",
            "appendFixedWidthPadLeft",
            "appendFixedWidthPadRight",
            "str.length",
            "strLen",
            "str.getChars",
            "getNullText"
        ],
        "desc_text": [
            [
                "There's a bug in method appendFixedWidthPadRight of class StrBuilder:",
                []
            ],
            [
                "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {",
                "CODE"
            ],
            ["if (width > 0) {", "CODE"],
            ["ensureCapacity(size + width);", "CODE"],
            [
                "String str = (obj == null ? getNullText() : obj.toString());",
                "CODE"
            ],
            ["int strLen = str.length();", "CODE"],
            ["if (strLen >= width)", "CODE"],
            ["{", "CODE"],
            [
                "==>            str.getChars(0, strLen, buffer, size);   <==== BUG: it should be str.getChars(0, width, buffer, size);",
                "CODE"
            ],
            ["}", "CODE"],
            ["else {", "CODE"],
            ["int padLen = width - strLen;", "CODE"],
            ["str.getChars(0, strLen, buffer, size);", "CODE"],
            ["for (int i = 0; i < padLen; i++)", "CODE"],
            ["{", "CODE"],
            ["buffer[size + strLen + i] = padChar;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["size += width;", "CODE"],
            ["}", "CODE"],
            ["return this;", "CODE"],
            ["}", "CODE"],
            [
                "This is causing an ArrayIndexOutOfBoundsException, so this method is unusable when strLen > width.",
                ["OB"]
            ],
            [
                "It's counterpart method appendFixedWidthPadLeft seems to be ok.",
                ["OB"]
            ]
        ]
    },
    "Cli-11": {
        "code_elements": [
            ">   private static final String OPTION_TARGET = \"t\";",
            ">   private static final String OPTION_TARGET_LONG = \"target\";",
            "{",
            ">         parsedLine = parser.parse(cmdLineOpts, args);",
            ">       }",
            "catch (ParseException pe)",
            "{",
            ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
            "> \"\\n\");",
            ">         HelpFormatter hf = new HelpFormatter();",
            ">         hf.printHelp(USAGE, cmdLineOpts);",
            ">         System.exit(-1);",
            ">       }",
            ">   if (parsedLine.hasOption(OPTION_TARGET))",
            "{",
            ">     System.out.println(\"processing selected target: \" +",
            "> parsedLine.getOptionValue(OPTION_TARGET));",
            ">   }"
        ],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser interupts \"-target opt\" as \"-t arget opt\""
        ],
        "desc_hints": [
            "System.exit",
            "parsedLine.hasOption",
            "parsedLine.getOptionValue",
            "HelpFormatter",
            "pe.getMessage",
            "parser.parse",
            "posix.special.option",
            "PosixParser",
            "cmdLineOpts",
            "generateTarget",
            "Dsystem.property",
            "foobar.com",
            "hf.printHelp",
            "system.property",
            "parsedLine",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "This was posted on the Commons-Developer list and confirmed as a bug.",
                []
            ],
            ["> Is this a bug?", []],
            ["Or am I using this incorrectly?", []],
            ["> I have an option with short and long values.", ["OB", "SR"]],
            ["Given code that is", []],
            [
                "> essentially what is below, with a PosixParser I see results as",
                ["OB"]
            ],
            ["> follows:", []],
            [
                "> A command line with just \"-t\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block", ["OB"]],
            ["> (OK)", []],
            [
                "> A command line with just \"-target\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block (OK)", []],
            [
                "> A command line with just \"-t foobar.com\" prints out \"processing selected",
                ["OB", "SR"]
            ],
            ["> target: foobar.com\" (OK)", []],
            [
                "> A command line with just \"-target foobar.com\" prints out \"processing",
                ["SR"]
            ],
            ["> selected target: arget\" (ERROR?)", []],
            [
                "> ======================================================================",
                []
            ],
            ["> ==", []],
            ["> =======================", []],
            [">   private static final String OPTION_TARGET = \"t\";", "CODE"],
            [
                ">   private static final String OPTION_TARGET_LONG = \"target\";",
                "CODE"
            ],
            ["> // ...", []],
            ["> Option generateTarget = new Option(OPTION_TARGET,", []],
            [">                                    OPTION_TARGET_LONG,", []],
            [">                                    true,", []],
            [
                ">                                    \"Generate files for the specified",
                ["OB"]
            ],
            ["> target machine\");", []],
            ["> // ...", []],
            ["> try", []],
            ["{", "CODE"],
            [">         parsedLine = parser.parse(cmdLineOpts, args);", "CODE"],
            [">       }", "CODE"],
            ["catch (ParseException pe)", "CODE"],
            ["{", "CODE"],
            [
                ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
                "CODE"
            ],
            ["> \"\\n\");", "CODE"],
            [">         HelpFormatter hf = new HelpFormatter();", "CODE"],
            [">         hf.printHelp(USAGE, cmdLineOpts);", "CODE"],
            [">         System.exit(-1);", "CODE"],
            [">       }", "CODE"],
            [">   if (parsedLine.hasOption(OPTION_TARGET))", "CODE"],
            ["{", "CODE"],
            [
                ">     System.out.println(\"processing selected target: \" +",
                "CODE"
            ],
            ["> parsedLine.getOptionValue(OPTION_TARGET));", "CODE"],
            [">   }", "CODE"],
            [
                "It is a bug but it is due to well defined behaviour (so that makes me feel a",
                []
            ],
            ["little better about myself .", ["OB"]],
            ["To support special", []],
            [
                "(well I call them special anyway) like -Dsystem.property=value we need to be",
                []
            ],
            [
                "able to examine the first character of an option.",
                ["OB", "EB", "SR"]
            ],
            ["If the first character is", ["OB"]],
            [
                "itself defined as an Option then the remainder of the token is used as the",
                ["SR"]
            ],
            ["value, e.g.", ["OB"]],
            [
                "'D' is the token, it is an option so 'system.property=value' is the",
                []
            ],
            ["argument value for that option.", ["OB"]],
            ["This is the behaviour that we are seeing for", []],
            ["your example.", ["OB", "SR"]],
            [
                "'t' is the token, it is an options so 'arget' is the argument value.",
                []
            ],
            [
                "I suppose a solution to this could be to have a way to specify properties for",
                []
            ],
            ["parsers.", ["OB"]],
            ["In this case 'posix.special.option == true' for turning", []],
            ["on special options.", ["OB", "SR"]],
            ["I'll have a look into this and let you know.", []],
            [
                "Just to keep track of this and to get you used to how we operate, can you log a",
                []
            ],
            ["bug in bugzilla for this.", []],
            ["Thanks,", []],
            ["-John K", []]
        ]
    },
    "Jsoup-29": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "'\\n' and redundant space char is not needed from title"
        ],
        "desc_hints": ["docs.oracle.com", "Jsoup.connect", "nimbus.html"],
        "desc_text": [
            [
                "We assume that we just need 1 line title string from below uri.",
                ["OB", "SR"]
            ],
            [
                "http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/nimbus.html",
                []
            ],
            [
                "we can see title like as below by viewing page source code in that page (of course, It is real situation.)",
                ["OB"]
            ],
            ["<title>Nimbus Look and Feel (The Java\u2122 Tutorials >", []],
            [
                "Creating a GUI With JFC/Swing > Modifying the Look and Feel)",
                ["SR"]
            ],
            ["</title>", []],
            [
                "maybe some another page has multiline title, but browser will shows ordinarily.",
                ["OB"]
            ],
            [
                "in the other words, Browser shows one line title without CR/LF and redundant space character",
                ["OB", "EB"]
            ],
            [
                "whether string has newline character or many redundant space or tab, or not.",
                ["OB"]
            ],
            ["But,", ["OB"]],
            [
                "When we execute Jsoup.connect(uri).get().title(); after we assign",
                ["OB"]
            ],
            [
                "\"http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/nimbus.html\" into uri variable as String,",
                []
            ],
            ["it gives two lines like below,", ["OB"]],
            [
                "\"Nimbus Look and Feel (The Java\u2122 Tutorials > \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"",
                ["OB"]
            ],
            [
                "\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Creating a GUI With JFC/Swing > Modifying the Look and Feel)\"",
                ["SR"]
            ],
            [
                "\"Nimbus Look and Feel (The Java\u2122 Tutorials > Creating a GUI With JFC/Swing > Modifying the Look and Feel)\"",
                ["SR"]
            ],
            ["is better, I think.", []],
            ["Humm ...", []],
            ["do you have another idea?", []]
        ]
    },
    "Closure-97": {
        "code_elements": [
            "i = -1 >>> 0 ;",
            "Expected: i = -1 >>> 0 ;  // or // i = 4294967295 ;",
            "Instead: i = -1 ;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Unsigned Shift Right (>>>) bug operating on negative numbers"
        ],
        "desc_hints": ["Math.pow", "compiler.appspot.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["i = -1 >>> 0 ;", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected: i = -1 >>> 0 ;  // or // i = 4294967295 ;", "CODE"],
            ["Instead: i = -1 ;", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "The UI version as of 7/18/2001 (http://closure-compiler.appspot.com/home)",
                []
            ],
            ["Please provide any additional information below.", "QUERY"],
            ["-1 >>> 0 == 4294967295 == Math.pow( 2, 32 ) - 1", ["OB", "SR"]],
            ["Test in any browser and/or See ECMA-262-5 11.7.3", ["OB", "SR"]]
        ]
    },
    "Time-22": {
        "code_elements": [
            "//set default time zone with this argument -Duser.timezone=\"GMT\"",
            "public void testForJodaForum()",
            "{",
            "System.out.println(\"Timezone: \" + DateTimeZone.getDefault());",
            "//Duration of more than 24 hours",
            "Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 + DateTimeConstants.MILLIS_PER_MINUTE * 50",
            "+ DateTimeConstants.MILLIS_PER_SECOND * 14);",
            "System.out.println(\"Duration before: \" + aDuration);",
            "Period period = aDuration.toPeriod();",
            "System.out.println(\"Period after: \" + period);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Duration.toPeriod"],
        "summary_text": ["#113 Duration.toPeriod with fixed time zones."],
        "desc_hints": [
            "DateTimeConstants.MILLIS_PER_SECOND",
            "DateTimeConstants.MILLIS_PER_HOUR",
            "testForJodaForum",
            "aDuration.toPeriod",
            "DateTimeConstants.MILLIS_PER_MINUTE",
            "toPeriod",
            "Duser.timezone",
            "Duration.toPeriod",
            "DateTimeZone.getDefault",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I have a question concerning the conversion of a Duration to Period.",
                []
            ],
            [
                "I'm not sure if this is a bug, or if there is a different way to do this.",
                []
            ],
            [
                "The basis of the problem, is that using Duration.toPeriod() uses the chronology of the default time zone to do the conversion.",
                []
            ],
            [
                "This can cause different results from a timezone with DST and one without.",
                ["OB"]
            ],
            ["This can be reproduced easily with this test.", ["SR"]],
            [
                "//set default time zone with this argument -Duser.timezone=\"GMT\"",
                "CODE"
            ],
            ["public void testForJodaForum()", "CODE"],
            ["{", "CODE"],
            [
                "System.out.println(\"Timezone: \" + DateTimeZone.getDefault());",
                "CODE"
            ],
            ["//Duration of more than 24 hours", "CODE"],
            [
                "Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 + DateTimeConstants.MILLIS_PER_MINUTE * 50",
                "CODE"
            ],
            ["+ DateTimeConstants.MILLIS_PER_SECOND * 14);", "CODE"],
            ["System.out.println(\"Duration before: \" + aDuration);", "CODE"],
            ["Period period = aDuration.toPeriod();", "CODE"],
            ["System.out.println(\"Period after: \" + period);", "CODE"],
            ["}", "CODE"],
            ["A fixed time zone produces this output", []],
            ["Timezone: Etc/GMT", []],
            ["Duration before: PT111014S", []],
            ["Period after: P1DT6H50M14S", ["OB"]],
            ["A DST time zone produces this output", ["OB"]],
            ["Timezone: America/Chicago", []],
            ["Duration before: PT111014S", []],
            ["Period after: PT30H50M14S", ["OB"]],
            [
                "In the joda code, Duration.toPeriod() uses a period constructor that takes the chronology, but null is passed in, so the chronology of the default time zone is used, which leads to this behavior.",
                ["OB"]
            ],
            [
                "The javadoc of toPeriod() states that only precise fields of hours, minutes, seconds, and millis will be converted.",
                ["OB"]
            ],
            [
                "But for a fixed timezone, days and weeks are also precise, which is stated in the javadoc for toPeriod(Chronology chrono).",
                ["OB"]
            ],
            [
                "In our app, we need consistent behavior regardless of the default time zone, which is to have all the extra hours put into the hours bucket.",
                []
            ],
            [
                "Since Duration is supposed to be a 'time zone independent' length of time, I don't think we should have to do any chronology manipulation to get this to work.",
                ["EB"]
            ],
            ["Any help is appreciated.", []],
            ["Thanks,", []],
            ["Cameron", []]
        ]
    },
    "Closure-80": {
        "code_elements": [],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
            "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
            "at com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(Unknown Source)",
            "at com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(Unknown Source)",
            "at com.google.javascript.jscomp.PureFunctionIdentifier$FunctionAnalyzer.visit(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
            "at com.google.javascript.jscomp.PureFunctionIdentifier.process(Unknown Source)",
            "at com.google.javascript.jscomp.PureFunctionIdentifier$Driver.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
            "at java.lang.Thread.run(Thread.java:680)",
            "Caused by: java.lang.IllegalStateException: Unexpected expression nodeDELPROP 1 [sourcename: stdin]",
            "... 23 more"
        ],
        "summary_hints": ["nodeDELPROP"],
        "summary_text": ["Unexpected expression nodeDELPROP 1"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "FunctionAnalyzer.visit",
            "Thread.java",
            "com.google.javascript.jscomp.NodeTraversal.traverse",
            "com.google.javascript.jscomp.PureFunctionIdentifier.process",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "nodeDELPROP",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.NodeTraversal.traverseFunction",
            "Driver.process",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "com.google.javascript.jscomp.Compiler",
            "NamedPass.process",
            "com.google.javascript.jscomp.PureFunctionIdentifier",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "com.google.javascript.jscomp.Compiler.runCallable",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.Compiler.optimize",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "java.lang.IllegalStateException",
            "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch"
        ],
        "desc_text": [
            [
                "As of version 20110119 of the closure compiler, the following code produces an error when it's compiled with advanced compilation enabled:",
                ["OB", "SR"]
            ],
            ["function x() { return delete a; }", []],
            ["The exact output of the compiler:", []],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["Unexpected expression nodeDELPROP 1 [sourcename: stdin]", ["SR"]],
            ["parent:RETURN 1 [sourcename: stdin]", ["OB"]],
            ["Node(RETURN): stdin:1:15", []],
            ["function x() { return delete a; }", []],
            ["Parent(BLOCK): stdin:1:13", []],
            ["function x() { return delete a; }", []],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                "STACK_TRACE"
            ],
            ["Please report this problem.", []],
            ["Unexpected expression nodeDELPROP 1 [sourcename: stdin]", ["SR"]],
            ["parent:RETURN 1 [sourcename: stdin]", ["OB"]],
            ["Node(RETURN): stdin:1:15", []],
            ["function x() { return delete a; }", []],
            ["Parent(BLOCK): stdin:1:13", []],
            ["function x() { return delete a; }", []],
            [
                "at com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PureFunctionIdentifier$FunctionAnalyzer.visit(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PureFunctionIdentifier.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PureFunctionIdentifier$Driver.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Thread.java:680)", "STACK_TRACE"],
            [
                "Caused by: java.lang.IllegalStateException: Unexpected expression nodeDELPROP 1 [sourcename: stdin]",
                "STACK_TRACE"
            ],
            ["parent:RETURN 1 [sourcename: stdin]", ["OB"]],
            ["... 23 more", "STACK_TRACE"]
        ]
    },
    "Closure-176": {
        "code_elements": [
            "/**",
            "* @constructor",
            "*/",
            "function MyClass() {",
            "this.value = 1;",
            "}",
            "MyClass.prototype.show = function() {",
            "window.console.log(this.value)",
            "}",
            "/**",
            "* @type {MyClass}",
            "*/",
            "var x = null;",
            "x.show();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "initial type of variable wrong when initialize in a \"var\" statement with type declaration."
        ],
        "desc_hints": [
            "MyClass.prototype.show",
            "MyClass",
            "this.value",
            "window.console.log"
        ],
        "desc_text": [
            [
                "The following code doesn't give any warning even though it is an obvious bug:",
                ["OB"]
            ],
            ["-------------===============================---------", []],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["function MyClass() {", "CODE"],
            ["this.value = 1;", "CODE"],
            ["}", "CODE"],
            ["MyClass.prototype.show = function() {", "CODE"],
            ["window.console.log(this.value)", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            ["* @type {MyClass}", "CODE"],
            ["*/", "CODE"],
            ["var x = null;", "CODE"],
            ["x.show();", "CODE"],
            ["-------------===============================---------", []],
            [
                "However, if you remove the @type from the var declaration, then closure realizes the problem and warns about x being null rather than an Object.",
                ["OB"]
            ],
            [
                "In any case, since x \"can be null\", closure should warn about a potential null pointer error, and suggest to guard against the null value, like it does if we try to pass x as an argument where a non-null type is expected.",
                ["OB", "EB"]
            ],
            [
                "That could be an optional behavior protected behind a flag, but it would definitely help catch lots of errors and write safer code.",
                ["OB"]
            ],
            [
                "I am using the latest closure version available to date, on Ubuntu 13.04, on an amd64 machine.",
                ["SR"]
            ]
        ]
    },
    "JacksonDatabind-78": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Jackson Deserializer security vulnerability via default typing (CVE-2017-7525)"
        ],
        "desc_hints": ["fasterxml.com"],
        "desc_text": [["I have send email to info@fasterxml.com", []]]
    },
    "Closure-11": {
        "code_elements": [
            "var makeClass = function(protoMethods) {",
            "var clazz = function() {",
            "this.initialize.apply(this, arguments);",
            "}",
            "for (var i in protoMethods) {",
            "clazz.prototype[i] = protoMethods[i];",
            "}",
            "return clazz;",
            "}",
            "/**",
            "* @constructor",
            "* @param {{name: string, height: number}} options",
            "*/",
            "var Person = function(options){};",
            "/**",
            "* @this {Person}",
            "* @param {{name: string, height: number}} options",
            "*/",
            "initialize: function(options) {",
            "/** @type {string} */ this.name_ = options.thisPropDoesNotExist;",
            "/**",
            "* @param {string} message",
            "* @this {Person}",
            "*/",
            "say: function(message) {",
            "window.console.log(this.name_ + ' says: ' + message);",
            "}",
            "var joe = new Person({name: 'joe', height: 300});",
            "joe.say('hi');",
            "/** @type {string} */ this.name_ = options.thisPropDoesNotExist;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Record type invalid property not reported on function with @this annotation"
        ],
        "desc_hints": [
            "options.thisPropDoesNotExist",
            "protoMethods",
            "externsValidation",
            "this.name_",
            "repro.js",
            "checkTypes",
            "compiler.jar",
            "this.initialize.apply",
            "clazz.prototype",
            "makeClass",
            "joe.say",
            "Person.prototype",
            "window.console.log"
        ],
        "desc_text": [
            ["Code:", ["SR"]],
            ["var makeClass = function(protoMethods) {", "CODE"],
            ["var clazz = function() {", "CODE"],
            ["this.initialize.apply(this, arguments);", "CODE"],
            ["}", "CODE"],
            ["for (var i in protoMethods) {", "CODE"],
            ["clazz.prototype[i] = protoMethods[i];", "CODE"],
            ["}", "CODE"],
            ["return clazz;", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @param {{name: string, height: number}} options", "CODE"],
            ["*/", "CODE"],
            ["var Person = function(options){};", "CODE"],
            ["Person = makeClass(/** @lends Person.prototype */ {", []],
            ["/**", "CODE"],
            ["* @this {Person}", "CODE"],
            ["* @param {{name: string, height: number}} options", "CODE"],
            ["*/", "CODE"],
            ["initialize: function(options) {", "CODE"],
            [
                "/** @type {string} */ this.name_ = options.thisPropDoesNotExist;",
                "CODE"
            ],
            ["},", []],
            ["/**", "CODE"],
            ["* @param {string} message", "CODE"],
            ["* @this {Person}", "CODE"],
            ["*/", "CODE"],
            ["say: function(message) {", "CODE"],
            ["window.console.log(this.name_ + ' says: ' + message);", "CODE"],
            ["}", "CODE"],
            ["});", []],
            ["var joe = new Person({name: 'joe', height: 300});", "CODE"],
            ["joe.say('hi');", "CODE"],
            ["compiled with:", []],
            [
                "java -jar build/compiler.jar --formatting=PRETTY_PRINT --jscomp_error=checkTypes --jscomp_error=externsValidation --compilation_level=SIMPLE_OPTIMIZATIONS repro.js",
                []
            ],
            ["I would expect an error on this line:", ["EB"]],
            [
                "/** @type {string} */ this.name_ = options.thisPropDoesNotExist;",
                "CODE"
            ],
            ["which works in other contexts.", ["OB"]],
            ["Thanks!", []]
        ]
    },
    "JxPath-11": {
        "code_elements": [
            "registerNamespace(A,\"/http...\");",
            "registerNamespace(B,\"/http...\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Incomplete handling of undefined namespaces"],
        "desc_hints": [
            "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
            "myAttr",
            "registerNamespace",
            "nsa.gov"
        ],
        "desc_text": [
            ["Mcduffey, Joe <jdmcduf@nsa.gov>", []],
            [
                "Can someone tell me how to register namespaces so that attributes with namespaces does not cause the exception",
                ["OB"]
            ],
            [
                "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
                []
            ],
            ["unknown namespace prefix: xsi", []],
            ["For example the following", ["OB", "SR"]],
            ["<ElementA A:myAttr=\"Mytype\">", []],
            ["<B:ElementB>MY VALUE</B:ElementB>", []],
            ["</ElementA>", []],
            ["Would result in the following exception:", ["OB"]],
            [
                "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
                []
            ],
            ["unknown namespace prefix: A", []],
            [
                "FYI: In this example there was a namespace decaration in the file and I also manually called the",
                ["SR"]
            ],
            ["registerNamespace(A,\"/http...\");", "CODE"],
            ["registerNamespace(B,\"/http...\");", "CODE"],
            ["There was no problem encountered for elements.", ["OB"]],
            ["Only attributes.", ["OB"]],
            ["Can someone help?", []],
            ["Thanks.", ["OB"]]
        ]
    },
    "Jsoup-15": {
        "code_elements": [
            "header = jQuery('#header_features');",
            "if(header.length){",
            "header",
            ".prepend('<a class=\"prevPage browse left \" />')",
            ".append('<a class=\"nextPage browse right\" />');",
            "items",
            ".wrapAll('<div class=\"scrollable\"/>')",
            ".wrapAll('<ul class=\"items\"/>')",
            ".wrap('<li/>');",
            "}",
            "header = jQuery('#header_features');",
            "if(header.length){",
            "header",
            ".prepend('",
            "<a class=\"prevPage browse left \">') .append('</a>",
            "<a class=\"nextPage browse right\">'); items .wrapAll('",
            "<div class=\"scrollable\">",
            "') .wrapAll('",
            "<ul class=\"items\">",
            "') .wrap('",
            "<li>'); }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["<script> containing tags causes issues"],
        "desc_hints": [
            "wrapAll",
            "prevPage",
            "header.length",
            "techcrunch.com",
            "nextPage"
        ],
        "desc_text": [
            [
                "Thanks for the release, using 1.6.0 now, and getting issues with http://techcrunch.com.",
                ["OB", "SR"]
            ],
            [
                "html has a script tag containing tags inside of javascript strings.",
                ["OB"]
            ],
            [
                "Seems to be treating those as real tag openers, creating tag elements and causing the close script tag to be ignored and therefore include a ton of other stuff.",
                ["OB", "SR"]
            ],
            ["I think this was working in 1.5.2.", []],
            ["Simplified example:", ["OB", "SR"]],
            ["<HTML>", []],
            ["<body>", []],
            ["<div class=vsc sig=Uga>", []],
            ["<div class=before></div>", []],
            ["<script type=\"text/javascript\">", []],
            ["header = jQuery('#header_features');", "CODE"],
            ["if(header.length){", "CODE"],
            ["header", "CODE"],
            [".prepend('<a class=\"prevPage browse left \" />')", "CODE"],
            [".append('<a class=\"nextPage browse right\" />');", "CODE"],
            ["items", "CODE"],
            [".wrapAll('<div class=\"scrollable\"/>')", "CODE"],
            [".wrapAll('<ul class=\"items\"/>')", "CODE"],
            [".wrap('<li/>');", "CODE"],
            ["}", "CODE"],
            ["</script>", []],
            ["<div class=after></div>", []],
            ["</div>", []],
            ["</body>", []],
            ["</HTML>", []],
            [
                "Result, notice the script strings become tags and the script tag now subsumes the following div:",
                ["OB", "SR"]
            ],
            ["<html>", []],
            ["<body>", []],
            ["<div class=\"vsc\" sig=\"Uga\">", []],
            ["<div class=\"before\"></div>", []],
            ["<script type=\"text/javascript\">", []],
            ["header = jQuery('#header_features');", "CODE"],
            ["if(header.length){", "CODE"],
            ["header", "CODE"],
            [".prepend('", "CODE"],
            ["<a class=\"prevPage browse left \">') .append('</a>", "CODE"],
            ["<a class=\"nextPage browse right\">'); items .wrapAll('", "CODE"],
            ["<div class=\"scrollable\">", "CODE"],
            ["') .wrapAll('", "CODE"],
            ["<ul class=\"items\">", "CODE"],
            ["') .wrap('", "CODE"],
            ["<li>'); }", "CODE"],
            ["<div class=\"after\"></div> </li>", []],
            ["</ul>", []],
            ["</div> </a>", []],
            ["</script>", []],
            ["</div>", []],
            ["</body>", []],
            ["</html>", []]
        ]
    },
    "Jsoup-59": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Jsoup.clean", "IllegalArgumentException"],
        "summary_text": [
            "Jsoup.clean control characters throws: IllegalArgumentException: String must not be empty"
        ],
        "desc_hints": ["Jsoup.clean", "IllegalArgumentException"],
        "desc_text": [
            [
                "I found that when running Jsoup.clean() on a string that contains the format below, Jsoup throws: IllegalArgumentException: String must not be empty.",
                ["OB", "SR"]
            ],
            ["The problematic string format:", ["OB"]],
            ["'<a/*>', (where * is a control char).", []],
            ["i.e.", []],
            [
                "< char followed by a letter (a-z), then any chars, / and any control char (ASCII 0-31) except 0, 9-10, 12-13, any chars, and a > char.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-3": {
        "code_elements": [
            "function getStack() {",
            "var getErrorObject = function() {",
            "try {",
            "throw Error(\"\");",
            "} catch(err) {",
            "return err;",
            "}",
            "};",
            "return getErrorObject().stack;",
            "}",
            "window['getStackTrace']=getStack;",
            "throw Error(\"\");",
            "}",
            "}",
            "}",
            "window.getStackTrace = getStack;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["optimization fails with variable in catch clause"],
        "desc_hints": [
            "getStackTrace",
            "window.getStackTrace",
            "getErrorObject",
            "getStack"
        ],
        "desc_text": [
            ["Enter the following in the closure service:", ["OB", "SR"]],
            ["function getStack() {", "CODE"],
            ["var getErrorObject = function() {", "CODE"],
            ["try {", "CODE"],
            ["throw Error(\"\");", "CODE"],
            ["} catch(err) {", "CODE"],
            ["return err;", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["return getErrorObject().stack;", "CODE"],
            ["}", "CODE"],
            ["window['getStackTrace']=getStack;", "CODE"],
            ["Use Optimization = Simple.", ["OB"]],
            ["Note the following result:", ["OB"]],
            ["function getStack()", []],
            ["{", []],
            ["try", []],
            ["{", []],
            ["throw Error(\"\");", "CODE"],
            ["}", "CODE"],
            ["catch(a)", []],
            ["{", []],
            ["}", "CODE"],
            ["return a.stack", ["OB"]],
            ["}", "CODE"],
            ["window.getStackTrace = getStack;", "CODE"],
            [
                "The scope of the variable a is limited to the catch clause, but the compiler references it illegally as the return value of the inlined function.",
                ["OB"]
            ]
        ]
    },
    "Compress-26": {
        "code_elements": [
            "long skipped = input.skip(numToSkip);",
            "if (skipped == 0)",
            "{",
            "break;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["IOUtils.skip"],
        "summary_text": ["IOUtils.skip does not work as advertised"],
        "desc_hints": [
            "input.skip",
            "numToSkip",
            "IOUtils.skip",
            "TarInputStream",
            "CipherInputStream"
        ],
        "desc_text": [
            [
                "I am trying to feed a TarInputStream from a CipherInputStream.",
                ["OB", "SR"]
            ],
            [
                "It does not work, because IOUtils.skip() does not adhere to the contract it claims in javadoc:",
                ["OB"]
            ],
            [
                "\"   * <p>This method will only skip less than the requested number of",
                []
            ],
            [
                "bytes if the end of the input stream has been reached.</p>\"",
                ["OB"]
            ],
            ["However it does:", []],
            ["long skipped = input.skip(numToSkip);", "CODE"],
            ["if (skipped == 0)", "CODE"],
            ["{", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["And the input stream javadoc says:", ["OB"]],
            [
                "\"   * This may result from any of a number of conditions; reaching end of file",
                []
            ],
            [
                "before <code>n</code> bytes have been skipped is only one possibility.\"",
                ["OB"]
            ],
            [
                "In the case of CipherInputStream, it stops at the end of each byte buffer.",
                ["OB"]
            ],
            [
                "If you check the IOUtils from colleagues at commons-io, they have considered this case in IOUtils.skip() where they use a read to skip through the stream.",
                []
            ],
            [
                "An optimized version could combine trying to skip, then read then trying to skip again.",
                ["OB", "SR"]
            ]
        ]
    },
    "Lang-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FastDateFormat", "SimpleDateFormat"],
        "summary_text": [
            "FastDateFormat formats year differently than SimpleDateFormat in Java 7"
        ],
        "desc_hints": ["SimpleDateFormat", "FastDateFormat"],
        "desc_text": [
            [
                "Starting with Java 7 does SimpleDateFormat format a year pattern of 'Y' or 'YYY' as '2003' instead of '03' as in former Java releases.",
                ["OB", "EB", "SR"]
            ],
            [
                "According Javadoc this pattern should have been always been formatted as number, therefore the new behavior seems to be a bug fix in the JDK.",
                ["EB"]
            ],
            ["FastDateFormat is adjusted to behave the same.", ["OB"]]
        ]
    },
    "JacksonDatabind-75": {
        "code_elements": [
            "public class Test {",
            "@JsonFormat(shape = JsonFormat.Shape.NUMBER_INT)",
            "enum Color {",
            "RED,",
            "YELLOW,",
            "GREEN",
            "}",
            "static class Foo {",
            "public final Color color;",
            "Foo(Color color) {",
            "this.color = color;",
            "}",
            "}",
            "public static void main(String[] args) throws JsonProcessingException {",
            "final ObjectMapper mapper = new ObjectMapper();",
            "System.out.println(mapper.writeValueAsString(new Foo(Color.GREEN)));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonFormat.Shape.NUMBER_INT"],
        "summary_text": [
            "JsonFormat.Shape.NUMBER_INT does not work when defined on enum type in 2.8"
        ],
        "desc_hints": [
            "JsonFormat",
            "this.color",
            "Color.GREEN",
            "JsonFormat.Shape.NUMBER_INT",
            "JsonProcessingException",
            "ObjectMapper",
            "mapper.writeValueAsString",
            "System.out.println"
        ],
        "desc_text": [
            ["Before 2.8 the following worked for years.", ["OB", "SR"]],
            [
                "Now this annotation is not applied and enum is serialized as string.",
                ["OB"]
            ],
            ["It would work if annotating the field.", ["OB"]],
            [
                "I am not sure if this is an expected change or not, could you please check?",
                []
            ],
            ["public class Test {", "CODE"],
            ["@JsonFormat(shape = JsonFormat.Shape.NUMBER_INT)", "CODE"],
            ["enum Color {", "CODE"],
            ["RED,", "CODE"],
            ["YELLOW,", "CODE"],
            ["GREEN", "CODE"],
            ["}", "CODE"],
            ["static class Foo {", "CODE"],
            ["public final Color color;", "CODE"],
            ["Foo(Color color) {", "CODE"],
            ["this.color = color;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "public static void main(String[] args) throws JsonProcessingException {",
                "CODE"
            ],
            ["final ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "System.out.println(mapper.writeValueAsString(new Foo(Color.GREEN)));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Lang-33": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ClassUtils.toClass"],
        "summary_text": [
            "ClassUtils.toClass(Object[]) throws NPE on null array element"
        ],
        "desc_hints": [],
        "desc_text": [["see summary", ["OB"]]]
    },
    "Time-13": {
        "code_elements": [
            "import org.joda.time.Duration;",
            "import org.joda.time.Period;",
            "public class A {",
            "public static void main(String[] args) {",
            "System.out.println(\"new Duration(-1000).getMillis() = \" + new Duration(-1000).getMillis());",
            "System.out.println(\"new Duration(-1000).toString() = \" + new Duration(-1000).toString());",
            "System.out.println(\"new Period(-1000).getSeconds() = \" + new Period(-1000).getSeconds());",
            "System.out.println(\"new Period(-1000).toString() = \" + new Period(-1000).toString());",
            "System.out.println(\"new Duration(-100).getMillis() = \" + new Duration(-100).getMillis());",
            "System.out.println(\"new Duration(-100).toString() = \" + new Duration(-100).toString());",
            "System.out.println(\"new Period(-100).getMillis() = \" + new Period(-100).getMillis());",
            "System.out.println(\"new Period(-100).toString() = \" + new Period(-100).toString());",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Period.toString"],
        "summary_text": [
            "#160 Negative millis display incorrectly in Period.toString"
        ],
        "desc_hints": [
            "getSeconds",
            "org.joda.time.Duration",
            "toString",
            "getMillis",
            "org.joda.time.Period",
            "System.out.println"
        ],
        "desc_text": [
            ["This code:", ["SR"]],
            ["import org.joda.time.Duration;", "CODE"],
            ["import org.joda.time.Period;", "CODE"],
            ["public class A {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            [
                "System.out.println(\"new Duration(-1000).getMillis() = \" + new Duration(-1000).getMillis());",
                "CODE"
            ],
            [
                "System.out.println(\"new Duration(-1000).toString() = \" + new Duration(-1000).toString());",
                "CODE"
            ],
            [
                "System.out.println(\"new Period(-1000).getSeconds() = \" + new Period(-1000).getSeconds());",
                "CODE"
            ],
            [
                "System.out.println(\"new Period(-1000).toString() = \" + new Period(-1000).toString());",
                "CODE"
            ],
            [
                "System.out.println(\"new Duration(-100).getMillis() = \" + new Duration(-100).getMillis());",
                "CODE"
            ],
            [
                "System.out.println(\"new Duration(-100).toString() = \" + new Duration(-100).toString());",
                "CODE"
            ],
            [
                "System.out.println(\"new Period(-100).getMillis() = \" + new Period(-100).getMillis());",
                "CODE"
            ],
            [
                "System.out.println(\"new Period(-100).toString() = \" + new Period(-100).toString());",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Produces output:", ["OB"]],
            ["new Duration(-1000).getMillis() = -1000", ["OB"]],
            ["new Duration(-1000).toString() = PT-1S", ["OB"]],
            ["new Period(-1000).getSeconds() = -1", ["OB"]],
            ["new Period(-1000).toString() = PT-1S", ["OB"]],
            ["new Duration(-100).getMillis() = -100", ["OB"]],
            ["new Duration(-100).toString() = PT-0.100S", ["OB"]],
            ["new Period(-100).getMillis() = -100", ["OB"]],
            ["new Period(-100).toString() = PT0.100S", ["OB"]],
            [
                "The last line should produce \"PT-0.100S\" instead of \"PT0.100S\".",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-105": {
        "code_elements": [
            "$.fn.hasClass = function(selector) {",
            "return ( this.length > 0 ?",
            "!( ( ['', this[0].className, ''].join(' ') ).indexOf( ['', selector,",
            "''].join(' ') ) == -1 )",
            ": false );",
            "$.fn.hasClass=function(a){return this.length>0?",
            "(\"\"+this[0].className).indexOf(\"\"+a)!=-1:false};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Array Join Munged Incorrectly"],
        "desc_hints": ["className", "fn.hasClass", "indexOf", "this.length"],
        "desc_text": [
            ["$.fn.hasClass = function(selector) {", "CODE"],
            ["return ( this.length > 0 ?", "CODE"],
            [
                "!( ( ['', this[0].className, ''].join(' ') ).indexOf( ['', selector,",
                "CODE"
            ],
            ["''].join(' ') ) == -1 )", "CODE"],
            [": false );", "CODE"],
            ["};", []],
            ["munges into", []],
            ["$.fn.hasClass=function(a){return this.length>0?", "CODE"],
            ["(\"\"+this[0].className).indexOf(\"\"+a)!=-1:false};", "CODE"],
            ["which is not identical.", ["OB"]],
            ["Looks like there might be an issue with join and ' '.", []]
        ]
    },
    "Mockito-28": {
        "code_elements": [
            "//current:",
            "someMethod(1, (Integer) 2);",
            "someOther(1, \"(String) 2\");",
            "//desired:",
            "someOther(1, (String) \"2\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["nicer textual printing of typed parameters"],
        "desc_hints": ["someOther", "someMethod", "toString"],
        "desc_text": [
            [
                "When matchers fail but yield the same toString(), Mockito prints extra type information.",
                ["OB"]
            ],
            [
                "However, the type information is awkwardly printed for Strings.",
                ["OB"]
            ],
            [
                "I've encountered this issue while working on removing hard dependency to hamcrest.",
                []
            ],
            ["//current:", "CODE"],
            ["someMethod(1, (Integer) 2);", "CODE"],
            ["someOther(1, \"(String) 2\");", "CODE"],
            ["//desired:", "CODE"],
            ["someOther(1, (String) \"2\");", "CODE"]
        ]
    },
    "Math-49": {
        "code_elements": [
            "import org.apache.commons.math.linear.OpenMapRealVector;",
            "import org.apache.commons.math.linear.RealVector;",
            "public class DemoBugOpenMapRealVector {",
            "public static void main(String[] args) {",
            "final RealVector u = new OpenMapRealVector(3, 1E-6);",
            "u.setEntry(0, 1.);",
            "u.setEntry(1, 0.);",
            "u.setEntry(2, 2.);",
            "final RealVector v = new OpenMapRealVector(3, 1E-6);",
            "v.setEntry(0, 0.);",
            "v.setEntry(1, 3.);",
            "v.setEntry(2, 0.);",
            "System.out.println(u);",
            "System.out.println(v);",
            "System.out.println(u.ebeMultiply(v));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "OpenMapRealVector",
            "MathRuntimeException",
            "ebeMultiply"
        ],
        "summary_text": [
            "MathRuntimeException with simple ebeMultiply on OpenMapRealVector"
        ],
        "desc_hints": [
            "OpenIntToDoubleHashMap.java",
            "MathRuntimeException.java",
            "OpenMapRealVector.java",
            "DemoBugOpenMapRealVector",
            "setEntry",
            "ebeMultiply",
            "org.apache.commons.math.util.OpenIntToDoubleHashMap",
            "OpenMapRealVector",
            "DemoBugOpenMapRealVector.main",
            "org.apache.commons.math.linear.OpenMapRealVector",
            "org.apache.commons.math.MathRuntimeException",
            "org.apache.commons.math.linear.RealVector",
            "RealVector",
            "DemoBugOpenMapRealVector.java",
            "org.apache.commons.math.MathRuntimeException.createConcurrentModificationException",
            "Iterator.advance",
            "org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply",
            "System.out.println"
        ],
        "desc_text": [
            ["The following piece of code", ["OB", "SR"]],
            [
                "import org.apache.commons.math.linear.OpenMapRealVector;",
                "CODE"
            ],
            ["import org.apache.commons.math.linear.RealVector;", "CODE"],
            ["public class DemoBugOpenMapRealVector {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["final RealVector u = new OpenMapRealVector(3, 1E-6);", "CODE"],
            ["u.setEntry(0, 1.);", "CODE"],
            ["u.setEntry(1, 0.);", "CODE"],
            ["u.setEntry(2, 2.);", "CODE"],
            ["final RealVector v = new OpenMapRealVector(3, 1E-6);", "CODE"],
            ["v.setEntry(0, 0.);", "CODE"],
            ["v.setEntry(1, 3.);", "CODE"],
            ["v.setEntry(2, 0.);", "CODE"],
            ["System.out.println(u);", "CODE"],
            ["System.out.println(v);", "CODE"],
            ["System.out.println(u.ebeMultiply(v));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["raises an exception", ["OB"]],
            ["org.apache.commons.math.linear.OpenMapRealVector@7170a9b6", []],
            [
                "Exception in thread \"main\" org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating",
                []
            ],
            [
                "at org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(MathRuntimeException.java:373)",
                []
            ],
            [
                "at org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance(OpenIntToDoubleHashMap.java:564)",
                []
            ],
            [
                "at org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:372)",
                []
            ],
            [
                "at org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:1)",
                []
            ],
            [
                "at DemoBugOpenMapRealVector.main(DemoBugOpenMapRealVector.java:17)",
                []
            ]
        ]
    },
    "JxPath-12": {
        "code_elements": [
            "registerNamespace(A,\"/http...\");",
            "registerNamespace(B,\"/http...\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Incomplete handling of undefined namespaces"],
        "desc_hints": [
            "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
            "myAttr",
            "registerNamespace",
            "nsa.gov"
        ],
        "desc_text": [
            ["Mcduffey, Joe <jdmcduf@nsa.gov>", []],
            [
                "Can someone tell me how to register namespaces so that attributes with namespaces does not cause the exception",
                ["OB"]
            ],
            [
                "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
                []
            ],
            ["unknown namespace prefix: xsi", []],
            ["For example the following", ["OB", "SR"]],
            ["<ElementA A:myAttr=\"Mytype\">", []],
            ["<B:ElementB>MY VALUE</B:ElementB>", []],
            ["</ElementA>", []],
            ["Would result in the following exception:", ["OB"]],
            [
                "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
                []
            ],
            ["unknown namespace prefix: A", []],
            [
                "FYI: In this example there was a namespace decaration in the file and I also manually called the",
                ["SR"]
            ],
            ["registerNamespace(A,\"/http...\");", "CODE"],
            ["registerNamespace(B,\"/http...\");", "CODE"],
            ["There was no problem encountered for elements.", ["OB"]],
            ["Only attributes.", ["OB"]],
            ["Can someone help?", []],
            ["Thanks.", ["OB"]]
        ]
    },
    "Closure-163": {
        "code_elements": [
            "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
            "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
            "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
            "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );"
        ],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:628)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:573)",
            "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:555)",
            "at com.google.javascript.jscomp.Compiler.compileModules(Compiler.java:546)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:709)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:329)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:825)",
            "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
            "at com.google.javascript.jscomp.VarCheck.visit(VarCheck.java:170)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:304)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:464)",
            "at com.google.javascript.jscomp.VarCheck.process(VarCheck.java:108)",
            "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:273)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:250)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:168)",
            "at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1636)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:663)",
            "at com.google.javascript.jscomp.Compiler.access$1(Compiler.java:634)",
            "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:558)",
            "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:1)",
            "at com.google.javascript.jscomp.Compiler$3.run(Compiler.java:600)",
            "Caused by: java.lang.IllegalStateException: Unexpected variable jQuery$$2",
            "... 21 more"
        ],
        "summary_hints": ["VarCheck"],
        "summary_text": ["VarCheck Crash When Using Modules"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.Compiler.compileModules",
            "PhaseOptimizer.java",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "core.js",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.VarCheck.visit",
            "AbstractCommandLineRunner.java",
            "NodeTraversal.java",
            "CommandLineRunner.java",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "com.google.javascript.jscomp.Compiler",
            "NamedPass.process",
            "com.google.javascript.jscomp.VarCheck.process",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.Compiler.optimize",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "jquery.js",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "java.lang.IllegalStateException",
            "compiler.jar",
            "qunit_externs.js",
            "com.google.javascript.jscomp.NodeTraversal.traverseRoots",
            "Compiler.java",
            "com.google.javascript.jscomp.Compiler.runCallable",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch",
            "VarCheck.java"
        ],
        "desc_text": [
            [
                "java -jar \\users\\chad\\workspace\\closure-compiler\\build\\compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --formatting PRETTY_PRINT --debug --module jquery:1 --module core:1:jquery --module_output_path_prefix mod_ --js ..\\..\\dist\\jquery.js --js core.js --externs ..\\qunit_externs.js",
                ["SR"]
            ],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["Unexpected variable jQuery$$2", []],
            ["Node(NAME jQuery$$2): core.js:100:12", []],
            [
                "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
                "CODE"
            ],
            ["Parent(GETPROP): core.js:100:12", []],
            [
                "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
                "CODE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:628)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:573)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:555)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileModules(Compiler.java:546)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:709)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:329)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:825)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                "STACK_TRACE"
            ],
            ["Please report this problem.", []],
            ["Unexpected variable jQuery$$2", []],
            ["Node(NAME jQuery$$2): core.js:100:12", []],
            [
                "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
                "CODE"
            ],
            ["Parent(GETPROP): core.js:100:12", []],
            [
                "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );",
                "CODE"
            ],
            [
                "at com.google.javascript.jscomp.VarCheck.visit(VarCheck.java:170)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:304)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:464)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.VarCheck.process(VarCheck.java:108)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:273)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:250)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:168)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1636)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:663)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$1(Compiler.java:634)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:558)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:1)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$3.run(Compiler.java:600)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Unknown Source)", []],
            [
                "Caused by: java.lang.IllegalStateException: Unexpected variable jQuery$$2",
                "STACK_TRACE"
            ],
            ["... 21 more", "STACK_TRACE"]
        ]
    },
    "Lang-7": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NumberUtils", "createNumber"],
        "summary_text": [
            "NumberUtils#createNumber - bad behaviour for leading \"--\""
        ],
        "desc_hints": [
            "NumberUtils",
            "createNumber",
            "NumberFormatException",
            "createBigDecimal",
            "BigDecimal"
        ],
        "desc_text": [
            [
                "NumberUtils#createNumber checks for a leading \"--\" in the string, and returns null if found.",
                ["OB"]
            ],
            ["This is documented as a work round for a bug in BigDecimal.", []],
            [
                "Returning nulll is contrary to the Javadoc and the behaviour for other methods which would throw NumberFormatException.",
                ["OB"]
            ],
            [
                "It's not clear whether the BigDecimal problem still exists with recent versions of Java.",
                ["OB"]
            ],
            [
                "However, if it does exist, then the check needs to be done for all invocations of BigDecimal, i.e.",
                []
            ],
            ["needs to be moved to createBigDecimal.", []]
        ]
    },
    "Jsoup-60": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "1.10.1 failed a test while 1.8.3 passed for a contains query"
        ],
        "desc_hints": ["AmazonReturn.zip"],
        "desc_text": [
            [
                "Today I tried to upgrade jsoup from 1.8.3 to 1.10.1, however, one of my unit test failed like this:",
                ["OB", "SR"]
            ],
            [
                "\"div.a-row.a-spacing-medium span.a-size-base:contains(I'll Ship & Pay)\"",
                []
            ],
            [
                "\"div.a-row.a-spacing-medium span.a-size-base:contains(I'll Send & Pay)\"",
                []
            ],
            [
                "\"div.a-row.a-spacing-medium span.a-color-price:contains(Varies)\"",
                ["SR"]
            ],
            [
                "Above are 3 css selectors and in a webpage that no such element exists, Jsoup selector find 9 elements, which broke my unit test.",
                ["OB", "SR"]
            ],
            ["It seems like that the contains logic broke.", ["OB"]],
            [
                "I'm not sure whether ' or & processing changed in newer version.",
                []
            ],
            ["Can you have a look at this?", []],
            [
                "For your reference I've attached the html page as a zip file.",
                ["OB", "SR"]
            ],
            ["AmazonReturn.zip", []]
        ]
    },
    "Jsoup-82": {
        "code_elements": [
            "public static void main(String[] args) throws IOException {",
            "String html = \"<html><meta charset=\\\"ISO-2022-CN\\\"/></html>\";",
            "System.out.println(",
            "Jsoup.parse(new ByteArrayInputStream(html.getBytes()), null, \"\")",
            ");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["UnsupportedOperationException"],
        "summary_text": [
            "UnsupportedOperationException thrown for charsets that don't support encoding"
        ],
        "desc_hints": [
            "ISO2022_CN.java",
            "OuterHtmlVisitor",
            "org.jsoup.nodes.Node.outerHtml",
            "java.io.PrintStream.println",
            "PrintStream.java",
            "html.getBytes",
            "org.jsoup.nodes.Element.toString",
            "OutputSettings.prepareEncoder",
            "String.java",
            "java.lang.UnsupportedOperationException",
            "Node.java",
            "org.jsoup.nodes.Document.outerHtml",
            "Jsoup.parse",
            "Document.java",
            "ByteArrayInputStream",
            "java.lang.String.valueOf",
            "org.jsoup.nodes.Node",
            "Element.java",
            "org.jsoup.nodes.Element.html",
            "org.jsoup.nodes.Document",
            "sun.nio.cs.ext.ISO2022_CN.newEncoder",
            "System.out.println"
        ],
        "desc_text": [
            [
                "public static void main(String[] args) throws IOException {",
                "CODE"
            ],
            [
                "String html = \"<html><meta charset=\\\"ISO-2022-CN\\\"/></html>\";",
                "CODE"
            ],
            ["System.out.println(", "CODE"],
            [
                "Jsoup.parse(new ByteArrayInputStream(html.getBytes()), null, \"\")",
                "CODE"
            ],
            [");", "CODE"],
            ["}", "CODE"],
            ["throws", ["OB"]],
            [
                "Exception in thread \"main\" java.lang.UnsupportedOperationException",
                []
            ],
            ["at sun.nio.cs.ext.ISO2022_CN.newEncoder(ISO2022_CN.java:76)", []],
            [
                "at org.jsoup.nodes.Document$OutputSettings.prepareEncoder(Document.java:443)",
                []
            ],
            ["at org.jsoup.nodes.Node$OuterHtmlVisitor.(Node.java:704)", []],
            ["at org.jsoup.nodes.Node.outerHtml(Node.java:573)", []],
            ["at org.jsoup.nodes.Element.html(Element.java:1395)", []],
            ["at org.jsoup.nodes.Element.html(Element.java:1389)", []],
            ["at org.jsoup.nodes.Document.outerHtml(Document.java:195)", []],
            ["at org.jsoup.nodes.Element.toString(Element.java:1422)", []],
            ["at java.lang.String.valueOf(String.java:2982)", []],
            ["at java.io.PrintStream.println(PrintStream.java:821)", []]
        ]
    },
    "Closure-131": {
        "code_elements": ["var test={\"a\\u0004b\":\"c\"};"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "unicode characters in property names result in invalid output"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "use unicode characters in a property name for an object, like this:",
                ["OB", "SR"]
            ],
            ["var test={\"a\\u0004b\":\"c\"};", "CODE"],
            ["2.", ["OB", "SR"]],
            ["compile", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "Because unicode characters are not allowed in property names without quotes, the output should be the same as the input.",
                ["OB", "EB"]
            ],
            [
                "However, the compiler converts the string \\u0004 to the respective unicode character, and the output is:",
                ["OB"]
            ],
            [
                "var test={a\u0004b:\"c\"}; // unicode character between a and b can not be displayed here",
                []
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["newest current snapshot on multiple os (OSX/linux)", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Lang-24": {
        "code_elements": [
            "// not allowing L with an exponent",
            "// not allowing L with an exponent"
        ],
        "stack_traces": [],
        "summary_hints": ["NumberUtils.isNumber"],
        "summary_text": [
            "NumberUtils.isNumber(String)  is not right when the String is \"1.1L\""
        ],
        "desc_hints": [
            "hasExp",
            "foundDigit",
            "hasDecPoint",
            "NumberUtils.isNumber"
        ],
        "desc_text": [
            ["\"1.1L\" is not a Java Number .", ["OB"]],
            ["but NumberUtils.isNumber(String) return true.", ["OB"]],
            ["perhaps change:", []],
            ["if (chars[i] == 'l'", []],
            ["|| chars[i] == 'L') {", []],
            ["// not allowing L with an exponent", "CODE"],
            ["return foundDigit && !hasExp;", []],
            ["}", []],
            ["to:", []],
            ["if (chars[i] == 'l'", []],
            ["|| chars[i] == 'L') {", []],
            ["// not allowing L with an exponent", "CODE"],
            ["return foundDigit && !hasExp && !hasDecPoint;", []],
            ["}", []]
        ]
    },
    "Jsoup-32": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Element.clone", "classNames"],
        "summary_text": [
            "Element.clone() wrongly shared a same classNames Set instance"
        ],
        "desc_hints": ["classNames", "Object.clone"],
        "desc_text": [
            [
                "In the clone() method of Node, the Object.clone() is called, if the original element's classNames Set had been initialized before clone, the original classNames Set will be set to the new cloned Element instance due to the JDK's clone mechanism.",
                ["OB"]
            ],
            [
                "Thus, the old element and the newly cloned Element will share a same classNames Set instance.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-25": {
        "code_elements": [
            "public class JacksonTest {",
            "static class Foo {",
            "@JsonProperty",
            "@JsonDeserialize(as=byte[].class)",
            "Object someBytes;",
            "}",
            "public void testFooFromMap() {",
            "Map<String, Object> map = new HashMap<>();",
            "map.put(\"someBytes\", \"HelloWorld\".getBytes());",
            "ObjectMapper m = new ObjectMapper();",
            "m.convertValue(map, Foo.class);",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType(BeanDeserializerFactory.java:808)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:138)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:403)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:352)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
            "at com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(DeserializationContext.java:428)",
            "at com.fasterxml.jackson.databind.deser.std.StdDeserializer.findDeserializer(StdDeserializer.java:947)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:439)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:296)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
            "at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:461)",
            "at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:3804)",
            "at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3418)",
            "at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3351)"
        ],
        "summary_hints": [],
        "summary_text": [
            "Exception deserializing a byte[] when the target type comes from an annotation"
        ],
        "desc_hints": [
            "Foo.class",
            "JsonProperty",
            "JsonDeserialize",
            "com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer",
            "DeserializerCache.java",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "HashMap",
            "_createDeserializer",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer",
            "com.fasterxml.jackson.databind.deser.DeserializerCache",
            "_createAndCacheValueDeserializer",
            "com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer",
            "_findRootDeserializer",
            "com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer",
            "convertValue",
            "ObjectMapper",
            "java.lang.IllegalArgumentException",
            "com.fasterxml.jackson.databind.ObjectMapper.convertValue",
            "HelloWorld",
            "getBytes",
            "BeanDeserializerBase.java",
            "_createAndCache2",
            "BeanDeserializerFactory.java",
            "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findDeserializer",
            "someBytes",
            "StdDeserializer.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve",
            "_createDeserializer2",
            "DeserializationContext.java",
            "ObjectMapper.java",
            "JacksonTest",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType",
            "testFooFromMap",
            "map.put"
        ],
        "desc_text": [
            [
                "When trying to deserialize a byte[] from a Map when the deserialization type comes from an annotation, I'm seeing the following exception:",
                ["OB", "SR"]
            ],
            [
                "java.lang.IllegalArgumentException: Can not deserialize Class [B (of type array) as a Bean",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType(BeanDeserializerFactory.java:808)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:138)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:403)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:352)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(DeserializationContext.java:428)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdDeserializer.findDeserializer(StdDeserializer.java:947)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:439)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:296)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:461)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:3804)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3418)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3351)",
                "STACK_TRACE"
            ],
            ["The below is a repro.", ["OB", "SR"]],
            ["public class JacksonTest {", "CODE"],
            ["static class Foo {", "CODE"],
            ["@JsonProperty", "CODE"],
            ["@JsonDeserialize(as=byte[].class)", "CODE"],
            ["Object someBytes;", "CODE"],
            ["}", "CODE"],
            ["public void testFooFromMap() {", "CODE"],
            ["Map<String, Object> map = new HashMap<>();", "CODE"],
            ["map.put(\"someBytes\", \"HelloWorld\".getBytes());", "CODE"],
            ["ObjectMapper m = new ObjectMapper();", "CODE"],
            ["m.convertValue(map, Foo.class);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "I discovered this on 2.5.1, but I tried 2.6.0 and it's exhibiting the same behavior.",
                ["OB"]
            ],
            ["Thanks!", []]
        ]
    },
    "Compress-38": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["PAX header entry name ending with / causes problems"],
        "desc_hints": [
            "layer.tar",
            "isPaxHeader",
            "parseTarHeader",
            "isDirectory",
            "TarArchiveEntry.isDirectory"
        ],
        "desc_text": [
            [
                "There seems to be a problem when a PAX header entry (link flag is 'x') has a name ending with \"/\".",
                ["OB"]
            ],
            [
                "The TarArchiveEntry.isDirectory() check ends up returning true because of the trailing slash which means no content can be read from the entry.",
                ["OB"]
            ],
            [
                "PAX header parsing effectively finds nothing and the stream is not advanced; this leaves the stream in a bad state as the next entry's header is actually read from the header contents.",
                ["OB"]
            ],
            [
                "If the name is modified to remove the trailing slash when the link flag indicates a PAX header everything seems to work fine.",
                ["OB"]
            ],
            ["That would be one potential fix in parseTarHeader.", ["OB"]],
            [
                "Changing isDirectory to return false if isPaxHeader is true (before the trailing \"/\" check) would probably also fix the issue (though I can't verify that in the debugger like I can with changing the name).",
                ["OB"]
            ],
            [
                "So far I have only seen this when using Docker to save images that contain a yum database.",
                ["OB", "SR"]
            ],
            ["For example:", ["OB", "SR"]],
            [
                "docker pull centos:latest && docker save centos:latest | tar x --include \"*/layer.tar\"",
                ["SR"]
            ],
            [
                "Will produce at least one \"layer.tar\" that exhibits this issue.",
                ["OB"]
            ],
            [
                "If I come across a smaller TAR for testing I will attach it.",
                ["OB"]
            ]
        ]
    },
    "Mockito-37": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Make Mockito JUnit rule easier to use"],
        "desc_hints": [],
        "desc_text": [
            [
                "Mockito JUnit rule easier to use by avoiding the need to pass test instance",
                ["SR"]
            ],
            ["Make it compatible with JUnit 4.7+ instead of 4.9+", ["OB", "EB"]]
        ]
    },
    "Csv-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "The behavior of quote char using is not similar as Excel does when the first string contains CJK char(s)"
        ],
        "desc_hints": ["CSVFormat.EXCEL"],
        "desc_text": [
            [
                "When using CSVFormat.EXCEL to print a CSV file, the behavior of quote char using is not similar as Microsoft Excel does when the first string contains Chinese, Japanese or Korean (CJK) char(s).",
                ["OB", "SR"]
            ],
            ["e.g.", []],
            [
                "There are 3 data members in a record, with Japanese chars: \"\u3042\", \"\u3044\", \"\u3046\":",
                ["OB", "SR"]
            ],
            ["Microsoft Excel outputs:", []],
            ["\u3042,\u3044,\u3046", []],
            ["Apache Common CSV outputs:", ["OB"]],
            ["\"\u3042\",\u3044,\u3046", []]
        ]
    },
    "Jsoup-6": {
        "code_elements": [],
        "stack_traces": [
            "at java.lang.String.charAt(String.java:686)",
            "at java.util.regex.Matcher.appendReplacement(Matcher.java:711)",
            "at org.jsoup.nodes.Entities.unescape(Entities.java:69)",
            "at org.jsoup.nodes.TextNode.createFromEncoded(TextNode.java:95)",
            "at org.jsoup.parser.Parser.parseTextNode(Parser.java:222)",
            "at org.jsoup.parser.Parser.parse(Parser.java:94)",
            "at org.jsoup.parser.Parser.parse(Parser.java:54)",
            "at org.jsoup.Jsoup.parse(Jsoup.java:30)"
        ],
        "summary_hints": ["news.yahoo.com", "StringIndexOutOfBoundsException"],
        "summary_text": [
            "StringIndexOutOfBoundsException when parsing link http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china"
        ],
        "desc_hints": [
            "org.jsoup.parser.Parser.parseTextNode",
            "java.lang.StringIndexOutOfBoundsException",
            "TextNode.java",
            "org.jsoup.nodes.TextNode.createFromEncoded",
            "java.lang.String.charAt",
            "Parser.java",
            "Matcher.java",
            "org.jsoup.parser.Parser.parse",
            "org.jsoup.Jsoup.parse",
            "java.util.regex.Matcher.appendReplacement",
            "Jsoup.java",
            "Entities.java",
            "String.java",
            "org.jsoup.nodes.Entities.unescape"
        ],
        "desc_text": [
            [
                "java.lang.StringIndexOutOfBoundsException: String index out of range: 1",
                []
            ],
            ["at java.lang.String.charAt(String.java:686)", "STACK_TRACE"],
            [
                "at java.util.regex.Matcher.appendReplacement(Matcher.java:711)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.nodes.Entities.unescape(Entities.java:69)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.nodes.TextNode.createFromEncoded(TextNode.java:95)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.Parser.parseTextNode(Parser.java:222)",
                "STACK_TRACE"
            ],
            ["at org.jsoup.parser.Parser.parse(Parser.java:94)", "STACK_TRACE"],
            ["at org.jsoup.parser.Parser.parse(Parser.java:54)", "STACK_TRACE"],
            ["at org.jsoup.Jsoup.parse(Jsoup.java:30)", "STACK_TRACE"]
        ]
    },
    "Cli-15": {
        "code_elements": [
            "public void testSingleOptionSingleArgument() throws Exception {",
            "String defaulValue1 = \"100\";",
            "String defaultValue2 = \"1000\";",
            "final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();",
            "final ArgumentBuilder abuilder = new ArgumentBuilder();",
            "final GroupBuilder gbuilder = new GroupBuilder();",
            "DefaultOption bOption = obuilder.withShortName(\"b\")",
            ".withLongName(\"b\")",
            ".withArgument(abuilder.withName(\"b\")",
            ".withMinimum(0)",
            ".withMaximum(2)",
            ".withDefault(defaulValue1)",
            ".withDefault(defaultValue2)",
            ".create())",
            ".create();",
            "Group options = gbuilder",
            ".withName(\"options\")",
            ".withOption(bOption)",
            ".create();",
            "Parser parser = new Parser();",
            "parser.setHelpTrigger(\"--help\");",
            "parser.setGroup(options);",
            "String enteredValue1 = \"1\";",
            "String[] args = new String[]",
            "{\"-b\", enteredValue1}",
            ";",
            "CommandLine cl = parser.parse(args);",
            "CommandLine cmd = cl;",
            "assertNotNull(cmd);",
            "List b = cmd.getValues(\"-b\");",
            "assertEquals(\"[\" + enteredValue1 + \"]\", b + \"\");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "deafult arguments only works if no arguments are submitted"
        ],
        "desc_hints": [
            "parser.parse",
            "assertEquals",
            "withDefault",
            "DefaultOption",
            "cmd.getValues",
            "CommandLine",
            "withOption",
            "abuilder.withName",
            "GroupBuilder",
            "DefaultOptionBuilder",
            "defaulValue1",
            "enteredValue1",
            "withName",
            "testSingleOptionSingleArgument",
            "assertNotNull",
            "withLongName",
            "withMaximum",
            "parser.setGroup",
            "parser.setHelpTrigger",
            "obuilder.withShortName",
            "ArgumentBuilder",
            "withArgument",
            "withMinimum",
            "defaultValue2"
        ],
        "desc_text": [
            [
                "When using multple arguments and defaults, the behaviour is counter-intuitive and will only pick up a default if no args are passed in.",
                ["OB"]
            ],
            [
                "For instance in the code below I have set up so 0, 1, or 2 args may bve accepted, with defaults 100 and 1000.",
                ["OB", "SR"]
            ],
            ["I expect it to behave as follows.", ["OB", "EB", "SR"]],
            ["1.", ["OB", "SR"]],
            [
                "for 2 args, 1 and 2 the values should be 1 and 2.",
                ["OB", "EB", "SR"]
            ],
            ["This works as expected.", []],
            ["2.", ["OB", "SR"]],
            [
                "for 0 args passed in the values should be 100 and 1000, picking up both of the defaults.",
                ["OB", "EB"]
            ],
            ["This works as expected", []],
            ["3.", ["OB", "SR"]],
            [
                "for 1 arg passed in the values should be 1 and 1000, so the second argument picks up the second default value.",
                ["OB", "EB", "SR"]
            ],
            [
                "The valuse become just 1, which is not as expected..",
                ["OB", "EB"]
            ],
            [
                "Currently, in the second case will only return 1 and ignore the defaults.",
                ["OB"]
            ],
            [
                "public void testSingleOptionSingleArgument() throws Exception {",
                "CODE"
            ],
            ["String defaulValue1 = \"100\";", "CODE"],
            ["String defaultValue2 = \"1000\";", "CODE"],
            [
                "final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();",
                "CODE"
            ],
            ["final ArgumentBuilder abuilder = new ArgumentBuilder();", "CODE"],
            ["final GroupBuilder gbuilder = new GroupBuilder();", "CODE"],
            ["DefaultOption bOption = obuilder.withShortName(\"b\")", "CODE"],
            [".withLongName(\"b\")", "CODE"],
            [".withArgument(abuilder.withName(\"b\")", "CODE"],
            [".withMinimum(0)", "CODE"],
            [".withMaximum(2)", "CODE"],
            [".withDefault(defaulValue1)", "CODE"],
            [".withDefault(defaultValue2)", "CODE"],
            [".create())", "CODE"],
            [".create();", "CODE"],
            ["Group options = gbuilder", "CODE"],
            [".withName(\"options\")", "CODE"],
            [".withOption(bOption)", "CODE"],
            [".create();", "CODE"],
            ["Parser parser = new Parser();", "CODE"],
            ["parser.setHelpTrigger(\"--help\");", "CODE"],
            ["parser.setGroup(options);", "CODE"],
            ["String enteredValue1 = \"1\";", "CODE"],
            ["String[] args = new String[]", "CODE"],
            ["{\"-b\", enteredValue1}", "CODE"],
            [";", "CODE"],
            ["CommandLine cl = parser.parse(args);", "CODE"],
            ["CommandLine cmd = cl;", "CODE"],
            ["assertNotNull(cmd);", "CODE"],
            ["List b = cmd.getValues(\"-b\");", "CODE"],
            ["assertEquals(\"[\" + enteredValue1 + \"]\", b + \"\");", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Compress-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArchiveOutputStream"],
        "summary_text": [
            "Are the public finish() methods ArchiveOutputStream implementations necessary and safe?"
        ],
        "desc_hints": ["ArchiveOutputStream"],
        "desc_text": [
            [
                "Some of the ArchiveOutputStream implementations have public finish() methods.",
                ["OB"]
            ],
            [
                "These are currently only called from the close() methods.",
                ["OB"]
            ],
            [
                "Seems to me that there is no need to allow the finish() methods to be called externally, and the user can corrupt the output if they do.",
                ["OB", "EB"]
            ],
            ["Surely the close() method is all that is needed?", []]
        ]
    },
    "Mockito-22": {
        "code_elements": [
            "<T> Supplier<T> m(Class<T> type);",
            "}",
            "public void test() throws Exception {",
            "I i = mock(I.class, RETURNS_DEEP_STUBS);",
            "when(i.m(Boolean.class).get()); // <- ClassCastException",
            "}",
            "I i = mock(I.class);",
            "Supplier s = mock(Supplier.class);",
            "when(i.m(Boolean.class)).thenReturn(s);",
            "when(i.m(Boolean.class).get());"
        ],
        "stack_traces": [
            "at MockitoGenerics.test(MockitoGenerics.java:21)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:483)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:309)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)"
        ],
        "summary_hints": [],
        "summary_text": [
            "Can not Return deep stubs from generic method that returns generic type"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "ReflectiveCallable.java",
            "Boolean.class",
            "FrameworkMethod.java",
            "NativeMethodAccessorImpl.java",
            "EnhancerByMockitoWithCGLIB",
            "JUnit4TestReference.java",
            "ClassWithSuperclassToWorkAroundCglibBug",
            "org.mockito.internal.creation.cglib.ClassImposterizer",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "TestExecution.java",
            "Supplier.class",
            "org.junit.runners.ParentRunner.runLeaf",
            "org.junit.runners.ParentRunner.access",
            "thenReturn",
            "InvokeMethod.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "org.junit.runners.ParentRunner.runChildren",
            "org.junit.runners.ParentRunner",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "MockitoGenerics.java",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "ParentRunner.java",
            "BlockJUnit4ClassRunner.java",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "java.lang.String",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "java.lang.ClassCastException",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "java.lang.reflect.Method.invoke",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "ClassCastException",
            "org.junit.runners.model.FrameworkMethod",
            "org.junit.runners.ParentRunner.run",
            "Method.java",
            "runReflectiveCall",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "MockitoGenerics.test"
        ],
        "desc_text": [
            ["Hey,", []],
            [
                "if I try to mock a generic method which a generic returntype, where the returntype is derived from the generic type of the method using deep stubs I get a ClassCastException when calling when on it.",
                ["OB", "SR"]
            ],
            ["interface I {", []],
            ["<T> Supplier<T> m(Class<T> type);", "CODE"],
            ["}", "CODE"],
            ["@Test", []],
            ["public void test() throws Exception {", "CODE"],
            ["I i = mock(I.class, RETURNS_DEEP_STUBS);", "CODE"],
            [
                "when(i.m(Boolean.class).get()); // <- ClassCastException",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "When you don't use deep stubs and a raw Supplier mock to pass around it works:",
                ["OB"]
            ],
            ["I i = mock(I.class);", "CODE"],
            ["Supplier s = mock(Supplier.class);", "CODE"],
            ["when(i.m(Boolean.class)).thenReturn(s);", "CODE"],
            ["when(i.m(Boolean.class).get());", "CODE"],
            ["The ClassCastException:", []],
            [
                "java.lang.ClassCastException: org.mockito.internal.creation.cglib.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$cdb13154 cannot be cast to java.lang.String",
                []
            ],
            ["at MockitoGenerics.test(MockitoGenerics.java:21)", "STACK_TRACE"],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:483)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:309)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            [
                "Tested using mockito 1.10.19, jdk 1.8.0_20 and no Powermock",
                ["OB"]
            ]
        ]
    },
    "Math-75": {
        "code_elements": [
            "/**",
            "Returns the percentage of values that are equal to v",
            "@deprecated replaced by",
            "{@link #getPct(Comparable)}",
            "as of 2.0",
            "*/",
            "public double getPct(Object v)",
            "{",
            "return getCumPct((Comparable<?>) v);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["getPct", "stat.Frequency", "getCumPct"],
        "summary_text": [
            "In stat.Frequency, getPct(Object) uses getCumPct(Comparable) instead of getPct(Comparable)"
        ],
        "desc_hints": ["Frequency.java", "getPct", "getCumPct"],
        "desc_text": [
            [
                "Drop in Replacement of 1.2 with 2.0 not possible because all getPct calls will be cummulative without code change",
                ["OB"]
            ],
            ["Frequency.java", []],
            ["/**", "CODE"],
            ["Returns the percentage of values that are equal to v", "CODE"],
            ["@deprecated replaced by", "CODE"],
            ["{@link #getPct(Comparable)}", "CODE"],
            ["as of 2.0", "CODE"],
            ["*/", "CODE"],
            ["@Deprecated", []],
            ["public double getPct(Object v)", "CODE"],
            ["{", "CODE"],
            ["return getCumPct((Comparable<?>) v);", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Jsoup-46": {
        "code_elements": [
            "package test;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.InputStream;",
            "import java.nio.charset.Charset;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Entities.EscapeMode;",
            "import org.junit.Assert;",
            "import org.junit.Test;",
            "public class ShiftJisTest {",
            "@Test",
            "public void testShiftJisRoundtrip() throws Exception {",
            "String input =",
            "\"<html>\"",
            "+   \"<head>\"",
            "+     \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=Shift_JIS\\\" />\"",
            "+   \"</head>\"",
            "+   \"<body>\"",
            "+     \"before&nbsp;after\"",
            "+   \"</body>\"",
            "+ \"</html>\";",
            "InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(\"ASCII\")));",
            "Document doc = Jsoup.parse(is, null, \"http://example.com\");",
            "doc.outputSettings().escapeMode(EscapeMode.xhtml);",
            "String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());",
            "System.out.println(output);",
            "Assert.assertFalse(\"Should not have contained a '?'.\", output.contains(\"?\"));",
            "Assert.assertTrue(\"Should have contained a '&#xa0;' or a '&nbsp;'.\",",
            "output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["EscapeMode.xhtml"],
        "summary_text": [
            "EscapeMode.xhtml no longer falls back to numeric escapes - Can cause '?' replacement in output"
        ],
        "desc_hints": [
            "java.io.ByteArrayInputStream",
            "org.jsoup.nodes.Entities.EscapeMode",
            "escapeMode",
            "ShiftJisTest",
            "testShiftJisRoundtrip",
            "doc.html",
            "Assert.assertFalse",
            "output.contains",
            "example.com",
            "Jsoup.parse",
            "org.jsoup.Jsoup",
            "ByteArrayInputStream",
            "getBytes",
            "Charset.forName",
            "java.io.InputStream",
            "java.nio.charset.Charset",
            "EscapeMode.base",
            "doc.outputSettings",
            "org.junit.Test",
            "input.getBytes",
            "EscapeMode.xhtml",
            "Assert.assertTrue",
            "org.junit.Assert",
            "InputStream",
            "org.jsoup.nodes.Document",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I've been using EscapeMode.xhtml with JSoup to avoid encoding things which don't (from my perspective) need to be encoded, like egrave in a UTF-8 document for example.",
                ["EB", "SR"]
            ],
            [
                "While upgrading from JSoup 1.7.2 to 1.8.1 however, I've noticed a problem with a shift-jis related test I have.",
                ["SR"]
            ],
            ["Here's a simplified/reduced version.", []],
            ["package test;", "CODE"],
            ["import java.io.ByteArrayInputStream;", "CODE"],
            ["import java.io.InputStream;", "CODE"],
            ["import java.nio.charset.Charset;", "CODE"],
            ["import org.jsoup.Jsoup;", "CODE"],
            ["import org.jsoup.nodes.Document;", "CODE"],
            ["import org.jsoup.nodes.Entities.EscapeMode;", "CODE"],
            ["import org.junit.Assert;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["public class ShiftJisTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void testShiftJisRoundtrip() throws Exception {", "CODE"],
            ["String input =", "CODE"],
            ["\"<html>\"", "CODE"],
            ["+   \"<head>\"", "CODE"],
            [
                "+     \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=Shift_JIS\\\" />\"",
                "CODE"
            ],
            ["+   \"</head>\"", "CODE"],
            ["+   \"<body>\"", "CODE"],
            ["+     \"before&nbsp;after\"", "CODE"],
            ["+   \"</body>\"", "CODE"],
            ["+ \"</html>\";", "CODE"],
            [
                "InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(\"ASCII\")));",
                "CODE"
            ],
            [
                "Document doc = Jsoup.parse(is, null, \"http://example.com\");",
                "CODE"
            ],
            ["doc.outputSettings().escapeMode(EscapeMode.xhtml);", "CODE"],
            [
                "String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());",
                "CODE"
            ],
            ["System.out.println(output);", "CODE"],
            [
                "Assert.assertFalse(\"Should not have contained a '?'.\", output.contains(\"?\"));",
                "CODE"
            ],
            [
                "Assert.assertTrue(\"Should have contained a '&#xa0;' or a '&nbsp;'.\",",
                "CODE"
            ],
            [
                "output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Under JSoup 1.7.2, the body of the output in this test is \"before\u00a0after\" (which looks as expected when rendered in Firefox), where as under 1.8.1 it is \"before?after\".",
                ["OB", "EB"]
            ],
            [
                "I assume the issue here is that I've asked JSoup to escape only XHTML characters (i.e.",
                []
            ],
            [
                "not nbsp), and it's producing a charset where (I assume) there's no character to represent 'non-breaking space'.",
                ["OB"]
            ],
            [
                "The upshot of this is that, as a result of upgrading JSoup, I end up with '?' replaced in for what used to be shown as a non breaking space.",
                ["OB"]
            ],
            [
                "It seems like the old behaviour was to fall back to providing an escaped numeric character (odd if there's no valid character for that in Shift_JIS, but it still rendered correctly).",
                ["OB"]
            ],
            [
                "From my perspective, the old behaviour was better - Is there any way it can be reinstated (or an escape mode provided for it)?",
                []
            ],
            [
                "Obviously using EscapeMode.base instead of EscapeMode.xhtml is a possible workaround, however I would really prefer not to have characters unnecessarily escaped if possible.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-159": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Closure Compiler failed to translate all instances of a function name"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile the attached jQuery Multicheck plugin using SIMPLE optimization.",
                ["OB", "SR"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "You expect that the function preload_check_all() gets its name translated appropriately.",
                ["OB", "EB"]
            ],
            [
                "In fact, the Closure Compiler breaks the code by changing the function declaration but NOT changing the call to the function on line 76.",
                ["OB"]
            ]
        ]
    },
    "Closure-87": {
        "code_elements": [
            "if (e.onchange) {",
            "e.onchange({",
            "_extendedByPrototype: Prototype.emptyFunction,",
            "target: e",
            "});",
            "}",
            "if(b.onchange){b.onchange({_extendedByPrototype:Prototype.emptyFunction,target",
            ":b})}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["IE8 error: Object doesn't support this action"],
        "desc_hints": ["_extendedByPrototype", "Prototype.emptyFunction"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Use script with fragment like", ["SR"]],
            ["if (e.onchange) {", "CODE"],
            ["e.onchange({", "CODE"],
            ["_extendedByPrototype: Prototype.emptyFunction,", "CODE"],
            ["target: e", "CODE"],
            ["});", "CODE"],
            ["}", "CODE"],
            ["2.", ["OB", "SR"]],
            ["Compile with Compiler (command-line, latest version)", []],
            ["3.", ["OB", "SR"]],
            ["Use in IE8", []],
            ["What is the expected output?", "QUERY"],
            ["Script:", ["SR"]],
            [
                "if(b.onchange){b.onchange({_extendedByPrototype:Prototype.emptyFunction,target",
                "CODE"
            ],
            [":b})}", "CODE"],
            ["What do you see instead?", "QUERY"],
            ["Script:", ["SR"]],
            [
                "b.onchange&&b.onchange({_extendedByPrototype:Prototype.emptyFunction,target",
                []
            ],
            [":b})", []],
            ["IE8:", []],
            ["Error message \"Object doesn't support this action\"", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Version: 20100917 (revision 440)", []],
            ["Built on: 2010/09/17 17:55", []]
        ]
    },
    "Math-84": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["MultiDirectional"],
        "summary_text": [
            "MultiDirectional optimzation loops forver if started at the correct solution"
        ],
        "desc_hints": [
            "MultiDirectional.iterateSimplex",
            "testMultiDirectionalCorrectStart"
        ],
        "desc_text": [
            [
                "MultiDirectional.iterateSimplex loops forever if the starting point is the correct solution.",
                ["OB"]
            ],
            [
                "see the attached test case (testMultiDirectionalCorrectStart) as an example.",
                ["OB", "SR"]
            ]
        ]
    },
    "Math-106": {
        "code_elements": [
            "ProperFractionFormat properFormat = new ProperFractionFormat();",
            "result = null;",
            "String source = \"1 -1 / 2\";",
            "ParsePosition pos = new ParsePosition(0);",
            "//Test 1 : fail",
            "public void testParseNegative(){",
            "String source = \"-1 -2 / 3\";",
            "ParsePosition pos = new ParsePosition(0);",
            "Fraction actual = properFormat.parse(source, pos);",
            "assertNull(actual);",
            "}",
            "// Test2: success",
            "public void testParseNegative(){",
            "String source = \"-1 -2 / 3\";",
            "ParsePosition pos = new ParsePosition(0);",
            "Fraction actual = properFormat.parse(source, pos);  // return Fraction 1/3",
            "assertEquals(1, source.getNumerator());",
            "assertEquals(3, source.getDenominator());",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "math.fraction.ProperFractionFormat.parse",
            "ParsePosition"
        ],
        "summary_text": [
            "[math] Function math.fraction.ProperFractionFormat.parse(String, ParsePosition) return illogical result"
        ],
        "desc_hints": [
            "source.getDenominator",
            "ProperFractionFormat",
            "ParsePostion",
            "properFormat.parse",
            "properFormat",
            "assertEquals",
            "testParseNegative",
            "source.getNumerator",
            "ParsePosition",
            "assertNull"
        ],
        "desc_text": [
            ["Hello,", []],
            [
                "I find illogical returned result from function \"Fraction parse(String source,",
                ["OB"]
            ],
            [
                "ParsePostion pos)\" (in class ProperFractionFormat of the Fraction Package) of",
                []
            ],
            ["the Commons Math library.", ["OB"]],
            ["Please see the following code segment for more", ["OB"]],
            ["details:", []],
            ["\"", []],
            [
                "ProperFractionFormat properFormat = new ProperFractionFormat();",
                "CODE"
            ],
            ["result = null;", "CODE"],
            ["String source = \"1 -1 / 2\";", "CODE"],
            ["ParsePosition pos = new ParsePosition(0);", "CODE"],
            ["//Test 1 : fail", "CODE"],
            ["public void testParseNegative(){", "CODE"],
            ["String source = \"-1 -2 / 3\";", "CODE"],
            ["ParsePosition pos = new ParsePosition(0);", "CODE"],
            ["Fraction actual = properFormat.parse(source, pos);", "CODE"],
            ["assertNull(actual);", "CODE"],
            ["}", "CODE"],
            ["// Test2: success", "CODE"],
            ["public void testParseNegative(){", "CODE"],
            ["String source = \"-1 -2 / 3\";", "CODE"],
            ["ParsePosition pos = new ParsePosition(0);", "CODE"],
            [
                "Fraction actual = properFormat.parse(source, pos);  // return Fraction 1/3",
                "CODE"
            ],
            ["assertEquals(1, source.getNumerator());", "CODE"],
            ["assertEquals(3, source.getDenominator());", "CODE"],
            ["}", "CODE"],
            ["\"", []],
            [
                "Note: Similarly, when I passed in the following inputs:",
                ["OB", "SR"]
            ],
            ["input 2: (source = \u201c1 2 / -3\u201d, pos = 0)", ["SR"]],
            ["input 3: ( source = \u201d -1 -2 / 3\u201d, pos = 0)", ["SR"]],
            [
                "Function \"Fraction parse(String, ParsePosition)\" returned Fraction 1/3 (means",
                ["OB"]
            ],
            [
                "the result Fraction had numerator = 1 and denominator = 3)for all 3 inputs",
                ["OB", "SR"]
            ],
            ["above.", ["OB"]],
            [
                "I think the function does not handle parsing the numberator/ denominator",
                []
            ],
            [
                "properly incase input string provide invalid numerator/denominator.",
                ["OB"]
            ],
            ["Thank you!", []]
        ]
    },
    "Math-8": {
        "code_elements": [
            "List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();",
            "list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));",
            "list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));",
            "new DiscreteDistribution<Object>(list).sample(1);"
        ],
        "stack_traces": [],
        "summary_hints": ["DiscreteDistribution.sample"],
        "summary_text": [
            "DiscreteDistribution.sample(int) may throw an exception if first element of singletons of sub-class type"
        ],
        "desc_hints": [
            "singleons.get",
            "getClass",
            "sampleSize",
            "ArrayList",
            "list.add",
            "Array.newInstance",
            "DiscreteDistribution.sample",
            "DiscreteDistribution",
            "singletons.get"
        ],
        "desc_text": [
            [
                "Creating an array with Array.newInstance(singletons.get(0).getClass(), sampleSize) in DiscreteDistribution.sample(int) is risky.",
                ["OB"]
            ],
            ["An exception will be thrown if:", ["OB"]],
            ["singleons.get(0) is of type T1, an sub-class of T, and", ["OB"]],
            [
                "DiscreteDistribution.sample() returns an object which is of type T, but not of type T1.",
                ["OB"]
            ],
            ["To reproduce:", ["SR"]],
            [
                "List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();",
                "CODE"
            ],
            [
                "list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));",
                "CODE"
            ],
            [
                "list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));",
                "CODE"
            ],
            ["new DiscreteDistribution<Object>(list).sample(1);", "CODE"],
            ["Attaching a patch.", []]
        ]
    },
    "JacksonCore-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["UTF8JsonGenerator"],
        "summary_text": [
            "Fix UTF8JsonGenerator to allow QUOTE_FIELD_NAMES to be toggled."
        ],
        "desc_hints": [],
        "desc_text": [
            ["Thank you for contributing this!", []],
            [
                "I ended up merging it in slightly modified form, partly since I wanted it backported in 2.7, and master is now for 2.8.0-SNAPSHOT, and partly to refactor to make char-backed output also use same mechanism.",
                ["OB"]
            ],
            ["Fix will be included in 2.7.2 to be released soon.", ["OB"]]
        ]
    },
    "Closure-57": {
        "code_elements": [
            "1. insert  goog.provide(some.function);",
            "goog.provide(mine.Spike);"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.provide"],
        "summary_text": [
            "compiler crashes when  goog.provide used with non string"
        ],
        "desc_hints": [
            "goog.provide",
            "java.lang.RuntimeException",
            "file.js",
            "some.function",
            "mine.Spike",
            "google.com"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1. insert  goog.provide(some.function);", "CODE"],
            ["2.", ["OB", "SR"]],
            ["compile.", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["This should give an error diagnostic.", ["OB", "EB"]],
            ["What it gives is:", []],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            [
                "Please email js-compiler@google.com with this stack trace.",
                ["OB"]
            ],
            [
                "GETPROP 17 [originalname: Spike] [source_file: file.js] is not a string node",
                []
            ],
            ["Node(CALL): file.js:17:12", []],
            ["goog.provide(mine.Spike);", "CODE"],
            ["...", []],
            ["[stack traces...]", []],
            [
                "I think this is the current build as of the day of this report.",
                []
            ]
        ]
    },
    "Jsoup-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Implement :not pseudo-selector"],
        "desc_hints": [],
        "desc_text": [
            [
                "In version 1.3.3, the pseudo selector :not is not implemented.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-43": {
        "code_elements": ["n=myElem.elementSiblingIndex();"],
        "stack_traces": [],
        "summary_hints": ["elementSiblingIndex"],
        "summary_text": ["Unexpected behavior in elementSiblingIndex"],
        "desc_hints": [
            "elementSiblingIndex",
            "myElem.elementSiblingIndex",
            "myElem.parent",
            "myElem"
        ],
        "desc_text": [
            [
                "The documentation for elementSiblingIndex states \"Get the list index of this element in its element sibling list.",
                ["OB"]
            ],
            ["I.e.", []],
            ["if this is the first element sibling, returns 0\".", ["OB"]],
            ["This would imply that if", []],
            ["n=myElem.elementSiblingIndex();", "CODE"],
            ["then", ["OB"]],
            ["myElem.parent().children().get(n)==myElem.", ["OB"]],
            ["However, this is not how elementSiblingIndex behaves.", ["OB"]],
            ["What is guaranteed is that", []],
            ["myElem.parent().children().get(n).equals(myElem).", ["OB"]],
            ["For example, if both row 2 and row 5 of a table are", ["SR"]],
            ["<tr><td>Cell1</td><td>Cell2</td></tr>", []],
            [
                "then the Element object associated with both rows will have the same elementSiblingIndex().",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-94": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Block two more gadgets to exploit default typing issue (c3p0, CVE-2018-7489)"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "From an email report there are 2 other c3p0 classes (above and beyond ones listed in #1737) need to be blocked.",
                ["OB", "SR"]
            ],
            ["EDIT 21-Jun-2021: Fix included in:", []],
            ["2.9.5", []],
            ["2.8.11.1", []],
            ["2.7.9.3", []],
            ["2.6.7.5", []]
        ]
    },
    "Jsoup-56": {
        "code_elements": [
            "Document doc = Jsoup.parse(xhtml, \"\", Parser.xmlParser());"
        ],
        "stack_traces": [],
        "summary_hints": ["Jsoup.parse"],
        "summary_text": [
            "Jsoup.parse seems to remove system identifier in DOCTYPE"
        ],
        "desc_hints": [
            "Jsoup.parse",
            "exampledtdfile.dtd",
            "www.w3.org",
            "Parser.xmlParser",
            "transitional.dtd"
        ],
        "desc_text": [
            ["Specifically when I call:", ["OB", "SR"]],
            [
                "Document doc = Jsoup.parse(xhtml, \"\", Parser.xmlParser());",
                "CODE"
            ],
            [
                "on a xhtml document that has the following doctype:",
                ["OB", "SR"]
            ],
            ["<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\">", []],
            [
                "I end up with the following result in the document (SYSTEM is now missing):",
                ["OB", "SR"]
            ],
            ["<!DOCTYPE html \"exampledtdfile.dtd\">", []],
            ["But this works fine on a document with:", ["OB", "SR"]],
            [
                "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
                []
            ],
            [
                "Since SYSTEM is a proper way of declaring a DTD, I believe this is an issue with Jsoup.",
                []
            ]
        ]
    },
    "Math-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["SubLine.intersection"],
        "summary_text": [
            "NPE when calling SubLine.intersection() with non-intersecting lines"
        ],
        "desc_hints": [
            "SubLine.intersection",
            "Line.toSubSpace",
            "NullPointerException"
        ],
        "desc_text": [
            [
                "When calling SubLine.intersection() with two lines that not intersect, then a NullPointerException is thrown in Line.toSubSpace().",
                ["OB", "SR"]
            ],
            ["This bug is in the twod and threed implementations.", ["OB"]],
            [
                "The attached patch fixes both implementations and adds the required test cases.",
                ["SR"]
            ]
        ]
    },
    "Codec-17": {
        "code_elements": [
            "return StringUtils.newString(bytes, CharEncoding.xxx);",
            "return new String(bytes, Charsets.xxx);",
            "return newString(bytes, Charsets.xxx);"
        ],
        "stack_traces": [],
        "summary_hints": ["StringUtils.newStringxxx"],
        "summary_text": [
            "StringUtils.newStringxxx(null) should return null, not NPE"
        ],
        "desc_hints": [
            "CharEncoding.xxx",
            "StringUtils.newStringIso8859_1",
            "StringUtils.newString",
            "Charsets.xxx",
            "newString",
            "svn.apache.org"
        ],
        "desc_text": [
            [
                "Method calls such as StringUtils.newStringIso8859_1(null) should return null, not NPE.",
                ["OB", "EB"]
            ],
            [
                "It looks like this capability was lost with the fix for CODEC-136, i.e.",
                []
            ],
            ["http://svn.apache.org/viewvc?rev=1306366&view=rev", []],
            ["Several methods were changed from", []],
            ["return StringUtils.newString(bytes, CharEncoding.xxx);", "CODE"],
            ["to", []],
            ["return new String(bytes, Charsets.xxx);", "CODE"],
            ["The new code should have been:", ["EB"]],
            ["return newString(bytes, Charsets.xxx);", "CODE"],
            ["The newString method handles null input.", ["OB"]],
            [
                "There were no tests for null input so the change in behaviour was missed.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-74": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT",
            "AsPropertyTypeDeserializer"
        ],
        "summary_text": [
            "AsPropertyTypeDeserializer ignores DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
        ],
        "desc_hints": [
            "DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT",
            "AsPropertyTypeDeserializer"
        ],
        "desc_text": [
            [
                "The AsPropertyTypeDeserializer implementation does not respect the DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT feature.",
                ["OB"]
            ],
            [
                "When deserializing an empty String it throws DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT instead of creating a null Object.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-146": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler==",
            "/** @param {string} x */",
            "/** @param {undefined} x */",
            "if (x != undefined) { g(x); }",
            "if (x != undefined) { g(x); }",
            "if (x != undefined) { g(x); }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["bad type inference for != undefined"],
        "desc_hints": ["ClosureCompiler", "default.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["/** @param {string} x */", "CODE"],
            ["function g(x) {}", []],
            ["/** @param {undefined} x */", "CODE"],
            ["function f(x) {", []],
            ["if (x != undefined) { g(x); }", "CODE"],
            ["}", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "JSC_DETERMINISTIC_TEST: condition always evaluates to false",
                ["OB"]
            ],
            ["left : undefined", []],
            ["right: undefined at line 6 character 6", ["SR"]],
            ["if (x != undefined) { g(x); }", "CODE"],
            ["^", []],
            [
                "JSC_TYPE_MISMATCH: actual parameter 1 of g does not match formal parameter",
                ["OB"]
            ],
            ["found : undefined", []],
            ["required: string at line 6 character 24", []],
            ["if (x != undefined) { g(x); }", "CODE"],
            ["^", []],
            ["the second warning is bogus.", ["OB"]]
        ]
    },
    "Cli-8": {
        "code_elements": [
            "{",
            "int pos = -1;",
            "// the line ends before the max wrap pos or a new line char found",
            "{",
            "}",
            "else if ((width) >= text.length())",
            "{",
            "return -1;",
            "}",
            "// look for the last whitespace character before startPos+width",
            "pos = width;",
            "{",
            "}",
            "// if we found it - just return",
            "if (pos > startPos)",
            "{",
            "return pos;",
            "}",
            "// must look for the first whitespace chearacter after startPos",
            "// + width",
            "pos = startPos + width;",
            "{",
            "}",
            "return (pos == text.length())        ? (-1) : pos;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter"],
        "summary_text": [
            "HelpFormatter wraps incorrectly on every line beyond the first"
        ],
        "desc_hints": [
            "HelpFormatter",
            "startPos",
            "findWrapPos",
            "text.length",
            "text.charAt",
            "text.indexOf"
        ],
        "desc_text": [
            [
                "The method findWrapPos(...) in the HelpFormatter is a couple of bugs in the way that it deals with the \"startPos\" variable.",
                []
            ],
            [
                "This causes it to format every line beyond the first line by \"startPos\" to many characters, beyond the specified width.",
                ["OB", "SR"]
            ],
            [
                "To see this, create an option with a long description, and then use the help formatter to print it.",
                ["OB", "SR"]
            ],
            ["The first line will be the correct length.", ["OB"]],
            ["The 2nd, 3rd, etc lines will all be too long.", ["OB"]],
            [
                "I don't have a patch (sorry) - but here is a corrected version of the method.",
                []
            ],
            [
                "I fixed it in two places - both were using \"width + startPos\" when they should have been using width.",
                ["EB"]
            ],
            [
                "protected int findWrapPos(String text, int width, int startPos)",
                []
            ],
            ["{", "CODE"],
            ["int pos = -1;", "CODE"],
            [
                "// the line ends before the max wrap pos or a new line char found",
                "CODE"
            ],
            [
                "if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)",
                []
            ],
            [
                "|| ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))",
                []
            ],
            ["{", "CODE"],
            ["return pos+1;", []],
            ["}", "CODE"],
            ["else if ((width) >= text.length())", "CODE"],
            ["{", "CODE"],
            ["return -1;", "CODE"],
            ["}", "CODE"],
            [
                "// look for the last whitespace character before startPos+width",
                "CODE"
            ],
            ["pos = width;", "CODE"],
            ["char c;", []],
            ["while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')", []],
            ["&& (c != '\\n') && (c != '\\r'))", []],
            ["{", "CODE"],
            ["--pos;", []],
            ["}", "CODE"],
            ["// if we found it - just return", "CODE"],
            ["if (pos > startPos)", "CODE"],
            ["{", "CODE"],
            ["return pos;", "CODE"],
            ["}", "CODE"],
            [
                "// must look for the first whitespace chearacter after startPos",
                "CODE"
            ],
            ["// + width", "CODE"],
            ["pos = startPos + width;", "CODE"],
            [
                "while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')",
                []
            ],
            ["&& (c != '\\n') && (c != '\\r'))", []],
            ["{", "CODE"],
            ["++pos;", []],
            ["}", "CODE"],
            ["return (pos == text.length())        ? (-1) : pos;", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Math-70": {
        "code_elements": [
            "new BisectionSolver().solve(someUnivariateFunctionImpl, 0.0, 1.0, 0.5);"
        ],
        "stack_traces": [],
        "summary_hints": [
            "UnivariateRealFunction",
            "NullPointerException",
            "BisectionSolver.solve"
        ],
        "summary_text": [
            "BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial) throws NullPointerException"
        ],
        "desc_hints": [
            "BisectionSolver",
            "UnivariateRealFunction",
            "NullPointerException",
            "someUnivariateFunctionImpl",
            "UnivariateRealSolverImpl",
            "BisectionSolver.solve"
        ],
        "desc_text": [
            ["Method", []],
            [
                "BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial)",
                []
            ],
            ["invokes", []],
            ["BisectionSolver.solve(double min, double max)", []],
            ["which throws NullPointerException, as member variable", ["OB"]],
            ["UnivariateRealSolverImpl.f", []],
            ["is null.", ["OB"]],
            ["Instead the method:", []],
            [
                "BisectionSolver.solve(final UnivariateRealFunction f, double min, double max)",
                []
            ],
            ["should be called.", ["OB", "EB"]],
            ["Steps to reproduce:", ["SR"]],
            ["invoke:", []],
            [
                "new BisectionSolver().solve(someUnivariateFunctionImpl, 0.0, 1.0, 0.5);",
                "CODE"
            ],
            ["NullPointerException will be thrown.", ["OB"]]
        ]
    },
    "Closure-136": {
        "code_elements": [
            "if (t.getCompiler().getCodingConvention().isExported(name)) { continue; }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["$super is replaced when it should not be replaced"],
        "desc_hints": [
            "isExported",
            "MakeDeclaredNamesUnique.java",
            "getCodingConvention",
            "getCompiler"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Have javascript using prototype's $super", []],
            ["2.", ["OB", "SR"]],
            ["Compile with advanced_optimizations", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["See that $super is replaced by for example $super$$4", ["SR"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "$super should not be renamed as it is used by prototype.",
                ["OB", "EB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Latest from svn.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Personally I made a quick fix in MakeDeclaredNamesUnique.java line 79:",
                []
            ],
            [
                "if (t.getCompiler().getCodingConvention().isExported(name)) { continue; }",
                "CODE"
            ],
            [
                "This fixed it for me, but not sure if that's the right place or method to",
                []
            ],
            ["solve this, as I am unfamiliar with the project.", []]
        ]
    },
    "JacksonCore-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "JsonParser.getValueAsString",
            "JsonToken.FIELD_NAME"
        ],
        "summary_text": [
            "JsonParser.getValueAsString() should return field name for JsonToken.FIELD_NAME, not null"
        ],
        "desc_hints": [
            "FasterXML",
            "JsonParser.getValueAsString",
            "JsonToken.FIELD_NAME"
        ],
        "desc_text": [
            ["(note: offshoot of FasterXML/jackson-databind#745)", []],
            [
                "Although Javadocs do not specify expected behavior for JsonParser.getValueAsString(), when current token is JsonToken.FIELD_NAME, it makes more sense to return name as-is, instead of null.",
                ["OB", "EB"]
            ],
            [
                "This will simplify handling of code that requires a String representation; and code that does need to know the difference can use token type if that is relevant.",
                ["SR"]
            ],
            [
                "While this can be seen as a fix it is still a minor API change, so it needs to go in 2.6.0, not a 2.5.x patch release.",
                []
            ]
        ]
    },
    "Mockito-32": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Mockito can't create mock on public class that extends package-private class"
        ],
        "desc_hints": ["github.com"],
        "desc_text": [
            ["I created simple project to demonstrate this:", ["SR"]],
            ["https://github.com/astafev/mockito-package-private-class/", []],
            ["Please take a look.", ["OB"]],
            [
                "Even if it can't be implemented, I think that mockito should throw some normal exception at time of creation.",
                ["OB", "EB"]
            ],
            [
                "In my variant on first creation it returns wrong-working mock (invokes real method instead of stubbed).",
                ["OB", "EB"]
            ],
            [
                "On second creation throws exception that doesn't really connected with problem.",
                ["OB"]
            ],
            [
                "Everything works fine if you mock package-private parent.",
                ["OB"]
            ]
        ]
    },
    "JacksonCore-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["UTF8StreamJsonParser", "_currInputRowStart"],
        "summary_text": [
            "_currInputRowStart isn't initialized in UTF8StreamJsonParser() constructor. The column position will be wrong."
        ],
        "desc_hints": [
            "inputBuffer",
            "ObjectCodec",
            "_currInputRowStart",
            "ParserBase.getCurrentLocation",
            "_inputPtr",
            "UTF8StreamJsonParser",
            "bufferRecyclable",
            "InputStream",
            "BytesToNameCanonicalizer",
            "UTF8StreamJson"
        ],
        "desc_text": [
            [
                "The UTF8StreamJson Parser constructor allows to specify the start position.",
                ["OB", "SR"]
            ],
            [
                "But it doesn't set the \"_currInputRowStart\" as the same value.",
                ["OB"]
            ],
            ["It is still 0.", ["OB"]],
            [
                "So when raise the exception, the column calculation (ParserBase.getCurrentLocation() )will be wrong.",
                ["OB"]
            ],
            [
                "int col = _inputPtr - _currInputRowStart + 1; // 1-based",
                ["SR"]
            ],
            [
                "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,",
                []
            ],
            ["ObjectCodec codec, BytesToNameCanonicalizer sym,", []],
            ["byte[] inputBuffer, int start, int end,", ["OB"]],
            ["boolean bufferRecyclable)", []]
        ]
    },
    "Closure-35": {
        "code_elements": [
            "/** @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}} */",
            "function func(a, b) {",
            "var results;",
            "if (a) {",
            "results = {};",
            "results.prop1 = {a: 3};",
            "}",
            "if (b) {",
            "results = results || {};",
            "results.prop2 = 'prop2';",
            "} else {",
            "results = results || {};",
            "results.prop3 = 'prop3';",
            "}",
            "return results;",
            "}",
            "return results;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "assignment to object in conditional causes type error on function w/ record type return type"
        ],
        "desc_hints": ["results.prop1", "results.prop3", "results.prop2"],
        "desc_text": [
            ["slightly dodgy code :)", []],
            [
                "/** @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}} */",
                "CODE"
            ],
            ["function func(a, b) {", "CODE"],
            ["var results;", "CODE"],
            ["if (a) {", "CODE"],
            ["results = {};", "CODE"],
            ["results.prop1 = {a: 3};", "CODE"],
            ["}", "CODE"],
            ["if (b) {", "CODE"],
            ["results = results || {};", "CODE"],
            ["results.prop2 = 'prop2';", "CODE"],
            ["} else {", "CODE"],
            ["results = results || {};", "CODE"],
            ["results.prop3 = 'prop3';", "CODE"],
            ["}", "CODE"],
            ["return results;", "CODE"],
            ["}", "CODE"],
            ["results in this error:", ["OB"]],
            ["JSC_TYPE_MISMATCH: inconsistent return type", ["OB"]],
            ["found : ({prop1: {a: number}}|{})", []],
            [
                "required: {prop1: (Object|null|undefined), prop2: (string|undefined), prop3: (string|undefined)} at line 18 character 7",
                []
            ],
            ["return results;", "CODE"],
            [
                "defining results on the first line on the function causes it the world.",
                ["OB", "SR"]
            ],
            [
                "the still dodgy, but slightly less so, use of this is if the function return type were that record type|undefined and not all branches were guaranteed to be executed.",
                ["OB"]
            ]
        ]
    },
    "Closure-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["IllegalArgumentException"],
        "summary_text": [
            "Type refining of 'this' raises IllegalArgumentException"
        ],
        "desc_hints": [
            "com.google.javascript.jscomp.TypeInference.branchedFlowThrough",
            "com.google.javascript.jscomp.NodeTraversal.pushScope",
            "com.google.javascript.jscomp.TypeInferencePass.inferTypes",
            "PhaseOptimizer.java",
            "com.google.javascript.jscomp.TypeInferencePass",
            "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "compiler.appspot.com",
            "goog.isNull",
            "DataFlowAnalysis.java",
            "NodeTraversal.java",
            "com.google.javascript.jscomp.Compiler",
            "com.google.javascript.jscomp.NodeTraversal.traverseWithScope",
            "java.lang.IllegalArgumentException",
            "TypeInferringCallback.enterScope",
            "NamedPass.process",
            "TypeInference.java",
            "PassFactoryDelegate.processInternal",
            "goog.isObject",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictParameter",
            "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.declareNameInScope",
            "com.google.javascript.jscomp.DataFlowAnalysis",
            "com.google.javascript.jscomp.Compiler.check",
            "TypeInferencePass.java",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "goog.isFunction",
            "DefaultPassConfig.java",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "ChainableReverseAbstractInterpreter.java",
            "com.google.javascript.jscomp.TypeInferencePass.process",
            "ClosureReverseAbstractInterpreter.java",
            "Compiler.java",
            "com.google.javascript.jscomp.DataFlowAnalysis.analyze",
            "com.google.javascript.jscomp.Compiler.runCallable",
            "BranchedForwardDataFlowAnalysis.flow",
            "com.google.javascript.jscomp.DefaultPassConfig"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "goog.isFunction(this) or goog.isObject(this) or goog.isNull(this) etc.",
                []
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected: normal compilation, checking the type of this", ["EB"]],
            ["Actual output:", ["OB"]],
            [
                "23: java.lang.IllegalArgumentException: Node cannot be refined.",
                ["OB"]
            ],
            ["THIS 1 [source_file: Input_0] : global this", []],
            [
                "at com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.declareNameInScope(ChainableReverseAbstractInterpreter.java:172)",
                []
            ],
            [
                "at com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictParameter(ClosureReverseAbstractInterpreter.java:240)",
                []
            ],
            [
                "at com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome(ClosureReverseAbstractInterpreter.java:221)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeInference.branchedFlowThrough(TypeInference.java:239)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeInference.branchedFlowThrough(TypeInference.java:59)",
                []
            ],
            [
                "at com.google.javascript.jscomp.DataFlowAnalysis$BranchedForwardDataFlowAnalysis.flow(DataFlowAnalysis.java:448)",
                []
            ],
            [
                "at com.google.javascript.jscomp.DataFlowAnalysis.analyze(DataFlowAnalysis.java:213)",
                []
            ],
            [
                "at com.google.javascript.jscomp.DataFlowAnalysis.analyze(DataFlowAnalysis.java:181)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeInferencePass.inferTypes(TypeInferencePass.java:90)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeInferencePass$TypeInferringCallback.enterScope(TypeInferencePass.java:106)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:581)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:345)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeInferencePass.inferTypes(TypeInferencePass.java:81)",
                []
            ],
            [
                "at com.google.javascript.jscomp.TypeInferencePass.process(TypeInferencePass.java:74)",
                []
            ],
            [
                "at com.google.javascript.jscomp.DefaultPassConfig$24$1.process(DefaultPassConfig.java:1119)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:296)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:273)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:187)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.check(Compiler.java:768)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:683)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:79)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:586)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:583)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:628)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:651)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:601)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:583)",
                []
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "Any version (local and http://closure-compiler.appspot.com/).",
                ["OB"]
            ],
            ["Please provide any additional information below.", "QUERY"],
            ["A workaround is to assign 'this' to a variable.", []],
            ["\"var a=this;goog.isNull(a)\" works.", []]
        ]
    },
    "Lang-40": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Fix case-insensitive string handling"],
        "desc_hints": ["String.to"],
        "desc_text": [
            [
                "String.to*Case() is locale-sensitive, this is usually not intended for case-insensitive comparisions.",
                ["OB"]
            ],
            ["Please see Common Bug #3 for details.", ["OB"]]
        ]
    },
    "JacksonDatabind-49": {
        "code_elements": [
            "import com.fasterxml.jackson.annotation.JsonIdentityInfo;",
            "import com.fasterxml.jackson.annotation.JsonIdentityReference;",
            "import com.fasterxml.jackson.annotation.ObjectIdGenerators;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "public class ObjectIdTest {",
            "public static class Foo {",
            "@JsonIdentityReference(alwaysAsId = true)",
            "public Bar bar1;",
            "@JsonIdentityReference()",
            "public Bar bar2;",
            "}",
            "@JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)",
            "public static class Bar {",
            "}",
            "public static void main(String[] args) throws Exception {",
            "ObjectMapper mapper = new ObjectMapper();",
            "// create structure to serialize",
            "Foo mo = new Foo();",
            "mo.bar1 = new Bar();",
            "mo.bar2 = mo.bar1;",
            "// serialize it",
            "System.out.println(mapper.writeValueAsString(mo));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonIdentityInfo"],
        "summary_text": [
            "JsonIdentityInfo incorrectly serializing forward references"
        ],
        "desc_hints": [
            "mo.bar1",
            "WritableObjectId.generateId",
            "BeanSerializerBase",
            "com.fasterxml.jackson.annotation.JsonIdentityReference",
            "mo.bar2",
            "ObjectIdTest",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "alwaysAsId",
            "ObjectMapper",
            "FasterXML",
            "JsonIdentityReference",
            "com.fasterxml.jackson.annotation.JsonIdentityInfo",
            "github.com",
            "mapper.writeValueAsString",
            "JsonIdentityInfo",
            "com.fasterxml.jackson.annotation.ObjectIdGenerators",
            "ObjectIdGenerators.IntSequenceGenerator.class",
            "BeanSerializerBase.java",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I wrote this small test program to demonstrate the issue:",
                ["SR"]
            ],
            [
                "import com.fasterxml.jackson.annotation.JsonIdentityInfo;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.annotation.JsonIdentityReference;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.annotation.ObjectIdGenerators;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["public class ObjectIdTest {", "CODE"],
            ["public static class Foo {", "CODE"],
            ["@JsonIdentityReference(alwaysAsId = true)", "CODE"],
            ["public Bar bar1;", "CODE"],
            ["@JsonIdentityReference()", "CODE"],
            ["public Bar bar2;", "CODE"],
            ["}", "CODE"],
            [
                "@JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)",
                "CODE"
            ],
            ["public static class Bar {", "CODE"],
            ["}", "CODE"],
            [
                "public static void main(String[] args) throws Exception {",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["// create structure to serialize", "CODE"],
            ["Foo mo = new Foo();", "CODE"],
            ["mo.bar1 = new Bar();", "CODE"],
            ["mo.bar2 = mo.bar1;", "CODE"],
            ["// serialize it", "CODE"],
            ["System.out.println(mapper.writeValueAsString(mo));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "When executing this test program in the latest version (2.7.4), the output will be {\"bar1\":1,\"bar2\":{\"@id\":2}} - the second field will be written with a new id even though both fields reference the same object.",
                ["OB", "SR"]
            ],
            [
                "Because of this, writing forward references is essentially impossible.",
                []
            ],
            [
                "The issue seems to be the fact that BeanSerializerBase will always call WritableObjectId.generateId if the referenced object has not been written in plain format yet (https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java#L600).",
                ["OB"]
            ],
            [
                "This will also happen if an id has been generated before.",
                ["OB"]
            ],
            [
                "It might also be smarter to only generate a new id in WritableObjectId.generateId if that hasn't happened before; as that method doesn't have a javadoc I can't tell how it is supposed to work.",
                []
            ]
        ]
    },
    "Jsoup-76": {
        "code_elements": [
            "Jsoup.parse(\"<pre>\\nabc  def</pre>\").select(\"pre\").get(0).childNodes().get(0).text();",
            "// Outputs  \" abc def\"",
            "// Expected \"abc def\"",
            "Jsoup.parse(\"<pre>\\nabc  def</pre>\").select(\"pre\").get(0).childNodes().get(0).getWholeText();",
            "// Outputs  \"\\nabc  def\"",
            "// Expected \"abc  def\"",
            "Jsoup.parse(\"<pre>\\n\\nabc  def</pre>\").select(\"pre\").get(0).childNodes().get(0).getWholeText();",
            "// Outputs  \"\\n\\nabc  def\"",
            "// Expected \"\\nabc  def\""
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Newline after pre and textarea not handled properly"],
        "desc_hints": [
            "getWholeText",
            "html.spec.whatwg.org",
            "syntax.html",
            "childNodes",
            "Node.nodeValue",
            "Jsoup.parse"
        ],
        "desc_text": [
            [
                "The WHATWG spec for HTML syntax indicates that if there is a newline directly after an opening <pre> or <textarea>, it should be removed.",
                ["OB", "EB"]
            ],
            [
                "https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions",
                []
            ],
            ["jsoup currently does not do this:", ["OB"]],
            [
                "Jsoup.parse(\"<pre>\\nabc  def</pre>\").select(\"pre\").get(0).childNodes().get(0).text();",
                "CODE"
            ],
            ["// Outputs  \" abc def\"", "CODE"],
            ["// Expected \"abc def\"", "CODE"],
            [
                "Arguably, jsoup is also wrong for the value of getWholeText(), although I guess this depends on one's interpretation of what getWholeText() is supposed to do.",
                []
            ],
            [
                "I am hoping that it intends to correspond to the value of Node.nodeValue, in which case:",
                []
            ],
            [
                "Jsoup.parse(\"<pre>\\nabc  def</pre>\").select(\"pre\").get(0).childNodes().get(0).getWholeText();",
                "CODE"
            ],
            ["// Outputs  \"\\nabc  def\"", "CODE"],
            ["// Expected \"abc  def\"", "CODE"],
            [
                "Jsoup.parse(\"<pre>\\n\\nabc  def</pre>\").select(\"pre\").get(0).childNodes().get(0).getWholeText();",
                "CODE"
            ],
            ["// Outputs  \"\\n\\nabc  def\"", "CODE"],
            ["// Expected \"\\nabc  def\"", "CODE"]
        ]
    },
    "Csv-1": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ExtendedBufferReader"],
        "summary_text": [
            "ExtendedBufferReader does not handle EOL consistently"
        ],
        "desc_hints": [
            "ExtendedBufferReader",
            "readLine",
            "BufferedReader.readLine"
        ],
        "desc_text": [
            [
                "ExtendedBufferReader checks for '\\n' (LF) in the read() methods, incrementing linecount when found.",
                ["OB"]
            ],
            [
                "However, the readLine() method calls BufferedReader.readLine() which treats CR, LF and CRLF equally (and drops them).",
                ["OB"]
            ],
            [
                "If the code is to be flexible in what it accepts, the class should also allow for CR alone as a line terminator.",
                ["EB"]
            ],
            [
                "It should work if the code increments the line counter for CR, and for LF if the previous character was not CR.",
                ["OB", "EB"]
            ]
        ]
    },
    "Math-69": {
        "code_elements": [
            "p = 2 * (1 - tDistribution.cumulativeProbability(t));",
            "p = 2 * (tDistribution.cumulativeProbability(-t));"
        ],
        "stack_traces": [],
        "summary_hints": ["PearsonsCorrelation.getCorrelationPValues"],
        "summary_text": [
            "PearsonsCorrelation.getCorrelationPValues() precision limited by machine epsilon"
        ],
        "desc_hints": [
            "PearsonsCorrelation.getCorrelationPValues",
            "cumulativeProbabily",
            "cumulativeProbabilty",
            "TTestImpl.tTest",
            "tDistribution.cumulativeProbability",
            "cumulativeProbability"
        ],
        "desc_text": [
            [
                "Similar to the issue described in MATH-201, using PearsonsCorrelation.getCorrelationPValues() with many treatments results in p-values that are continuous down to 2.2e-16 but that drop to 0 after that.",
                ["OB", "SR"]
            ],
            ["In MATH-201, the problem was described as such:", []],
            [
                "> So in essence, the p-value returned by TTestImpl.tTest() is:",
                []
            ],
            [
                "> 1.0 - (cumulativeProbability(t) - cumulativeProbabily(-t))",
                ["OB"]
            ],
            [
                "> For large-ish t-statistics, cumulativeProbabilty(-t) can get quite small, and cumulativeProbabilty(t) can get very close to 1.0.",
                ["OB", "SR"]
            ],
            ["When", ["OB"]],
            [
                "> cumulativeProbability(-t) is less than the machine epsilon, we get p-values equal to zero because:",
                ["OB"]
            ],
            ["> 1.0 - 1.0 + 0.0 = 0.0", []],
            [
                "The solution in MATH-201 was to modify the p-value calculation to this:",
                ["SR"]
            ],
            ["> p = 2.0 * cumulativeProbability(-t)", []],
            ["Here, the problem is similar.", []],
            ["From PearsonsCorrelation.getCorrelationPValues():", []],
            ["p = 2 * (1 - tDistribution.cumulativeProbability(t));", "CODE"],
            [
                "Directly calculating the p-value using identical code as PearsonsCorrelation.getCorrelationPValues(), but with the following change seems to solve the problem:",
                ["OB", "SR"]
            ],
            ["p = 2 * (tDistribution.cumulativeProbability(-t));", "CODE"]
        ]
    },
    "Jsoup-92": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Duplicated attribute parsing problem"],
        "desc_hints": [],
        "desc_text": [
            [
                "In case there is duplicated tag attribute Jsoup parses the last one, but Chrome browser takes the first one.",
                ["OB"]
            ]
        ]
    },
    "Time-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DateTimeFormatter.parseInto"],
        "summary_text": [
            "#148 DateTimeFormatter.parseInto broken when no year in format"
        ],
        "desc_hints": ["parseInto", "iDefaultYear"],
        "desc_text": [
            [
                "In Joda Time 2.0, the default year was set to 2000 so that Feb 29 could be parsed correctly.",
                []
            ],
            [
                "However, parseInto now overwrites the given instant's year with 2000 (or whatever iDefaultYear is set to).",
                ["OB", "SR"]
            ],
            [
                "The correct behavior would seem to be to use the given instant's year instead of iDefaultYear.",
                ["OB", "EB"]
            ],
            [
                "This does mean that Feb 29 might not be parseable if the instant's year is not a leap year, but in this case the caller asked for that in a sense.",
                ["OB"]
            ]
        ]
    },
    "Closure-91": {
        "code_elements": [
            "foo: function(){ ... }",
            "bar: function(){ ... }",
            "/**",
            "* @name MyClass",
            "* @class",
            "* @extends superClass1",
            "* @extends superClass2",
            "*/",
            "foo: function(){ ... }",
            "bar: function(){ ... }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["support @lends annotation"],
        "desc_hints": [
            "MyClass",
            "superClass2",
            "superClass1",
            "MyClass.prototype",
            "dojo.declare"
        ],
        "desc_text": [
            [
                "Some javascript toolkits (dojo, base, etc.) have a special way of declaring (what java calls) classes, for example in dojo:",
                ["SR"]
            ],
            ["dojo.declare(\"MyClass\", [superClass1, superClass2], {", []],
            ["foo: function(){ ... }", "CODE"],
            ["bar: function(){ ... }", "CODE"],
            ["});", []],
            [
                "JSDoc (or at least JSDoc toolkit) supports this via annotations:",
                []
            ],
            ["/**", "CODE"],
            ["* @name MyClass", "CODE"],
            ["* @class", "CODE"],
            ["* @extends superClass1", "CODE"],
            ["* @extends superClass2", "CODE"],
            ["*/", "CODE"],
            [
                "dojo.declare(\"MyClass\", [superClass1, superClass2], /** @lends",
                []
            ],
            ["MyClass.prototype */ {", []],
            ["foo: function(){ ... }", "CODE"],
            ["bar: function(){ ... }", "CODE"],
            ["});", []],
            [
                "The @lends keyword in particular is useful since it tells JSDoc that foo and bar are part of MyClass's prototype.",
                ["OB"]
            ],
            [
                "But closure compiler isn't picking up on that, thus I get a bunch of errors about \"dangerous use of this\" inside of foo() and bar().",
                ["OB"]
            ],
            ["So, can @lends support be added to the closure compiler?", []],
            [
                "The workaround is to use @this on every method, but not sure if that is sufficient to make advanced mode compilation work correctly.",
                []
            ]
        ]
    },
    "Codec-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Bug in HW rule in Soundex"],
        "desc_hints": ["Soundex.getMappingCode", "en.wikipedia.org"],
        "desc_text": [
            [
                "The Soundex algorithm says that if two characters that map to the same code are separated by H or W, the second one is not encoded.",
                ["OB"]
            ],
            [
                "However, in the implementation (in Soundex.getMappingCode() line 191), a character that is preceded by two characters that are either H or W, is not encoded, regardless of what the last consonant was.",
                ["OB"]
            ],
            [
                "Source: http://en.wikipedia.org/wiki/Soundex#American_Soundex",
                []
            ]
        ]
    },
    "Math-23": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BrentOptimizer"],
        "summary_text": [
            "\"BrentOptimizer\" not always reporting the best point"
        ],
        "desc_hints": ["BrentOptimizer", "optimization.univariate"],
        "desc_text": [
            [
                "BrentOptimizer (package \"o.a.c.m.optimization.univariate\") does not check that the point it is going to return is indeed the best one it has encountered.",
                ["OB"]
            ],
            [
                "Indeed, the last evaluated point might be slightly worse than the one before last.",
                ["OB"]
            ]
        ]
    },
    "Cli-34": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["String as default Option type"],
        "desc_hints": [
            "getParsedOptionValue",
            "CommandLine.getParsedOptionValue",
            "Option.type"
        ],
        "desc_text": [
            [
                "getParsedOptionValue returns null unless Option.type gets explicitly set.",
                ["OB"]
            ],
            [
                "The user expects it to be String unless set to any other type.",
                ["OB", "EB"]
            ],
            [
                "This coult be either fixed in the Option constructor or in CommandLine.getParsedOptionValue.",
                []
            ],
            ["Mentioning this behaviour in Javadoc would be advisable.", []]
        ]
    },
    "Jsoup-7": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Page results in malformed tree"],
        "desc_hints": ["Misc.git", "github.com"],
        "desc_text": [
            [
                "The page I will attach results in a Jsoup tree with two body elements, neither if which is a direct child of the html element.",
                ["OB"]
            ],
            [
                "You will find the page in \"git@github.com:bimargulies/Misc.git\" under the jsoup-tc directory.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-13": {
        "code_elements": [
            "function some_function() {",
            "var fn1;",
            "var fn2;",
            "if (any_expression) {",
            "fn2 = external_ref;",
            "fn1 = function (content) {",
            "return fn2();",
            "}",
            "}",
            "return {",
            "method1: function () {",
            "if (fn1) fn1();",
            "return true;",
            "},",
            "method2: function () {",
            "return false;",
            "}",
            "}",
            "}",
            "function some_function() {",
            "var a, b;",
            "any_expression && (b = external_ref, a = function () {",
            "return b()",
            "});",
            "return {",
            "method1: function () {",
            "a && a();",
            "return true",
            "},",
            "method2: function () {",
            "return false",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["true/false are not always replaced for !0/!1"],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["function some_function() {", "CODE"],
            ["var fn1;", "CODE"],
            ["var fn2;", "CODE"],
            ["if (any_expression) {", "CODE"],
            ["fn2 = external_ref;", "CODE"],
            ["fn1 = function (content) {", "CODE"],
            ["return fn2();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["return {", "CODE"],
            ["method1: function () {", "CODE"],
            ["if (fn1) fn1();", "CODE"],
            ["return true;", "CODE"],
            ["},", "CODE"],
            ["method2: function () {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "We expect that true/false will be replaced for !0/!1, but it doesn't happend.",
                ["EB"]
            ],
            ["function some_function() {", "CODE"],
            ["var a, b;", "CODE"],
            ["any_expression && (b = external_ref, a = function () {", "CODE"],
            ["return b()", "CODE"],
            ["});", "CODE"],
            ["return {", "CODE"],
            ["method1: function () {", "CODE"],
            ["a && a();", "CODE"],
            ["return true", "CODE"],
            ["},", "CODE"],
            ["method2: function () {", "CODE"],
            ["return false", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["};", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["This is output for latest official build.", []],
            ["I also got the same output for 20120430, 20120305.", ["OB"]],
            ["But 20111117 is OK.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            ["Here is just one of example.", ["OB", "SR"]],
            [
                "I found too many non-replaced true/false in compiler output.",
                ["OB"]
            ],
            [
                "Replacement non-replaced true/false to !1/!0 in conpiler output saves 1-2 kb for 850 kb js file.",
                []
            ]
        ]
    },
    "Closure-117": {
        "code_elements": [
            "/**",
            "* @constructor",
            "*/",
            "function C2() {}",
            "/**",
            "* @constructor",
            "*/",
            "function C3(c2) {",
            "/**",
            "* @type {C2}",
            "* @private",
            "*/",
            "this.c2_;",
            "use(this.c2_.prop);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Wrong type name reported on missing property error."],
        "desc_hints": ["this.c2_.prop", "C3.c2_", "this.c2_"],
        "desc_text": [
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["function C2() {}", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["function C3(c2) {", "CODE"],
            ["/**", "CODE"],
            ["* @type {C2}", "CODE"],
            ["* @private", "CODE"],
            ["*/", "CODE"],
            ["this.c2_;", "CODE"],
            ["use(this.c2_.prop);", "CODE"],
            ["}", "CODE"],
            ["Produces:", []],
            ["Property prop never defined on C3.c2_", ["OB"]],
            ["But should be:", ["EB"]],
            ["Property prop never defined on C2", ["OB"]]
        ]
    },
    "Gson-18": {
        "code_elements": [
            "// ? extends causes the issue",
            "class BigClass { Map<String, ? extends List<SmallClass>> inBig; }",
            "class SmallClass { String inSmall; }",
            "SmallClass small = new Gson().fromJson(json, BigClass.class).inBig.get(\"inSmall\").get(0);"
        ],
        "stack_traces": [],
        "summary_hints": ["LinkedHashMap"],
        "summary_text": ["Gson deserializes wildcards to LinkedHashMap"],
        "desc_hints": [
            "inBig",
            "fromJson",
            "BigClass",
            "SmallClass",
            "ClassCastException",
            "BigClass.class",
            "inSmall",
            "com.google.gson.internal.LinkedTreeMap",
            "inBig.get"
        ],
        "desc_text": [
            ["This issue is a successor to #1101.", []],
            ["Models:", []],
            ["// ? extends causes the issue", "CODE"],
            [
                "class BigClass { Map<String, ? extends List<SmallClass>> inBig; }",
                "CODE"
            ],
            ["class SmallClass { String inSmall; }", "CODE"],
            ["Json:", []],
            ["{", []],
            ["\"inBig\": {", []],
            ["\"key\": [", []],
            ["{ \"inSmall\": \"hello\" }", []],
            ["]", []],
            ["}", []],
            ["}", []],
            ["Gson call:", []],
            [
                "SmallClass small = new Gson().fromJson(json, BigClass.class).inBig.get(\"inSmall\").get(0);",
                "CODE"
            ],
            [
                "This call will fail with a ClassCastException exception \u2013",
                ["OB"]
            ],
            [
                "com.google.gson.internal.LinkedTreeMap cannot be cast to Entry.",
                ["OB"]
            ],
            ["If we remove ?", []],
            ["extends then everything works fine.", ["OB"]]
        ]
    },
    "Cli-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser ignores unrecognized tokens starting with '-'"
        ],
        "desc_hints": ["stopAtNonOption", "PosixParser"],
        "desc_text": [
            [
                "PosixParser doesn't handle properly unrecognized tokens starting with '-' when stopAtNonOption is enabled, the token is simply ignored.",
                ["OB"]
            ],
            [
                "For example, if the option 'a' is defined, the following command line:",
                ["SR"]
            ],
            ["-z -a foo", []],
            ["is interpreted as:", []],
            ["-a foo", []]
        ]
    },
    "Closure-41": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// @use_closure_library true",
            "// ==/ClosureCompiler==",
            "goog.provide('Foo');",
            "goog.provide('Bar');",
            "/** @constructor */",
            "Foo = function() {};",
            "/**",
            "* @param {number} a",
            "* @param {number} b",
            "* @return {number}",
            "*/",
            "Foo.prototype.add = function(a, b) {",
            "return a + b;",
            "/**",
            "* @param {number} a",
            "* @param {number} b",
            "* @return {number}",
            "*/",
            "Foo.prototype.sub = goog.abstractMethod;",
            "/**",
            "* @constructor",
            "* @extends {Foo}",
            "*/",
            "Bar = function() {",
            "goog.base(this);",
            "goog.inherits(Bar, Foo);",
            "/** @inheritDoc */",
            "Bar.prototype.add = function(one) {",
            "return one;",
            "/** @inheritDoc */",
            "Bar.prototype.sub = function(one) {",
            "return one;",
            "var foo = /** @type {Foo} */ (new Bar());",
            "alert(foo.add(3, 4));",
            "var bar = new Bar();",
            "// THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT",
            "alert(bar.add(3, 4));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures."
        ],
        "desc_hints": [
            "goog.provide",
            "ClosureCompiler",
            "bar.add",
            "goog.base",
            "Foo.prototype.add",
            "Bar.prototype.add",
            "inheritDoc",
            "Bar.prototype.sub",
            "Foo.prototype.sub",
            "goog.inherits",
            "goog.abstractMethod",
            "default.js",
            "foo.add"
        ],
        "desc_text": [
            [
                "In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures.",
                ["OB"]
            ],
            [
                "The following code only warns in the one instance noted in the comment, whereas I would expect it to complain about the declarations of both Bar.prototype.add and Bar.prototype.sub, as they claim @inheritDoc, but have seemingly different signatures from that of their superclass methods.",
                ["OB", "EB"]
            ],
            [
                "It would be helpful to have such a warning so that when you change the signature of a superclass method, you can run the Compiler to trigger warnings and find all of the other signatures that you need to update.",
                []
            ],
            ["Run the following:", ["OB", "SR"]],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @use_closure_library true", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["goog.provide('Foo');", "CODE"],
            ["goog.provide('Bar');", "CODE"],
            ["/** @constructor */", "CODE"],
            ["Foo = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @param {number} a", "CODE"],
            ["* @param {number} b", "CODE"],
            ["* @return {number}", "CODE"],
            ["*/", "CODE"],
            ["Foo.prototype.add = function(a, b) {", "CODE"],
            ["return a + b;", "CODE"],
            ["};", []],
            ["/**", "CODE"],
            ["* @param {number} a", "CODE"],
            ["* @param {number} b", "CODE"],
            ["* @return {number}", "CODE"],
            ["*/", "CODE"],
            ["Foo.prototype.sub = goog.abstractMethod;", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @extends {Foo}", "CODE"],
            ["*/", "CODE"],
            ["Bar = function() {", "CODE"],
            ["goog.base(this);", "CODE"],
            ["};", []],
            ["goog.inherits(Bar, Foo);", "CODE"],
            ["/** @inheritDoc */", "CODE"],
            ["Bar.prototype.add = function(one) {", "CODE"],
            ["return one;", "CODE"],
            ["};", []],
            ["/** @inheritDoc */", "CODE"],
            ["Bar.prototype.sub = function(one) {", "CODE"],
            ["return one;", "CODE"],
            ["};", []],
            ["var foo = /** @type {Foo} */ (new Bar());", "CODE"],
            ["alert(foo.add(3, 4));", "CODE"],
            ["var bar = new Bar();", "CODE"],
            ["// THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT", "CODE"],
            ["alert(bar.add(3, 4));", "CODE"]
        ]
    },
    "Math-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Wide bounds to CMAESOptimizer result in NaN parameters passed to fitness function"
        ],
        "desc_hints": ["FitnessFunction.encode", "Double.MAX_VALUE"],
        "desc_text": [
            [
                "If you give large values as lower/upper bounds (for example -Double.MAX_VALUE as a lower bound), the optimizer can call the fitness function with parameters set to NaN.",
                ["OB", "SR"]
            ],
            [
                "My guess is this is due to FitnessFunction.encode/decode generating NaN when normalizing/denormalizing parameters.",
                ["OB"]
            ],
            [
                "For example, if the difference between the lower and upper bound is greater than Double.MAX_VALUE, encode could divide infinity by infinity.",
                ["OB", "SR"]
            ]
        ]
    },
    "Mockito-6": {
        "code_elements": [
            "Function<Object, Integer> function = Mockito.mock(Function.class);",
            "when(function.apply(Mockito.anyString())).thenReturn(1);",
            "Integer result = function.apply(2);",
            "result == null;",
            "result == 1;"
        ],
        "stack_traces": [],
        "summary_hints": ["anyString", "anyXxx", "anyList"],
        "summary_text": [
            "Argument matcher anyXxx() (i.e. anyString(), anyList()) should not match nulls"
        ],
        "desc_hints": [
            "function.apply",
            "Mockito.anyString",
            "Function.class",
            "anyBoolean",
            "thenReturn",
            "Mockito.mock"
        ],
        "desc_text": [
            [
                "This is a bug I'm seeing in 1.10.8 version (older version has the same issue - tested with 1.9.0).",
                []
            ],
            ["Given:", ["OB"]],
            [
                "Function<Object, Integer> function = Mockito.mock(Function.class);",
                "CODE"
            ],
            [
                "when(function.apply(Mockito.anyString())).thenReturn(1);",
                "CODE"
            ],
            ["Integer result = function.apply(2);", "CODE"],
            ["Expected behavior:", []],
            ["result == null;", "CODE"],
            ["Actual behavior:", ["OB"]],
            ["result == 1;", "CODE"],
            [
                "Note that the function is called with an integer (not a string), and still the mocked function return the value which it should return only when a string is passed.",
                ["OB", "EB"]
            ],
            [
                "The same works when using anyBoolean() or any other methof from any* family.",
                ["OB"]
            ]
        ]
    },
    "Math-47": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Division by zero"],
        "desc_hints": [],
        "desc_text": [
            ["In class Complex, division by zero always returns NaN.", ["OB"]],
            [
                "I think that it should return NaN only when the numerator is also ZERO, otherwise the result should be INF.",
                ["OB", "EB"]
            ],
            ["See here.", ["OB"]]
        ]
    },
    "Closure-79": {
        "code_elements": [
            "function Str(key, holder, stack) {",
            "(function() {",
            "function Str(key, holder, stack) {",
            "(function() {"
        ],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
            "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
            "at com.google.common.base.Preconditions.checkState(Preconditions.java:129)"
        ],
        "summary_hints": ["RuntimeException"],
        "summary_text": [
            "RuntimeException when compiling with extern prototype"
        ],
        "desc_hints": [
            "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar",
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.NodeTraversal.getScope",
            "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars",
            "DuplicateDeclarationHandler.onRedeclaration",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.Normalize",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "Preconditions.java",
            "com.google.javascript.jscomp.Compiler.runCallable",
            "prototype.js",
            "com.google.javascript.jscomp.Compiler.compile",
            "bootloader.js",
            "compiler.jar",
            "com.google.common.base.Preconditions.checkState",
            "com.google.javascript.jscomp.SyntacticScopeCreator.createScope",
            "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "java -jar compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --externs prototype.js --js bootloader.js",
                []
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["null", []],
            ["Node(FUNCTION ): prototype.js:213:11", []],
            ["function Str(key, holder, stack) {", "CODE"],
            ["Parent(BLOCK): prototype.js:160:12", []],
            ["(function() {", "CODE"],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                "STACK_TRACE"
            ],
            ["Please report this problem.", []],
            ["null", []],
            ["Node(FUNCTION ): prototype.js:213:11", []],
            ["function Str(key, holder, stack) {", "CODE"],
            ["Parent(BLOCK): prototype.js:160:12", []],
            ["(function() {", "CODE"],
            [
                "at com.google.common.base.Preconditions.checkState(Preconditions.java:129)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Normalize$DuplicateDeclarationHandler.onRedeclaration(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.SyntacticScopeCreator.createScope(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.getScope(Unknown Source)",
                []
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Version: 706", []],
            ["Built on: 2011/01/19 19:53", []],
            ["Mac OS X 10.6.0", []]
        ]
    },
    "JxPath-22": {
        "code_elements": [
            "String ln = DOMNodePointer.getLocalName(node);",
            "String nsURI = getNamespaceURI();",
            "if (nsURI == null) {",
            "buffer.append(ln);",
            "buffer.append('[');",
            "buffer.append(getRelativePositionByName()).append(']');",
            "}",
            "else {",
            "String prefix = getNamespaceResolver().getPrefix(nsURI);",
            "if (prefix != null) {",
            "String ln = DOMNodePointer.getLocalName(node);",
            "String nsURI = getNamespaceURI();",
            "if (nsURI == null || nsURI.length() == 0) { // check for empty string which means that the node doesn't have a namespace.",
            "buffer.append(ln);",
            "buffer.append('[');",
            "buffer.append(getRelativePositionByName()).append(']');",
            "}",
            "else {",
            "String prefix = getNamespaceResolver().getPrefix(nsURI);",
            "if (prefix != null) {"
        ],
        "stack_traces": [],
        "summary_hints": ["asPath"],
        "summary_text": [
            "Resetting the default namespace causes a serious endless loop when requesting .asPath() on a node."
        ],
        "desc_hints": [
            "org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix",
            "getPrefix",
            "getNamespaceResolver",
            "DOMNodePointer.asPath",
            "asPath",
            "buffer.append",
            "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.asPath",
            "getNamespaceURI",
            "nsURI",
            "nsURI.length",
            "DOMNodePointer.getLocalName",
            "getRelativePositionByName",
            "NodePointer"
        ],
        "desc_text": [
            ["sample smaller case:", ["SR"]],
            ["<...>", []],
            [
                "<b:foo xmlns:b=\"bla\" xmlns=\"test111\">  <!--  No nodes are placed in the tree within ns \"test111\" but the attribute is still there.-->",
                []
            ],
            [
                "<b:bar>a</b:bar>                       <!-- is in ns 'bla' -->",
                []
            ],
            [
                "<test xmlns=\"\"></test>                 <!-- does not have a namespace -->",
                []
            ],
            ["</b:foo>", []],
            ["</...>", []],
            [
                "when requesting .asPath() on the 'test' node, it loops in org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(NodePointer, String),",
                ["OB"]
            ],
            [
                "and if it didn't loop it would create a wrong xpath '//b:fo/null:test' DOMNodePointer.asPath().",
                ["OB"]
            ],
            [
                "So I think that the fix should be in org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.asPath()",
                ["EB"]
            ],
            ["....", []],
            ["String ln = DOMNodePointer.getLocalName(node);", "CODE"],
            ["String nsURI = getNamespaceURI();", "CODE"],
            ["if (nsURI == null) {", "CODE"],
            ["buffer.append(ln);", "CODE"],
            ["buffer.append('[');", "CODE"],
            ["buffer.append(getRelativePositionByName()).append(']');", "CODE"],
            ["}", "CODE"],
            ["else {", "CODE"],
            [
                "String prefix = getNamespaceResolver().getPrefix(nsURI);",
                "CODE"
            ],
            ["if (prefix != null) {", "CODE"],
            ["...", []],
            ["should become", ["OB", "EB"]],
            ["...", []],
            ["String ln = DOMNodePointer.getLocalName(node);", "CODE"],
            ["String nsURI = getNamespaceURI();", "CODE"],
            [
                "if (nsURI == null || nsURI.length() == 0) { // check for empty string which means that the node doesn't have a namespace.",
                "CODE"
            ],
            ["buffer.append(ln);", "CODE"],
            ["buffer.append('[');", "CODE"],
            ["buffer.append(getRelativePositionByName()).append(']');", "CODE"],
            ["}", "CODE"],
            ["else {", "CODE"],
            [
                "String prefix = getNamespaceResolver().getPrefix(nsURI);",
                "CODE"
            ],
            ["if (prefix != null) {", "CODE"],
            ["...", []]
        ]
    },
    "Compress-39": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Defective .zip-archive produces problematic error message"
        ],
        "desc_hints": ["java.io.EOFException"],
        "desc_text": [
            [
                "A truncated .zip-File produces an java.io.EOFException conatining a hughe amount of byte[]-data in the error-message - leading to beeps and crippeling workload in an potential console-logger.",
                ["OB"]
            ]
        ]
    },
    "Lang-44": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "NumberUtils",
            "StringIndexOutOfBoundsException",
            "createNumber"
        ],
        "summary_text": [
            "NumberUtils createNumber thows a StringIndexOutOfBoundsException when only an \"l\" is passed in."
        ],
        "desc_hints": ["StringIndexOutOfBoundsException"],
        "desc_text": [
            [
                "Seems to be similar to LANG-300, except that if you don't place a digit in front of the \"l\" or \"L\" it throws a StringIndexOutOfBoundsException instead.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-12": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:86)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:790)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:308)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:198)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(TarArchiveInputStream.java:380)",
            "at de.schlichtherle.truezip.fs.archive.tar.TarInputShop.<init>(TarInputShop.java:91)",
            "at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newTarInputShop(TarDriver.java:159)",
            "at de.schlichtherle.truezip.fs.archive.tar.TarGZipDriver.newTarInputShop(TarGZipDriver.java:82)",
            "at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop(TarDriver.java:151)",
            "at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop(TarDriver.java:47)",
            "at de.schlichtherle.truezip.fs.archive.FsDefaultArchiveController.mount(FsDefaultArchiveController.java:170)",
            "at de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController$ResetFileSystem.autoMount(FsFileSystemArchiveController.java:98)",
            "at de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController.autoMount(FsFileSystemArchiveController.java:47)",
            "at de.schlichtherle.truezip.fs.archive.FsArchiveController.autoMount(FsArchiveController.java:129)",
            "at de.schlichtherle.truezip.fs.archive.FsArchiveController.getEntry(FsArchiveController.java:160)",
            "at de.schlichtherle.truezip.fs.archive.FsContextController.getEntry(FsContextController.java:117)",
            "at de.schlichtherle.truezip.fs.FsDecoratingController.getEntry(FsDecoratingController.java:76)",
            "at de.schlichtherle.truezip.fs.FsDecoratingController.getEntry(FsDecoratingController.java:76)",
            "at de.schlichtherle.truezip.fs.FsConcurrentController.getEntry(FsConcurrentController.java:164)",
            "at de.schlichtherle.truezip.fs.FsSyncController.getEntry(FsSyncController.java:108)",
            "at de.schlichtherle.truezip.fs.FsFederatingController.getEntry(FsFederatingController.java:156)",
            "at de.schlichtherle.truezip.nio.file.TFileSystem.newDirectoryStream(TFileSystem.java:348)",
            "at de.schlichtherle.truezip.nio.file.TPath.newDirectoryStream(TPath.java:963)",
            "at de.schlichtherle.truezip.nio.file.TFileSystemProvider.newDirectoryStream(TFileSystemProvider.java:344)",
            "at java.nio.file.Files.newDirectoryStream(Files.java:400)",
            "at com.googlecode.boostmavenproject.GetSourcesMojo.convertToJar(GetSourcesMojo.java:248)",
            "at com.googlecode.boostmavenproject.GetSourcesMojo.download(GetSourcesMojo.java:221)",
            "at com.googlecode.boostmavenproject.GetSourcesMojo.execute(GetSourcesMojo.java:111)",
            "at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)",
            "... 20 more"
        ],
        "summary_hints": ["TarArchiveInputStream", "IllegalArgumentException"],
        "summary_text": [
            "TarArchiveInputStream throws IllegalArgumentException instead of IOException"
        ],
        "desc_hints": [
            "TarArchiveEntry.java",
            "de.schlichtherle.truezip.fs.FsFederatingController.getEntry",
            "DefaultBuildPluginManager.java",
            "de.schlichtherle.truezip.fs.archive.tar.TarGZipDriver.newTarInputShop",
            "de.schlichtherle.truezip.fs.archive.FsDefaultArchiveController.mount",
            "TarDriver.java",
            "de.schlichtherle.truezip.fs.FsDecoratingController.getEntry",
            "TarArchiveInputStream.java",
            "FsDefaultArchiveController.java",
            "de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController.autoMount",
            "de.schlichtherle.truezip.fs.FsSyncController.getEntry",
            "org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
            "TarArchiveInputStream",
            "de.schlichtherle.truezip.nio.file.TFileSystemProvider.newDirectoryStream",
            "de.schlichtherle.truezip.fs.archive.FsArchiveController.autoMount",
            "FsFederatingController.java",
            "FsSyncController.java",
            "de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop",
            "Files.java",
            "IllegalArgumentException",
            "TarGZipDriver.java",
            "FsConcurrentController.java",
            "de.schlichtherle.truezip.fs.archive.FsArchiveController.getEntry",
            "de.schlichtherle.truezip.fs.archive.tar.TarInputShop",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry",
            "java.lang.IllegalArgumentException",
            "FsContextController.java",
            "FsDecoratingController.java",
            "java.nio.file.Files.newDirectoryStream",
            "de.schlichtherle.truezip.nio.file.TPath.newDirectoryStream",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal",
            "com.googlecode.boostmavenproject.GetSourcesMojo.download",
            "TarUtils.java",
            "de.schlichtherle.truezip.nio.file.TFileSystem.newDirectoryStream",
            "GetSourcesMojo.java",
            "com.googlecode.boostmavenproject.GetSourcesMojo.convertToJar",
            "TPath.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader",
            "de.schlichtherle.truezip.fs.FsConcurrentController.getEntry",
            "de.schlichtherle.truezip.fs.archive.FsContextController.getEntry",
            "FsFileSystemArchiveController.java",
            "de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry",
            "TFileSystemProvider.java",
            "FsArchiveController.java",
            "ResetFileSystem.autoMount",
            "TFileSystem.java",
            "TarInputShop.java",
            "com.googlecode.boostmavenproject.GetSourcesMojo.execute",
            "de.schlichtherle.truezip.fs.archive.tar.TarDriver.newTarInputShop"
        ],
        "desc_text": [
            [
                "TarArchiveInputStream is throwing IllegalArgumentException instead of IOException on corrupt files, in direct contradiction to the Javadoc.",
                ["OB", "EB"]
            ],
            ["Here is a stack-trace:", []],
            [
                "java.lang.IllegalArgumentException: Invalid byte -1 at offset 7 in '<some bytes>' len=8",
                []
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:86)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:790)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:308)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:198)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(TarArchiveInputStream.java:380)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.tar.TarInputShop.<init>(TarInputShop.java:91)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newTarInputShop(TarDriver.java:159)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.tar.TarGZipDriver.newTarInputShop(TarGZipDriver.java:82)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop(TarDriver.java:151)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop(TarDriver.java:47)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.FsDefaultArchiveController.mount(FsDefaultArchiveController.java:170)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController$ResetFileSystem.autoMount(FsFileSystemArchiveController.java:98)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController.autoMount(FsFileSystemArchiveController.java:47)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.FsArchiveController.autoMount(FsArchiveController.java:129)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.FsArchiveController.getEntry(FsArchiveController.java:160)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.archive.FsContextController.getEntry(FsContextController.java:117)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.FsDecoratingController.getEntry(FsDecoratingController.java:76)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.FsDecoratingController.getEntry(FsDecoratingController.java:76)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.FsConcurrentController.getEntry(FsConcurrentController.java:164)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.FsSyncController.getEntry(FsSyncController.java:108)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.fs.FsFederatingController.getEntry(FsFederatingController.java:156)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.nio.file.TFileSystem.newDirectoryStream(TFileSystem.java:348)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.nio.file.TPath.newDirectoryStream(TPath.java:963)",
                "STACK_TRACE"
            ],
            [
                "at de.schlichtherle.truezip.nio.file.TFileSystemProvider.newDirectoryStream(TFileSystemProvider.java:344)",
                "STACK_TRACE"
            ],
            [
                "at java.nio.file.Files.newDirectoryStream(Files.java:400)",
                "STACK_TRACE"
            ],
            [
                "at com.googlecode.boostmavenproject.GetSourcesMojo.convertToJar(GetSourcesMojo.java:248)",
                "STACK_TRACE"
            ],
            [
                "at com.googlecode.boostmavenproject.GetSourcesMojo.download(GetSourcesMojo.java:221)",
                "STACK_TRACE"
            ],
            [
                "at com.googlecode.boostmavenproject.GetSourcesMojo.execute(GetSourcesMojo.java:111)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)",
                "STACK_TRACE"
            ],
            ["... 20 more", "STACK_TRACE"],
            [
                "Expected behavior: TarArchiveInputStream should wrap the IllegalArgumentException in an IOException.",
                ["OB", "EB"]
            ]
        ]
    },
    "Math-73": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["IllegalArgumentException"],
        "summary_text": [
            "Brent solver doesn't throw IllegalArgumentException when initial guess has the wrong sign"
        ],
        "desc_hints": ["UnivariateRealFunction", "IllegalArgumentException"],
        "desc_text": [
            [
                "Javadoc for \"public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\" claims that \"if the values of the function at the three points have the same sign\" an IllegalArgumentException is thrown.",
                []
            ],
            ["This case isn't even checked.", ["OB"]]
        ]
    },
    "JacksonDatabind-41": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TypeFactory.constructType"],
        "summary_text": [
            "Problems with deprecated TypeFactory.constructType(type, ctxt) methods if ctxt is null"
        ],
        "desc_hints": [],
        "desc_text": [
            ["(note: continuation of #1079)", []],
            [
                "Looks like earlier fix was incomplete, and there is one more edge case to handle: if passed-in context is null, attempt to resolve that will fail.",
                ["OB"]
            ],
            [
                "This should not occur since previously passing of null would simply have used \"empty\" bindings.",
                ["EB"]
            ],
            ["Code needs to take care to handle this as version 2.6 did.", []]
        ]
    },
    "Cli-17": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser keeps bursting tokens even if a non option character is found"
        ],
        "desc_hints": ["stopAtNonOption", "PosixParser"],
        "desc_text": [
            [
                "PosixParser doesn't stop the bursting process of a token if stopAtNonOption is enabled and a non option character is encountered.",
                ["OB"]
            ],
            [
                "For example if the options a and b are defined, with stopAtNonOption=true the following command line:",
                ["SR"]
            ],
            ["-azb", []],
            ["is turned into:", []],
            ["-a zb -b", ["SR"]],
            ["the right output should be:", ["EB"]],
            ["-a zb", []]
        ]
    },
    "JacksonDatabind-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ObjectReader.readValues"],
        "summary_text": [
            "Add basic error-recovery for ObjectReader.readValues()"
        ],
        "desc_hints": ["JsonProcessingException", "MappingIterator"],
        "desc_text": [
            ["(follow up for #733)", []],
            [
                "In case of JsonProcessingException, MappingIterator will currently be left pointing right after whatever token was last tokenized (or character following tokenization error).",
                ["OB"]
            ],
            [
                "While this is better than indeterminate state, ideally it should try to do some error recover.",
                ["OB", "EB"]
            ],
            [
                "And although it may not be possible to recover successfully from all kinds of issues, it should be possible to do best effort given that iterator has some knowledge of state when it was opened; that is, it can try to heuristically match closing END_OBJECT, depending on nesting level it was created at.",
                ["OB", "EB", "SR"]
            ],
            [
                "In addition it may make sense to add a switch to prevent using of any automated heuristics, for those users who want full control over recovery.",
                ["SR"]
            ]
        ]
    },
    "Codec-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CharSequence", "StringUtils.equals"],
        "summary_text": [
            "StringUtils.equals(CharSequence cs1, CharSequence cs2) can fail with String Index OBE"
        ],
        "desc_hints": ["CharSequence", "StringUtils.equals"],
        "desc_text": [
            [
                "StringUtils.equals(CharSequence cs1, CharSequence cs2) fails with String Index OBE if the two sequences are different lengths.",
                ["OB"]
            ]
        ]
    },
    "Closure-54": {
        "code_elements": ["this._setAttributesPayload(payload.attributes);"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Prototype methods can't be used from the constructor in case prototype is explicitly defined."
        ],
        "desc_hints": [
            "WebInspector.DOMNode",
            "WebKit",
            "_setAttributesPayload",
            "WebInspector.DOMAgent",
            "payload.attributes",
            "WebCore",
            "DOMAgent.js",
            "trac.webkit.org"
        ],
        "desc_text": [
            ["Consider the following source code:", ["OB", "SR"]],
            [
                "http://trac.webkit.org/browser/trunk/Source/WebCore/inspector/front-end/DOMAgent.js",
                []
            ],
            [
                "When I mark WebInspector.DOMAgent as a @constructor, I get the following warning.",
                ["OB", "SR"]
            ],
            [
                "Source/WebCore/inspector/front-end/DOMAgent.js:48: WARNING - Property _setAttributesPayload never defined on WebInspector.DOMNode",
                ["SR"]
            ],
            ["this._setAttributesPayload(payload.attributes);", "CODE"],
            [
                "It sounds like the problem is in the way we define prototypes in line 83-ish.",
                []
            ],
            ["That's the way WebKit style tells us to do.", ["OB"]]
        ]
    },
    "JxPath-13": {
        "code_elements": [
            "registerNamespace(A,\"/http...\");",
            "registerNamespace(B,\"/http...\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Incomplete handling of undefined namespaces"],
        "desc_hints": [
            "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
            "myAttr",
            "registerNamespace",
            "nsa.gov"
        ],
        "desc_text": [
            ["Mcduffey, Joe <jdmcduf@nsa.gov>", []],
            [
                "Can someone tell me how to register namespaces so that attributes with namespaces does not cause the exception",
                ["OB"]
            ],
            [
                "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
                []
            ],
            ["unknown namespace prefix: xsi", []],
            ["For example the following", ["OB", "SR"]],
            ["<ElementA A:myAttr=\"Mytype\">", []],
            ["<B:ElementB>MY VALUE</B:ElementB>", []],
            ["</ElementA>", []],
            ["Would result in the following exception:", ["OB"]],
            [
                "org.apache.common.ri.model.dom.DOMNodePointer.createAttribute",
                []
            ],
            ["unknown namespace prefix: A", []],
            [
                "FYI: In this example there was a namespace decaration in the file and I also manually called the",
                ["SR"]
            ],
            ["registerNamespace(A,\"/http...\");", "CODE"],
            ["registerNamespace(B,\"/http...\");", "CODE"],
            ["There was no problem encountered for elements.", ["OB"]],
            ["Only attributes.", ["OB"]],
            ["Can someone help?", []],
            ["Thanks.", ["OB"]]
        ]
    },
    "Collections-26": {
        "code_elements": [
            "package de.ivu.test.common.collections4;",
            "import static org.junit.Assert.assertEquals;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.ByteArrayOutputStream;",
            "import java.io.IOException;",
            "import java.io.ObjectInputStream;",
            "import java.io.ObjectOutputStream;",
            "import org.apache.commons.collections4.keyvalue.MultiKey;",
            "import org.junit.Test;",
            "public class MultiKeySerializationTest {",
            "@Test",
            "@SuppressWarnings(\"unchecked\")",
            "public void testReadResolveEqualHashCode()",
            "throws IOException, ClassNotFoundException {",
            "class MultiKey2<A, B>",
            "extends MultiKey {",
            "private static final long serialVersionUID = 1928896152249821416L;",
            "public MultiKey2(A key1, B key2) {",
            "super(key1, key2);",
            "}",
            "public A getFirst() {",
            "return (A) getKey(0);",
            "}",
            "public B getSecond() {",
            "return (B) getKey(1);",
            "}",
            "// FIXME: MultiKey should either declare protected readResolve() or must be final.",
            "}",
            "MultiKey2<String, String> one = new MultiKey2<>(\"bla\", \"blub\");",
            "System.out.println(one.hashCode());",
            "ByteArrayOutputStream byteOut = new ByteArrayOutputStream();",
            "ObjectOutputStream out = new ObjectOutputStream(byteOut);",
            "out.writeObject(one);",
            "out.close();",
            "byte[] serialized = byteOut.toByteArray();",
            "ByteArrayInputStream byteIn = new ByteArrayInputStream(serialized);",
            "ObjectInputStream in = new ObjectInputStream(byteIn);",
            "MultiKey2<String, String> two = (MultiKey2<String, String>) in.readObject();",
            "System.out.println(two.hashCode());",
            "assertEquals(\"hashCode must be equal - please check for protected readResolve in MultiKey*\", one.hashCode(),",
            "two.hashCode());",
            "}",
            "}",
            "-    private Object readResolve() {",
            "+    protected Object readResolve() {",
            "calculateHashCode(keys);",
            "return this;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["readResolve", "MultiKey"],
        "summary_text": [
            "MultiKey subclassing has deserialization problem since COLLECTIONS-266: either declare protected readResolve() or MultiKey must be final"
        ],
        "desc_hints": [
            "java.io.ByteArrayInputStream",
            "java.io.ObjectOutputStream",
            "hashCode",
            "assertEquals",
            "MultiKey2",
            "byteIn",
            "two.hashCode",
            "MultiKey",
            "serialVersionUID",
            "ByteArrayOutputStream",
            "out.writeObject",
            "getKey",
            "org.apache.commons.collections4.keyvalue.MultiKey",
            "java.io.ByteArrayOutputStream",
            "ClassNotFoundException",
            "MultiKeySerializationTest.java",
            "getFirst",
            "calculateHashCode",
            "de.ivu.test.common.collections4",
            "testReadResolveEqualHashCode",
            "ByteArrayInputStream",
            "one.hashCode",
            "ObjectOutputStream",
            "SuppressWarnings",
            "org.junit.Assert.assertEquals",
            "java.io.IOException",
            "out.close",
            "in.readObject",
            "getSecond",
            "ObjectInputStream",
            "java.io.ObjectInputStream",
            "org.junit.Test",
            "byteOut.toByteArray",
            "MultiKeySerializationTest",
            "byteOut",
            "readResolve",
            "MultiKey.java",
            "System.out.println"
        ],
        "desc_text": [
            [
                "MultiKey from collections 4 provides a transient hashCode and a private readResolve to resolve COLLECTIONS-266: Issue with MultiKey when serialized/deserialized via RMI.",
                ["OB", "SR"]
            ],
            [
                "Unfortunately the solution does not work in case of subclassing: readResolve in MultiKey should be declared protected readResolve() to be called during deserialization of the subclass.",
                ["OB", "EB"]
            ],
            [
                "Otherwise MultiKey must be final to avoid such subclassing.",
                ["OB"]
            ],
            ["Testcase:", []],
            ["MultiKeySerializationTest.java", []],
            ["package de.ivu.test.common.collections4;", "CODE"],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["import java.io.ByteArrayInputStream;", "CODE"],
            ["import java.io.ByteArrayOutputStream;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import java.io.ObjectInputStream;", "CODE"],
            ["import java.io.ObjectOutputStream;", "CODE"],
            [
                "import org.apache.commons.collections4.keyvalue.MultiKey;",
                "CODE"
            ],
            ["import org.junit.Test;", "CODE"],
            ["public class MultiKeySerializationTest {", "CODE"],
            ["@Test", "CODE"],
            ["@SuppressWarnings(\"unchecked\")", "CODE"],
            ["public void testReadResolveEqualHashCode()", "CODE"],
            ["throws IOException, ClassNotFoundException {", "CODE"],
            ["class MultiKey2<A, B>", "CODE"],
            ["extends MultiKey {", "CODE"],
            [
                "private static final long serialVersionUID = 1928896152249821416L;",
                "CODE"
            ],
            ["public MultiKey2(A key1, B key2) {", "CODE"],
            ["super(key1, key2);", "CODE"],
            ["}", "CODE"],
            ["public A getFirst() {", "CODE"],
            ["return (A) getKey(0);", "CODE"],
            ["}", "CODE"],
            ["public B getSecond() {", "CODE"],
            ["return (B) getKey(1);", "CODE"],
            ["}", "CODE"],
            [
                "// FIXME: MultiKey should either declare protected readResolve() or must be final.",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "MultiKey2<String, String> one = new MultiKey2<>(\"bla\", \"blub\");",
                "CODE"
            ],
            ["System.out.println(one.hashCode());", "CODE"],
            [
                "ByteArrayOutputStream byteOut = new ByteArrayOutputStream();",
                "CODE"
            ],
            [
                "ObjectOutputStream out = new ObjectOutputStream(byteOut);",
                "CODE"
            ],
            ["out.writeObject(one);", "CODE"],
            ["out.close();", "CODE"],
            ["byte[] serialized = byteOut.toByteArray();", "CODE"],
            [
                "ByteArrayInputStream byteIn = new ByteArrayInputStream(serialized);",
                "CODE"
            ],
            ["ObjectInputStream in = new ObjectInputStream(byteIn);", "CODE"],
            [
                "MultiKey2<String, String> two = (MultiKey2<String, String>) in.readObject();",
                "CODE"
            ],
            ["System.out.println(two.hashCode());", "CODE"],
            [
                "assertEquals(\"hashCode must be equal - please check for protected readResolve in MultiKey*\", one.hashCode(),",
                "CODE"
            ],
            ["two.hashCode());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Fix:", []],
            ["MultiKey.java", []],
            ["@@ -274,7 +274,7 @@", []],
            ["* only stable for the same process).", ["OB"]],
            ["* @return the instance with recalculated hash code", ["SR"]],
            ["*/", []],
            ["-    private Object readResolve() {", "CODE"],
            ["+    protected Object readResolve() {", "CODE"],
            ["calculateHashCode(keys);", "CODE"],
            ["return this;", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JxPath-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "equality test for multi-valued variables does not conform to spec"
        ],
        "desc_hints": [],
        "desc_text": [
            ["given e.g.", ["OB"]],
            ["variable d=", []],
            ["{\"a\", \"b\"}", []],
            [", the spec implies that \"$d = 'a'\" and that \"$d = 'b'\".", []],
            [
                "Instead of iterating the variable's components its immediate content (here, the String[]) is compared, causing the aforementioned assertions to fail.",
                ["OB"]
            ]
        ]
    },
    "Compress-27": {
        "code_elements": [
            "package TestBed;",
            "import java.io.File;",
            "import java.io.FileInputStream;",
            "import java.io.FileNotFoundException;",
            "import java.io.IOException;",
            "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;",
            "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;",
            "import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;",
            "import org.junit.Test;",
            "/**",
            "* Unit test for simple App.",
            "*/",
            "public class AppTest",
            "{",
            "@Test",
            "public void extractNoFileOwner()",
            "{",
            "TarArchiveInputStream tarInputStream = null;",
            "try",
            "{",
            "tarInputStream =",
            "new TarArchiveInputStream( new GzipCompressorInputStream( new FileInputStream( new File(",
            "\"/home/pknobel/redis-dist-2.8.3_1-linux.tar.gz\" ) ) ) );",
            "TarArchiveEntry entry;",
            "while ( ( entry = tarInputStream.getNextTarEntry() ) != null )",
            "{",
            "System.out.println( entry.getName() );",
            "System.out.println(entry.getUserName()+\"/\"+entry.getGroupName());",
            "}",
            "}",
            "catch ( FileNotFoundException e )",
            "{",
            "e.printStackTrace();",
            "}",
            "catch ( IOException e )",
            "{",
            "e.printStackTrace();",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:249)",
            "at TestBed.AppTest.extractNoFileOwner(AppTest.java:30)",
            "Caused by: java.lang.IllegalArgumentException: Invalid byte 32 at offset 7 in '       {NUL}' len=8",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:134)",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(TarUtils.java:173)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:953)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:247)",
            "... 27 more"
        ],
        "summary_hints": ["Tar.gz"],
        "summary_text": [
            "Incorrect handling of NUL username and group Tar.gz entries"
        ],
        "desc_hints": [
            "TarArchiveEntry.java",
            "entry.getUserName",
            "tarInputStream.getNextTarEntry",
            "tarInputStream",
            "heli0s.darktech.org",
            "TarArchiveInputStream.java",
            "TarArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
            "TarArchiveInputStream",
            "java.io.File",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
            "FileInputStream",
            "FileNotFoundException",
            "extractNoFileOwner",
            "java.lang.IllegalArgumentException",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry",
            "java.io.FileNotFoundException",
            "printStackTrace",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal",
            "GzipCompressorInputStream",
            "TarUtils.java",
            "AppTest",
            "TestBed",
            "java.io.IOException",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader",
            "entry.getName",
            "entry.getGroupName",
            "java.io.FileInputStream",
            "TestBed.AppTest.extractNoFileOwner",
            "org.junit.Test",
            "AppTest.java",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream",
            "linux.tar.gz",
            "TestCase",
            "System.out.println"
        ],
        "desc_text": [
            [
                "With version 1.8 of commons-compress it's no longer possible to decompress files from an archive if the archive contains entries having null (or being empty?) set as username and/or usergroup.",
                ["OB"]
            ],
            [
                "With version 1.7 this still worked now I get this exception:",
                ["OB"]
            ],
            ["java.io.IOException: Error detected parsing the header", ["OB"]],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:249)",
                "STACK_TRACE"
            ],
            [
                "at TestBed.AppTest.extractNoFileOwner(AppTest.java:30)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.IllegalArgumentException: Invalid byte 32 at offset 7 in '       {NUL}' len=8",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:134)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(TarUtils.java:173)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:953)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:247)",
                "STACK_TRACE"
            ],
            ["... 27 more", "STACK_TRACE"],
            [
                "This exception leads to my suspision that the regression was introduced with the fix for this ticket COMPRESS-262, which has a nearly identical exception provided.",
                []
            ],
            ["Some test code you can run to verify it:", ["SR"]],
            ["package TestBed;", "CODE"],
            ["import java.io.File;", "CODE"],
            ["import java.io.FileInputStream;", "CODE"],
            ["import java.io.FileNotFoundException;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            [
                "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;",
                "CODE"
            ],
            [
                "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;",
                "CODE"
            ],
            [
                "import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;",
                "CODE"
            ],
            ["import org.junit.Test;", "CODE"],
            ["/**", "CODE"],
            ["* Unit test for simple App.", "CODE"],
            ["*/", "CODE"],
            ["public class AppTest", "CODE"],
            ["{", "CODE"],
            ["@Test", "CODE"],
            ["public void extractNoFileOwner()", "CODE"],
            ["{", "CODE"],
            ["TarArchiveInputStream tarInputStream = null;", "CODE"],
            ["try", "CODE"],
            ["{", "CODE"],
            ["tarInputStream =", "CODE"],
            [
                "new TarArchiveInputStream( new GzipCompressorInputStream( new FileInputStream( new File(",
                "CODE"
            ],
            [
                "\"/home/pknobel/redis-dist-2.8.3_1-linux.tar.gz\" ) ) ) );",
                "CODE"
            ],
            ["TarArchiveEntry entry;", "CODE"],
            [
                "while ( ( entry = tarInputStream.getNextTarEntry() ) != null )",
                "CODE"
            ],
            ["{", "CODE"],
            ["System.out.println( entry.getName() );", "CODE"],
            [
                "System.out.println(entry.getUserName()+\"/\"+entry.getGroupName());",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["catch ( FileNotFoundException e )", "CODE"],
            ["{", "CODE"],
            ["e.printStackTrace();", "CODE"],
            ["}", "CODE"],
            ["catch ( IOException e )", "CODE"],
            ["{", "CODE"],
            ["e.printStackTrace();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["With 1.7 the TestCase outputed this:", ["SR"]],
            ["redis-dist-2.8.3_1/bin/", []],
            ["/", []],
            ["redis-dist-2.8.3_1/bin/redis-server", []],
            ["jenkins/jenkins", []],
            ["redis-dist-2.8.3_1/bin/redis-cli", ["OB"]],
            ["jenkins/jenkins", []],
            [
                "With 1.8 it's failing once it reaches the null valued entry, which is the first.",
                ["OB"]
            ],
            [
                "The archive is created using maven assembly plugin, and I tried the same with maven ant task.",
                ["OB", "SR"]
            ],
            [
                "Both generating an archive with not set username and groups for at least some entries.",
                ["OB"]
            ],
            [
                "You can download the archive from http://heli0s.darktech.org/redis/2.8.3_1/redis-dist-2.8.3_1-linux.tar.gz",
                ["OB"]
            ],
            ["If you run a tar -tvzf on the file you see this report:", ["SR"]],
            [
                "drwxr-xr-x 0/0             0 2014-04-18 09:43 redis-dist-2.8.3_1-SNAPSHOT/bin/",
                []
            ],
            [
                "-rwxr-xr-x pknobel/pknobel 3824588 2014-01-02 14:58 redis-dist-2.8.3_1-SNAPSHOT/bin/redis-cli",
                ["OB", "SR"]
            ],
            [
                "-rwxr-xr-x pknobel/pknobel 5217234 2014-01-02 14:58 redis-dist-2.8.3_1-SNAPSHOT/bin/redis-server",
                []
            ],
            [
                "The user 0/0 probably indicates that it's not set although it's the root user id.",
                ["OB"]
            ],
            ["A correctly root user file would show up as root/root", ["OB"]]
        ]
    },
    "Csv-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Unescape handling needs rethinking"],
        "desc_hints": [],
        "desc_text": [
            [
                "The current escape parsing converts <esc><char> to plain <char> if the <char> is not one of the special characters to be escaped.",
                ["OB"]
            ],
            [
                "This can affect unicode escapes if the <esc> character is backslash.",
                ["OB"]
            ],
            [
                "One way round this is to specifically check for <char> == 'u', but it seems wrong to only do this for 'u'.",
                ["OB"]
            ],
            [
                "Another solution would be to leave <esc><char> as is unless the <char> is one of the special characters.",
                []
            ],
            [
                "There are several possible ways to treat unrecognised escapes:",
                []
            ],
            [
                "treat it as if the escape char had not been present (current behaviour)",
                ["OB"]
            ],
            ["leave the escape char as is", ["OB"]],
            ["throw an exception", ["OB"]]
        ]
    },
    "JacksonCore-4": {
        "code_elements": [],
        "stack_traces": [
            "at java.lang.System.arraycopy(Native Method)",
            "at com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(TextBuffer.java:604)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2034)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:1928)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongFieldName(UTF8StreamJsonParser.java:1534)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumFieldName(UTF8StreamJsonParser.java:1502)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFieldName(UTF8StreamJsonParser.java:1437)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:668)"
        ],
        "summary_hints": [],
        "summary_text": ["What is the maximum key length allowed?"],
        "desc_hints": [
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken",
            "UTF8StreamJsonParser.java",
            "System.arraycopy",
            "TextBuffer.java",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName",
            "TextBuffer.expandCurrentSegment",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumFieldName",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "ArrayIndexOutOfBoundsException",
            "_parseFieldName",
            "newLen",
            "_currentSegment",
            "java.lang.ArrayIndexOutOfBoundsException",
            "com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongFieldName",
            "java.lang.System.arraycopy",
            "TextBuffer"
        ],
        "desc_text": [
            [
                "I noticed that even in Jackson 2.4, if a JSON key is longer than 262144 bytes, ArrayIndexOutOfBoundsException is thrown from TextBuffer.",
                ["OB"]
            ],
            ["Below is the stack trace:", ["OB"]],
            ["java.lang.ArrayIndexOutOfBoundsException", []],
            ["at java.lang.System.arraycopy(Native Method)", "STACK_TRACE"],
            [
                "at com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(TextBuffer.java:604)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2034)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:1928)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongFieldName(UTF8StreamJsonParser.java:1534)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumFieldName(UTF8StreamJsonParser.java:1502)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFieldName(UTF8StreamJsonParser.java:1437)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:668)",
                "STACK_TRACE"
            ],
            ["...", []],
            ["<below are our code> ...", []],
            [
                "Looking at TextBuffer.expandCurrentSegment(TextBuffer.java:604), once the length of _currentSegment is increased to MAX_SEGMENT_LEN + 1 (262145) bytes, the newLen will stay at MAX_SEGMENT_LEN, which is smaller than len.",
                ["OB", "SR"]
            ],
            ["Therefore System.arraycopy() will fail.", ["OB"]],
            [
                "I understand it is rare to have key larger than 262144 bytes, but it would be nice if",
                []
            ],
            [
                "Jackson explicitly throw exception stating that key is too long.",
                ["OB"]
            ],
            ["Document that the maximum key length is 262144 bytes.", ["OB"]],
            ["OR", []],
            ["Update TextBuffer to support super long key.", ["OB"]],
            ["Thanks!", []]
        ]
    },
    "Math-100": {
        "code_elements": [
            "line #166: final int cols = problem.getAllParameters().length;",
            "should be replaced by:  final int cols = problem.getUnboundParameters().length;"
        ],
        "stack_traces": [],
        "summary_hints": [
            "guessParametersErrors",
            "AbstractEstimator",
            "getCovariances"
        ],
        "summary_text": [
            "AbstractEstimator: getCovariances() and guessParametersErrors() crash when having bound parameters"
        ],
        "desc_hints": [
            "getCovariances",
            "ArrayOutOfBounds",
            "guessParametersErrors",
            "org.apache.commons.math.estimation.AbstractEstimator",
            "problem.getAllParameters",
            "problem.getUnboundParameters"
        ],
        "desc_text": [
            [
                "the two methods getCovariances() and guessParametersErrors() from org.apache.commons.math.estimation.AbstractEstimator crash with ArrayOutOfBounds exception when some of the parameters are bound.",
                ["OB"]
            ],
            [
                "The reason is that the Jacobian is calculated only for the unbound parameters.",
                ["OB"]
            ],
            ["in the code you loop through all parameters.", ["OB"]],
            [
                "line #166: final int cols = problem.getAllParameters().length;",
                "CODE"
            ],
            [
                "should be replaced by:  final int cols = problem.getUnboundParameters().length;",
                "CODE"
            ],
            ["(similar changes could be done in guessParametersErrors())", []],
            [
                "the dissadvantage of the above bug fix is that what is returned to the user is an array with smaller size than the number of all parameters.",
                ["OB"]
            ],
            [
                "Alternatively, you can have some logic in the code which writes zeros for the elements of the covariance matrix corresponding to the bound parameters",
                ["OB", "SR"]
            ]
        ]
    },
    "Math-29": {
        "code_elements": [
            "public OpenMapRealVector ebeMultiply(RealVector v) {",
            "checkVectorDimensions(v.getDimension());",
            "OpenMapRealVector res = new OpenMapRealVector(this);",
            "Iterator iter = entries.iterator();",
            "while (iter.hasNext()) {",
            "iter.advance();",
            "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
            "}",
            "return res;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["RealVector.ebeMultiply", "RealVector", "ebeDivide"],
        "summary_text": [
            "Bugs in RealVector.ebeMultiply(RealVector) and ebeDivide(RealVector)"
        ],
        "desc_hints": [
            "entries.iterator",
            "ebeMultiply",
            "getDimension",
            "iter.key",
            "iter.advance",
            "OpenMapRealVector",
            "OpenMapRealVector.ebeMultiply",
            "getEntry",
            "iter.value",
            "res.setEntry",
            "OpenMapRealVector.ebeDivide",
            "iter.hasNext",
            "checkVectorDimensions",
            "RealVector"
        ],
        "desc_text": [
            [
                "OpenMapRealVector.ebeMultiply(RealVector) and OpenMapRealVector.ebeDivide(RealVector) return wrong values when one entry of the specified RealVector is nan or infinity.",
                ["OB", "EB"]
            ],
            ["The bug is easy to understand.", ["OB"]],
            ["Here is the current implementation of ebeMultiply", []],
            ["public OpenMapRealVector ebeMultiply(RealVector v) {", "CODE"],
            ["checkVectorDimensions(v.getDimension());", "CODE"],
            ["OpenMapRealVector res = new OpenMapRealVector(this);", "CODE"],
            ["Iterator iter = entries.iterator();", "CODE"],
            ["while (iter.hasNext()) {", "CODE"],
            ["iter.advance();", "CODE"],
            [
                "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["return res;", "CODE"],
            ["}", "CODE"],
            [
                "The assumption is that for any double x, x * 0d == 0d holds, which is not true.",
                ["OB"]
            ],
            [
                "The bug is easy enough to identify, but more complex to solve.",
                ["OB"]
            ],
            [
                "The only solution I can come up with is to loop through all entries of v (instead of those entries which correspond to non-zero entries of this).",
                []
            ],
            ["I'm afraid about performance losses.", ["OB"]]
        ]
    },
    "JxPath-16": {
        "code_elements": [
            "nodeType == Node.DOCUMENT_NODE;",
            "return true;//(node instanceof Element) || (node instanceof Document);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["node() implementation in DOM and JDOM model"],
        "desc_hints": [
            "JDOMNodePointer",
            "DOMNodePointer.java",
            "Node.DOCUMENT_NODE",
            "Node.ELEMENT_NODE",
            "nodeType",
            "Compiler.NODE_TYPE_NODE"
        ],
        "desc_text": [
            [
                "I think that the code in DOMNodePointer.java, line 120 is wrong because considers only element and document to be matched by node().",
                ["OB", "SR"]
            ],
            ["while instead it matches any node that pass from there.", ["OB"]],
            ["case Compiler.NODE_TYPE_NODE :", []],
            ["return nodeType == Node.ELEMENT_NODE", ["OB"]],
            ["nodeType == Node.DOCUMENT_NODE;", "CODE"],
            ["should be changed to", ["EB"]],
            ["case Compiler.NODE_TYPE_NODE :", []],
            ["return true;", []],
            ["Same in JDOMNodePointer, line 391", []],
            [
                "return true;//(node instanceof Element) || (node instanceof Document);",
                "CODE"
            ]
        ]
    },
    "Mockito-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Problem spying on abstract classes"],
        "desc_hints": [],
        "desc_text": [
            [
                "There's a problem with spying on abstract classes when the real implementation calls out to the abstract method.",
                ["OB", "SR"]
            ],
            ["More details: #121", []]
        ]
    },
    "Math-3": {
        "code_elements": ["double prodHighNext = prodHigh[1];"],
        "stack_traces": [],
        "summary_hints": [
            "MathArrays.linearCombination",
            "ArrayIndexOutOfBoundsException"
        ],
        "summary_text": [
            "ArrayIndexOutOfBoundsException in MathArrays.linearCombination"
        ],
        "desc_hints": [
            "MathArrays.linearCombination",
            "ArrayOutOfBoundsException",
            "linearCombination",
            "prodHighNext",
            "prodHigh"
        ],
        "desc_text": [
            [
                "When MathArrays.linearCombination is passed arguments with length 1, it throws an ArrayOutOfBoundsException.",
                ["OB", "SR"]
            ],
            ["This is caused by this line:", []],
            ["double prodHighNext = prodHigh[1];", "CODE"],
            [
                "linearCombination should check the length of the arguments and fall back to simple multiplication if length == 1.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "JacksonCore-11": {
        "code_elements": [
            "public void spamTest() {",
            "ObjectMapper mapper = new ObjectMapper();",
            "Map<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();",
            "for ( int i = 0; i < 10000; ++i ) {",
            "byte[] indexPairBytes = new byte[ 2080 ];",
            "new Random().nextBytes( indexPairBytes );",
            "ServerIndexPair sip = new ServerIndexPair( indexPairBytes );",
            "byte[] s = mapper.writeValueAsBytes( ImmutableMap.of( UUID",
            ".randomUUID().toString(), sip ) );",
            "Map<String, ServerIndexPair> metadata = mapper.readValue( s,",
            "new TypeReference<Map<String, ServerIndexPair>>() {} );",
            "for ( Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet() ) {",
            "ServerIndexPair indexPair = metadataEntry.getValue();",
            "ssip.put( new ObjectUserKey( metadataEntry.getKey(), user ),",
            "indexPair );",
            "}",
            "logger.error( \"Iteration: {}\", i );",
            "}",
            "}",
            "public class ServerIndexPair {",
            "public static final String INDEX_PAIR_FIELD = \"indexPair\";",
            "private final byte[]       indexPair;",
            "@JsonCreator",
            "public ServerIndexPair( @JsonProperty( INDEX_PAIR_FIELD ) byte[] indexPair ) {",
            "Preconditions.checkState( indexPair.length == 2080, \"Index pair must be 2080 bytes long.\" );",
            "this.indexPair = indexPair;",
            "}",
            "@JsonProperty( INDEX_PAIR_FIELD )",
            "public byte[] getIndexPair() {",
            "return indexPair;",
            "}",
            "}",
            "public class ObjectUserKey {",
            "public static final String SEPARATOR = \":\";",
            "private final String       objectId;",
            "private final UUID         userKey;",
            "@JsonCreator",
            "public ObjectUserKey(",
            "@JsonProperty( Names.ID_FIELD ) String objectId,",
            "@JsonProperty( Names.USER_FIELD ) UUID userKey ) {",
            "super();",
            "this.objectId = objectId;",
            "this.userKey = userKey;",
            "}",
            "@JsonProperty( Names.ID_FIELD )",
            "public String getObjectId() {",
            "return objectId;",
            "}",
            "@JsonProperty( Names.USER_FIELD )",
            "public UUID getUserKey() {",
            "return userKey;",
            "}",
            "@Override",
            "public int hashCode() {",
            "final int prime = 31;",
            "int result = 1;",
            "result = prime * result + ( ( objectId == null ) ? 0 : objectId.hashCode() );",
            "return result;",
            "}",
            "@Override",
            "public boolean equals( Object obj ) {",
            "if ( this == obj ) {",
            "return true;",
            "}",
            "if ( obj == null ) {",
            "return false;",
            "}",
            "if ( !( obj instanceof ObjectUserKey ) ) {",
            "return false;",
            "}",
            "ObjectUserKey other = (ObjectUserKey) obj;",
            "if ( objectId == null ) {",
            "if ( other.objectId != null ) {",
            "return false;",
            "}",
            "}",
            "if ( userKey == null ) {",
            "if ( other.userKey != null ) {",
            "return false;",
            "}",
            "}",
            "if ( !objectId.equals( other.objectId ) ) {",
            "return false;",
            "}",
            "if ( !userKey.equals( other.userKey ) ) {",
            "return false;",
            "}",
            "return true;",
            "}",
            "@Override",
            "public String toString() {",
            "return userKey + SEPARATOR + objectId;",
            "}",
            "public static ObjectUserKey fromString( String value ) {",
            "int index = value.lastIndexOf( ObjectUserKey.SEPARATOR );",
            "Preconditions.checkState( index > -1, \"Separator character \" + SEPARATOR",
            "+ \" should be present for ObjectUserKey\" );",
            "String userKeyString = value.substring( 0, index );",
            "String objectIdString = value.substring( index + 1 );",
            "UUID userKey = UUID.fromString( userKeyString );",
            "return new ObjectUserKey( objectIdString, userKey );",
            "}",
            "public byte[] asBytes() {",
            "return this.toString().getBytes();",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(ByteQuadsCanonicalizer.java:853)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2340)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:2224)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(UTF8StreamJsonParser.java:1831)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(UTF8StreamJsonParser.java:1786)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(UTF8StreamJsonParser.java:1743)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(UTF8StreamJsonParser.java:1678)",
            "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(UTF8StreamJsonParser.java:1007)",
            "at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:471)",
            "at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:341)",
            "at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3702)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2824)",
            "at com.kryptnostic.services.v1.SmokeTests.spamAddIndexPair(SmokeTests.java:605)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:497)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
            "at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)",
            "at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
            "at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:309)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)"
        ],
        "summary_hints": ["ArrayIndexOutOfBoundsException"],
        "summary_text": [
            "ArrayIndexOutOfBoundsException: 128 when repeatedly serializing to a byte array"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "JsonProperty",
            "RunBefores.java",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "objectId.hashCode",
            "_parseName",
            "getIndexPair",
            "TestExecution.java",
            "org.junit.internal.runners.statements.RunBefores.evaluate",
            "com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize",
            "InvokeMethod.java",
            "ByteQuadsCanonicalizer.java",
            "org.junit.runners.ParentRunner.runChildren",
            "org.junit.runners.ParentRunner",
            "getBytes",
            "nextBytes",
            "mapper.readValue",
            "objectIdString",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "indexPair",
            "value.lastIndexOf",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "ObjectMapper.java",
            "org.junit.runners.model.FrameworkMethod",
            "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
            "org.junit.runners.ParentRunner.run",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "ParentRunner.java",
            "UUID.fromString",
            "ObjectUserKey.SEPARATOR",
            "FrameworkMethod.java",
            "objectId",
            "ssip.put",
            "UTF8StreamJsonParser.java",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "fromString",
            "org.junit.runners.ParentRunner.access",
            "Names.USER_FIELD",
            "_readMapAndClose",
            "spamTest",
            "randomUUID",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "metadataEntry.getValue",
            "org.junit.internal.runners.statements.RunAfters.evaluate",
            "SmokeTests.java",
            "MapDeserializer.java",
            "Method.java",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "Names.ID_FIELD",
            "this.userKey",
            "com.kryptnostic.services.v1.SmokeTests.spamAddIndexPair",
            "ReflectiveCallable.java",
            "toString",
            "ServerIndexPair",
            "this.indexPair",
            "JUnit4TestReference.java",
            "objectId.equals",
            "this.objectId",
            "_readAndBindStringMap",
            "getObjectId",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName",
            "metadata.entrySet",
            "indexPair.length",
            "other.objectId",
            "metadataEntry",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "Maps.newConcurrentMap",
            "ObjectUserKey",
            "metadataEntry.getKey",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "java.lang.reflect.Method.invoke",
            "runReflectiveCall",
            "JsonCreator",
            "hashCode",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName",
            "asBytes",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "NativeMethodAccessorImpl.java",
            "getUserKey",
            "userKey.equals",
            "Preconditions.checkState",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName",
            "mapper.writeValueAsBytes",
            "org.junit.runners.ParentRunner.runLeaf",
            "ObjectMapper",
            "java.lang.ArrayIndexOutOfBoundsException",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName",
            "value.substring",
            "userKey",
            "RunAfters.java",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "BlockJUnit4ClassRunner.java",
            "this.toString",
            "other.userKey",
            "TypeReference",
            "indexPairBytes",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "ImmutableMap.of",
            "userKeyString",
            "logger.error"
        ],
        "desc_text": [
            ["java.lang.ArrayIndexOutOfBoundsException: 128", []],
            [
                "at com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(ByteQuadsCanonicalizer.java:853)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2340)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:2224)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(UTF8StreamJsonParser.java:1831)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(UTF8StreamJsonParser.java:1786)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(UTF8StreamJsonParser.java:1743)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(UTF8StreamJsonParser.java:1678)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(UTF8StreamJsonParser.java:1007)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:471)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:341)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3702)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2824)",
                "STACK_TRACE"
            ],
            [
                "at com.kryptnostic.services.v1.SmokeTests.spamAddIndexPair(SmokeTests.java:605)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:497)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:309)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            ["Repro:", []],
            ["@Test", []],
            ["public void spamTest() {", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "Map<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();",
                "CODE"
            ],
            ["for ( int i = 0; i < 10000; ++i ) {", "CODE"],
            ["byte[] indexPairBytes = new byte[ 2080 ];", "CODE"],
            ["new Random().nextBytes( indexPairBytes );", "CODE"],
            [
                "ServerIndexPair sip = new ServerIndexPair( indexPairBytes );",
                "CODE"
            ],
            [
                "byte[] s = mapper.writeValueAsBytes( ImmutableMap.of( UUID",
                "CODE"
            ],
            [".randomUUID().toString(), sip ) );", "CODE"],
            [
                "Map<String, ServerIndexPair> metadata = mapper.readValue( s,",
                "CODE"
            ],
            ["new TypeReference<Map<String, ServerIndexPair>>() {} );", "CODE"],
            [
                "for ( Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet() ) {",
                "CODE"
            ],
            ["ServerIndexPair indexPair = metadataEntry.getValue();", "CODE"],
            [
                "ssip.put( new ObjectUserKey( metadataEntry.getKey(), user ),",
                "CODE"
            ],
            ["indexPair );", "CODE"],
            ["}", "CODE"],
            ["logger.error( \"Iteration: {}\", i );", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public class ServerIndexPair {", "CODE"],
            [
                "public static final String INDEX_PAIR_FIELD = \"indexPair\";",
                "CODE"
            ],
            ["private final byte[]       indexPair;", "CODE"],
            ["@JsonCreator", "CODE"],
            [
                "public ServerIndexPair( @JsonProperty( INDEX_PAIR_FIELD ) byte[] indexPair ) {",
                "CODE"
            ],
            [
                "Preconditions.checkState( indexPair.length == 2080, \"Index pair must be 2080 bytes long.\" );",
                "CODE"
            ],
            ["this.indexPair = indexPair;", "CODE"],
            ["}", "CODE"],
            ["@JsonProperty( INDEX_PAIR_FIELD )", "CODE"],
            ["public byte[] getIndexPair() {", "CODE"],
            ["return indexPair;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public class ObjectUserKey {", "CODE"],
            ["public static final String SEPARATOR = \":\";", "CODE"],
            ["private final String       objectId;", "CODE"],
            ["private final UUID         userKey;", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public ObjectUserKey(", "CODE"],
            ["@JsonProperty( Names.ID_FIELD ) String objectId,", "CODE"],
            ["@JsonProperty( Names.USER_FIELD ) UUID userKey ) {", "CODE"],
            ["super();", "CODE"],
            ["this.objectId = objectId;", "CODE"],
            ["this.userKey = userKey;", "CODE"],
            ["}", "CODE"],
            ["@JsonProperty( Names.ID_FIELD )", "CODE"],
            ["public String getObjectId() {", "CODE"],
            ["return objectId;", "CODE"],
            ["}", "CODE"],
            ["@JsonProperty( Names.USER_FIELD )", "CODE"],
            ["public UUID getUserKey() {", "CODE"],
            ["return userKey;", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["public int hashCode() {", "CODE"],
            ["final int prime = 31;", "CODE"],
            ["int result = 1;", "CODE"],
            [
                "result = prime * result + ( ( objectId == null ) ? 0 : objectId.hashCode() );",
                "CODE"
            ],
            ["return result;", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["public boolean equals( Object obj ) {", "CODE"],
            ["if ( this == obj ) {", "CODE"],
            ["return true;", "CODE"],
            ["}", "CODE"],
            ["if ( obj == null ) {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["if ( !( obj instanceof ObjectUserKey ) ) {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["ObjectUserKey other = (ObjectUserKey) obj;", "CODE"],
            ["if ( objectId == null ) {", "CODE"],
            ["if ( other.objectId != null ) {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["if ( userKey == null ) {", "CODE"],
            ["if ( other.userKey != null ) {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["if ( !objectId.equals( other.objectId ) ) {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["if ( !userKey.equals( other.userKey ) ) {", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            ["return true;", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["public String toString() {", "CODE"],
            ["return userKey + SEPARATOR + objectId;", "CODE"],
            ["}", "CODE"],
            [
                "public static ObjectUserKey fromString( String value ) {",
                "CODE"
            ],
            [
                "int index = value.lastIndexOf( ObjectUserKey.SEPARATOR );",
                "CODE"
            ],
            [
                "Preconditions.checkState( index > -1, \"Separator character \" + SEPARATOR",
                "CODE"
            ],
            ["+ \" should be present for ObjectUserKey\" );", "CODE"],
            ["String userKeyString = value.substring( 0, index );", "CODE"],
            ["String objectIdString = value.substring( index + 1 );", "CODE"],
            ["UUID userKey = UUID.fromString( userKeyString );", "CODE"],
            ["return new ObjectUserKey( objectIdString, userKey );", "CODE"],
            ["}", "CODE"],
            ["public byte[] asBytes() {", "CODE"],
            ["return this.toString().getBytes();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Time-19": {
        "code_elements": [
            "DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID(\"Europe/London\"));",
            "DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID(\"Europe/Oslo\"));",
            "DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID(\"Europe/Helsinki\"));",
            "System.out.println(britishDate);",
            "System.out.println(norwDate);",
            "System.out.println(finnishDate);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "#124 Inconsistent interpretation of ambiguous time during DST"
        ],
        "desc_hints": [
            "finnishDate",
            "britishDate",
            "norwDate",
            "DateTime",
            "DateTimeZone.forID",
            "System.out.println"
        ],
        "desc_text": [
            ["The inconsistency appears for timezone Europe/London.", ["OB"]],
            ["Consider the following code", ["OB", "SR"]],
            ["\u2026", []],
            [
                "DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID(\"Europe/London\"));",
                "CODE"
            ],
            [
                "DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID(\"Europe/Oslo\"));",
                "CODE"
            ],
            [
                "DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID(\"Europe/Helsinki\"));",
                "CODE"
            ],
            ["System.out.println(britishDate);", "CODE"],
            ["System.out.println(norwDate);", "CODE"],
            ["System.out.println(finnishDate);", "CODE"],
            ["\u2026", []],
            [
                "These three DateTime objects should all represent the same moment in time even if they are ambiguous.",
                ["OB", "EB"]
            ],
            ["And using jodatime 1.6.2 this is the case.", ["OB", "SR"]],
            ["The code produces the following output:", ["OB"]],
            ["2011-10-30T01:59:00.000Z", ["SR"]],
            ["2011-10-30T02:59:00.000+01:00", []],
            ["2011-10-30T03:59:00.000+02:00", []],
            ["Using jodatime 2.0 however, the output is:", []],
            ["2011-10-30T01:59:00.000Z", ["SR"]],
            ["2011-10-30T02:59:00.000+02:00", []],
            ["2011-10-30T03:59:00.000+03:00", []],
            ["which IMO is wrong for Europe/London.", ["OB"]],
            ["Correct output should have been", ["EB"]],
            ["2011-10-30T01:59:00.000+01:00", []],
            ["The release notes for 2.0 states that:", []],
            [
                "\"Now, it always returns the earlier instant (summer time) during an overlap.",
                ["OB"]
            ],
            ["\u2026\"", []]
        ]
    },
    "Chart-17": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TimeSeries"],
        "summary_text": ["#803 cloning of TimeSeries"],
        "desc_hints": ["TimeSeries", "IllegalArgumentException"],
        "desc_text": [
            ["It's just a minor bug!", []],
            [
                "When I clone a TimeSeries which has no items, I get an IllegalArgumentException (\"Requires start <= end\").",
                ["OB"]
            ],
            [
                "But I don't think the user should be responsible for checking whether the TimeSeries has any items or not.",
                ["EB"]
            ]
        ]
    },
    "JacksonDatabind-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["java.util.Properties"],
        "summary_text": [
            "Force value coercion for java.util.Properties, so that values are Strings"
        ],
        "desc_hints": ["TypeFactory", "java.util.Properties"],
        "desc_text": [
            [
                "Currently there is no custom handling for java.util.Properties, and although it is possible to use it (since it really is a Map under the hood), results are only good if values are already Strings.",
                ["OB", "EB"]
            ],
            [
                "The problem here is that Properties is actually declared as Map<String,Object>, probably due to backwards-compatibility constraints.",
                []
            ],
            [
                "But Jackson should know better: perhaps by TypeFactory tweaking parameterizations a bit?",
                []
            ]
        ]
    },
    "Closure-145": {
        "code_elements": [
            "if (1) {",
            "break lab2;",
            "} else {",
            "break lab1;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Bug with labeled loops and breaks"],
        "desc_hints": ["console.log"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Try to compile this code with the closure compiler :", ["SR"]],
            ["var i = 0;", []],
            ["lab1: do{", []],
            ["lab2: do{", []],
            ["i++;", []],
            ["if (1) {", "CODE"],
            ["break lab2;", "CODE"],
            ["} else {", "CODE"],
            ["break lab1;", "CODE"],
            ["}", "CODE"],
            ["} while(false);", []],
            ["} while(false);", []],
            ["console.log(i);", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["The generated code produced is :", ["OB"]],
            [
                "var a=0;do b:do{a++;break b}while(0);while(0);console.log(a);",
                []
            ],
            [
                "Which works on all browsers except IE (Looks like IE doesn't like",
                ["OB"]
            ],
            [
                "the missing brackets just after the first do instruction).",
                ["OB", "SR"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["I am using the version of Jun 16 (latest) on ubuntu 10", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Strangely, this bug doesn't happen when I use PRETTY_PRINT formatting option.",
                ["OB"]
            ]
        ]
    },
    "Lang-30": {
        "code_elements": [
            "private static final String CharU20000 = \"\\uD840\\uDC00\";",
            "private static final String CharU20001 = \"\\uD840\\uDC01\";",
            "assertEquals(-1, CharU20000.indexOf(CharU20001));",
            "assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));",
            "assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));",
            "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));",
            "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));",
            "assertEquals(true, StringUtils.contains(CharU20000, CharU20000));",
            "assertEquals(false, StringUtils.contains(CharU20000, CharU20001));"
        ],
        "stack_traces": [],
        "summary_hints": ["StringUtils"],
        "summary_text": [
            "StringUtils methods do not handle Unicode 2.0+ supplementary characters correctly."
        ],
        "desc_hints": [
            "StringUtils.contains",
            "CharU20000",
            "assertEquals",
            "java.sun.com",
            "CharU20000.indexOf",
            "technicalArticles",
            "CharU20001",
            "StringUtils.containsAny"
        ],
        "desc_text": [
            [
                "StringUtils.containsAny methods incorrectly matches Unicode 2.0+ supplementary characters.",
                ["OB"]
            ],
            [
                "For example, define a test fixture to be the Unicode character U+20000 where U+20000 is written in Java source as \"\\uD840\\uDC00\"",
                ["SR"]
            ],
            [
                "private static final String CharU20000 = \"\\uD840\\uDC00\";",
                "CODE"
            ],
            [
                "private static final String CharU20001 = \"\\uD840\\uDC01\";",
                "CODE"
            ],
            [
                "You can see Unicode supplementary characters correctly implemented in the JRE call:",
                ["OB"]
            ],
            ["assertEquals(-1, CharU20000.indexOf(CharU20001));", "CODE"],
            ["But this is broken:", []],
            [
                "assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));",
                "CODE"
            ],
            [
                "assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));",
                "CODE"
            ],
            ["This is fine:", []],
            [
                "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));",
                "CODE"
            ],
            [
                "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));",
                "CODE"
            ],
            [
                "assertEquals(true, StringUtils.contains(CharU20000, CharU20000));",
                "CODE"
            ],
            [
                "assertEquals(false, StringUtils.contains(CharU20000, CharU20001));",
                "CODE"
            ],
            ["because the method calls the JRE to perform the match.", ["OB"]],
            ["More than you want to know:", []],
            [
                "http://java.sun.com/developer/technicalArticles/Intl/Supplementary/",
                []
            ]
        ]
    },
    "Time-25": {
        "code_elements": [
            "import org.joda.time.DateTime;",
            "import org.joda.time.DateTimeZone;",
            "public class TzTest {",
            "public static void main(String[] args) throws Exception {",
            "DateTimeZone zone = DateTimeZone.forID(\"America/Los_Angeles\");",
            "DateTime when1 = new DateTime(2009, 11, 1, 0, 30, 0, 0, zone);",
            "DateTime when2 = new DateTime(2009, 11, 1, 1, 30, 0, 0, zone);",
            "DateTime when3 = new DateTime(2009, 11, 1, 2, 30, 0, 0, zone);",
            "System.out.println(when1);",
            "System.out.println(when2);",
            "System.out.println(when3);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DateTimeZone.getOffsetFromLocal"],
        "summary_text": [
            "#90 DateTimeZone.getOffsetFromLocal error during DST transition"
        ],
        "desc_hints": [
            "org.joda.time.DateTime",
            "org.joda.time.DateTimeZone",
            "DateTimeZone.getOffsetFromLocal",
            "DateTime",
            "DateTimeZone",
            "DateTimeZone.forID",
            "TzTest",
            "System.out.println"
        ],
        "desc_text": [
            [
                "This may be a failure of my understanding, but the comments in DateTimeZone.getOffsetFromLocal lead me to believe that if an ambiguous local time is given, the offset corresponding to the later of the two possible UTC instants will be returned - i.e.",
                ["OB"]
            ],
            ["the greater offset.", ["OB"]],
            ["This doesn't appear to tally with my experience.", ["OB"]],
            [
                "In fall 2009, America/Los_Angeles changed from -7 to -8 at 2am wall time on November 11.",
                ["OB", "SR"]
            ],
            ["Thus 2am became 1am - so 1:30am is ambiguous.", ["OB", "SR"]],
            [
                "I would therefore expect that constructing a DateTime for November 11th, 1:30am would give an instant corresponding with the later value (i.e.",
                ["EB"]
            ],
            ["9:30am UTC).", ["OB"]],
            ["This appears not to be the case:", ["OB"]],
            ["import org.joda.time.DateTime;", "CODE"],
            ["import org.joda.time.DateTimeZone;", "CODE"],
            ["public class TzTest {", "CODE"],
            [
                "public static void main(String[] args) throws Exception {",
                "CODE"
            ],
            [
                "DateTimeZone zone = DateTimeZone.forID(\"America/Los_Angeles\");",
                "CODE"
            ],
            [
                "DateTime when1 = new DateTime(2009, 11, 1, 0, 30, 0, 0, zone);",
                "CODE"
            ],
            [
                "DateTime when2 = new DateTime(2009, 11, 1, 1, 30, 0, 0, zone);",
                "CODE"
            ],
            [
                "DateTime when3 = new DateTime(2009, 11, 1, 2, 30, 0, 0, zone);",
                "CODE"
            ],
            ["System.out.println(when1);", "CODE"],
            ["System.out.println(when2);", "CODE"],
            ["System.out.println(when3);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Results:", ["OB"]],
            ["2009-11-01T00:30:00.000-07:00 // Correct", []],
            ["2009-11-01T01:30:00.000-07:00 // Should be -08:00", ["EB"]],
            ["2009-11-01T02:30:00.000-08:00 // Correct", []]
        ]
    },
    "Closure-106": {
        "code_elements": [],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCompilerRunner.doRun(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCompilerRunner.run(Unknown Source)",
            "at com.google.javascript.jscomp.CompilerRunner.main(Unknown Source)",
            "Caused by: java.lang.IllegalArgumentException",
            "at com.google.common.base.Preconditions.checkArgument(Preconditions.java:71)",
            "at com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
            "at com.google.javascript.jscomp.CollapseProperties.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
            "at java.lang.Thread.run(Thread.java:637)"
        ],
        "summary_hints": [
            "com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties"
        ],
        "summary_text": [
            "Exception thrown from com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties"
        ],
        "desc_hints": [
            "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration",
            "java.lang.RuntimeException",
            "Thread.java",
            "com.google.javascript.jscomp.AbstractCompilerRunner.doRun",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.common.base.Preconditions.checkArgument",
            "core.js",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.CollapseProperties.process",
            "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode",
            "com.google.javascript.jscomp.AbstractCompilerRunner.run",
            "musictheory.net",
            "goog.exportSymbol",
            "com.google.javascript.jscomp.Compiler",
            "java.lang.IllegalArgumentException",
            "NamedPass.process",
            "Preconditions.java",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants",
            "com.google.javascript.jscomp.CompilerRunner.main",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.Compiler.optimize",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "compiler.jar",
            "com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties"
        ],
        "desc_text": [
            [
                "The attached javascript file results in a Java exception being thrown when compiling with ADVANCED_OPTIMIZATIONS",
                ["OB", "SR"]
            ],
            [
                "[~/Projects/Music Theory/trunk] # java -jar ./ext/closure-compiler/compiler.jar --js /tmp/musictheory.net/v2/js/core.js --compilation_level",
                ["OB"]
            ],
            ["ADVANCED_OPTIMIZATIONS", []],
            [
                "java.lang.RuntimeException: java.lang.IllegalArgumentException",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCompilerRunner.doRun(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCompilerRunner.run(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CompilerRunner.main(Unknown Source)",
                "STACK_TRACE"
            ],
            ["Caused by: java.lang.IllegalArgumentException", "STACK_TRACE"],
            [
                "at com.google.common.base.Preconditions.checkArgument(Preconditions.java:71)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CollapseProperties.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Thread.java:637)", "STACK_TRACE"],
            [
                "I'm guessing that I did something wrong in my script which adds the goog.exportSymbol() calls, but it probably should give me a nice warning or error instead",
                ["OB", "EB"]
            ],
            ["of throwing a Java exception ;)", ["OB"]]
        ]
    },
    "Compress-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "ZipFile",
            "ZipArchiveInputStream",
            "ZipArchiveEntry"
        ],
        "summary_text": [
            "ZipArchiveInputStream and ZipFile don't produce equals ZipArchiveEntry instances"
        ],
        "desc_hints": [
            "ZipFile",
            "ZIipFile",
            "ZipArchiveInputStream",
            "readCentralDirectoryEntry",
            "java.util.zip",
            "ZipArchiveEntry"
        ],
        "desc_text": [
            [
                "I'm trying to use a ZipArchiveEntry coming from ZipArchiveInputStream that I stored somwhere for later with a ZipFile and it does not work.",
                ["OB"]
            ],
            [
                "The reason is that it can't find the ZipArchiveEntry in the ZipFile entries map.",
                ["OB"]
            ],
            [
                "It is exactly the same zip file but both entries are not equals so the Map#get fail.",
                ["OB"]
            ],
            [
                "As far as I can see the main difference is that comment is null in ZipArchiveInputStream while it's en empty string in ZipFile.",
                ["OB"]
            ],
            [
                "I looked at ZipArchiveInputStream and it looks like the comment (whatever it is) is simply not parsed while I can find some code related to the comment at the end of ZIipFile#readCentralDirectoryEntry.",
                ["OB"]
            ],
            ["Note that java.util.zip does not have this issue.", []],
            [
                "Did not checked what they do but the zip entries are equals.",
                ["OB"]
            ]
        ]
    },
    "Lang-21": {
        "code_elements": [
            "Calendar a = Calendar.getInstance();",
            "a.setTimeInMillis(1297364400000L);",
            "Calendar b = Calendar.getInstance();",
            "b.setTimeInMillis(1297321200000L);",
            "Assert.assertFalse(DateUtils.isSameLocalTime(a, b));"
        ],
        "stack_traces": [],
        "summary_hints": ["DateUtils.isSameLocalTime"],
        "summary_text": ["DateUtils.isSameLocalTime does not work correct"],
        "desc_hints": [
            "Calendar.getInstance",
            "DateUtils.isSameLocalTime",
            "isSameLocalTime",
            "Calendar.HOUR",
            "cal2.get",
            "DateUtils",
            "cal1.get",
            "setTimeInMillis",
            "Assert.assertFalse",
            "Calendar.HOUR_OF_DAY"
        ],
        "desc_text": [
            [
                "Hi, I think I found a bug in the DateUtils class in the method isSameLocalTime.",
                []
            ],
            ["Example:", ["OB", "SR"]],
            ["Calendar a = Calendar.getInstance();", "CODE"],
            ["a.setTimeInMillis(1297364400000L);", "CODE"],
            ["Calendar b = Calendar.getInstance();", "CODE"],
            ["b.setTimeInMillis(1297321200000L);", "CODE"],
            ["Assert.assertFalse(DateUtils.isSameLocalTime(a, b));", "CODE"],
            ["This is because the method compares", []],
            ["cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)", []],
            ["but I think it has to be", []],
            [
                "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)",
                []
            ]
        ]
    },
    "Mockito-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Return empty value for Iterables"],
        "desc_hints": ["code.google.com"],
        "desc_text": [
            ["http://code.google.com/p/mockito/issues/detail?id=175", []],
            [
                "I expect an Iterable to be mocked by default with an empty Iterable.",
                ["OB", "EB", "SR"]
            ],
            [
                "I understand from the initial issue this behavior would be introduced in Mockito 2, but beta-8 still returns null.",
                ["OB"]
            ],
            ["Could we return null for Iterables ?", []],
            ["Should we have the same behavior for Iterator ?", ["EB"]],
            ["Thanks", []]
        ]
    },
    "Chart-9": {
        "code_elements": [
            "public class foo {",
            "static public void main(String args[]) {",
            "TimeSeries foo = new TimeSeries(\"foo\",Day.class);",
            "foo.add(new Day(19,4,2005),1);",
            "foo.add(new Day(25,5,2005),1);",
            "foo.add(new Day(28,5,2005),1);",
            "foo.add(new Day(30,5,2005),1);",
            "foo.add(new Day(1,6,2005),1);",
            "foo.add(new Day(3,6,2005),1);",
            "foo.add(new Day(19,8,2005),1);",
            "foo.add(new Day(31,1,2006),1);",
            "try \\{",
            "TimeSeries bar = foo.createCopy\\(new Day\\(1,12,2005\\),new Day\\(18,1,2006\\)\\);",
            "\\} catch \\(CloneNotSupportedException e\\) \\{",
            "e.printStackTrace\\(\\);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TimeSeries", "createCopy"],
        "summary_text": ["#818 Error on TimeSeries createCopy() method"],
        "desc_hints": [
            "TimeSeries",
            "Day.class",
            "printStackTrace",
            "timePeriod",
            "foo.createCopy",
            "CloneNotSupportedException",
            "java.lang.IllegalArgumentException",
            "foo.add"
        ],
        "desc_text": [
            ["The test case at the end fails with :", ["OB", "SR"]],
            [
                "java.lang.IllegalArgumentException: Requires start <= end.",
                ["OB"]
            ],
            [
                "The problem is in that the int start and end indexes corresponding to given timePeriod are computed incorectly.",
                ["OB"]
            ],
            [
                "Here I would expect an empty serie to be returned, not an exception.",
                ["OB", "EB"]
            ],
            ["This is with jfreechart 1.0.7", []],
            ["public class foo {", "CODE"],
            ["static public void main(String args[]) {", "CODE"],
            ["TimeSeries foo = new TimeSeries(\"foo\",Day.class);", "CODE"],
            ["foo.add(new Day(19,4,2005),1);", "CODE"],
            ["foo.add(new Day(25,5,2005),1);", "CODE"],
            ["foo.add(new Day(28,5,2005),1);", "CODE"],
            ["foo.add(new Day(30,5,2005),1);", "CODE"],
            ["foo.add(new Day(1,6,2005),1);", "CODE"],
            ["foo.add(new Day(3,6,2005),1);", "CODE"],
            ["foo.add(new Day(19,8,2005),1);", "CODE"],
            ["foo.add(new Day(31,1,2006),1);", "CODE"],
            ["try \\{", "CODE"],
            [
                "TimeSeries bar = foo.createCopy\\(new Day\\(1,12,2005\\),new Day\\(18,1,2006\\)\\);",
                "CODE"
            ],
            ["\\} catch \\(CloneNotSupportedException e\\) \\{", "CODE"],
            ["e.printStackTrace\\(\\);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Lang-60": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["StrBuilder", "thisBuf.length"],
        "summary_text": [
            "StrBuilder contains usages of thisBuf.length when they should use size"
        ],
        "desc_hints": ["StrBuilder", "thisBuf.length"],
        "desc_text": [
            [
                "While fixing LANG-294 I noticed that there are two other places in StrBuilder that reference thisBuf.length and unless I'm mistaken they shouldn't.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-7": {
        "code_elements": ["result.append((char) buffer[i]);"],
        "stack_traces": [],
        "summary_hints": ["TarUtils.parseName"],
        "summary_text": [
            "TarUtils.parseName does not properly handle characters outside the range 0-127"
        ],
        "desc_hints": [
            "MOE.model",
            "result.append",
            "F06\uffb1W220\uffb1ZB\uffb1HECKMODUL\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1ECE\uffb1\uffb1DC\uffb1\uffb1\uffb107\uffb1060302\uffb1DOERN.model",
            "TarUtils.parseName"
        ],
        "desc_text": [
            [
                "if a tarfile contains files with special characters, the names of the tar entries are wrong.",
                ["OB", "SR"]
            ],
            ["example:", ["OB", "SR"]],
            [
                "correct name: 0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1MOE.model",
                ["OB", "SR"]
            ],
            [
                "name resolved by TarUtils.parseName: 0302-0101-3\uffb1\uffb1\uffb1F06\uffb1W220\uffb1ZB\uffb1HECKMODUL\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1ECE\uffb1\uffb1DC\uffb1\uffb1\uffb107\uffb1060302\uffb1DOERN.model",
                ["OB", "SR"]
            ],
            ["please use:", []],
            ["result.append(new String(new byte[]", []],
            ["{ buffer[i] }", []],
            ["));", []],
            ["instead of:", ["OB"]],
            ["result.append((char) buffer[i]);", "CODE"],
            ["to solve this encoding problem.", []]
        ]
    },
    "Jsoup-14": {
        "code_elements": [
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.select.Elements;",
            "public class UnclosedTitleTest {",
            "public static void main(String args[]) throws Exception {",
            "String html = \"<html><head><title>First parse</head>\"",
            "+ \"<body><p>Parsed HTML into a doc.</p></body></html>\";",
            "Document doc = Jsoup.parse(html);",
            "Elements elements = doc.select(\"p\");",
            "for (Element element : elements) {",
            "System.out.println(element.outerHtml());",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Unclosed title tag causes JSoup to \"eat up\" rest of document"
        ],
        "desc_hints": [
            "org.jsoup.select.Elements",
            "element.outerHtml",
            "doc.select",
            "UnclosedTitleTest",
            "Jsoup.parse",
            "org.jsoup.nodes.Document",
            "org.jsoup.nodes.Element",
            "System.out.println",
            "org.jsoup.Jsoup"
        ],
        "desc_text": [
            ["Hi:", []],
            [
                "We've come across an issue with parsing a document with an unclosed title tag.",
                ["OB", "SR"]
            ],
            ["JSoup", []],
            [
                "seems to \"eat up\" the rest of the document in its parsing and thus no elements after",
                ["OB"]
            ],
            ["the unclosed tag are available after the parse.", ["OB"]],
            [
                "While this is obviously not a valid document Firefox seems to handle it OK by displaying",
                ["OB"]
            ],
            [
                "the document and saying \"Untitled document\" in its title bar.",
                ["OB", "SR"]
            ],
            [
                "We come across a lot of badly formed documents in our web crawls so having a fix",
                []
            ],
            ["for this issue would be much appreciated.", []],
            ["I've given some sample source below", ["SR"]],
            [
                "which demonstrates the bug (tested against JSoup 1.5.2).",
                ["OB"]
            ],
            ["Many thanks,", []],
            ["Francis.", ["OB"]],
            ["import org.jsoup.Jsoup;", "CODE"],
            ["import org.jsoup.nodes.Document;", "CODE"],
            ["import org.jsoup.nodes.Element;", "CODE"],
            ["import org.jsoup.select.Elements;", "CODE"],
            ["public class UnclosedTitleTest {", "CODE"],
            [
                "public static void main(String args[]) throws Exception {",
                "CODE"
            ],
            ["String html = \"<html><head><title>First parse</head>\"", "CODE"],
            [
                "+ \"<body><p>Parsed HTML into a doc.</p></body></html>\";",
                "CODE"
            ],
            ["Document doc = Jsoup.parse(html);", "CODE"],
            ["Elements elements = doc.select(\"p\");", "CODE"],
            ["for (Element element : elements) {", "CODE"],
            ["System.out.println(element.outerHtml());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Cli-31": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter.setArgName"],
        "summary_text": ["HelpFormatter.setArgName() has no effect"],
        "desc_hints": ["OptionBuilder", "HelpFormatter"],
        "desc_text": [
            [
                "The default argument name set on the HelpFormatter has no effect because the Option and the OptionBuilder bring automatically a default value 'arg'.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-95": {
        "code_elements": [
            "returnType = \"java.util.List\";",
            "objectMapper.getTypeFactory().constructFromCanonical(returnType);"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(TypeFactory.java:1421)",
            "at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1182)",
            "at com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(TypeFactory.java:1404)",
            "at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1172)",
            "at com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(TypeFactory.java:1318)",
            "at com.fasterxml.jackson.databind.type.TypeFactory._fromClass(TypeFactory.java:1261)",
            "at com.fasterxml.jackson.databind.type.TypeParser.parseType(TypeParser.java:60)",
            "at com.fasterxml.jackson.databind.type.TypeParser.parse(TypeParser.java:33)",
            "at com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(TypeFactory.java:544)",
            "at foo.company.package.serialize.Serializer.deserialize(Serializer.java:355)"
        ],
        "summary_hints": ["TypeFactory.constructFromCanonical"],
        "summary_text": [
            "TypeFactory.constructFromCanonical() throws NPE for Unparameterized generic canonical strings"
        ],
        "desc_hints": [
            "TypeFactory.constructFromCanonical",
            "com.fasterxml.jackson.databind.type.TypeFactory",
            "foo.company.package.serialize.Serializer.deserialize",
            "java.rmi.RemoteException",
            "objectMapper.getTypeFactory",
            "Serializer.java",
            "com.fasterxml.jackson.databind.type.TypeParser.parseType",
            "returnType",
            "_fromClass",
            "TypeFactory.java",
            "_fromParamType",
            "java.util.List",
            "NullPointerException",
            "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical",
            "constructFromCanonical",
            "_fromVariable",
            "_resolveSuperInterfaces",
            "_fromAny",
            "java.lang.Object",
            "com.fasterxml.jackson.databind.type.TypeParser.parse",
            "TypeParser.java",
            "java.lang.NullPointerException"
        ],
        "desc_text": [
            [
                "When TypeFactory.constructFromCanonical(returnType) is used in 2.6.1, the returnType string for generic types is not expected to have parameterized type information.",
                ["OB", "EB"]
            ],
            ["For example, the following code runs fine on 2.6.1:", ["SR"]],
            ["returnType = \"java.util.List\";", "CODE"],
            [
                "objectMapper.getTypeFactory().constructFromCanonical(returnType);",
                "CODE"
            ],
            [
                "But in version 2.8.7, the same code gives a NullPointerException with the stack trace:",
                ["OB"]
            ],
            [
                "java.rmi.RemoteException: java.lang.NullPointerException:null.",
                ["OB"]
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(TypeFactory.java:1421)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1182)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(TypeFactory.java:1404)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1172)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(TypeFactory.java:1318)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory._fromClass(TypeFactory.java:1261)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeParser.parseType(TypeParser.java:60)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeParser.parse(TypeParser.java:33)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(TypeFactory.java:544)",
                "STACK_TRACE"
            ],
            [
                "at foo.company.package.serialize.Serializer.deserialize(Serializer.java:355)",
                "STACK_TRACE"
            ],
            [
                "But if the returnType string is passed with the generic type information, even if it is passed as Object, ie, returnType = \"java.util.List<java.lang.Object>\";, it works fine.",
                ["OB"]
            ],
            [
                "I have 2 questions, is there a way to make this change backward compatible?",
                []
            ],
            ["If not, how can I work around this?", []],
            [
                "PS: The workaround given by Tatu in the mailing list is not clear to me, if someone can give me an example, it'd be great help.",
                []
            ],
            ["Thanks!", []],
            ["Link to google groups thread.", ["OB"]]
        ]
    },
    "Lang-29": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "SystemUtils.getJavaVersionAsFloat",
            "StringIndexOutOfBoundsException"
        ],
        "summary_text": [
            "SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM"
        ],
        "desc_hints": [
            "AndroidRuntime",
            "org.apache.commons.lang.builder.ToStringBuilder",
            "java.lang.String.substring",
            "java.lang.StringIndexOutOfBoundsException",
            "org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat",
            "MultiLineToStringStyle",
            "org.apache.commons.lang.builder.ToStringStyle",
            "ToStringStyle.java",
            "ToStringBuilder.java",
            "SystemUtils.java",
            "java.lang.ExceptionInInitializerError",
            "org.apache.commons.lang.SystemUtils",
            "String.java"
        ],
        "desc_text": [
            ["Can be replicated in the Android emulator quite easily.", ["OB"]],
            ["Stack trace:", ["OB"]],
            [
                "at org.apache.commons.lang.builder.ToStringBuilder.<clinit>(ToStringBuilder.java:98)",
                ["OB"]
            ],
            ["E/AndroidRuntime( 1681): \t...", []],
            ["17 more", []],
            [
                "E/AndroidRuntime( 1681): Caused by: java.lang.ExceptionInInitializerError",
                []
            ],
            [
                "E/AndroidRuntime( 1681): \tat org.apache.commons.lang.builder.ToStringStyle$MultiLineToStringStyle.<init>(ToStringStyle.java:2276)",
                []
            ],
            [
                "E/AndroidRuntime( 1681): \tat org.apache.commons.lang.builder.ToStringStyle.<clinit>(ToStringStyle.java:94)",
                []
            ],
            ["E/AndroidRuntime( 1681): \t...", []],
            ["18 more", []],
            [
                "E/AndroidRuntime( 1681): Caused by: java.lang.StringIndexOutOfBoundsException",
                []
            ],
            [
                "E/AndroidRuntime( 1681): \tat java.lang.String.substring(String.java:1571)",
                []
            ],
            [
                "E/AndroidRuntime( 1681): \tat org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat(SystemUtils.java:1153)",
                []
            ],
            [
                "E/AndroidRuntime( 1681): \tat org.apache.commons.lang.SystemUtils.<clinit>(SystemUtils.java:818)",
                []
            ]
        ]
    },
    "JacksonDatabind-52": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["External property is not deserialized"],
        "desc_hints": ["ExternalIdDeserTest.java", "github.com"],
        "desc_text": [
            [
                "I think it's easier to show the code than explain the issue, so i prepared a test project:",
                ["SR"]
            ],
            ["https://github.com/crew4ok/jackson-databind-test", []],
            [
                "So basically the issue is that the external property, by which another's property type is deduced, after deserialization is null.",
                ["OB"]
            ],
            ["See the failing test:", ["OB"]],
            [
                "https://github.com/crew4ok/jackson-databind-test/blob/master/src/test/java/jackson/ExternalIdDeserTest.java",
                []
            ],
            ["Am i missing something?", []]
        ]
    },
    "Closure-22": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Classify non-rightmost expressions as problematic"],
        "desc_hints": [],
        "desc_text": [
            ["Purpose of code changes:", []],
            [
                "When it comes to an expression involving the comma operator, only the",
                ["OB", "SR"]
            ],
            [
                "first element of such a sequence is checked for being free of side",
                []
            ],
            ["effects.", ["OB"]],
            ["If the element is free of side effects, it is classified as", []],
            ["problematic and a warning is issued.", ["OB"]],
            [
                "As other non-rightmost elements are not checked for being free of side",
                []
            ],
            [
                "effects and therefore cannot be classified as problematic, this leads",
                ["OB"]
            ],
            ["to unexpected behavior:", ["OB"]],
            ["1.", ["OB", "SR"]],
            [
                "foo((1, 2, 42)) is transformed into foo((1, 3)) and a warning is",
                ["OB", "SR"]
            ],
            ["issued only with regard to the first element.", ["OB", "SR"]],
            ["2.", ["OB", "SR"]],
            [
                "foo((bar(), 2, 42)) is transformed into foo((bar(), 3)) and no",
                ["OB", "SR"]
            ],
            ["warning is issued.", ["OB"]],
            ["3.", ["OB", "SR"]],
            [
                "foo(((1, 2, 3), (4, 5, 42))) is transformed into foo((1, 4, 42)) and",
                ["OB", "SR"]
            ],
            [
                "warnings are issued with regard to the first elements of inner",
                ["OB"]
            ],
            ["sequences only.", ["OB"]]
        ]
    },
    "JacksonDatabind-26": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ObjectMapper", "ObjectReader"],
        "summary_text": [
            "Problem serializing ObjectReader (and possibly ObjectMapper) in 2.6"
        ],
        "desc_hints": [
            "ObjectWriter",
            "CompactStringObjectMap",
            "ObjectReader"
        ],
        "desc_text": [
            [
                "Looks like serializability is missing for one of new (2.6) helper classes, CompactStringObjectMap, leading to problems with systems like Apache Spark that may need to serialize handlers like ObjectReader and/or ObjectWriter.",
                ["OB"]
            ]
        ]
    },
    "Gson-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Allow deserialization of a Number represented as a String"
        ],
        "desc_hints": ["int.class", "Number.class", "gson.fromJson"],
        "desc_text": [
            ["This works:", []],
            ["gson.fromJson(\"\\\"15\\\"\", int.class)", []],
            ["This doesn't:", ["OB"]],
            ["gson.fromJson(\"\\\"15\\\"\", Number.class)", []],
            ["This PR makes it so the second case works too.", ["OB"]]
        ]
    },
    "Jsoup-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Cleaning html containing the cid identifier breaks images"
        ],
        "desc_hints": ["addProtocols"],
        "desc_text": [
            ["Ok, so in mail type HTML the following is common", ["SR"]],
            [
                "The item after CID: can be almost anything (US-ASCII I think) and of any length.",
                ["OB"]
            ],
            [
                "It corresponds to an image linked elsewhere in MIME say like this",
                ["OB", "SR"]
            ],
            ["--mimebounday", ["OB"]],
            ["Content-ID:", []],
            ["Content-Type: image/jpeg.....", []],
            ["(snip)", []],
            [
                "So, to mark a long story somewhat shorter, I use Jsoup's sanitizer extensively.",
                ["OB", "SR"]
            ],
            [
                "However, I need these CID references to be preserved post sanitization.",
                ["OB"]
            ],
            [
                "addProtocols does not work because the items are not valid URLs.",
                ["OB"]
            ],
            ["As a result", ["OB"]],
            ["the above becomes .", ["OB"]],
            ["Which for my purposes is not good :)", []]
        ]
    },
    "Cli-29": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Commons CLI incorrectly stripping leading and trailing quotes"
        ],
        "desc_hints": [
            "Util.stripLeadingAndTrailingQuotes",
            "clitest.jar",
            "org.apache.commons.cli.Parser.processArgs",
            "svn.apache.org",
            "Parser.processArgs"
        ],
        "desc_text": [
            [
                "org.apache.commons.cli.Parser.processArgs() calls Util.stripLeadingAndTrailingQuotes() for all argument values.",
                ["OB"]
            ],
            ["IMHO this is incorrect and totally broken.", ["OB"]],
            ["It is trivial to create a simple test for this.", ["SR"]],
            ["Output:", ["OB"]],
            [
                "$ java -cp target/clitest.jar Clitest --balloo \"this is a \\\"test\\\"\"",
                []
            ],
            ["Value of argument balloo is 'this is a \"test'.", []],
            [
                "The argument 'balloo' should indeed keep its trailing double quote.",
                ["OB", "EB"]
            ],
            [
                "It is what the shell gives it, so don't try to do something clever to it.",
                ["OB"]
            ],
            ["The offending code was committed here:", []],
            ["http://svn.apache.org/viewvc?view=rev&revision=129874", []],
            ["and has been there for more than 6 years .", ["OB"]],
            ["Why was this committed in the first place?", []],
            [
                "The fix is trivial, just get rid of Util.stripLeadingAndTrailingQuotes(), and consequently avoid calling it from Parser.processArgs().",
                []
            ]
        ]
    },
    "JacksonDatabind-7": {
        "code_elements": [
            "class Value {",
            "public static Value from(TokenBuffer buffer) {",
            "...",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TokenBuffer", "JsonCreator"],
        "summary_text": [
            "Possibly wrong TokenBuffer delegate deserialization using @JsonCreator"
        ],
        "desc_hints": [
            "JsonCreator",
            "BeanDeserializer.java",
            "TokenBuffer",
            "copyCurrentStructure"
        ],
        "desc_text": [
            ["class Value {", "CODE"],
            ["@JsonCreator", []],
            ["public static Value from(TokenBuffer buffer) {", "CODE"],
            ["...", "CODE"],
            ["}", "CODE"],
            [
                "Given JSON string is { \"a\":1, \"b\":null }, it is expected that while deserializing using delegate buffer,",
                ["EB"]
            ],
            [
                "current token will be start object {, and rest of the tokens will be available in buffer:",
                ["OB"]
            ],
            [
                "[START_OBJECT, FIELD_NAME, VALUE_NUMBER_INT, FIELD_NAME, VALUE_NULL, END_OBJECT]",
                []
            ],
            [
                "But, buffers ends up being started with field name and then contains single attribute value",
                ["OB", "SR"]
            ],
            ["[FIELD_NAME, VALUE_NUMBER_INT]", []],
            [
                "It's due to how TokenBuffer#copyCurrentStructure works when we have current token as a FIELD_NAME, rather than START_OBJECT, because it's forced to move to next token BeanDeserializer.java:120",
                []
            ],
            ["Hope this helps to nail it down.", []],
            ["Is it an intended behavior, or it's regression/bug?", []]
        ]
    },
    "Closure-99": {
        "code_elements": [
            "/** @constructor */",
            "function MyClass() {}",
            "MyClass.prototype[\"MyMethod\"] = function(a) {",
            "this.a = a;",
            "}",
            "window[\"MyClass\"] = MyClass;",
            "/**@interface */",
            "function MyParent() {}",
            "/** @param {*} a */",
            "MyParent.prototype.MyMethod = function(a) {}",
            "/**",
            "* @constructor",
            "* @implements {MyParent}",
            "*/",
            "function MyClass() {}",
            "MyClass.prototype[\"MyMethod\"] = function(a) {",
            "this.a2 = a;",
            "}",
            "window[\"MyClass\"] = MyClass;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Prototypes declared with quotes produce a JSC_USED_GLOBAL_THIS warning."
        ],
        "desc_hints": [
            "MyClass",
            "this.a2",
            "MyMethod",
            "MyParent",
            "MyClass.prototype",
            "MyParent.prototype.MyMethod"
        ],
        "desc_text": [
            [
                "Compiling the following code (in advanced optimizations with VERBOSE",
                ["OB", "SR"]
            ],
            ["warning levels):", []],
            ["/** @constructor */", "CODE"],
            ["function MyClass() {}", "CODE"],
            ["MyClass.prototype[\"MyMethod\"] = function(a) {", "CODE"],
            ["this.a = a;", "CODE"],
            ["}", "CODE"],
            ["window[\"MyClass\"] = MyClass;", "CODE"],
            [
                "Results in the following warning: \"dangerous use of the global this",
                ["OB", "SR"]
            ],
            [
                "object.\" This notation is convenient to declare a prototype that is purely",
                ["OB"]
            ],
            ["used for export purposes.", ["OB"]],
            ["The warning can be suppressed by using an @this", []],
            ["notation.", ["OB"]],
            ["Given the following externs:", ["OB", "SR"]],
            ["/**@interface */", "CODE"],
            ["function MyParent() {}", "CODE"],
            ["/** @param {*} a */", "CODE"],
            ["MyParent.prototype.MyMethod = function(a) {}", "CODE"],
            ["And the following code:", ["OB", "SR"]],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @implements {MyParent}", "CODE"],
            ["*/", "CODE"],
            ["function MyClass() {}", "CODE"],
            ["MyClass.prototype[\"MyMethod\"] = function(a) {", "CODE"],
            ["this.a2 = a;", "CODE"],
            ["}", "CODE"],
            ["window[\"MyClass\"] = MyClass;", "CODE"],
            [
                "The compiler also produces the waring: \"property MyMethod on interface",
                ["OB", "SR"]
            ],
            ["MyParent is not implemented by type MyClass\".", ["OB"]]
        ]
    },
    "Lang-22": {
        "code_elements": [
            "// additional test cases",
            "public void testReducedFactory_int_int() {",
            "// ...",
            "f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);",
            "assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());",
            "assertEquals(1, f.getDenominator());",
            "public void testReduce() {",
            "// ...",
            "f = Fraction.getFraction(Integer.MIN_VALUE, 2);",
            "result = f.reduce();",
            "assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());",
            "assertEquals(1, result.getDenominator());"
        ],
        "stack_traces": [],
        "summary_hints": [
            "org.apache.commons.lang3.math.Fraction",
            "Integer.MIN_VALUE"
        ],
        "summary_text": [
            "org.apache.commons.lang3.math.Fraction does not reduce (Integer.MIN_VALUE, 2^k)"
        ],
        "desc_hints": [
            "greatestCommonDivisor",
            "getReducedFraction",
            "result.getNumerator",
            "result.getDenominator",
            "Fraction.getFraction",
            "FractionTest.java",
            "assertEquals",
            "getDenominator",
            "Integer.MIN_VALUE",
            "Fraction.getReducedFraction",
            "getNumerator",
            "testReducedFactory_int_int",
            "testReduce"
        ],
        "desc_text": [
            [
                "The greatestCommonDivisor method in class Fraction does not find the gcd of Integer.MIN_VALUE and 2^k, and this case can be triggered by taking Integer.MIN_VALUE as the numerator.",
                ["OB"]
            ],
            [
                "Note that the case of taking Integer.MIN_VALUE as the denominator is handled explicitly in the getReducedFraction factory method.",
                ["OB"]
            ],
            ["FractionTest.java", []],
            ["// additional test cases", "CODE"],
            ["public void testReducedFactory_int_int() {", "CODE"],
            ["// ...", "CODE"],
            ["f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);", "CODE"],
            ["assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());", "CODE"],
            ["assertEquals(1, f.getDenominator());", "CODE"],
            ["public void testReduce() {", "CODE"],
            ["// ...", "CODE"],
            ["f = Fraction.getFraction(Integer.MIN_VALUE, 2);", "CODE"],
            ["result = f.reduce();", "CODE"],
            [
                "assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());",
                "CODE"
            ],
            ["assertEquals(1, result.getDenominator());", "CODE"]
        ]
    },
    "Closure-25": {
        "code_elements": [
            "/**",
            "* @param {{prop1: string, prop2: (number|undefined)}} parry",
            "*/",
            "function callz(parry) {",
            "if (parry.prop2 && parry.prop2 < 5) alert('alright!');",
            "alert(parry.prop1);",
            "}",
            "callz({prop1: 'hi'});",
            "/**",
            "* @param {{prop1: string, prop2: (number|undefined)}} parry",
            "* @constructor",
            "*/",
            "function callz(parry) {",
            "if (parry.prop2 && parry.prop2 < 5) alert('alright!');",
            "alert(parry.prop1);",
            "}",
            "new callz({prop1: 'hi'});",
            "new callz({prop1: 'hi'});"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "anonymous object type inference behavior is different when calling constructors"
        ],
        "desc_hints": [
            "parry.prop2",
            "parry.prop1",
            "checkTypes",
            "compiler.jar",
            "accessControls",
            "checkVars",
            "reverse.js"
        ],
        "desc_text": [
            ["The following compiles fine with:", ["OB", "SR"]],
            [
                "java -jar build/compiler.jar --compilation_level=ADVANCED_OPTIMIZATIONS --jscomp_error=accessControls --jscomp_error=checkTypes --jscomp_error=checkVars --js ~/Desktop/reverse.js",
                []
            ],
            ["reverse.js:", []],
            ["/**", "CODE"],
            [
                "* @param {{prop1: string, prop2: (number|undefined)}} parry",
                "CODE"
            ],
            ["*/", "CODE"],
            ["function callz(parry) {", "CODE"],
            ["if (parry.prop2 && parry.prop2 < 5) alert('alright!');", "CODE"],
            ["alert(parry.prop1);", "CODE"],
            ["}", "CODE"],
            ["callz({prop1: 'hi'});", "CODE"],
            ["However, the following does not:", ["OB"]],
            ["/**", "CODE"],
            [
                "* @param {{prop1: string, prop2: (number|undefined)}} parry",
                "CODE"
            ],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["function callz(parry) {", "CODE"],
            ["if (parry.prop2 && parry.prop2 < 5) alert('alright!');", "CODE"],
            ["alert(parry.prop1);", "CODE"],
            ["}", "CODE"],
            ["new callz({prop1: 'hi'});", "CODE"],
            [
                "/Users/dolapo/Desktop/reverse.js:10: ERROR - actual parameter 1 of callz does not match formal parameter",
                ["OB"]
            ],
            ["found : {prop1: string}", []],
            ["required: {prop1: string, prop2: (number|undefined)}", []],
            ["new callz({prop1: 'hi'});", "CODE"],
            ["Thanks!", []]
        ]
    },
    "Jsoup-21": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Selector parsing gets confused by commata in regexes"
        ],
        "desc_hints": [
            "QueryParser",
            "chompTo",
            "java.util.regex.PatternSyntaxException"
        ],
        "desc_text": [
            [
                "The selector div, li:matches([0-9,]+) causes a java.util.regex.PatternSyntaxException because QueryParser (line 63) thinks that the comma inside the regex is a combinator and thus extracts , li:matches([0-9 as the second alternative.",
                ["OB"]
            ],
            [
                "Instead of scanning ahead with `chompTo(\",\"), the parser needs to parse its way through the alternative until it reaches a comma or the end of a string.",
                ["OB", "EB"]
            ],
            [
                "That way, commata in regular expressions will be correctly interpreted as part of the regex.",
                ["OB"]
            ],
            [
                "Note that there may be many more variations of this bug in the parser.",
                []
            ],
            [
                "Wherever a construct allows embedding an arbitrary string one should expect this problem.",
                ["EB"]
            ],
            ["[attr=a,b] for example is likely to cause the same issue.", []],
            ["In a way, any invocation of chompTo() needs to examined.", []]
        ]
    },
    "Closure-152": {
        "code_elements": [],
        "stack_traces": [
            "Caused by: java.lang.ClassCastException: com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType",
            "at com.google.javascript.rhino.jstype.FunctionType.resolveInternal(Unknown Source)",
            "at com.google.javascript.rhino.jstype.JSType.resolve(Unknown Source)",
            "at com.google.javascript.jscomp.TypedScopeCreator$DeferredSetType.resolve(Unknown Source)",
            "at com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder.resolveTypes(Unknown Source)",
            "at com.google.javascript.jscomp.TypedScopeCreator.createScope(Unknown Source)",
            "at com.google.javascript.jscomp.MemoizedScopeCreator.createScope(Unknown Source)",
            "at com.google.javascript.jscomp.DefaultPassConfig$GlobalTypeResolver.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.check(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
            "at java.lang.Thread.run(Thread.java:662)"
        ],
        "summary_hints": [
            "jstype.ObjectType",
            "resolveTypes",
            "jstype.UnionType"
        ],
        "summary_text": [
            "resolveTypes: jstype.UnionType cannot be cast to jstype.ObjectType"
        ],
        "desc_hints": [
            "java.lang.RuntimeException",
            "com.google.javascript.rhino.jstype.ObjectType",
            "Thread.java",
            "com.google.javascript.jscomp.TypedScopeCreator.createScope",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "undefinedVars",
            "AbstractScopeBuilder.resolveTypes",
            "java.lang.Thread.run",
            "resolveTypes",
            "JavaScript",
            "invalidCasts",
            "com.google.javascript.jscomp.MemoizedScopeCreator.createScope",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "com.google.javascript.jscomp.Compiler",
            "NamedPass.process",
            "strictModuleDepCheck",
            "missingProperties",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "NamedPass",
            "checkTypes",
            "DeferredSetType.resolve",
            "com.google.javascript.rhino.jstype.FunctionType.resolveInternal",
            "com.google.javascript.jscomp.Compiler.check",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "GlobalTypeResolver.process",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "java.lang.ClassCastException",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "com.google.javascript.rhino.jstype.JSType.resolve",
            "com.google.javascript.rhino.jstype.UnionType",
            "com.google.javascript.jscomp.TypedScopeCreator",
            "com.google.javascript.jscomp.DefaultPassConfig"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile a bunch of JavaScript files that I can't release with these options: ['--create_name_map_files', 'true', '--jscomp_warning', 'missingProperties', '--jscomp_warning', 'undefinedVars', '--jscomp_warning', 'checkTypes', '--warning_level', 'VERBOSE', '--summary_detail_level', '3', '--process_closure_primitives', 'true', '--jscomp_error', 'strictModuleDepCheck', '--jscomp_error', 'invalidCasts', '--logging_level', 'ALL', '--compilation_level', 'ADVANCED_OPTIMIZATIONS']",
                ["OB", "SR"]
            ],
            ["2.", ["OB", "SR"]],
            ["During this pass:", []],
            [
                "Oct 26, 2010 12:09:38 AM com.google.javascript.jscomp.PhaseOptimizer$NamedPass process",
                []
            ],
            ["INFO: resolveTypes", []],
            [", compilation terminates with:", []],
            [
                "java.lang.RuntimeException: java.lang.ClassCastException: com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
                []
            ],
            [
                "Caused by: java.lang.ClassCastException: com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.rhino.jstype.FunctionType.resolveInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.rhino.jstype.JSType.resolve(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypedScopeCreator$DeferredSetType.resolve(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder.resolveTypes(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypedScopeCreator.createScope(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.MemoizedScopeCreator.createScope(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.DefaultPassConfig$GlobalTypeResolver.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.check(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Thread.java:662)", "STACK_TRACE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["I'm using Closure Compiler r506.", ["OB"]],
            ["The problem first appeared in r482.", ["OB"]]
        ]
    },
    "JacksonDatabind-50": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonIdentityInfo", "JsonCreator"],
        "summary_text": [
            "@JsonIdentityInfo deserialization fails with combination of forward references, @JsonCreator"
        ],
        "desc_hints": ["test.zip", "first.txt", "both.txt"],
        "desc_text": [
            [
                "As a follow-up to bug #1255, the patch I provided exposes related deserialization problems.",
                []
            ],
            [
                "I have attached a small project ('jackson-test.zip') to demonstrate these issues.",
                ["SR"]
            ],
            [
                "When run with both patches from #1255, the output is provided in the attached 'both.txt'.",
                ["OB"]
            ],
            [
                "When run with just the first patch from #1255, the output is provided in the attached 'first.txt'.",
                ["OB"]
            ],
            ["Important points:", []],
            [
                "When the object expressed as an id is contained within a collection or map (List in this example), deserialization works correctly.",
                ["OB", "SR"]
            ],
            [
                "When it is a field of an object, deserialization is broken.",
                ["OB"]
            ],
            [
                "This particular example doesn't have forward references, but it does have cycles.",
                ["OB"]
            ],
            [
                "Nevertheless, I have seen situations where non-cyclical forward-references also do not deserialize properly, with the same caveat as in 1.",
                ["OB", "SR"]
            ],
            ["jackson-test.zip", []],
            ["both.txt", []],
            ["first.txt", []]
        ]
    },
    "Codec-14": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Beider Morse Phonetic Matching producing incorrect tokens"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6",
                []
            ],
            [
                "The BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).",
                ["OB", "SR"]
            ],
            [
                "I can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.",
                ["OB"]
            ],
            [
                "How do I determine the version of the algorithm that was implemented in the Commons Codec?",
                []
            ],
            [
                "How do we ensure that the algorithm is updated if/when the BMPM algorithm changes?",
                []
            ],
            [
                "How do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
                []
            ]
        ]
    },
    "Mockito-38": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Generate change list separated by types using labels"
        ],
        "desc_hints": ["releaseLabels"],
        "desc_text": [
            [
                "Changes Unknown when pulling 47a7016 on szpak:topic/releaseLabels into * on mockito:master*.",
                ["OB", "SR"]
            ]
        ]
    },
    "Time-11": {
        "code_elements": [
            "cVerbose.set(Boolean.FALSE);",
            "}",
            "public static boolean verbose() {",
            "return cVerbose.get();",
            "}",
            "public static boolean verbose(){",
            "Boolean verbose = cVerbose.get();",
            "return (verbose != null) ? verbose : false;",
            "}",
            "public void testDateTimeZoneBuilder() throws Exception {",
            "getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);",
            "Thread t = new Thread(new Runnable() {",
            "@Override",
            "public void run() {",
            "getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);",
            "}",
            "});",
            "t.start();",
            "t.join();",
            "}",
            "private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {",
            "return new DateTimeZoneBuilder()",
            ".addCutover(1601, 'w', 1, 1, 1, false, 7200000)",
            ".setStandardOffset(3600000)",
            ".addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)",
            ".addRecurringSavings(\"\", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DateTimeZoneBuilder"],
        "summary_text": ["NPE in DateTimeZoneBuilder"],
        "desc_hints": [
            "Boolean.FALSE",
            "TestDTZ1",
            "cVerbose.set",
            "Integer.MAX_VALUE",
            "TestDTZ2",
            "addCutover",
            "getTestDataTimeZoneBuilder",
            "toDateTimeZone",
            "PrecalculatedZone.create",
            "testDateTimeZoneBuilder",
            "cVerbose.get",
            "DateTimeZone",
            "DateTimeZoneBuilder",
            "setStandardOffset",
            "ZoneInfoCompiler",
            "ThreadLocal",
            "addRecurringSavings",
            "ZoneInfoCompiler.verbose"
        ],
        "desc_text": [
            [
                "When a DateTimeZone is build with duplicate-named 'recurring saving time' in a first thread, all goes Ok: a warning message is generated and an identifier is automatically generated in PrecalculatedZone.create().",
                ["OB"]
            ],
            [
                "When a second thread does the same, an NPE is generated in ZoneInfoCompiler.verbose().",
                ["OB"]
            ],
            [
                "The cause is that the cVerbose ThreadLocal is incorrectly initialized in ZoneInfoCompiler:",
                ["OB"]
            ],
            ["static {", []],
            ["cVerbose.set(Boolean.FALSE);", "CODE"],
            ["}", "CODE"],
            [
                "...will initialize cVerbose only for the first thread and not for the subsequent ones.",
                ["OB"]
            ],
            ["The NPE is caused by the autoboxing in:", ["OB"]],
            ["public static boolean verbose() {", "CODE"],
            ["return cVerbose.get();", "CODE"],
            ["}", "CODE"],
            [
                "A better approach could be to remove the initialization and test for null:",
                []
            ],
            ["public static boolean verbose(){", "CODE"],
            ["Boolean verbose = cVerbose.get();", "CODE"],
            ["return (verbose != null) ? verbose : false;", "CODE"],
            ["}", "CODE"],
            ["Here follows a test case:", ["SR"]],
            ["@Test", []],
            [
                "public void testDateTimeZoneBuilder() throws Exception {",
                "CODE"
            ],
            [
                "getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);",
                "CODE"
            ],
            ["Thread t = new Thread(new Runnable() {", "CODE"],
            ["@Override", "CODE"],
            ["public void run() {", "CODE"],
            [
                "getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);",
                "CODE"
            ],
            ["}", "CODE"],
            ["});", "CODE"],
            ["t.start();", "CODE"],
            ["t.join();", "CODE"],
            ["}", "CODE"],
            [
                "private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {",
                "CODE"
            ],
            ["return new DateTimeZoneBuilder()", "CODE"],
            [".addCutover(1601, 'w', 1, 1, 1, false, 7200000)", "CODE"],
            [".setStandardOffset(3600000)", "CODE"],
            [
                ".addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)",
                "CODE"
            ],
            [
                ".addRecurringSavings(\"\", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Closure-43": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "@lends does not work unless class is defined beforehand"
        ],
        "desc_hints": [
            "code.google.com",
            "ejohn.org",
            "checkTypes",
            "makeClass",
            "TagLends",
            "Person.prototype"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            [
                "With advanced optimizations enabled as well as type checking (--jscomp_error=checkTypes), try to use @lends in the same way it's used on the jsdoc page at http://code.google.com/p/jsdoc-toolkit/wiki/TagLends - using either a utility method called \"makeClass\" or another method of class constructing such as John Resig's method at http://ejohn.org/blog/simple-javascript-inheritance/",
                ["SR"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "Expected output is to have code compiled but instead I get a compile error such as:",
                ["OB", "EB"]
            ],
            [
                "ERROR - Variable Person.prototype not declared before @lends annotation.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Latest svn build, OS X.", []]
        ]
    },
    "JacksonCore-2": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Parser parsers numbers eagerly; does not report error with missing space"
        ],
        "desc_hints": ["FasterXML"],
        "desc_text": [
            ["(note: moved from FasterXML/jackson-databind#260)", []],
            ["If you give input like:", ["OB", "SR"]],
            ["123true", []],
            [
                "it will first successfully parse integer 123, and then boolean true.",
                ["OB", "SR"]
            ],
            ["This should instead result in a parse exception.", ["OB", "EB"]]
        ]
    },
    "Lang-27": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "NumberUtils",
            "StringIndexOutOfBoundsException",
            "createNumber"
        ],
        "summary_text": [
            "NumberUtils createNumber throws a StringIndexOutOfBoundsException when argument containing \"e\" and \"E\" is passed in"
        ],
        "desc_hints": [
            "NumberFormatException",
            "NumberUtils",
            "StringIndexOutOfBoundsException",
            "createNumber"
        ],
        "desc_text": [
            [
                "NumberUtils createNumber throws a StringIndexOutOfBoundsException instead of NumberFormatException when a String containing both possible exponent indicators is passed in.",
                ["OB", "EB"]
            ],
            ["One example of such a String is \"1eE\".", ["OB", "SR"]]
        ]
    },
    "Mockito-36": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Make Mockito JUnit rule easier to use"],
        "desc_hints": [],
        "desc_text": [
            [
                "Mockito JUnit rule easier to use by avoiding the need to pass test instance",
                ["SR"]
            ],
            ["Make it compatible with JUnit 4.7+ instead of 4.9+", ["OB", "EB"]]
        ]
    },
    "Chart-1": {
        "code_elements": [
            "public LegendItemCollection getLegendItems() {",
            "LegendItemCollection result = new LegendItemCollection();",
            "if (this.plot == null) {",
            "return result;",
            "}",
            "int index = this.plot.getIndexOf(this);",
            "CategoryDataset dataset = this.plot.getDataset(index);",
            "if (dataset != null) {",
            "return result;",
            "}",
            "int seriesCount = dataset.getRowCount();",
            "...",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["AbstractCategoryItemRender.getLegendItems"],
        "summary_text": [
            "#983 Potential NPE in AbstractCategoryItemRender.getLegendItems()"
        ],
        "desc_hints": [
            "seriesCount",
            "JFreeChart",
            "LegendItemCollection",
            "CategoryDataset",
            "AbstractCategoryItemRender.java",
            "dataset.getRowCount",
            "this.plot.getDataset",
            "this.plot.getIndexOf",
            "this.plot",
            "getLegendItems"
        ],
        "desc_text": [
            [
                "Setting up a working copy of the current JFreeChart trunk in Eclipse I got a warning about a null pointer access in this bit of code from AbstractCategoryItemRender.java:",
                ["OB"]
            ],
            ["public LegendItemCollection getLegendItems() {", "CODE"],
            [
                "LegendItemCollection result = new LegendItemCollection();",
                "CODE"
            ],
            ["if (this.plot == null) {", "CODE"],
            ["return result;", "CODE"],
            ["}", "CODE"],
            ["int index = this.plot.getIndexOf(this);", "CODE"],
            ["CategoryDataset dataset = this.plot.getDataset(index);", "CODE"],
            ["if (dataset != null) {", "CODE"],
            ["return result;", "CODE"],
            ["}", "CODE"],
            ["int seriesCount = dataset.getRowCount();", "CODE"],
            ["...", "CODE"],
            ["}", "CODE"],
            [
                "The warning is in the last code line where seriesCount is assigned.",
                ["OB"]
            ],
            [
                "The variable dataset is guaranteed to be null in this location, I suppose that the check before that should actually read \"if (dataset == null)\", not \"if (dataset != null)\".",
                ["EB"]
            ],
            ["This is trunk as of 2010-02-08.", []]
        ]
    },
    "Compress-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArchiveInputStream", "WinZip", "getNextEntry"],
        "summary_text": [
            "ArchiveInputStream#getNextEntry(): Problems with WinZip directories with Umlauts"
        ],
        "desc_hints": [
            "ArchiveEntry",
            "ZipArchiveInputStream",
            "ArchiveStreamFactory",
            "ArchiveInputStream",
            "WinZip"
        ],
        "desc_text": [
            [
                "There is a problem when handling a WinZip-created zip with Umlauts in directories.",
                ["OB"]
            ],
            [
                "I'm accessing a zip file created with WinZip containing a directory with an umlaut (\"\u00e4\") with ArchiveInputStream.",
                ["OB", "SR"]
            ],
            [
                "When creating the zip file the unicode-flag of winzip had been active.",
                ["OB", "SR"]
            ],
            [
                "The following problem occurs when accessing the entries of the zip:",
                ["OB", "SR"]
            ],
            [
                "the ArchiveEntry for a directory containing an umlaut is not marked as a directory and the file names for the directory and all files contained in that directory contain backslashes instead of slashes (i.e.",
                ["OB", "EB"]
            ],
            [
                "completely different to all other files in directories with no umlaut in their path).",
                ["OB"]
            ],
            [
                "There is no difference when letting the ArchiveStreamFactory decide which ArchiveInputStream to create or when using the ZipArchiveInputStream constructor with the correct encoding (I've tried different encodings CP437, CP850, ISO-8859-15, but still the problem persisted).",
                ["OB", "SR"]
            ],
            [
                "This problem does not occur when using the very same zip file but compressed by 7zip or the built-in Windows 7 zip functionality.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-1": {
        "code_elements": [
            "public class TestOuter {",
            "@JsonFormat(shape = JsonFormat.Shape.ARRAY)",
            "public ArrayList<TestInner> array;",
            "public TestOuter() {",
            "this.array = new ArrayList<TestInner>();",
            "this.array.add(new TestInner(1, \"one\"));",
            "this.array.add(new TestInner(0, null));",
            "}",
            "private class TestInner {",
            "public int i;",
            "public String mayBeNull;",
            "public TestInner(int i, String s) {",
            "this.i = i;",
            "this.mayBeNull = s;",
            "}",
            "}",
            "}",
            "package com.fasterxml.jackson.databind.ser;",
            "// ...",
            "public class BeanPropertyWriter {",
            "// ...",
            "Object value = get(bean);",
            "if (value == null) { // nulls need specialized handling",
            "if (_nullSerializer != null) {",
            "_nullSerializer.serialize(null, jgen, prov);",
            "} else { // can NOT suppress entries in tabular output",
            "jgen.writeNull();",
            "}",
            "}",
            "// otherwise find serializer to use",
            "JsonSerializer<Object> ser = _serializer;",
            "// ... ..."
        ],
        "stack_traces": [],
        "summary_hints": ["JsonFormat.Shape.ARRAY", "JsonFormat"],
        "summary_text": [
            "NULL values are duplicated when serializing as array [via @JsonFormat(shape = JsonFormat.Shape.ARRAY)]"
        ],
        "desc_hints": [
            "JsonFormat.Shape.ARRAY",
            "nullSerializer.serialize",
            "jgen.writeNull",
            "JsonFormat",
            "BeanPropertyWriter",
            "this.array.add",
            "SerializerProvider",
            "TestOuter",
            "JsonGenerator",
            "TestInner",
            "_nullSerializer",
            "this.mayBeNull",
            "serializeAsColumn",
            "ArrayList",
            "JsonSerializer",
            "com.fasterxml.jackson.databind.ser",
            "mayBeNull",
            "this.array"
        ],
        "desc_text": [
            ["Example:", ["OB", "SR"]],
            ["public class TestOuter {", "CODE"],
            ["@JsonFormat(shape = JsonFormat.Shape.ARRAY)", "CODE"],
            ["public ArrayList<TestInner> array;", "CODE"],
            ["public TestOuter() {", "CODE"],
            ["this.array = new ArrayList<TestInner>();", "CODE"],
            ["this.array.add(new TestInner(1, \"one\"));", "CODE"],
            ["this.array.add(new TestInner(0, null));", "CODE"],
            ["}", "CODE"],
            ["private class TestInner {", "CODE"],
            ["public int i;", "CODE"],
            ["public String mayBeNull;", "CODE"],
            ["public TestInner(int i, String s) {", "CODE"],
            ["this.i = i;", "CODE"],
            ["this.mayBeNull = s;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Serializing an instance of TestOuter will produce the following incorrect result (as of Jackson 2.2.1):",
                ["OB", "SR"]
            ],
            ["\"array\": [[1, \"one\"], [0, null, null]]", []],
            ["where the null value is duplicated.", ["OB"]],
            ["The expected result would be:", ["OB", "EB"]],
            ["\"array\": [[1, \"one\"], [0, null]]", []],
            ["I tracked the issue down to:", []],
            ["package com.fasterxml.jackson.databind.ser;", "CODE"],
            ["// ...", "CODE"],
            ["public class BeanPropertyWriter {", "CODE"],
            ["// ...", "CODE"],
            [
                "public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)",
                []
            ],
            ["throws Exception", ["OB"]],
            ["{", []],
            ["Object value = get(bean);", "CODE"],
            ["if (value == null) { // nulls need specialized handling", "CODE"],
            ["if (_nullSerializer != null) {", "CODE"],
            ["_nullSerializer.serialize(null, jgen, prov);", "CODE"],
            ["} else { // can NOT suppress entries in tabular output", "CODE"],
            ["jgen.writeNull();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["// otherwise find serializer to use", "CODE"],
            ["JsonSerializer<Object> ser = _serializer;", "CODE"],
            ["// ... ...", "CODE"],
            [
                "where I suspect there is a missing \"return\", to exit the function once handling of the null value in the dedicated branch is done.",
                ["OB"]
            ],
            [
                "As it is now, a null value is first serialized in the dedicated branch (jgen.writeNull()), and then execution continues on the \"normal\" (non-null) path and eventually the value is serialized once again.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Math-34": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ListPopulation"],
        "summary_text": [
            "ListPopulation Iterator allows you to remove chromosomes from the population."
        ],
        "desc_hints": ["ListPopulation"],
        "desc_text": [
            [
                "Calling the iterator method of ListPopulation returns an iterator of the protected modifiable list.",
                ["OB"]
            ],
            [
                "Before returning the iterator we should wrap it in an unmodifiable list.",
                ["OB", "EB"]
            ]
        ]
    },
    "Math-35": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ElitisticListPopulation", "elitismRate"],
        "summary_text": [
            "Need range checks for elitismRate in ElitisticListPopulation constructors."
        ],
        "desc_hints": [
            "setElitismRate",
            "ElitisticListPopulation",
            "elitismRate"
        ],
        "desc_text": [
            [
                "There is a range check for setting the elitismRate via ElitisticListPopulation's setElitismRate method, but not via the constructors.",
                ["OB"]
            ]
        ]
    },
    "Math-97": {
        "code_elements": [
            "clearResult();",
            "verifyInterval(min, max);",
            "double yMin = f.value(min);",
            "double yMax = f.value(max);",
            "// Verify bracketing",
            "if (yMin * yMax >= 0)",
            "{",
            "throw new IllegalArgumentException",
            "(\"Function values at endpoints do not have different signs.\" +",
            "\"  Endpoints: [\" + min + \",\" + max + \"]\" +",
            "\"  Values: [\" + yMin + \",\" + yMax + \"]\");",
            "}",
            "// solve using only the first endpoint as initial guess",
            "return solve(min, yMin, max, yMax, min, yMin);",
            "}",
            "if (yMin ==0 || yMax == 0)",
            "{",
            "return 0;",
            "}"
        ],
        "stack_traces": [
            "at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:99)",
            "at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:62)"
        ],
        "summary_hints": ["BrentSolver", "IllegalArgumentException"],
        "summary_text": ["BrentSolver throws IllegalArgumentException"],
        "desc_hints": [
            "java.lang.IllegalArgumentException",
            "MaxIterationsExceededException",
            "IllegalArgumentException",
            "BrentSolver.java",
            "clearResult",
            "org.apache.commons.math.analysis.BrentSolver.solve",
            "verifyInterval",
            "FunctionEvaluationException"
        ],
        "desc_text": [
            ["I am getting this exception:", ["OB"]],
            [
                "java.lang.IllegalArgumentException: Function values at endpoints do not have different signs.",
                ["OB"]
            ],
            [
                "Endpoints: [-100000.0,1.7976931348623157E308] Values: [0.0,-101945.04630982173]",
                []
            ],
            [
                "at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:99)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:62)",
                "STACK_TRACE"
            ],
            [
                "The exception should not be thrown with values [0.0,-101945.04630982173] because 0.0 is positive.",
                ["OB", "EB"]
            ],
            [
                "According to Brent Worden, the algorithm should stop and return 0 as the root instead of throwing an exception.",
                ["OB", "EB"]
            ],
            ["The problem comes from this method:", []],
            [
                "public double solve(double min, double max) throws MaxIterationsExceededException,",
                []
            ],
            ["FunctionEvaluationException {", []],
            ["clearResult();", "CODE"],
            ["verifyInterval(min, max);", "CODE"],
            ["double yMin = f.value(min);", "CODE"],
            ["double yMax = f.value(max);", "CODE"],
            ["// Verify bracketing", "CODE"],
            ["if (yMin * yMax >= 0)", "CODE"],
            ["{", "CODE"],
            ["throw new IllegalArgumentException", "CODE"],
            [
                "(\"Function values at endpoints do not have different signs.\" +",
                "CODE"
            ],
            ["\"  Endpoints: [\" + min + \",\" + max + \"]\" +", "CODE"],
            ["\"  Values: [\" + yMin + \",\" + yMax + \"]\");", "CODE"],
            ["}", "CODE"],
            ["// solve using only the first endpoint as initial guess", "CODE"],
            ["return solve(min, yMin, max, yMax, min, yMin);", "CODE"],
            ["}", "CODE"],
            [
                "One way to fix it would be to add this code after the assignment of yMin and yMax:",
                []
            ],
            ["if (yMin ==0 || yMax == 0)", "CODE"],
            ["{", "CODE"],
            ["return 0;", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-104": {
        "code_elements": [
            "public class MyTestCase{",
            "public static void main(String[] args) throws JsonProcessingException, ParseException {",
            "StdDateFormat formatter = new StdDateFormat();",
            "System.out.println(formatter.format(new Date(Long.MIN_VALUE)));",
            "System.out.println(formatter.format(new Date(Long.MAX_VALUE)));",
            "System.out.println(formatter.parse(formatter.format(new Date(Long.MIN_VALUE))));",
            "System.out.println(formatter.parse(formatter.format(new Date(Long.MAX_VALUE))));",
            "assert formatter.parse(formatter.format(new Date(Long.MAX_VALUE))).getTime() == Long.MAX_VALUE;",
            "// Will fail due to lack of support for negative dates.",
            "//assert formatter.parse(formatter.format(new Date(Long.MIN_VALUE))).getTime() == Long.MIN_VALUE;",
            "}",
            "}",
            "private static void pad2(StringBuffer buffer, int value) {",
            "int tens = value / 10;",
            "+    if (tens >= 10) {",
            "+        pad2(buffer, tens);",
            "+        buffer.append((char) ('0' + value % 10));",
            "+        return;",
            "+    }",
            "if (tens == 0) {",
            "buffer.append('0');",
            "} else {",
            "buffer.append((char) ('0' + tens));",
            "value -= 10 * tens;",
            "}",
            "buffer.append((char) ('0' + value));",
            "}",
            "private static void pad3(StringBuffer buffer, int value) {",
            "int h = value / 100;",
            "+    if (h >= 100) {",
            "+        pad3(buffer, h);",
            "+        pad2(buffer, value % 100);",
            "+        return;",
            "+    }",
            "if (h == 0) {",
            "buffer.append('0');",
            "} else {",
            "buffer.append((char) ('0' + h));",
            "value -= (h * 100);",
            "}",
            "pad2(buffer, value);",
            "}",
            "Calendar cal = _getCalendar(tz);",
            "cal.setTime(date);",
            "+        int year = cal.get(Calendar.YEAR);",
            "+        if (cal.get(Calendar.ERA) == 0) {",
            "+            year = -year + 1;",
            "+        }",
            "+        if (year < 0 || 9999 < year) {",
            "+            throw new IndexOutOfBoundsException(\"Year not within the range [0,9999]: \" + Integer.toString(year))",
            "+        }",
            "-        pad4(buffer, cal.get(Calendar.YEAR));",
            "+        pad4(buffer, year);",
            "buffer.append('-');",
            "pad2(buffer, cal.get(Calendar.MONTH) + 1);",
            "buffer.append('-');",
            "pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.util.StdDateFormat.parse(StdDateFormat.java:372)"
        ],
        "summary_hints": [],
        "summary_text": [
            "Large ISO-8601 Dates are formatted/serialized incorrectly"
        ],
        "desc_hints": [
            "Calendar.MONTH",
            "formatter.format",
            "JsonProcessingException",
            "Calendar.ERA",
            "IndexOutOfBoundsException",
            "_getCalendar",
            "StdDateFormat.java",
            "Calendar.YEAR",
            "FasterXML",
            "ss.SSS",
            "Integer.toString",
            "java.text.ParseException",
            "com.fasterxml.jackson.databind.util.StdDateFormat.parse",
            "github.com",
            "cal.get",
            "MyTestCase",
            "Long.MIN_VALUE",
            "Calendar.DAY_OF_MONTH",
            "TimeZone",
            "StringBuffer",
            "buffer.append",
            "formatter.parse",
            "ss.SSSZ",
            "StdDateFormat",
            "Long.MAX_VALUE",
            "cal.setTime",
            "getTime",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            ["The problem", []],
            [
                "java.text.ParseException: Cannot parse date \"\u75dd055-12-02T16:47:04.192+0000\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")",
                ["OB"]
            ],
            [
                "at com.fasterxml.jackson.databind.util.StdDateFormat.parse(StdDateFormat.java:372)",
                "STACK_TRACE"
            ],
            [
                "Years > 9999 are not rendered as 5 numbers or more, but with a non numerical characters for the thousands digit..",
                ["OB", "EB", "SR"]
            ],
            ["The testcase", []],
            ["public class MyTestCase{", "CODE"],
            [
                "public static void main(String[] args) throws JsonProcessingException, ParseException {",
                "CODE"
            ],
            ["StdDateFormat formatter = new StdDateFormat();", "CODE"],
            [
                "System.out.println(formatter.format(new Date(Long.MIN_VALUE)));",
                "CODE"
            ],
            [
                "System.out.println(formatter.format(new Date(Long.MAX_VALUE)));",
                "CODE"
            ],
            [
                "System.out.println(formatter.parse(formatter.format(new Date(Long.MIN_VALUE))));",
                "CODE"
            ],
            [
                "System.out.println(formatter.parse(formatter.format(new Date(Long.MAX_VALUE))));",
                "CODE"
            ],
            [
                "assert formatter.parse(formatter.format(new Date(Long.MAX_VALUE))).getTime() == Long.MAX_VALUE;",
                "CODE"
            ],
            ["// Will fail due to lack of support for negative dates.", "CODE"],
            [
                "//assert formatter.parse(formatter.format(new Date(Long.MIN_VALUE))).getTime() == Long.MIN_VALUE;",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Expected", ["EB"]],
            [
                "a) All dates are formatted correctly, meaning, years bigger than 9999.",
                ["OB"]
            ],
            [
                "b) or some sort of exception telling the data is not supported.",
                ["OB"]
            ],
            ["The location", ["OB"]],
            ["'0' + something", []],
            [
                "https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java#L442",
                []
            ],
            ["Suggestion", []],
            ["a) Adding '0' with an integer is not a safe operation.", ["OB"]],
            [
                "But if you are doing it, you need an upper bound check, e.g.:",
                []
            ],
            [
                "private static void pad2(StringBuffer buffer, int value) {",
                "CODE"
            ],
            ["int tens = value / 10;", "CODE"],
            ["+    if (tens >= 10) {", "CODE"],
            ["+        pad2(buffer, tens);", "CODE"],
            ["+        buffer.append((char) ('0' + value % 10));", "CODE"],
            ["+        return;", "CODE"],
            ["+    }", "CODE"],
            ["if (tens == 0) {", "CODE"],
            ["buffer.append('0');", "CODE"],
            ["} else {", "CODE"],
            ["buffer.append((char) ('0' + tens));", "CODE"],
            ["value -= 10 * tens;", "CODE"],
            ["}", "CODE"],
            ["buffer.append((char) ('0' + value));", "CODE"],
            ["}", "CODE"],
            [
                "private static void pad3(StringBuffer buffer, int value) {",
                "CODE"
            ],
            ["int h = value / 100;", "CODE"],
            ["+    if (h >= 100) {", "CODE"],
            ["+        pad3(buffer, h);", "CODE"],
            ["+        pad2(buffer, value % 100);", "CODE"],
            ["+        return;", "CODE"],
            ["+    }", "CODE"],
            ["if (h == 0) {", "CODE"],
            ["buffer.append('0');", "CODE"],
            ["} else {", "CODE"],
            ["buffer.append((char) ('0' + h));", "CODE"],
            ["value -= (h * 100);", "CODE"],
            ["}", "CODE"],
            ["pad2(buffer, value);", "CODE"],
            ["}", "CODE"],
            [
                "b) Or if you do not want to support such high years, then throw some sort of exception.",
                ["OB"]
            ],
            ["E.g.:", []],
            ["protected void _format(TimeZone tz, Locale loc, Date date,", []],
            ["StringBuffer buffer)", []],
            ["{", []],
            ["Calendar cal = _getCalendar(tz);", "CODE"],
            ["cal.setTime(date);", "CODE"],
            ["+        int year = cal.get(Calendar.YEAR);", "CODE"],
            ["+        if (cal.get(Calendar.ERA) == 0) {", "CODE"],
            ["+            year = -year + 1;", "CODE"],
            ["+        }", "CODE"],
            ["+        if (year < 0 || 9999 < year) {", "CODE"],
            [
                "+            throw new IndexOutOfBoundsException(\"Year not within the range [0,9999]: \" + Integer.toString(year))",
                "CODE"
            ],
            ["+        }", "CODE"],
            ["-        pad4(buffer, cal.get(Calendar.YEAR));", "CODE"],
            ["+        pad4(buffer, year);", "CODE"],
            ["buffer.append('-');", "CODE"],
            ["pad2(buffer, cal.get(Calendar.MONTH) + 1);", "CODE"],
            ["buffer.append('-');", "CODE"],
            ["pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));", "CODE"]
        ]
    },
    "JacksonCore-24": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["InputCoercionException"],
        "summary_text": [
            "Add new exception type InputCoercionException to be used for failed coercions like overflow for int"
        ],
        "desc_hints": [
            "JsonProcessingExceptions",
            "JsonParseException",
            "JsonMappingException",
            "JsonProcessingException",
            "InputCoercionException"
        ],
        "desc_text": [
            [
                "Currently problems like overflow for numeric type (when JSON number value exceeds range of requested target type like int) simply use JsonParseException to indicate the problem (both at streaming and databind level).",
                ["OB", "SR"]
            ],
            [
                "But it would be better if we could use more targeted exception, to let calling application potentially handle problems differently.",
                []
            ],
            [
                "We can also add some metadata about type of failure, such as initial token type and expected target type.",
                ["OB", "EB"]
            ],
            [
                "It is also true that coercion failures -- where we start from valid JSON value, but fail to convert into desired target type -- are not parse (decode) problems at all, but rather mismatch problems.",
                ["OB"]
            ],
            [
                "So let's add something like InputCoercionException, which extends JsonProcessingException, but not JsonParseException.",
                ["OB"]
            ],
            [
                "With 3.x we may want to tackle other problems: for example, lack of context for \"lower level\" JsonProcessingExceptions (compared to JsonMappingException)",
                ["SR"]
            ]
        ]
    },
    "JxPath-3": {
        "code_elements": [
            "Map map = new HashMap();",
            "map.put(\"a\", null);",
            "JXPathContext pathContext = JXPathContext.newContext(map);",
            "pathContext.setFactory(new AbstractFactory() {",
            "public boolean createObject(",
            "JXPathContext context, Pointer pointer, Object parent, String",
            "name, int index) {",
            "Map parentMap = (Map)parent;",
            "System.out.println(parent + \":\" + name + \":\" + index);",
            "if (index > -1) {",
            "List list = (List)parentMap.get(name);",
            "if (list == null)",
            "{",
            "list = new ArrayList();",
            "}",
            "int size = list.size();",
            "for (int i = size; i <= index; i++) {",
            "list.add(i, null);",
            "}",
            "parentMap.put(name, list);",
            "} else {",
            "parentMap.put(name, new HashMap());",
            "}",
            "return true;",
            "}",
            "pathContext.createPath(\"a/b[1]/c\");",
            "public boolean createObject(",
            "if (pointer instanceof NodePointer) {",
            "index = ((NodePointer)pointer).getIndex();",
            "}",
            "System.out.println(parent + \":\" + name + \":\" + index);",
            "Map parentMap = (Map)parent;",
            "if (index > -1) {",
            "List list = (List)parentMap.get(name);",
            "if (list == null) {            list = new ArrayList();          }",
            "int size = list.size();",
            "for (int i = size; i <= index; i++)",
            "{",
            "list.add(i, new HashMap());  // !!!!!!  Don't set to 'null'",
            "}",
            "parentMap.put(name, list);",
            "} else",
            "{",
            "parentMap.put(name, new HashMap());",
            "}",
            "return true;",
            "}",
            "pathContext.createPath(\"a/b[1]/c\");"
        ],
        "stack_traces": [],
        "summary_hints": ["StackOverflow", "JXPathContext.createPath"],
        "summary_text": [
            "StackOverflow error on a call to 'JXPathContext.createPath()'"
        ],
        "desc_hints": [
            "pathContext.setFactory",
            "DynamicPropertyPointer",
            "NullPropertyPointer.createPath",
            "createObject",
            "Test.main",
            "getIndex",
            "pathContext.createPath",
            "NullElementPointer.createPath",
            "createPath",
            "AbstractFactory",
            "JXPathContext.createPath",
            "ValueUtils.expandCollection",
            "ArrayList",
            "list.add",
            "NodePointer",
            "DynamicPropertyPointer.createPath",
            "JXPathContext.newContext",
            "createChild",
            "list.size",
            "parentMap.put",
            "Test.test4",
            "JXPathContextReferenceImpl.createPath",
            "StackOverflow",
            "NullPointer.createPath",
            "pathContext",
            "parentMap",
            "parentMap.get",
            "PropertyPointer",
            "JXPathContext",
            "HashMap",
            "System.out.println",
            "map.put"
        ],
        "desc_text": [
            [
                "I'm running into a StackOverflow error on a call to",
                ["OB", "SR"]
            ],
            [
                "'JXPathContext.createPath()' whenever I have a path that looks like",
                []
            ],
            ["'a/b[1]/c'.", ["OB"]],
            [
                "I took a quick look at the code and it appears JXPath, when",
                ["OB", "SR"]
            ],
            [
                "trying to create its parent pointer, simply recreates an equivalent",
                ["SR"]
            ],
            ["pointer(???).", []],
            ["Here is code to reproduce the problem.", ["SR"]],
            ["Map map = new HashMap();", "CODE"],
            ["map.put(\"a\", null);", "CODE"],
            [
                "JXPathContext pathContext = JXPathContext.newContext(map);",
                "CODE"
            ],
            ["pathContext.setFactory(new AbstractFactory() {", "CODE"],
            ["public boolean createObject(", "CODE"],
            [
                "JXPathContext context, Pointer pointer, Object parent, String",
                "CODE"
            ],
            ["name, int index) {", "CODE"],
            ["Map parentMap = (Map)parent;", "CODE"],
            [
                "System.out.println(parent + \":\" + name + \":\" + index);",
                "CODE"
            ],
            ["if (index > -1) {", "CODE"],
            ["List list = (List)parentMap.get(name);", "CODE"],
            ["if (list == null)", "CODE"],
            ["{", "CODE"],
            ["list = new ArrayList();", "CODE"],
            ["}", "CODE"],
            ["int size = list.size();", "CODE"],
            ["for (int i = size; i <= index; i++) {", "CODE"],
            ["list.add(i, null);", "CODE"],
            ["}", "CODE"],
            ["parentMap.put(name, list);", "CODE"],
            ["} else {", "CODE"],
            ["parentMap.put(name, new HashMap());", "CODE"],
            ["}", "CODE"],
            ["return true;", "CODE"],
            ["}", "CODE"],
            ["});", []],
            ["pathContext.createPath(\"a/b[1]/c\");", "CODE"],
            ["***************", []],
            [
                "I have continued looking into this, and found that the problem is that, if",
                []
            ],
            [
                "the List is created with a 'null' element, JXPath gets stuck in infinite",
                ["OB"]
            ],
            ["recursion.", ["OB"]],
            [
                "To discover this, I changed my Factory to implement the following method:",
                []
            ],
            ["public boolean createObject(", "CODE"],
            ["JXPathContext context, Pointer pointer, Object parent,", []],
            ["String name, int index) {", []],
            ["if (pointer instanceof NodePointer) {", "CODE"],
            ["index = ((NodePointer)pointer).getIndex();", "CODE"],
            ["}", "CODE"],
            [
                "System.out.println(parent + \":\" + name + \":\" + index);",
                "CODE"
            ],
            ["Map parentMap = (Map)parent;", "CODE"],
            ["if (index > -1) {", "CODE"],
            ["List list = (List)parentMap.get(name);", "CODE"],
            [
                "if (list == null) {            list = new ArrayList();          }",
                "CODE"
            ],
            ["int size = list.size();", "CODE"],
            ["for (int i = size; i <= index; i++)", "CODE"],
            ["{", "CODE"],
            [
                "list.add(i, new HashMap());  // !!!!!!  Don't set to 'null'",
                "CODE"
            ],
            ["}", "CODE"],
            ["parentMap.put(name, list);", "CODE"],
            ["} else", "CODE"],
            ["{", "CODE"],
            ["parentMap.put(name, new HashMap());", "CODE"],
            ["}", "CODE"],
            ["return true;", "CODE"],
            ["}", "CODE"],
            ["Then I ran the following code:", ["OB", "SR"]],
            ["pathContext.createPath(\"a/b[1]/c\");", "CODE"],
            [
                "pathContext.createPath(\"a/b[2]/c\"); // STACK OVERFLOW HERE",
                []
            ],
            ["Here is the stack trace at the beginning, where", []],
            ["'ValueUtils.expandCollection()' is called.", ["OB"]],
            ["It puts 'null' into the list,", []],
            [
                "thus causing the stack overflow as we cycle between createPath() &",
                ["OB"]
            ],
            ["createChild().", ["OB"]],
            [
                "Thread [main] (Suspended (breakpoint at line 227 in DynamicPropertyPointer))",
                []
            ],
            ["DynamicPropertyPointer.createPath(JXPathContext) line: 227", []],
            [
                "DynamicPropertyPointer(PropertyPointer).createChild(JXPathContext,",
                ["OB"]
            ],
            ["QName, int) line: 188", []],
            ["NullElementPointer.createPath(JXPathContext) line: 82", []],
            ["NullPointer.createPath(JXPathContext) line: 86", []],
            ["NullPropertyPointer.createPath(JXPathContext) line: 103", []],
            ["NullPointer.createPath(JXPathContext) line: 86", []],
            ["NullPropertyPointer.createPath(JXPathContext) line: 103", []],
            [
                "JXPathContextReferenceImpl.createPath(String, Expression) line: 447",
                ["SR"]
            ],
            ["JXPathContextReferenceImpl.createPath(String) line: 427", []],
            ["Test.test4() line: 75", []],
            ["Test.main(String[]) line: 38", []]
        ]
    },
    "Jsoup-86": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["IndexOutOfBoundsException"],
        "summary_text": ["Jsoup 1.11.3: IndexOutOfBoundsException"],
        "desc_hints": [
            "Jsoup.parse",
            "files.fm",
            "IndexOutOfBoundsException",
            "Parser.xmlParser"
        ],
        "desc_text": [
            ["Hi, I am using Jsoup 1.11.3.", []],
            [
                "While trying to parse HTML content, I'm getting IndexOutOfBoundsException.",
                ["OB"]
            ],
            [
                "I am using such Jsoup call as this is the only way to parse iframe content.",
                []
            ],
            ["Jsoup call:", []],
            ["Jsoup.parse(html, \"\", Parser.xmlParser())", []],
            ["HTML is here: https://files.fm/u/v43yemgb.", []],
            ["I can't add it to the body as it's huge.", ["OB"]]
        ]
    },
    "Math-41": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Variance.evaluate"],
        "summary_text": [
            "One of Variance.evaluate() methods does not work correctly"
        ],
        "desc_hints": [
            "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate"
        ],
        "desc_text": [
            [
                "The method org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[] values, double[] weights, double mean, int begin, int length) does not work properly.",
                ["OB"]
            ],
            [
                "Looks loke it ignores the length parameter and grabs the whole dataset.",
                ["OB"]
            ],
            ["Similar method in Mean class seems to work.", ["OB"]],
            [
                "I did not check other methods taking the part of the array; they may have the same problem.",
                []
            ],
            [
                "Workaround: I had to shrink my arrays and use the method without the length.",
                []
            ]
        ]
    },
    "Lang-64": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ValuedEnum.compareTo"],
        "summary_text": [
            "ValuedEnum.compareTo(Object other) not typesafe - it easily could be..."
        ],
        "desc_hints": [
            "org.apache.commons.lang.enums.ValuedEnum.compareTo",
            "ValuedEnum"
        ],
        "desc_text": [
            [
                "int org.apache.commons.lang.enums.ValuedEnum.compareTo(Object other)",
                []
            ],
            [
                "is not typesafe - if the int-values are the same, it will return \"0\" even for two totally different sub-classes of ValuedEnum",
                ["OB"]
            ]
        ]
    },
    "Collections-25": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["IteratorUtils.collatedIterator"],
        "summary_text": [
            "IteratorUtils.collatedIterator do not use natural ordering if no comparator was provided"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "In case a null comparator was provided natural ordering should be used, as stated in the javadoc.",
                ["OB", "EB"]
            ],
            [
                "In fact an exception is thrown the first time the returned iterator is used.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-76": {
        "code_elements": [
            "public class Employee {",
            "private final long id;",
            "private final Name name;",
            "private final int age;",
            "private Employee(Builder builder) {",
            "id = builder.id;",
            "name = builder.name;",
            "age = builder.age;",
            "}",
            "public long getId() {",
            "return id;",
            "}",
            "public Name getName() {",
            "return name;",
            "}",
            "public int getAge() {",
            "return age;",
            "}",
            "@JsonPOJOBuilder(withPrefix = \"set\")",
            "public static class Builder {",
            "private final long id;",
            "private Name name;",
            "private int age;",
            "@JsonCreator",
            "public Builder(@JsonProperty(\"emp_id\") long id) {",
            "this.id = id;",
            "}",
            "@JsonUnwrapped",
            "public void setName(Name name) {",
            "this.name = name;",
            "}",
            "@JsonProperty(\"emp_age\")",
            "public void setAge(int age) {",
            "this.age = age;",
            "}",
            "public Employee build() {",
            "return new Employee(this);",
            "}",
            "}",
            "}",
            "public class Name {",
            "private final String first;",
            "private final String last;",
            "@JsonCreator",
            "public Name(",
            "@JsonProperty(\"emp_first_name\") String first,",
            "@JsonProperty(\"emp_last_name\") String last",
            ") {",
            "this.first = first;",
            "this.last = last;",
            "}",
            "public String getFirst() {",
            "return first;",
            "}",
            "public String getLast() {",
            "return last;",
            "}",
            "}",
            "}",
            "Employee emp = new ObjectMapper().readValue(json, Employee.class);",
            "Employee emp = new ObjectMapper().readValue(json, Employee.class);",
            "Employee emp = new ObjectMapper().readValue(json, Employee.class);"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonUnwrapped"],
        "summary_text": [
            "Missing properties when deserializing using a builder class with a non-default constructor and a mutator annotated with @JsonUnwrapped"
        ],
        "desc_hints": [
            "JsonProperty",
            "this.name",
            "builder.name",
            "JsonDeserialize",
            "getAge",
            "JsonUnwrapped",
            "getName",
            "builder.id",
            "SettableBeanProperties",
            "emp.getId",
            "this.first",
            "getFirst",
            "ObjectMapper",
            "JsonPOJOBuilder",
            "Employee.class",
            "builder.age",
            "this.age",
            "BuilderBasedDeserializer",
            "deserializeUsingPropertyBasedWithUnwrapped",
            "readValue",
            "setAge",
            "setName",
            "emp.getName",
            "withPrefix",
            "getLast",
            "emp.getAge",
            "getId",
            "JsonCreator",
            "this.id",
            "Employee.Builder.class",
            "this.last",
            "System.out.println"
        ],
        "desc_text": [
            [
                "When deserializing using a builder class with a non-default constructor and any number of mutator methods annotated with @JsonUnwrapped, the BuilderBasedDeserializer::deserializeUsingPropertyBasedWithUnwrapped method cuts short the process of adding SettableBeanProperties.",
                ["OB", "SR"]
            ],
            [
                "The logic dictates that once all properties necessary to construct the builder have been found, the builder is constructed using all known SettableBeanProperties that have been found up to that point in the tokenizing process.",
                []
            ],
            [
                "Therefore, in the case that the builder has a single property required for construction, and that property is found anywhere other than at the end of the JSON content, any properties subsequent to the constructor property are not evaluated and are left with their default values.",
                ["OB"]
            ],
            ["Given the following classes:", ["OB", "SR"]],
            ["@JsonDeserialize(builder = Employee.Builder.class)", []],
            ["public class Employee {", "CODE"],
            ["private final long id;", "CODE"],
            ["private final Name name;", "CODE"],
            ["private final int age;", "CODE"],
            ["private Employee(Builder builder) {", "CODE"],
            ["id = builder.id;", "CODE"],
            ["name = builder.name;", "CODE"],
            ["age = builder.age;", "CODE"],
            ["}", "CODE"],
            ["public long getId() {", "CODE"],
            ["return id;", "CODE"],
            ["}", "CODE"],
            ["public Name getName() {", "CODE"],
            ["return name;", "CODE"],
            ["}", "CODE"],
            ["public int getAge() {", "CODE"],
            ["return age;", "CODE"],
            ["}", "CODE"],
            ["@JsonPOJOBuilder(withPrefix = \"set\")", "CODE"],
            ["public static class Builder {", "CODE"],
            ["private final long id;", "CODE"],
            ["private Name name;", "CODE"],
            ["private int age;", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public Builder(@JsonProperty(\"emp_id\") long id) {", "CODE"],
            ["this.id = id;", "CODE"],
            ["}", "CODE"],
            ["@JsonUnwrapped", "CODE"],
            ["public void setName(Name name) {", "CODE"],
            ["this.name = name;", "CODE"],
            ["}", "CODE"],
            ["@JsonProperty(\"emp_age\")", "CODE"],
            ["public void setAge(int age) {", "CODE"],
            ["this.age = age;", "CODE"],
            ["}", "CODE"],
            ["public Employee build() {", "CODE"],
            ["return new Employee(this);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public class Name {", "CODE"],
            ["private final String first;", "CODE"],
            ["private final String last;", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public Name(", "CODE"],
            ["@JsonProperty(\"emp_first_name\") String first,", "CODE"],
            ["@JsonProperty(\"emp_last_name\") String last", "CODE"],
            [") {", "CODE"],
            ["this.first = first;", "CODE"],
            ["this.last = last;", "CODE"],
            ["}", "CODE"],
            ["public String getFirst() {", "CODE"],
            ["return first;", "CODE"],
            ["}", "CODE"],
            ["public String getLast() {", "CODE"],
            ["return last;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["And given the following JSON string:", ["OB", "SR"]],
            ["{", []],
            ["\"emp_age\": 30,", []],
            ["\"emp_id\": 1234,", []],
            ["\"emp_first_name\": \"John\",", []],
            ["\"emp_last_name\": \"Doe\"", []],
            ["}", "CODE"],
            ["We will see the following output:", ["OB"]],
            [
                "Employee emp = new ObjectMapper().readValue(json, Employee.class);",
                "CODE"
            ],
            ["System.out.println(emp.getAge()); // 30", []],
            ["System.out.println(emp.getId()); // 1234", []],
            ["System.out.println(emp.getName()); // null", []],
            [
                "However, if we place the emp_id property at the end of the JSON string, we would get the following output:",
                ["OB"]
            ],
            [
                "Employee emp = new ObjectMapper().readValue(json, Employee.class);",
                "CODE"
            ],
            ["System.out.println(emp.getAge()); // 30", []],
            ["System.out.println(emp.getId()); // 1234", []],
            ["System.out.println(emp.getName()); // Name Object", []],
            [
                "If we were to place emp_age and emp_first_name and emp_last_name all after the emp_id property in the JSON string, we would get the following output:",
                ["OB"]
            ],
            [
                "Employee emp = new ObjectMapper().readValue(json, Employee.class);",
                "CODE"
            ],
            ["System.out.println(emp.getAge()); // 0", []],
            ["System.out.println(emp.getId()); // 1234", []],
            ["System.out.println(emp.getName()); // null", []]
        ]
    },
    "JacksonDatabind-93": {
        "code_elements": [
            "package org.springframework.security.core;",
            "import java.util.*;",
            "public class Authentication {",
            "private List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();",
            "public List<GrantedAuthority> getAuthorities() {",
            "return this.authorities;",
            "}",
            "public void setAuthorities(List<GrantedAuthority> authorities) {",
            "this.authorities = authorities;",
            "}",
            "}",
            "package org.springframework.security.core;",
            "String getAuthority();",
            "}",
            "public void validateSubTypeFailsWithNPE() throws Exception {",
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
            "String json = \"{\\\"@class\\\":\\\"org.springframework.security.core.Authentication\\\",\\\"authorities\\\":[\\\"java.util.ArrayList\\\",[]]}\";",
            "Authentication authentication = mapper.readValue(json, Authentication.class);",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(SubTypeValidator.java:86)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory._validateSubType(BeanDeserializerFactory.java:916)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:135)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:411)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
            "at com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(DeserializationContext.java:444)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual(CollectionDeserializer.java:183)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual(CollectionDeserializer.java:27)",
            "at com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(DeserializationContext.java:651)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:471)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
            "at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:477)",
            "at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:4178)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3997)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2992)"
        ],
        "summary_hints": [
            "SubTypeValidator.validateSubType",
            "NullPointerException"
        ],
        "summary_text": [
            "NullPointerException in SubTypeValidator.validateSubType when validating Spring interface"
        ],
        "desc_hints": [
            "getAuthority",
            "SubTypeValidator.validateSubType",
            "org.springframework.security.core",
            "com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer",
            "CollectionDeserializer.java",
            "com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization",
            "GrantedAuthority",
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType",
            "setAuthorities",
            "DeserializerCache.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "java.util.ArrayList",
            "JavaType.getRawClass",
            "_createDeserializer",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer",
            "com.fasterxml.jackson.databind.deser.DeserializerCache",
            "_createAndCacheValueDeserializer",
            "com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer",
            "_findRootDeserializer",
            "com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer",
            "ArrayList",
            "org.springframework.security.core.Authentication",
            "ObjectMapper",
            "_validateSubType",
            "_readMapAndClose",
            "BeanDeserializerBase.java",
            "_createAndCache2",
            "NullPointerException",
            "BeanDeserializerFactory.java",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "this.authorities",
            "mapper.readValue",
            "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual",
            "validateSubTypeFailsWithNPE",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve",
            "getAuthorities",
            "JsonTypeInfo.As.PROPERTY",
            "_createDeserializer2",
            "java.util",
            "SubTypeValidator.java",
            "DeserializationContext.java",
            "mapper.enableDefaultTyping",
            "ObjectMapper.java",
            "Authentication.class",
            "org.springframework",
            "java.lang.NullPointerException",
            "ObjectMapper.DefaultTyping.NON_FINAL"
        ],
        "desc_text": [
            [
                "In jackson-databind-2.8.11 jackson-databind-2.9.3 and jackson-databind-2.9.4-SNAPSHOT SubTypeValidator.validateSubType fails with a NullPointerException if the JavaType.getRawClass() is an interface that starts with org.springframework.",
                ["OB", "SR"]
            ],
            ["For example, the following will fail:", ["OB", "SR"]],
            ["package org.springframework.security.core;", "CODE"],
            ["import java.util.*;", "CODE"],
            ["public class Authentication {", "CODE"],
            [
                "private List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();",
                "CODE"
            ],
            ["public List<GrantedAuthority> getAuthorities() {", "CODE"],
            ["return this.authorities;", "CODE"],
            ["}", "CODE"],
            [
                "public void setAuthorities(List<GrantedAuthority> authorities) {",
                "CODE"
            ],
            ["this.authorities = authorities;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["package org.springframework.security.core;", "CODE"],
            ["public interface GrantedAuthority {", []],
            ["String getAuthority();", "CODE"],
            ["}", "CODE"],
            ["@Test", []],
            [
                "public void validateSubTypeFailsWithNPE() throws Exception {",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
                "CODE"
            ],
            [
                "String json = \"{\\\"@class\\\":\\\"org.springframework.security.core.Authentication\\\",\\\"authorities\\\":[\\\"java.util.ArrayList\\\",[]]}\";",
                "CODE"
            ],
            [
                "Authentication authentication = mapper.readValue(json, Authentication.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["with the following stacktrace:", ["OB", "SR"]],
            ["java.lang.NullPointerException", []],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(SubTypeValidator.java:86)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory._validateSubType(BeanDeserializerFactory.java:916)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:135)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:411)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(DeserializationContext.java:444)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual(CollectionDeserializer.java:183)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual(CollectionDeserializer.java:27)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(DeserializationContext.java:651)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:471)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:477)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:4178)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3997)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2992)",
                "STACK_TRACE"
            ],
            ["In prior versions, the test works.", ["OB"]]
        ]
    },
    "Cli-28": {
        "code_elements": [
            "Options opts = new Options();",
            "opts.addOption(\"a\", false, \"toggle -a\");",
            "opts.addOption(\"c\", \"c\", false, \"toggle -c\");",
            "opts.addOption(OptionBuilder.hasOptionalArg().create('e'));",
            "properties = new Properties();",
            "properties.setProperty( \"a\", \"false\" );",
            "properties.setProperty( \"c\", \"no\" );",
            "properties.setProperty( \"e\", \"0\" );",
            "cmd = parser.parse(opts, null, properties);",
            "assertTrue( !cmd.hasOption(\"a\") );",
            "assertTrue( !cmd.hasOption(\"c\") );",
            "properties = new Properties();",
            "properties.setProperty( \"a\", \"just a string\" );",
            "properties.setProperty( \"e\", \"\" );",
            "cmd = parser.parse(opts, null, properties);",
            "assertTrue( !cmd.hasOption(\"a\") );",
            "assertTrue( !cmd.hasOption(\"c\") );"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Default options may be partially processed"],
        "desc_hints": [
            "Parser.processProperties",
            "Parser.parse",
            "opts.addOption",
            "parser.parse",
            "assertTrue",
            "cmd.hasOption",
            "ValueTest",
            "OptionBuilder.hasOptionalArg",
            "properties.setProperty"
        ],
        "desc_text": [
            [
                "The Properties instance passed to the Parser.parse() method to initialize the default options may be partially processed.",
                ["OB"]
            ],
            [
                "This happens when the properties contains an option that doesn't accept arguments and has a default value that isn't evaluated to \"true\".",
                ["OB", "SR"]
            ],
            [
                "When this case occurs the processing of the properties is stopped and the remaining options are never handled.",
                ["OB"]
            ],
            [
                "This is caused by the break statement in Parser.processProperties(Properties), a continue statement should have been used instead.",
                ["OB", "EB"]
            ],
            [
                "The related test in ValueTest is also wrong, there are two assertions that need to be changed:",
                []
            ],
            ["Options opts = new Options();", "CODE"],
            ["opts.addOption(\"a\", false, \"toggle -a\");", "CODE"],
            ["opts.addOption(\"c\", \"c\", false, \"toggle -c\");", "CODE"],
            [
                "opts.addOption(OptionBuilder.hasOptionalArg().create('e'));",
                "CODE"
            ],
            ["properties = new Properties();", "CODE"],
            ["properties.setProperty( \"a\", \"false\" );", "CODE"],
            ["properties.setProperty( \"c\", \"no\" );", "CODE"],
            ["properties.setProperty( \"e\", \"0\" );", "CODE"],
            ["cmd = parser.parse(opts, null, properties);", "CODE"],
            ["assertTrue( !cmd.hasOption(\"a\") );", "CODE"],
            ["assertTrue( !cmd.hasOption(\"c\") );", "CODE"],
            [
                "assertTrue( !cmd.hasOption(\"e\") ); // Wrong, this option accepts an argument and should receive the value \"0\"",
                []
            ],
            ["and the second one:", ["OB"]],
            ["properties = new Properties();", "CODE"],
            ["properties.setProperty( \"a\", \"just a string\" );", "CODE"],
            ["properties.setProperty( \"e\", \"\" );", "CODE"],
            ["cmd = parser.parse(opts, null, properties);", "CODE"],
            ["assertTrue( !cmd.hasOption(\"a\") );", "CODE"],
            ["assertTrue( !cmd.hasOption(\"c\") );", "CODE"],
            [
                "assertTrue( !cmd.hasOption(\"e\") ); // Wrong, this option accepts an argument and should receive an empty string as value",
                []
            ]
        ]
    },
    "Closure-110": {
        "code_elements": [
            "goog.scope(function() {",
            "/* @private */",
            "function test() {}"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.scope"],
        "summary_text": ["Allow @private top-level functions in goog.scope"],
        "desc_hints": ["goog.scope"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["goog.scope(function() {", "CODE"],
            ["/* @private */", "CODE"],
            ["function test() {}", "CODE"],
            ["});", []],
            ["2.", ["OB", "SR"]],
            [
                "The code above gives an error \"The local variable test is in a goog.scope and is not an alias.\"",
                ["OB", "SR"]
            ],
            ["What is the expected output?", "QUERY"],
            [
                "The code above should compile, and function test() be referenceable only from inside the file in question.",
                ["OB", "EB", "SR"]
            ],
            [
                "If I replace \"function test\" with \"var test = function\", the code compiles.",
                ["OB", "SR"]
            ]
        ]
    },
    "Compress-47": {
        "code_elements": [
            "if (current.entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN) {",
            "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {",
            "current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
            "} else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {",
            "current.in = new ExplodingInputStream(",
            "current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),",
            "current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),",
            "new BoundedInputStream(in, current.entry.getCompressedSize()));",
            "} else if (current.entry.getMethod() == ZipMethod.BZIP2.getCode()) {",
            "current.in = new BZip2CompressorInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["ZipArchiveInputStream", "getNextZipEntry"],
        "summary_text": [
            "ZipArchiveInputStream#getNextZipEntry should verify compressed size is known for bzip2, implode etc."
        ],
        "desc_hints": [
            "BoundedInputStream",
            "getSlidingDictionarySize",
            "BZip2CompressorInputStream",
            "getNumberOfShannonFanoTrees",
            "ZipMethod.IMPLODING.getCode",
            "ZipMethod.BZIP2.getCode",
            "NullPointerException",
            "UnshrinkingInputStream",
            "ExplodingInputStream",
            "ArchiveEntry.SIZE_UNKNOWN",
            "current.entry.getCompressedSize",
            "ZipMethod.UNSHRINKING.getCode",
            "current.entry.getMethod",
            "current.entry.getGeneralPurposeBit",
            "current.in"
        ],
        "desc_text": [
            [
                "if (current.entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN) {",
                "CODE"
            ],
            [
                "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {",
                "CODE"
            ],
            [
                "current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
                "CODE"
            ],
            [
                "} else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {",
                "CODE"
            ],
            ["current.in = new ExplodingInputStream(", "CODE"],
            [
                "current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),",
                "CODE"
            ],
            [
                "current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),",
                "CODE"
            ],
            [
                "new BoundedInputStream(in, current.entry.getCompressedSize()));",
                "CODE"
            ],
            [
                "} else if (current.entry.getMethod() == ZipMethod.BZIP2.getCode()) {",
                "CODE"
            ],
            [
                "current.in = new BZip2CompressorInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "never sets current.in if the compressed size is unknown which probably leads to a NullPointerException in read later.",
                ["OB", "SR"]
            ],
            [
                "We should fail early with a useful error message instead.",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-84": {
        "code_elements": [
            "factory.setNamespaceAware(false);",
            "// (csueiras): We purposely remove any namespace because we get malformed HTML that might not be",
            "// declaring all of it's namespaces!",
            "Element el = doc.createElementNS(\"\", sourceEl.tagName());"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "W3CDom Helper fails to convert whenever some namespace declarations are missing"
        ],
        "desc_hints": [
            "org.w3c.dom.Document",
            "doc.createElementNS",
            "sourceEl.tagName",
            "factory.setNamespaceAware"
        ],
        "desc_text": [
            ["Hello", []],
            [
                "I've been running into an issue where if I convert my Jsoup parsed document into a org.w3c.dom.Document with the W3CDom helper and that document happens to be missing namespace declarations we get the following exception:",
                ["OB", "SR"]
            ],
            [
                "NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.",
                ["OB", "SR"]
            ],
            [
                "I've looked into this a bit and first thing I tried was using a locally forked version of the W3CDom helper that simply turned this flag off:",
                []
            ],
            ["factory.setNamespaceAware(false);", "CODE"],
            [
                "However the issue continued, so instead I simply hacked the code to completely ignore namespaces",
                []
            ],
            [
                "// (csueiras): We purposely remove any namespace because we get malformed HTML that might not be",
                "CODE"
            ],
            ["// declaring all of it's namespaces!", "CODE"],
            [
                "Element el = doc.createElementNS(\"\", sourceEl.tagName());",
                "CODE"
            ],
            [
                "I am not completely sure if this will have any side effects, but it resolved the issues with the document I'm interacting with.",
                ["OB"]
            ],
            [
                "I would be glad to provide a pull request if I have some guidance regarding how to properly handle this issue if it can be handled by Jsoup.",
                []
            ],
            [
                "The document I'm having issues is simply making use of the Facebook like buttons using tags like this:",
                ["SR"]
            ],
            ["<fb:like ...", []],
            ["But there's no namespace declaration for \"fb\".", ["OB"]]
        ]
    },
    "JxPath-2": {
        "code_elements": [
            "public static NodeSet observations(ExpressionContext context) {",
            "// the cast below shouldn't break, as this is the only pointer type that",
            "// makes sense in this context",
            "List<NodePointer> ptrs = extractObservations(",
            "(NodePointer)context.getContextNodePointer(),",
            "new ArrayList<NodePointer>());",
            "BasicNodeSet result = new BasicNodeSet();",
            "for (NodePointer ptr : ptrs)",
            "{",
            "result.add(ptr);",
            "}",
            "return result;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["NodeSet"],
        "summary_text": [
            "does not properly handle NodeSet returned by extension function"
        ],
        "desc_hints": [
            "JXPathContext.selectNodes",
            "Expression.PointerIterator",
            "BasicNodeSet",
            "context.getContextNodePointer",
            "extractObservations",
            "Expression.iteratePointers",
            "NodeSets",
            "Expression.iterate",
            "nodeSet",
            "NodeSet",
            "ArrayList",
            "result.add",
            "NodePointer",
            "ExpressionContext"
        ],
        "desc_text": [
            [
                "Per the documentation, my function is returning a BasicNodeSet containing zero",
                ["OB"]
            ],
            ["or more pointers:", []],
            [
                "public static NodeSet observations(ExpressionContext context) {",
                "CODE"
            ],
            [
                "// the cast below shouldn't break, as this is the only pointer type that",
                "CODE"
            ],
            ["// makes sense in this context", "CODE"],
            ["List<NodePointer> ptrs = extractObservations(", "CODE"],
            ["(NodePointer)context.getContextNodePointer(),", "CODE"],
            ["new ArrayList<NodePointer>());", "CODE"],
            ["BasicNodeSet result = new BasicNodeSet();", "CODE"],
            ["for (NodePointer ptr : ptrs)", "CODE"],
            ["{", "CODE"],
            ["result.add(ptr);", "CODE"],
            ["}", "CODE"],
            ["return result;", "CODE"],
            ["}", "CODE"],
            [
                "However, if I call JXPathContext.selectNodes(\"ems:observations()\"), I'm getting",
                ["OB"]
            ],
            ["a single node containing the BasicNodeSet.", ["OB"]],
            ["I notice that there is a testcase for", []],
            [
                "functions that return NodeSets, but that it uses expressions that actually",
                ["OB", "SR"]
            ],
            [
                "return the children of the NodeSet (\"test:nodeSet()/name\").",
                ["OB"]
            ],
            ["There appear to be two problems.", ["OB"]],
            ["First, Expression.iterate() and", []],
            [
                "Expression.iteratePointers() do not correctly recognize a NodeSet as something",
                ["OB"]
            ],
            ["iterable.", ["OB"]],
            [
                "I've resolved this by reaching into the NodeSet and getting an",
                ["OB"]
            ],
            ["iterator over its pointers.", ["OB"]],
            [
                "Second, Expression.PointerIterator doesn't recognize when it already has a",
                ["OB"]
            ],
            [
                "pointer, and instead tries to wrap it in a new pointer.",
                ["OB", "SR"]
            ],
            ["This ends up treating", []],
            ["the pointer as a bean.", ["OB"]],
            [
                "I've made these changes, and written a testcase that uses an unadorned NodeSet",
                ["SR"]
            ],
            ["function.", ["OB"]],
            [
                "I also found a class that used a variable named \"enum\", and changed",
                ["SR"]
            ],
            ["this so that it would compile under 1.5.", []],
            ["The patch is attached.", []],
            ["It's relative to \"commons-jxpath-1.2\" (root of extract", []],
            ["directory).", ["OB"]]
        ]
    },
    "Closure-118": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// @formatting pretty_print",
            "// ==/ClosureCompiler==",
            "/** @const */",
            "var foo = {};",
            "'bar1': function() { console.log('bar1'); }",
            "/** @constructor */",
            "function foobar() {}",
            "foobar.prototype = foo.bar;",
            "foo.foobar = new foobar;",
            "console.log(foo.foobar['bar1']);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Prototype method incorrectly removed"],
        "desc_hints": [
            "ClosureCompiler",
            "foo.bar",
            "foobar.prototype",
            "foo.foobar",
            "console.log",
            "default.js"
        ],
        "desc_text": [
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @formatting pretty_print", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["/** @const */", "CODE"],
            ["var foo = {};", "CODE"],
            ["foo.bar = {", []],
            ["'bar1': function() { console.log('bar1'); }", "CODE"],
            ["}", []],
            ["/** @constructor */", "CODE"],
            ["function foobar() {}", "CODE"],
            ["foobar.prototype = foo.bar;", "CODE"],
            ["foo.foobar = new foobar;", "CODE"],
            ["console.log(foo.foobar['bar1']);", "CODE"]
        ]
    },
    "Math-28": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["UnboundedSolutionException"],
        "summary_text": ["Not expected UnboundedSolutionException"],
        "desc_hints": ["UnboundedSolutionException", "SimplexSolver"],
        "desc_text": [
            [
                "SimplexSolver throws UnboundedSolutionException when trying to solve minimization linear programming problem.",
                ["OB"]
            ],
            [
                "The number of exception thrown depends on the number of variables.",
                ["OB"]
            ],
            [
                "In order to see that behavior of SimplexSolver first try to run JUnit test setting a final variable ENTITIES_COUNT = 2 and that will give almost good result and then set it to 15 and you'll get a massive of unbounded exceptions.",
                ["OB", "SR"]
            ],
            [
                "First iteration is runned with predefined set of input data with which the Solver gives back an appropriate result.",
                ["OB", "SR"]
            ],
            [
                "The problem itself is well tested by it's authors (mathematicians who I believe know what they developed) using Matlab 10 with no unbounded solutions on the same rules of creatnig random variables values.",
                []
            ],
            [
                "What is strange to me is the dependence of the number of UnboundedSolutionException exceptions on the number of variables in the problem.",
                ["OB"]
            ],
            ["The problem is formulated as", []],
            ["min(1*t + 0*L) (for every r-th subject)", ["OB"]],
            ["s.t.", []],
            ["-q(r) + QL >= 0", []],
            ["x(r)t - XL >= 0", []],
            ["L >= 0", []],
            ["where", []],
            ["r = 1..R,", ["OB", "SR"]],
            ["L =", []],
            ["{l(1), l(2), ..., l(R)}", []],
            ["(vector of R rows and 1 column),", ["OB", "SR"]],
            ["Q - coefficients matrix MxR", []],
            ["X - coefficients matrix NxR", []]
        ]
    },
    "Jsoup-5": {
        "code_elements": [
            "import static org.junit.Assert.assertTrue;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.safety.Whitelist;",
            "import org.junit.Test;",
            "public class BadAttributeTest {",
            "@test",
            "public void aTagWithABadAttributeIsValid() throws Exception {",
            "assertTrue(Jsoup.isValid(\"<a =a\", Whitelist.relaxed()));",
            "}",
            "}"
        ],
        "stack_traces": [
            "at java.lang.String.charAt(String.java:686)",
            "at org.jsoup.parser.TokenQueue.consume(TokenQueue.java:130)",
            "at org.jsoup.parser.Parser.parseAttribute(Parser.java:207)",
            "at org.jsoup.parser.Parser.parseStartTag(Parser.java:142)",
            "at org.jsoup.parser.Parser.parse(Parser.java:91)",
            "at org.jsoup.parser.Parser.parseBodyFragment(Parser.java:64)",
            "at org.jsoup.Jsoup.parseBodyFragment(Jsoup.java:99)",
            "at org.jsoup.Jsoup.isValid(Jsoup.java:155)"
        ],
        "summary_hints": ["StringIndexOutOfBoundsException"],
        "summary_text": [
            "StringIndexOutOfBoundsException when testing whether String content is valid HTML"
        ],
        "desc_hints": [
            "org.jsoup.parser.Parser.parseBodyFragment",
            "org.jsoup.Jsoup.isValid",
            "String.java",
            "TokenQueue.java",
            "org.jsoup.parser.Parser.parseAttribute",
            "org.jsoup.parser.TokenQueue.consume",
            "org.jsoup.Jsoup.parseBodyFragment",
            "BadAttributeTest",
            "Parser.java",
            "Whitelist.relaxed",
            "Jsoup.isValid",
            "aTagWithABadAttributeIsValid",
            "org.jsoup.Jsoup",
            "java.lang.StringIndexOutOfBoundsException",
            "assertTrue",
            "java.lang.String.charAt",
            "org.jsoup.parser.Parser.parseStartTag",
            "Jsoup.java",
            "org.junit.Assert.assertTrue",
            "StringIndexOutOfBoundsException",
            "org.junit.Test",
            "org.jsoup.parser.Parser.parse",
            "org.jsoup.safety.Whitelist"
        ],
        "desc_text": [
            [
                "If I try to parse a tag with an equals sign (an empty attribute) but without any single or double quotes around an attribute value, then I get a StringIndexOutOfBoundsException.",
                ["OB", "SR"]
            ],
            ["The stack trace is pasted below.", ["OB"]],
            ["An example String would be \"<a =a\"", []],
            [
                "The following JUnit test case should not throw a StringIndexOutOfBoundsException:",
                ["OB", "EB", "SR"]
            ],
            ["import static org.junit.Assert.assertTrue;", "CODE"],
            ["import org.jsoup.Jsoup;", "CODE"],
            ["import org.jsoup.safety.Whitelist;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["public class BadAttributeTest {", "CODE"],
            ["@test", "CODE"],
            [
                "public void aTagWithABadAttributeIsValid() throws Exception {",
                "CODE"
            ],
            [
                "assertTrue(Jsoup.isValid(\"<a =a\", Whitelist.relaxed()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "java.lang.StringIndexOutOfBoundsException: String index out of range: 13",
                []
            ],
            ["at java.lang.String.charAt(String.java:686)", "STACK_TRACE"],
            [
                "at org.jsoup.parser.TokenQueue.consume(TokenQueue.java:130)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.Parser.parseAttribute(Parser.java:207)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.parser.Parser.parseStartTag(Parser.java:142)",
                "STACK_TRACE"
            ],
            ["at org.jsoup.parser.Parser.parse(Parser.java:91)", "STACK_TRACE"],
            [
                "at org.jsoup.parser.Parser.parseBodyFragment(Parser.java:64)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.Jsoup.parseBodyFragment(Jsoup.java:99)",
                "STACK_TRACE"
            ],
            ["at org.jsoup.Jsoup.isValid(Jsoup.java:155)", "STACK_TRACE"]
        ]
    },
    "JacksonDatabind-69": {
        "code_elements": [
            "import static org.junit.Assert.assertEquals;",
            "import java.io.IOException;",
            "import org.junit.Test;",
            "import com.fasterxml.jackson.annotation.JsonCreator;",
            "import com.fasterxml.jackson.annotation.JsonProperty;",
            "import com.fasterxml.jackson.core.JsonParseException;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "public class TestJackson {",
            "public static final class SimplePojo {",
            "private final int intField;",
            "private final String stringField;",
            "public SimplePojo(@JsonProperty(\"intField\") int intField) {",
            "this(intField, \"empty\");",
            "}",
            "public SimplePojo(@JsonProperty(\"stringField\") String stringField) {",
            "this(-1, stringField);",
            "}",
            "@JsonCreator",
            "public SimplePojo(@JsonProperty(\"intField\") int intField, @JsonProperty(\"stringField\") String stringField) {",
            "this.intField = intField;",
            "this.stringField = stringField;",
            "}",
            "public int getIntField() {",
            "return intField;",
            "}",
            "public String getStringField() {",
            "return stringField;",
            "}",
            "}",
            "@Test",
            "public void testJackson() throws JsonParseException, IOException {",
            "ObjectMapper mapper = new ObjectMapper();",
            "SimplePojo pojo = mapper.readValue(\"{ \\\"intField\\\": 1, \\\"stringField\\\": \\\"foo\\\" }\", SimplePojo.class);",
            "assertEquals(1, pojo.getIntField());",
            "assertEquals(\"foo\", pojo.getStringField());",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:270)",
            "at com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(DeserializationContext.java:1234)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(BeanDeserializerFactory.java:551)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(BeanDeserializerFactory.java:226)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:141)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:403)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
            "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
            "at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:476)",
            "at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:3899)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3794)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2842)",
            "at TestJackson.testJackson(TestJackson.java:45)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:606)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)"
        ],
        "summary_hints": [],
        "summary_text": [
            "Wrong constructor picked up when deserializing object"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "JsonProperty",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.deser.DeserializerCache",
            "TestExecution.java",
            "SimplePojo",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "InvokeMethod.java",
            "org.junit.runners.ParentRunner.runChildren",
            "org.junit.runners.ParentRunner",
            "getIntField",
            "mapper.readValue",
            "this.stringField",
            "TestJackson.testJackson",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "ObjectMapper.java",
            "org.junit.runners.model.FrameworkMethod",
            "org.junit.runners.ParentRunner.run",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "ParentRunner.java",
            "pojo.getStringField",
            "pojo.getIntField",
            "assertEquals",
            "FrameworkMethod.java",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "_createAndCacheValueDeserializer",
            "org.junit.runners.ParentRunner.access",
            "_readMapAndClose",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps",
            "_createAndCache2",
            "com.fasterxml.jackson.core.JsonParseException",
            "this.intField",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "java.io.IOException",
            "getStringField",
            "com.fasterxml.jackson.databind.DeserializationContext.reportMappingException",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "_createDeserializer2",
            "DeserializationContext.java",
            "Method.java",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "ReflectiveCallable.java",
            "JUnit4TestReference.java",
            "_createDeserializer",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer",
            "com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer",
            "TestJackson.java",
            "_addDeserializerConstructors",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "BeanDeserializerFactory.java",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "TestJackson",
            "stringField",
            "java.lang.reflect.Method.invoke",
            "org.junit.Test",
            "JsonCreator",
            "runReflectiveCall",
            "JsonParseException",
            "BasicDeserializerFactory",
            "NativeMethodAccessorImpl.java",
            "DeserializerCache.java",
            "_findRootDeserializer",
            "org.junit.runners.ParentRunner.runLeaf",
            "com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer",
            "intField",
            "ObjectMapper",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "SimplePojo.class",
            "JsonMappingException.java",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "BlockJUnit4ClassRunner.java",
            "org.junit.Assert.assertEquals",
            "com.fasterxml.jackson.databind.JsonMappingException.from",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "org.apache.drill.TestJackson",
            "testJackson"
        ],
        "desc_text": [
            [
                "I discovered an issue with Jackson 2.7.8 (and Jackson 2.8.4) when several constructors have parameters annotated with @JsonProperty but only one is annotated with @JsonCreator.",
                ["OB"]
            ],
            ["Here's a test case to reproduce it:", ["SR"]],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonCreator;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonProperty;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonParseException;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["public class TestJackson {", "CODE"],
            ["public static final class SimplePojo {", "CODE"],
            ["private final int intField;", "CODE"],
            ["private final String stringField;", "CODE"],
            [
                "public SimplePojo(@JsonProperty(\"intField\") int intField) {",
                "CODE"
            ],
            ["this(intField, \"empty\");", "CODE"],
            ["}", "CODE"],
            [
                "public SimplePojo(@JsonProperty(\"stringField\") String stringField) {",
                "CODE"
            ],
            ["this(-1, stringField);", "CODE"],
            ["}", "CODE"],
            ["@JsonCreator", "CODE"],
            [
                "public SimplePojo(@JsonProperty(\"intField\") int intField, @JsonProperty(\"stringField\") String stringField) {",
                "CODE"
            ],
            ["this.intField = intField;", "CODE"],
            ["this.stringField = stringField;", "CODE"],
            ["}", "CODE"],
            ["public int getIntField() {", "CODE"],
            ["return intField;", "CODE"],
            ["}", "CODE"],
            ["public String getStringField() {", "CODE"],
            ["return stringField;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            [
                "public void testJackson() throws JsonParseException, IOException {",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "SimplePojo pojo = mapper.readValue(\"{ \\\"intField\\\": 1, \\\"stringField\\\": \\\"foo\\\" }\", SimplePojo.class);",
                "CODE"
            ],
            ["assertEquals(1, pojo.getIntField());", "CODE"],
            ["assertEquals(\"foo\", pojo.getStringField());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["This test throws an the following exception:", ["OB", "SR"]],
            [
                "com.fasterxml.jackson.databind.JsonMappingException: Could not find creator property with name 'stringField' (in class org.apache.drill.TestJackson$SimplePojo)",
                []
            ],
            [
                "at [Source: { \"intField\": 1, \"stringField\": \"foo\" }; line: 1, column: 1]",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:270)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(DeserializationContext.java:1234)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(BeanDeserializerFactory.java:551)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(BeanDeserializerFactory.java:226)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:141)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:403)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:476)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:3899)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3794)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2842)",
                "STACK_TRACE"
            ],
            ["at TestJackson.testJackson(TestJackson.java:45)", "STACK_TRACE"],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:606)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            [
                "After some debugging, it looks like that BasicDeserializerFactory#_addDeserializerConstructors(...) is looping over all the constructors, and is not favoring an explicit constructor over a non-explicit one.",
                ["OB"]
            ],
            [
                "I actually don't know what should be the expected behavior: should jackson fail when two constructors are annotated, or should jackson favor the one annotated with @JsonCreator.",
                ["OB", "EB"]
            ],
            [
                "Both options look reasonable to me (and I'm actually removing one of the constructors).",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-86": {
        "code_elements": [
            "/** @constructor */",
            "function Foo() {",
            "var self = this;",
            "window.setTimeout(function() {",
            "window.location = self.location;",
            "}, 0);",
            "}",
            "Foo.prototype.setLocation = function(loc) {",
            "this.location = loc;",
            "(new Foo()).setLocation('http://www.google.com/');"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "side-effects analysis incorrectly removing function calls with side effects"
        ],
        "desc_hints": [
            "this.location",
            "window.setTimeout",
            "window.location",
            "setLocation",
            "Foo.prototype.setLocation",
            "www.google.com",
            "self.location"
        ],
        "desc_text": [
            ["Sample Code:", []],
            ["---", []],
            ["/** @constructor */", "CODE"],
            ["function Foo() {", "CODE"],
            ["var self = this;", "CODE"],
            ["window.setTimeout(function() {", "CODE"],
            ["window.location = self.location;", "CODE"],
            ["}, 0);", "CODE"],
            ["}", "CODE"],
            ["Foo.prototype.setLocation = function(loc) {", "CODE"],
            ["this.location = loc;", "CODE"],
            ["};", []],
            ["(new Foo()).setLocation('http://www.google.com/');", "CODE"],
            ["---", []],
            ["The setLocation call will get removed in advanced mode.", ["OB"]]
        ]
    },
    "Cli-33": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter"],
        "summary_text": [
            "HelpFormatter strips leading whitespaces in the footer"
        ],
        "desc_hints": [
            "com.atlassian.jira.plugin.system.issuetabpanels",
            "cli.usage",
            "jira.codehaus.org",
            "CliBuilder"
        ],
        "desc_text": [
            [
                "I discovered a bug in Commons CLI while using it through Groovy's CliBuilder.",
                ["OB"]
            ],
            ["See the following issue:", ["OB"]],
            [
                "http://jira.codehaus.org/browse/GROOVY-4313?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel",
                []
            ],
            ["Copied:", []],
            ["The following code:", ["OB", "SR"]],
            ["def cli = new CliBuilder(footer: \"line1:\\n line2:\\n\")", []],
            ["cli.usage()", []],
            ["Produces the following output:", ["OB"]],
            ["line1", []],
            ["line2", []],
            ["Note that there are no whitespaces before \"line2\".", ["OB"]],
            [
                "Replacing them with \"\\t\" doesn't solve the problem either.",
                ["OB"]
            ]
        ]
    },
    "Math-65": {
        "code_elements": [
            "public double getRMS()",
            "{return Math.sqrt(getChiSquare()/rows);}"
        ],
        "stack_traces": [],
        "summary_hints": ["AbstractLeastSquares"],
        "summary_text": ["weight versus sigma in AbstractLeastSquares"],
        "desc_hints": [
            "getChiSquare",
            "residualsWeights",
            "AbstractLeastSquares",
            "getRMS",
            "Math.sqrt"
        ],
        "desc_text": [
            [
                "In AbstractLeastSquares, residualsWeights contains the WEIGHTS assigned to each observation.",
                ["OB"]
            ],
            [
                "In the method getRMS(), these weights are multiplicative as they should.",
                ["OB", "EB"]
            ],
            [
                "unlike in getChiSquare() where it appears at the denominator!",
                []
            ],
            [
                "If the weight is really the weight of the observation, it should multiply the square of the residual even in the computation of the chi2.",
                ["OB", "EB"]
            ],
            ["Once corrected, getRMS() can even reduce", []],
            ["public double getRMS()", "CODE"],
            ["{return Math.sqrt(getChiSquare()/rows);}", "CODE"]
        ]
    },
    "Closure-5": {
        "code_elements": [
            "(function(arg) {",
            "var foo = {};",
            "foo.bar = arg;",
            "console.log(foo.bar);",
            "delete foo.bar;",
            "console.log(foo.bar);",
            "})();",
            "(function(a){console.log(a);delete a;console.log(a)})();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Compiler ignores 'delete' statements, can break functionality."
        ],
        "desc_hints": ["foo.bar", "console.log"],
        "desc_text": [
            [
                "When the compiler rewrites internally-referenced object variables to non-object variables, as in the example below, it ignores 'delete' statements.",
                ["OB", "SR"]
            ],
            [
                "These delete statements work as expected with the objects originally written, but don't function the same when the variables are no longer object properties.",
                ["OB", "EB"]
            ],
            ["See:", ["OB"]],
            ["(function(arg) {", "CODE"],
            ["var foo = {};", "CODE"],
            ["foo.bar = arg;", "CODE"],
            ["console.log(foo.bar);", "CODE"],
            ["delete foo.bar;", "CODE"],
            ["console.log(foo.bar);", "CODE"],
            ["})();", "CODE"],
            ["Compiles to (simple setting):", []],
            [
                "(function(a){console.log(a);delete a;console.log(a)})();",
                "CODE"
            ],
            [
                "Perhaps the compiler needs to look for these delete statements and change them to setting the rewritten variable to undefined instead.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ZipException"],
        "summary_text": ["ZipException on reading valid zip64 file"],
        "desc_hints": [
            "ZipFile",
            "DotNetZip",
            "FileRoller",
            "ZipException",
            "WinFormsTool"
        ],
        "desc_text": [
            [
                "ZipFile zip = new ZipFile(new File(\"ordertest-64.zip\")); throws ZipException \"central directory zip64 extended information extra field's length doesn't match central directory data.",
                ["OB"]
            ],
            ["Expected length 16 but is 28\".", ["OB", "EB"]],
            [
                "The archive was created by using DotNetZip-WinFormsTool uzing zip64 flag (forces always to make zip64 archives).",
                ["OB"]
            ],
            [
                "Zip file is tested from the console: $zip -T ordertest-64.zip",
                []
            ],
            ["Output:", ["OB"]],
            ["test of ordertest-64.zip OK", []],
            [
                "I can open the archive with FileRoller without problem on my machine, browse and extract it.",
                ["OB", "SR"]
            ]
        ]
    },
    "Jsoup-57": {
        "code_elements": [
            "When testing out the removeIgnoreCase method, I'm now seeing a ConcurrentModificationException with code like: element.select(\"abc\").first().removeAttr(\"attr1\").removeAttr(\"attr2\");",
            "for (Iterator<Map.Entry<String, Attribute>> iter = attributes.entrySet().iterator(); iter.hasNext();) {",
            "Map.Entry<String, Attribute> entry = iter.next();",
            "if (entry.getKey().equalsIgnoreCase(\"key1\")) {",
            "iter.remove();",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "ConcurrentModificationException",
            "removeIgnoreCase"
        ],
        "summary_text": ["removeIgnoreCase ConcurrentModificationException"],
        "desc_hints": [
            "removeAttr",
            "LinkedHashMap",
            "equalsIgnoreCase",
            "entry.getKey",
            "iter.remove",
            "removeIgnoreCase",
            "iter.next",
            "Map.Entry",
            "ConcurrentModificationException",
            "iter.hasNext",
            "attributes.entrySet",
            "element.select"
        ],
        "desc_text": [
            [
                "When testing out the removeIgnoreCase method, I'm now seeing a ConcurrentModificationException with code like: element.select(\"abc\").first().removeAttr(\"attr1\").removeAttr(\"attr2\");",
                "CODE"
            ],
            [
                "It appears to be due to using a foreach loop over the LinkedHashMap to do the removal.",
                ["OB", "SR"]
            ],
            [
                "Changing to do the removal directly with an iterator fixes this issue.",
                ["SR"]
            ],
            ["Like so:", []],
            [
                "for (Iterator<Map.Entry<String, Attribute>> iter = attributes.entrySet().iterator(); iter.hasNext();) {",
                "CODE"
            ],
            ["Map.Entry<String, Attribute> entry = iter.next();", "CODE"],
            ["if (entry.getKey().equalsIgnoreCase(\"key1\")) {", "CODE"],
            ["iter.remove();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Jsoup-27": {
        "code_elements": [
            "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
            "docData = Charset.forName(charsetName).decode(byteData).toString();",
            "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
            "docData = Charset.forName(charsetName).decode(byteData).toString();",
            "} catch(UnsupportedCharsetException e){",
            "return parseByteData(byteData,(String)null,baseUri,parser);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Invalid HTTP-Response header leads to exception"],
        "desc_hints": [
            "charsetName",
            "Validate.notEmpty",
            "baseUri",
            "toString",
            "docData",
            "parseByteData",
            "byteData",
            "UnsupportedCharsetException",
            "org.jsoup.helper.DataUtil",
            "Charset.forName"
        ],
        "desc_text": [
            [
                "In particular case a HTTP-Webpage responses with a invalid HTTP-Charset field (delivered UFT8 instead of UTF8).",
                ["OB", "EB", "SR"]
            ],
            [
                "This leads to an UnsupportedCharsetException in org.jsoup.helper.DataUtil at around Line 93(?) where :",
                []
            ],
            [
                "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
                "CODE"
            ],
            [
                "docData = Charset.forName(charsetName).decode(byteData).toString();",
                "CODE"
            ],
            [
                "I fixed it by wrapping a try catch statement around these two lines such that:",
                []
            ],
            ["try{", []],
            [
                "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
                "CODE"
            ],
            [
                "docData = Charset.forName(charsetName).decode(byteData).toString();",
                "CODE"
            ],
            ["} catch(UnsupportedCharsetException e){", "CODE"],
            [
                "return parseByteData(byteData,(String)null,baseUri,parser);",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "It now falls back to the none charset argument assigned clause, and tries to detect the character set via HTML.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-60": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "void function () {}(); wrongly identified as having no side effects"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "This code results in the execution of the function and should not be identified as having no side effects.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-125": {
        "code_elements": [
            "var test = {};",
            "/**",
            "* @interface",
            "*/",
            "test.T = function() {};",
            "/**",
            "* @constructor",
            "* @implements {test.T}",
            "*/",
            "test.A = function() {};",
            "/**",
            "* @constructor",
            "* @implements {test.T}",
            "*/",
            "test.B = function() {};",
            "/**",
            "* @constructor",
            "*/",
            "test.X = function() {",
            "this.type = test.A;",
            "this.t = this.f();",
            "/**",
            "* @return {test.T}",
            "*/",
            "test.X.prototype.f = function() {",
            "if (this.type === test.A) {",
            "return new test.A();",
            "} else if (this.type === test.B) {",
            "return new test.B();",
            "}"
        ],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:715)",
            "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:647)",
            "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:603)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:783)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:379)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:972)",
            "Caused by: java.lang.IllegalStateException",
            "at com.google.common.base.Preconditions.checkState(Preconditions.java:133)",
            "at com.google.javascript.rhino.jstype.FunctionType.getInstanceType(FunctionType.java:1071)",
            "at com.google.javascript.jscomp.TypeCheck.visitNew(TypeCheck.java:1567)",
            "at com.google.javascript.jscomp.TypeCheck.visit(TypeCheck.java:569)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:569)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:522)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:353)",
            "at com.google.javascript.jscomp.TypeCheck.check(TypeCheck.java:400)",
            "at com.google.javascript.jscomp.TypeCheck.process(TypeCheck.java:371)",
            "at com.google.javascript.jscomp.DefaultPassConfig$30$1.process(DefaultPassConfig.java:1237)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:293)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:237)",
            "at com.google.javascript.jscomp.Compiler.check(Compiler.java:830)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:742)",
            "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:83)",
            "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:650)",
            "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:647)",
            "at com.google.javascript.jscomp.Compiler$3.call(Compiler.java:677)",
            "at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
            "at java.util.concurrent.FutureTask.run(FutureTask.java:138)",
            "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)",
            "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)",
            "at java.lang.Thread.run(Thread.java:680)"
        ],
        "summary_hints": [
            "IllegalStateException",
            "com.google.javascript.rhino.jstype.FunctionType.getInstanceType"
        ],
        "summary_text": [
            "IllegalStateException at com.google.javascript.rhino.jstype.FunctionType.getInstanceType"
        ],
        "desc_hints": [
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.TypeCheck.visit",
            "PhaseOptimizer.java",
            "Thread.java",
            "com.google.javascript.jscomp.TypeCheck.process",
            "com.google.javascript.jscomp.TypeCheck.check",
            "TypeCheck.java",
            "this.type",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "java.util.concurrent.FutureTask.run",
            "java.lang.Thread.run",
            "Worker.run",
            "com.google.javascript.jscomp.NodeTraversal.traverseFunction",
            "java.util.concurrent.FutureTask",
            "AbstractCommandLineRunner.java",
            "NodeTraversal.java",
            "FunctionType.java",
            "Worker.runTask",
            "CommandLineRunner.java",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "FutureTask.java",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "crash.js",
            "com.google.javascript.jscomp.NodeTraversal.traverseWithScope",
            "com.google.javascript.jscomp.Compiler",
            "Sync.innerRun",
            "NamedPass.process",
            "Preconditions.java",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "ThreadPoolExecutor.java",
            "com.google.javascript.jscomp.Compiler.check",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "DefaultPassConfig.java",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "java.lang.IllegalStateException",
            "compiler.jar",
            "com.google.common.base.Preconditions.checkState",
            "com.google.javascript.jscomp.TypeCheck.visitNew",
            "java.util.concurrent.ThreadPoolExecutor",
            "com.google.javascript.rhino.jstype.FunctionType.getInstanceType",
            "Compiler.java",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch",
            "com.google.javascript.jscomp.DefaultPassConfig"
        ],
        "desc_text": [
            ["> What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Unpack attached test case.", ["OB", "SR"]],
            ["2.", ["OB", "SR"]],
            ["Ensure make, wget, unzip, and java are on your PATH", []],
            ["3.", ["OB", "SR"]],
            [
                "make prep (or just set up the build manually, it's not complicated)",
                []
            ],
            ["4.", ["OB", "SR"]],
            ["make crash", ["OB"]],
            [
                "> What is the expected output? What do you see instead?",
                "QUERY"
            ],
            [
                "Expected output: either successful compilation, or a compilation error.",
                ["OB", "EB"]
            ],
            ["Actual output:", ["OB"]],
            ["$ java \\", []],
            ["-jar ./compiler.jar \\", ["OB"]],
            ["--js crash.js \\", ["SR"]],
            ["--warning_level=VERBOSE \\", []],
            ["--compilation_level=SIMPLE_OPTIMIZATIONS", []],
            ["java.lang.RuntimeException: java.lang.IllegalStateException", []],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:715)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:647)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:603)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:783)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:379)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:972)",
                "STACK_TRACE"
            ],
            ["Caused by: java.lang.IllegalStateException", "STACK_TRACE"],
            [
                "at com.google.common.base.Preconditions.checkState(Preconditions.java:133)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.rhino.jstype.FunctionType.getInstanceType(FunctionType.java:1071)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.visitNew(TypeCheck.java:1567)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.visit(TypeCheck.java:569)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:569)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:522)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:353)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.check(TypeCheck.java:400)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.TypeCheck.process(TypeCheck.java:371)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.DefaultPassConfig$30$1.process(DefaultPassConfig.java:1237)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:293)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:237)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.check(Compiler.java:830)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:742)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:83)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:650)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:647)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$3.call(Compiler.java:677)",
                "STACK_TRACE"
            ],
            [
                "at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "STACK_TRACE"
            ],
            [
                "at java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "STACK_TRACE"
            ],
            [
                "at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)",
                "STACK_TRACE"
            ],
            [
                "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Thread.java:680)", "STACK_TRACE"],
            ["make: *** [crash] Error 254", ["OB"]],
            [
                "> What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["closure-compiler release 20130411.", ["OB"]],
            [
                "I have also encountered this error on earlier versions of closure-compiler, but the above repro recipe uses 20130411.",
                ["OB", "SR"]
            ],
            [
                "I'm currently testing on OS X but this probably happens on other platforms too.",
                []
            ],
            ["> Please provide any additional information below.", "QUERY"],
            [
                "Here's the contents of crash.js (included in the attached archive):",
                ["SR"]
            ],
            ["-----begin snip-----", []],
            ["var test = {};", "CODE"],
            ["/**", "CODE"],
            ["* @interface", "CODE"],
            ["*/", "CODE"],
            ["test.T = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @implements {test.T}", "CODE"],
            ["*/", "CODE"],
            ["test.A = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @implements {test.T}", "CODE"],
            ["*/", "CODE"],
            ["test.B = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["test.X = function() {", "CODE"],
            ["this.type = test.A;", "CODE"],
            ["this.t = this.f();", "CODE"],
            ["};", []],
            ["/**", "CODE"],
            ["* @return {test.T}", "CODE"],
            ["*/", "CODE"],
            ["test.X.prototype.f = function() {", "CODE"],
            ["if (this.type === test.A) {", "CODE"],
            ["return new test.A();", "CODE"],
            ["} else if (this.type === test.B) {", "CODE"],
            ["return new test.B();", "CODE"],
            ["}", "CODE"],
            ["};", []],
            ["-----end snip-----", []]
        ]
    },
    "JxPath-20": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "relational operations do not function properly when comparing a non-Iterator LHS to an Iterator RHS"
        ],
        "desc_hints": ["JXpathContext"],
        "desc_text": [
            [
                "I have a simple JXpathContext, with the following variables: var1=0, var2=0, var3=1.",
                ["OB", "SR"]
            ],
            [
                "When I try to evaluate the following expression - \"$var1 + $var2 <= $var3\", it returns false.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonCore-21": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FilteringParserDelegate"],
        "summary_text": [
            "FilteringParserDelegate seems to miss last closing END_OBJECT"
        ],
        "desc_hints": [
            "JsonParser",
            "includePath",
            "FilteringParserDelegate",
            "NameMatchFilter",
            "multipleMatches"
        ],
        "desc_text": [
            ["(note: adding a failing test for this case)", []],
            ["Looks like with settings like:", ["SR"]],
            ["JsonParser p = new FilteringParserDelegate(p0,", []],
            ["new NameMatchFilter(\"value\"),", ["OB"]],
            ["true, // includePath", []],
            ["false // multipleMatches", []],
            [");", []],
            ["and input", ["OB"]],
            ["{", []],
            ["\"a\":123,", []],
            ["\"array\":[1,2],", []],
            ["\"ob\": {", []],
            ["\"value0\":2,", []],
            ["\"value\":3,", ["SR"]],
            ["\"value2\":4", []],
            ["},", []],
            ["\"b\":true", []],
            ["}", []],
            ["output will be like:", ["OB"]],
            ["{\"ob\":{\"value\":3}", []],
            ["(note the missing trailing } for closing END_OBJECT)", []]
        ]
    },
    "Closure-39": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["externExport"],
        "summary_text": [
            "externExport with @typedef can generate invalid externs"
        ],
        "desc_hints": ["externExport"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Create a file that has a @typedef and code referencing the type def above and below the typedef declaration.",
                ["OB", "SR"]
            ],
            ["2.", ["OB", "SR"]],
            [
                "Run the closure compiler and grab the externExport string stored on the last result for review.",
                ["OB", "SR"]
            ],
            ["3.", ["OB", "SR"]],
            [
                "I have attached both source and output files displaying the issue.",
                ["OB"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "The code above the @typedef references the aliased name of the @typedef as expected however the code below the @typedef tries embedding the body of the @typedef and ends up truncating it if the length is too long with a \"...\".",
                ["OB", "EB", "SR"]
            ],
            [
                "This throws bad type errors when compiling against this extern.",
                ["OB"]
            ],
            [
                "What is odd is this only seems to be the case when the parameter with the type is optional.",
                ["OB"]
            ],
            [
                "When neither are optional it embeds the types, which is not a big deal, except when types are long; they get truncated and throw errors.",
                ["OB", "EB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["plovr built from revision 3103:d6db24beeb7f", []],
            ["Revision numbers for embedded Closure Tools:", []],
            ["Closure Library:  1374", []],
            ["Closure Compiler: 1559", []],
            ["Closure Templates:  23", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Lang-65": {
        "code_elements": [
            "// truncate 2004-10-31 01:00:00 MDT",
            "Date result = DateUtils.truncate(oct31_01MDT, Calendar.HOUR_OF_DAY);",
            "assertEquals(oct31_01MDT, result);"
        ],
        "stack_traces": [],
        "summary_hints": ["DateUtils.truncate"],
        "summary_text": [
            "[lang] DateUtils.truncate method is buggy when dealing with DST switching hours"
        ],
        "desc_hints": [
            "DateUtils.truncate",
            "assertEquals",
            "Calendar.HOUR_OF_DAY"
        ],
        "desc_text": [
            [
                "Try to truncate 2004-10-31 01:00:00 MDT by hour and you'll actually get 2004-10-",
                ["OB", "SR"]
            ],
            [
                "31 01:00:00 MST, which is one hour after the input hour.",
                ["OB"]
            ],
            ["// truncate 2004-10-31 01:00:00 MDT", "CODE"],
            ["Date oct31_01MDT = new Date(1099206000000L);", []],
            [
                "Date result = DateUtils.truncate(oct31_01MDT, Calendar.HOUR_OF_DAY);",
                "CODE"
            ],
            ["assertEquals(oct31_01MDT, result);", "CODE"]
        ]
    },
    "JacksonDatabind-27": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Problem deserializing External Type Id if type id comes before POJO"
        ],
        "desc_hints": ["FasterXML", "nextFieldName"],
        "desc_text": [
            [
                "(note: seems to be similar or related to FasterXML/jackson-module-afterburner#58)",
                []
            ],
            [
                "With 2.6, looks like handling of External Type Id is broken in some rare (?) cases; existing unit tests did not catch this.",
                []
            ],
            [
                "At this point I am speculating this is due to some refactoring, or change to use more efficient 'nextFieldName()' method.",
                []
            ]
        ]
    },
    "Gson-8": {
        "code_elements": [
            "gson=new Gson();",
            "String jsonObj=getIntent().getStringExtra(\"feedItem\");",
            "item = gson.fromJson(jsonObj, FeedItem.class);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["JNI Error in Android"],
        "desc_hints": [
            "feedTopic",
            "FeedItem.class",
            "android.app.ActivityThread",
            "feedDesc",
            "isDeleted",
            "Handler.java",
            "UnsafeAllocator.java",
            "hashedObjects",
            "gson.fromJson",
            "objectId",
            "createdBy",
            "android.os.Handler.dispatchMessage",
            "ConstructorConstructor.java",
            "saveEvent",
            "Adapter.read",
            "ActivityThread.java",
            "isComplete",
            "createdAt",
            "java.util.concurrent.locks.Lock",
            "android.app.Activity.performCreate",
            "Activity.java",
            "getIntent",
            "android.app.ActivityThread.handleLaunchActivity",
            "android.app.ActivityThread.main",
            "sysTid",
            "ZygoteInit.java",
            "serverData",
            "com.google.gson.internal.ConstructorConstructor",
            "handleMessage",
            "feedItem",
            "className",
            "FeedItem",
            "newInstance",
            "jsonObj",
            "AllocObject",
            "getStringExtra",
            "feedComments",
            "TestTopic",
            "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
            "b5.project.medibro.FeedItemDetails.onCreate",
            "updatedAt",
            "feedItemChannel",
            "Gson.java",
            "java.lang.Class",
            "isDeletingEventually",
            "FeedItemDetails.java",
            "dsCount",
            "java.lang.Object",
            "android.app.ActivityThread.performLaunchActivity",
            "com.android.internal.os.ZygoteInit",
            "taskQueue",
            "com.google.gson.Gson.fromJson",
            "estimatedData",
            "java.lang.reflect.Method.invoke",
            "android.os.Looper.loop",
            "feedQuestion",
            "sun.misc.Unsafe.allocateInstance",
            "Looper.java",
            "com.android.internal.os.ZygoteInit.main",
            "mdldsrgXN1",
            "com.google.gson.internal.UnsafeAllocator",
            "MethodAndArgsCaller.run",
            "KXTQtpfBSW",
            "operationSetQueue",
            "android.app.Instrumentation.callActivityOnCreate",
            "Instrumentation.java",
            "ReflectiveTypeAdapterFactory.java",
            "stackSize"
        ],
        "desc_text": [
            [
                "I am getting a 'JNI DETECTED AN ERROR IN APPLICATION\" while using gson 2.5.jar in Android.",
                ["OB"]
            ],
            ["Can anyone tell me how to solve this?", []],
            ["Appreciate it.", ["OB"]],
            ["I am using a sub-class of Parse Object using Parse SDK.", []],
            ["Here is the stack trace:", ["OB"]],
            [
                "03-28 14:01:15.445: E/art(28683): JNI DETECTED ERROR IN APPLICATION: can't make objects of type java.util.concurrent.locks.Lock: 0x70dd7858",
                ["OB"]
            ],
            ["03-28 14:01:15.445: E/art(28683):   in call to AllocObject", []],
            [
                "03-28 14:01:15.445: E/art(28683):   from java.lang.Object sun.misc.Unsafe.allocateInstance(java.lang.Class)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): \"main\" prio=5 tid=1 Runnable",
                ["SR"]
            ],
            [
                "03-28 14:01:15.445: E/art(28683): | group=\"main\" sCount=0 dsCount=0 obj=0x7617aef8 self=0x7fa917c400",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): | sysTid=28683 nice=0 cgrp=default sched=0/0 handle=0x7face5d2c0",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): | state=R schedstat=( 657346072 17671229 611 ) utm=52 stm=13 core=1 HZ=100",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): | stack=0x7fe28ac000-0x7fe28ae000 stackSize=8MB",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): | held mutexes= \"mutator lock\"(shared held)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at sun.misc.Unsafe.allocateInstance(Native method)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at java.lang.reflect.Method.invoke!(Native method)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.UnsafeAllocator$1.newInstance(UnsafeAllocator.java:48)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.ConstructorConstructor$14.construct(ConstructorConstructor.java:223)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:207)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.Gson.fromJson(Gson.java:861)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.Gson.fromJson(Gson.java:826)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.Gson.fromJson(Gson.java:775)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.google.gson.Gson.fromJson(Gson.java:747)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at b5.project.medibro.FeedItemDetails.onCreate(FeedItemDetails.java:47)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.Activity.performCreate(Activity.java:6583)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1114)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2531)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2666)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.ActivityThread.-wrap11(ActivityThread.java:-1)",
                ["SR"]
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1493)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.os.Handler.dispatchMessage(Handler.java:111)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.os.Looper.loop(Looper.java:207)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at android.app.ActivityThread.main(ActivityThread.java:5769)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at java.lang.reflect.Method.invoke!(Native method)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:789)",
                []
            ],
            [
                "03-28 14:01:15.445: E/art(28683): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:679)",
                []
            ],
            ["The error is occurring at the last line of this code:", []],
            ["gson=new Gson();", "CODE"],
            [
                "String jsonObj=getIntent().getStringExtra(\"feedItem\");",
                "CODE"
            ],
            ["item = gson.fromJson(jsonObj, FeedItem.class);", "CODE"],
            ["I have logged the json string which I am getting.", ["OB"]],
            ["The formatted json string is", ["OB"]],
            ["{", []],
            ["\"feedItemChannel\":\"mdldsrgXN1\",", []],
            ["\"estimatedData\":{", []],
            ["\"feedTopic\":\"Testing\",", []],
            ["\"feedComments\":2,", []],
            ["\"createdBy\":\"KXTQtpfBSW\",", []],
            ["\"feedQuestion\":\"Test Question \",", []],
            ["\"feedDesc\":\"Test \"", []],
            ["},", []],
            ["\"hashedObjects\":{", []],
            ["},", []],
            ["\"isDeleted\":false,", []],
            ["\"isDeletingEventually\":0,", []],
            ["\"mutex\":{", []],
            ["},", []],
            ["\"operationSetQueue\":[", []],
            ["{", []],
            ["}", []],
            ["],", []],
            ["\"saveEvent\":{", []],
            ["\"callbacks\":[", []],
            ["]", []],
            ["},", []],
            ["\"state\":{", []],
            ["\"className\":\"FeedItem\",", []],
            ["\"createdAt\":1458798818385,", []],
            ["\"isComplete\":true,", []],
            ["\"objectId\":\"mdldsrgXN1\",", []],
            ["\"serverData\":{", []],
            ["\"feedTopic\":\"TestTopic\",", []],
            ["\"createdBy\":\"KXTQtpfBSW\",", []],
            ["\"feedComments\":2,", []],
            ["\"feedQuestion\":\"Test Question \",", []],
            ["\"feedDesc\":\"Test \"", []],
            ["},", []],
            ["\"updatedAt\":1458803553636", []],
            ["},", []],
            ["\"taskQueue\":{", []],
            ["\"lock\":{", []],
            ["\"sync\":{", []],
            ["\"state\":0", []],
            ["}", []],
            ["}", []],
            ["}", []],
            ["}", []]
        ]
    },
    "Lang-8": {
        "code_elements": [
            "// Always prints timezone name of machine's default timezone, ignoring TZ",
            "// set on calendar, even though the printed time itself respects calendar's TZ.",
            "Calendar myCal = Calendar.getInstance(TimeZone.getTimeZone(\"US/Central\"));",
            "System.out.println(FastDateFormat.getInstance(\"h:mma z\").format(myCal));"
        ],
        "stack_traces": [],
        "summary_hints": ["FastDateFormat"],
        "summary_text": [
            "FastDateFormat's \"z\" pattern does not respect timezone of Calendar instances passed to format()"
        ],
        "desc_hints": [
            "mTimeZone",
            "Calendar.getInstance",
            "TimeZone",
            "appendTo",
            "myCal",
            "FastDateFormat",
            "TimeZoneNameRule",
            "FastDateFormat.getInstance",
            "TimeZoneNumberRule",
            "TimeZone.getTimeZone",
            "getTimeZoneDisplay",
            "System.out.println"
        ],
        "desc_text": [
            [
                "The work on LANG-462 has introduced a time zone formatting bug in FastDateFormat in commons-lang3.",
                ["OB", "SR"]
            ],
            ["The problem can be seen by this snippet:", []],
            [
                "// Always prints timezone name of machine's default timezone, ignoring TZ",
                "CODE"
            ],
            [
                "// set on calendar, even though the printed time itself respects calendar's TZ.",
                "CODE"
            ],
            [
                "Calendar myCal = Calendar.getInstance(TimeZone.getTimeZone(\"US/Central\"));",
                "CODE"
            ],
            [
                "System.out.println(FastDateFormat.getInstance(\"h:mma z\").format(myCal));",
                "CODE"
            ],
            [
                "If you happen to be in US/Central, this will print the right thing, but just try it with US/Eastern, US/Pacific, etc.",
                ["OB", "SR"]
            ],
            [
                "It will print the time in the correct timezone, but the timezone name at the end (the \"z\" pattern) will always be the system default timezone.",
                ["OB"]
            ],
            ["This is a regression against commons-lang 2.x.", []],
            [
                "Basically, when the \"forced time zone\" code was removed, the TimeZoneNameRule class stopped respecting the Calendar instance's timezone, and instead now always uses the mTimeZone of the FastDateFormat instance itself (which is only supposed to be used when formatting timezone-less objects such as Date or long).",
                ["OB", "EB"]
            ],
            [
                "The removal of the forced time zone stuff is surely the right thing to do (it was a mess).",
                []
            ],
            [
                "I think the fix is to change the TimeZoneNameRule inner class to not take a TimeZone instance, but rather to use the TimeZone on the Calendar instance passed into appendTo(), just like TimeZoneNumberRule does.",
                []
            ],
            [
                "Presumably then for efficiency, one would use the getTimeZoneDisplay() package-static method to quickly retrieve the required timezone's display name.",
                ["OB", "SR"]
            ]
        ]
    },
    "Mockito-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Investigate why #125 did not trigger release"],
        "desc_hints": [],
        "desc_text": [["Investigate why #125 did not trigger release", ["OB"]]]
    },
    "JacksonDatabind-83": {
        "code_elements": [
            "// 05-May-2016, tatu: Unlike most usage, this seems legit, so...",
            "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
            "if (cause != null) {",
            "e.initCause(cause);",
            "}",
            "// nothing to do here, yet? We'll fail anyway",
            "import com.fasterxml.jackson.databind.DeserializationContext;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;",
            "import org.junit.Test;",
            "import java.io.IOException;",
            "import java.util.UUID;",
            "public class UUIDDeserializerTest {",
            "@Test",
            "public void itUsesDeserializationProblemHandlerProperly() throws IOException {",
            "ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {",
            "@Override",
            "public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {",
            "return null;",
            "}",
            "});",
            "mapper.readValue(\"{\\\"id\\\" : \\\"I am not a UUID\\\"}\", IdBean.class);",
            "}",
            "public static class IdBean {",
            "private UUID id;",
            "public UUID getId() {",
            "return id;",
            "}",
            "public void setId(final UUID id) {",
            "this.id = id;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)",
            "at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1504)",
            "at com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.deserialize(FromStringDeserializer.java:156)",
            "at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:127)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:287)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3999)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2980)"
        ],
        "summary_hints": [
            "DeserializationProblemHandler",
            "java.util.UUID",
            "FromStringDeserializer"
        ],
        "summary_text": [
            "FromStringDeserializer ignores registered DeserializationProblemHandler for java.util.UUID"
        ],
        "desc_hints": [
            "UUIDDeserializerTest",
            "failureMsg",
            "MethodProperty.java",
            "itUsesDeserializationProblemHandlerProperly",
            "valueToConvert",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "com.fasterxml.jackson.databind.exc.InvalidFormatException",
            "addHandler",
            "JsonMappingException",
            "_valueClass",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "com.fasterxml.jackson.databind.exc.InvalidFormatException.from",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "IdBean",
            "FromStringDeserializer.java",
            "handleWeirdStringValue",
            "initCause",
            "com.company.test.UUIDDeserializerTest",
            "BeanDeserializer.java",
            "FromStringDeserializer",
            "ObjectMapper",
            "com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet",
            "InvalidFormatException.java",
            "ctxt.weirdStringException",
            "IdBean.class",
            "_readMapAndClose",
            "com.fasterxml.jackson.databind.DeserializationContext.weirdStringException",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize",
            "targetType",
            "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.deserialize",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "mapper.readValue",
            "java.io.IOException",
            "DeserializationProblemHandler",
            "getId",
            "DeserializationContext.java",
            "ObjectMapper.java",
            "org.junit.Test",
            "DeserializationContext",
            "this.id",
            "java.util.UUID",
            "setId",
            "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler"
        ],
        "desc_text": [
            [
                "Culprit appears to be lines 155-161 of FromStringDeserializer:",
                []
            ],
            [
                "// 05-May-2016, tatu: Unlike most usage, this seems legit, so...",
                "CODE"
            ],
            [
                "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
                "CODE"
            ],
            ["if (cause != null) {", "CODE"],
            ["e.initCause(cause);", "CODE"],
            ["}", "CODE"],
            ["throw e;", []],
            ["// nothing to do here, yet? We'll fail anyway", "CODE"],
            [
                "The above lines appear to show that the exception will be thrown regardless of any problem handling logic.",
                ["OB"]
            ],
            ["Test Case:", []],
            [
                "import com.fasterxml.jackson.databind.DeserializationContext;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;",
                "CODE"
            ],
            ["import org.junit.Test;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import java.util.UUID;", "CODE"],
            ["public class UUIDDeserializerTest {", "CODE"],
            ["@Test", "CODE"],
            [
                "public void itUsesDeserializationProblemHandlerProperly() throws IOException {",
                "CODE"
            ],
            [
                "ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {",
                "CODE"
            ],
            ["return null;", "CODE"],
            ["}", "CODE"],
            ["});", "CODE"],
            [
                "mapper.readValue(\"{\\\"id\\\" : \\\"I am not a UUID\\\"}\", IdBean.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["public static class IdBean {", "CODE"],
            ["private UUID id;", "CODE"],
            ["public UUID getId() {", "CODE"],
            ["return id;", "CODE"],
            ["}", "CODE"],
            ["public void setId(final UUID id) {", "CODE"],
            ["this.id = id;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "The handler handles the issue properly; but an exception is thrown anyway:",
                []
            ],
            [
                "an not deserialize value of type java.util.UUID from String \"I am not a UUID\": not a valid textual representation",
                []
            ],
            [
                "at [Source: (String)\"{\"id\" : \"I am not a UUID\"}\"; line: 1, column: 9] (through reference chain: com.company.test.UUIDDeserializerTest$IdBean[\"id\"])",
                []
            ],
            [
                "com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.UUID from String \"I am not a UUID\": not a valid textual representation",
                []
            ],
            [
                "at [Source: (String)\"{\"id\" : \"I am not a UUID\"}\"; line: 1, column: 9] (through reference chain: com.company.test.UUIDDeserializerTest$IdBean[\"id\"])",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1504)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.deserialize(FromStringDeserializer.java:156)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:127)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:287)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3999)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2980)",
                "STACK_TRACE"
            ]
        ]
    },
    "Closure-55": {
        "code_elements": [],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:629)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:574)",
            "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:556)",
            "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:515)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:662)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:295)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:758)",
            "Caused by: java.lang.IllegalStateException: Expected function but was call Reference node CALL 128 [free_call: 1] [source_file: Settings.js]",
            "at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:51)",
            "at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:763)",
            "at com.google.javascript.jscomp.AstValidator.validateNodeType(AstValidator.java:768)",
            "at com.google.javascript.jscomp.AstValidator.validateFunctionExpression(AstValidator.java:359)",
            "at com.google.javascript.jscomp.AstValidator.validateObjectLitGetKey(AstValidator.java:696)",
            "at com.google.javascript.jscomp.AstValidator.validateObjectLitKey(AstValidator.java:677)",
            "at com.google.javascript.jscomp.AstValidator.validateObjectLit(AstValidator.java:670)",
            "at com.google.javascript.jscomp.AstValidator.validateExpression(AstValidator.java:252)",
            "at com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(AstValidator.java:603)",
            "at com.google.javascript.jscomp.AstValidator.validateExpression(AstValidator.java:219)",
            "at com.google.javascript.jscomp.AstValidator.validateExprStmt(AstValidator.java:476)",
            "at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:126)",
            "at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:89)",
            "at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:79)",
            "at com.google.javascript.jscomp.AstValidator.process(AstValidator.java:63)",
            "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:273)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:250)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:168)",
            "at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1634)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:664)",
            "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:70)",
            "at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:559)",
            "at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:556)",
            "at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:601)",
            "at java.lang.Thread.run(Thread.java:680)"
        ],
        "summary_hints": [],
        "summary_text": ["Exception when emitting code containing getters"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.AstValidator.violation",
            "PhaseOptimizer.java",
            "Thread.java",
            "handleViolation",
            "WebCore",
            "Settings.js",
            "com.google.javascript.jscomp.AstValidator.validateFunctionExpression",
            "trac.webkit.org",
            "com.google.javascript.jscomp.AstValidator.validateExpression",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "com.google.javascript.jscomp.AstValidator.validateCodeRoot",
            "com.google.javascript.jscomp.AstValidator",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.AstValidator.validateObjectLit",
            "com.google.javascript.jscomp.AstValidator.validateExprStmt",
            "com.google.javascript.jscomp.AstValidator.process",
            "AbstractCommandLineRunner.java",
            "CommandLineRunner.java",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "AstValidator.java",
            "com.google.javascript.jscomp.Compiler",
            "NamedPass.process",
            "com.google.javascript.jscomp.AstValidator.validateObjectLitGetKey",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "com.google.javascript.jscomp.AstValidator.validateStatement",
            "com.google.javascript.jscomp.AstValidator.validateAssignmentExpression",
            "com.google.javascript.jscomp.AstValidator.validateObjectLitKey",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.AstValidator.validateNodeType",
            "com.google.javascript.jscomp.Compiler.optimize",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "java.lang.IllegalStateException",
            "com.google.javascript.jscomp.AstValidator.validateScript",
            "Compiler.java",
            "com.google.javascript.jscomp.Compiler.runCallable"
        ],
        "desc_text": [
            [
                "Consider the following source code: http://trac.webkit.org/browser/trunk/Source/WebCore/inspector/front-end/Settings.js#L123",
                ["OB", "SR"]
            ],
            [
                "Following exception fires unless I remove the \"get name()\" getter from the code.",
                ["OB"]
            ],
            [
                "java.lang.RuntimeException: java.lang.IllegalStateException: Expected function but was call Reference node CALL 128 [free_call: 1] [source_file: Settings.js]",
                ["EB"]
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:629)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:574)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:556)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:515)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:662)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:295)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:758)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.IllegalStateException: Expected function but was call Reference node CALL 128 [free_call: 1] [source_file: Settings.js]",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:51)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:763)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateNodeType(AstValidator.java:768)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateFunctionExpression(AstValidator.java:359)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateObjectLitGetKey(AstValidator.java:696)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateObjectLitKey(AstValidator.java:677)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateObjectLit(AstValidator.java:670)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateExpression(AstValidator.java:252)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(AstValidator.java:603)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateExpression(AstValidator.java:219)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateExprStmt(AstValidator.java:476)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:126)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:89)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:79)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AstValidator.process(AstValidator.java:63)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:273)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:250)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:168)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1634)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:664)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:70)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:559)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:556)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:601)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Thread.java:680)", "STACK_TRACE"]
        ]
    },
    "Closure-161": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @output_file_name default.js",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// ==/ClosureCompiler==",
            "var Mdt=[];",
            "Mdt[11] = ['22','19','19','16','21','18','16','20','17','17','21','17'];"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "peephole constants folding pass is trying to fold [][11] as if it were a property lookup instead of a property assignment"
        ],
        "desc_hints": ["ClosureCompiler", "default.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.Try on line CC with Advance", ["OB", "SR"]],
            ["2.On the following 2-line code", ["OB", "SR"]],
            ["3.", ["OB", "SR"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["var Mdt=[];", "CODE"],
            [
                "Mdt[11] = ['22','19','19','16','21','18','16','20','17','17','21','17'];",
                "CODE"
            ],
            ["The error:", ["OB"]],
            [
                "JSC_INDEX_OUT_OF_BOUNDS_ERROR: Array index out of bounds: NUMBER 11.0",
                []
            ],
            ["2 [sourcename: Input_0] : number at line 2 character 4", ["SR"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["The online version on 201.07.27", ["OB"]]
        ]
    },
    "Csv-2": {
        "code_elements": [
            "public void testInvalidHeaderTooLong() throws Exception {",
            "final CSVParser parser = new CSVParser(\"a,b\", CSVFormat.newBuilder().withHeader(\"A\", \"B\", \"C\").build());",
            "final CSVRecord record = parser.iterator().next();",
            "record.get(\"C\");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "CSVRecord does not verify that the length of the header mapping matches the number of values"
        ],
        "desc_hints": [
            "parser.iterator",
            "record.get",
            "testInvalidHeaderTooLong",
            "ArrayOutOfBoundsException",
            "withHeader",
            "CSVFormat.newBuilder"
        ],
        "desc_text": [
            [
                "CSVRecord does not verify that the size of the header mapping matches the number of values.",
                ["OB"]
            ],
            [
                "The following test will produce a ArrayOutOfBoundsException:",
                ["OB", "SR"]
            ],
            ["@Test", []],
            [
                "public void testInvalidHeaderTooLong() throws Exception {",
                "CODE"
            ],
            [
                "final CSVParser parser = new CSVParser(\"a,b\", CSVFormat.newBuilder().withHeader(\"A\", \"B\", \"C\").build());",
                "CODE"
            ],
            ["final CSVRecord record = parser.iterator().next();", "CODE"],
            ["record.get(\"C\");", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Math-67": {
        "code_elements": [
            "public double getResult() {",
            "return optima[0];",
            "}",
            "public double getFunctionValue() {",
            "return optimaValues[0];",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["getResult", "MultiStartUnivariateRealOptimizer"],
        "summary_text": [
            "Method \"getResult()\" in \"MultiStartUnivariateRealOptimizer\""
        ],
        "desc_hints": [
            "getResult",
            "MultiStartUnivariateRealOptimizer",
            "getFunctionValue",
            "optimaValues"
        ],
        "desc_text": [
            [
                "In \"MultiStartUnivariateRealOptimizer\" (package \"optimization\"), the method \"getResult\" returns the result of the last run of the \"underlying\" optimizer; this last result might not be the best one, in which case it will not correspond to the value returned by the \"optimize\" method.",
                ["OB"]
            ],
            ["This is confusing and does not seem very useful.", ["OB"]],
            ["I think that \"getResult\" should be defined as", ["EB"]],
            ["public double getResult() {", "CODE"],
            ["return optima[0];", "CODE"],
            ["}", "CODE"],
            ["and similarly", ["OB"]],
            ["public double getFunctionValue() {", "CODE"],
            ["return optimaValues[0];", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-84": {
        "code_elements": ["var x=0,y=1;x||y=8;"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Invalid left-hand side of assignment not detected"],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Compile this:", []],
            ["var x=0,y=1;x||y=8", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "I expect an error, because this is parsed as (x||y)=8, which is an invalid left-hand side of an assignment.",
                ["EB"]
            ],
            ["Instead, I get", ["OB"]],
            ["var x=0,y=1;x||y=8;", "CODE"],
            ["which, like the input, is invalid code.", ["OB"]]
        ]
    },
    "Closure-64": {
        "code_elements": ["'use strict';alert(5);"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "--language_in=ECMASCRIPT5_STRICT results in 1 'use strict' per input file"
        ],
        "desc_hints": [
            "get_num.js",
            "groups.google.com",
            "getNum",
            "compiler.jar",
            "TOLXpePju5Q",
            "alert.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Create a JS file called \"get_num.js\" with the contents \"var getNum = function() { return 5; };\"",
                ["SR"]
            ],
            ["2.", ["OB", "SR"]],
            [
                "Create a JS file called \"alert.js\" with the contents \"alert(getNum());\"",
                ["SR"]
            ],
            ["3.", ["OB", "SR"]],
            ["Compile the two files with the following command:", ["OB", "SR"]],
            [
                "java -jar compiler.jar --language_in=ECMASCRIPT5_STRICT --compilation_level=ADVANCED_OPTIMIZATIONS --warning_level=VERBOSE --js get_num.js --js alert.js",
                ["OB"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I would expect the output to be:", ["EB"]],
            ["'use strict';alert(5);", "CODE"],
            [
                "or, if the compiler wants to be really clever, just \"alert(5)\" since this is already ES5 Strict compliant.",
                ["EB", "SR"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Head on Mac OS X", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "https://groups.google.com/forum/#!topic/closure-compiler-discuss/TOLXpePju5Q",
                []
            ]
        ]
    },
    "JacksonDatabind-10": {
        "code_elements": [
            "// or",
            "public Map<String, String> getParameters(){",
            "return parameters;",
            "}",
            "public Map<String, JsonNode> getParameters(){",
            "return new MyConverter().convert(parameters);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonAnyGetter", "keyUsing", "JsonSerialize"],
        "summary_text": [
            "JsonAnyGetter doesn't work with JsonSerialize (except with keyUsing)"
        ],
        "desc_hints": [
            "MyConverter.class",
            "MyKeySerializer.class",
            "keyUsing",
            "JsonNode",
            "JsonAnyGetter",
            "JsonSerialize",
            "MySerializer.class",
            "getParameters",
            "MyConverter"
        ],
        "desc_text": [
            ["(This is happening with 2.5.0.", []],
            [
                "Haven't tried 2.5.1 but I couldn't see any related issue anyway)",
                []
            ],
            [
                "Jackson ignores JsonSerialize annotation when there is JsonAnyGetter annotation.",
                ["OB"]
            ],
            ["@JsonSerialize(using = MySerializer.class)", []],
            ["// or", "CODE"],
            ["@JsonSerialize(converter = MyConverter.class)", []],
            ["@JsonAnyGetter", []],
            ["public Map<String, String> getParameters(){", "CODE"],
            ["return parameters;", "CODE"],
            ["}", "CODE"],
            ["except", []],
            ["@JsonSerialize(keyUsing = MyKeySerializer.class)", []],
            ["(haven't tried each setting.", ["OB"]],
            [
                "Only tried keyUsing because I've seen a different issue (#661) with it)",
                []
            ],
            ["Then it works.", ["OB"]],
            ["But I need the converter, so..", []],
            ["For the time being I will use", []],
            ["@JsonAnyGetter", []],
            ["public Map<String, JsonNode> getParameters(){", "CODE"],
            ["return new MyConverter().convert(parameters);", "CODE"],
            ["}", "CODE"],
            ["but I'd prefer to stick to annotations.", ["OB"]]
        ]
    },
    "JacksonDatabind-39": {
        "code_elements": [
            "public class CallRecord {",
            "public CallRecord() {}",
            "public static void main(final String[] args) throws IOException {",
            "final ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,",
            "DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);",
            "final CallRecord call = new CallRecord();",
            "final Event event = new Event();",
            "event.location = \"location1\";",
            "call.item = event;",
            "call.item2 = event;",
            "call.application = \"123\";",
            "// System.out.println(objectMapper.writeValueAsString(call));",
            "String json =",
            "\"{\\\"version\\\":0.0,\\\"application\\\":\\\"123\\\",\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"},\\\"item2\\\":{\\\"type\\\":\\\"event\\\",\\\"location\\\":\\\"location1\\\"}}\";",
            "// can't read item2 - which is valid",
            "System.out.println(objectMapper.readValue(json, CallRecord.class));",
            "json = \"{\\\"version\\\":0.0,\\\"application\\\":\\\"123\\\"},{\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"}\";",
            "System.out.println(objectMapper.readValue(json, CallRecord.class));",
            "json = \"{\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"}, \\\"version\\\":0.0,\\\"application\\\":\\\"123\\\"}\";",
            "// order matters: move item to the fornt, now it can't read application property",
            "System.out.println(objectMapper.readValue(json, CallRecord.class));",
            "}",
            "@Override",
            "public String toString() {",
            "final StringBuilder builder = new StringBuilder();",
            "builder.append(\"CallRecord [version=\").append(version).append(\", \");",
            "if (application != null) {",
            "builder.append(\"application=\").append(application).append(\", \");",
            "}",
            "if (item != null) {",
            "builder.append(\"item=\").append(item);",
            "}",
            "builder.append(\"]\");",
            "return builder.toString();",
            "}",
            "}",
            "}",
            "public final class Event implements Item {",
            "public String location;",
            "public static final String TYPE = \"event\";",
            "public Event() {}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DeserializationFeature.FAIL_ON_INVALID_SUBTYPE"],
        "summary_text": [
            "Jackson not continue to parse after DeserializationFeature.FAIL_ON_INVALID_SUBTYPE error"
        ],
        "desc_hints": [
            "objectMapper.writeValueAsString",
            "toString",
            "JsonTypeInfo",
            "call.item2",
            "JsonSubTypes",
            "StringBuilder",
            "event.location",
            "DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES",
            "Include.NON_NULL",
            "objectMapper.readValue",
            "CallRecord.class",
            "ObjectMapper",
            "DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES",
            "builder.append",
            "Event.TYPE",
            "CallRecord",
            "call.item",
            "builder.toString",
            "Event.class",
            "JsonInclude",
            "JsonTypeInfo.Id.NAME",
            "JsonTypeInfo.As.PROPERTY",
            "call.application",
            "objectMapper",
            "DeserializationFeature.FAIL_ON_INVALID_SUBTYPE",
            "System.out.println"
        ],
        "desc_text": [
            [
                "After FAIL_ON_INVALID_SUBTYPE error, jackson should continue to parse, but seems jackson doesn't.",
                ["OB", "EB"]
            ],
            ["The output:", ["OB"]],
            [
                "CallRecord [version=0.0, application=123, ] // doesn't read item2 which is valid",
                []
            ],
            ["CallRecord [version=0.0, application=123, ]", []],
            [
                "CallRecord [version=0.0, ] // doesn't read application after invalid item.",
                ["OB"]
            ],
            ["@JsonInclude(Include.NON_NULL)", []],
            ["public class CallRecord {", "CODE"],
            ["public float version;", []],
            ["public String application;", []],
            ["public Item item;", []],
            ["public Item item2;", []],
            ["public CallRecord() {}", "CODE"],
            [
                "public static void main(final String[] args) throws IOException {",
                "CODE"
            ],
            [
                "final ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,",
                "CODE"
            ],
            [
                "DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);",
                "CODE"
            ],
            ["final CallRecord call = new CallRecord();", "CODE"],
            ["final Event event = new Event();", "CODE"],
            ["event.location = \"location1\";", "CODE"],
            ["call.item = event;", "CODE"],
            ["call.item2 = event;", "CODE"],
            ["call.application = \"123\";", "CODE"],
            [
                "// System.out.println(objectMapper.writeValueAsString(call));",
                "CODE"
            ],
            ["String json =", "CODE"],
            [
                "\"{\\\"version\\\":0.0,\\\"application\\\":\\\"123\\\",\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"},\\\"item2\\\":{\\\"type\\\":\\\"event\\\",\\\"location\\\":\\\"location1\\\"}}\";",
                "CODE"
            ],
            ["// can't read item2 - which is valid", "CODE"],
            [
                "System.out.println(objectMapper.readValue(json, CallRecord.class));",
                "CODE"
            ],
            [
                "json = \"{\\\"version\\\":0.0,\\\"application\\\":\\\"123\\\"},{\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"}\";",
                "CODE"
            ],
            [
                "System.out.println(objectMapper.readValue(json, CallRecord.class));",
                "CODE"
            ],
            [
                "json = \"{\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"}, \\\"version\\\":0.0,\\\"application\\\":\\\"123\\\"}\";",
                "CODE"
            ],
            [
                "// order matters: move item to the fornt, now it can't read application property",
                "CODE"
            ],
            [
                "System.out.println(objectMapper.readValue(json, CallRecord.class));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["public String toString() {", "CODE"],
            ["final StringBuilder builder = new StringBuilder();", "CODE"],
            [
                "builder.append(\"CallRecord [version=\").append(version).append(\", \");",
                "CODE"
            ],
            ["if (application != null) {", "CODE"],
            [
                "builder.append(\"application=\").append(application).append(\", \");",
                "CODE"
            ],
            ["}", "CODE"],
            ["if (item != null) {", "CODE"],
            ["builder.append(\"item=\").append(item);", "CODE"],
            ["}", "CODE"],
            ["builder.append(\"]\");", "CODE"],
            ["return builder.toString();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\", visible = true)",
                []
            ],
            [
                "@JsonSubTypes({@Type(value = Event.class, name = Event.TYPE)})",
                []
            ],
            ["public interface Item {", []],
            ["}", "CODE"],
            ["public final class Event implements Item {", "CODE"],
            ["public String location;", "CODE"],
            ["public static final String TYPE = \"event\";", "CODE"],
            ["public Event() {}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-113": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Bug in require calls processing"],
        "desc_hints": [
            "goog.require",
            "requiresLevel.isOn",
            "requiresLevel",
            "processRequireCall",
            "ProcessClosurePrimitives"
        ],
        "desc_text": [
            ["The Problem", []],
            [
                "ProcessClosurePrimitives pass has a bug in processRequireCall method.",
                []
            ],
            ["The method processes goog.require calls.", ["OB"]],
            [
                "If a require symbol is invalid i.e is not provided anywhere, the method collects it for further error reporting.",
                ["OB"]
            ],
            [
                "If the require symbol is valid, the method removes it from the ast.",
                []
            ],
            [
                "All invalid require calls must be left for further using/checking of the code!",
                []
            ],
            ["The related comment in the code confirms this.", ["OB", "SR"]],
            [
                "Nevertheless, the second condition (requiresLevel.isOn() -> see source code) is invalid and always causes removing of the requires when we want to check these requires.",
                ["OB"]
            ],
            [
                "In any case, the method should not use the requiresLevel to decide if we need removing.",
                ["EB"]
            ],
            [
                "The requiresLevel should be used to check if we need error reporting.",
                ["EB"]
            ],
            ["The Solution", []],
            ["Remove the condition.", ["OB"]],
            ["Please see the attached patch.", ["OB"]]
        ]
    },
    "Compress-20": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["IllegalArgumentException"],
        "summary_text": [
            "IllegalArgumentException reading CPIO generated by Redline RPM"
        ],
        "desc_hints": ["rpm.org", "IllegalArgumentException"],
        "desc_text": [
            [
                "http://redline-rpm.org/ creates CPIO archives with a non-zero file mode on the trailer.",
                ["OB", "SR"]
            ],
            [
                "This causes an IllegalArgumentException when reading the file.",
                ["OB", "SR"]
            ],
            ["I've attached a patch and test archive to fix this.", []]
        ]
    },
    "JacksonDatabind-40": {
        "code_elements": [
            "int i = mapper.readValue(\"\\\"\\\"\", int.class);",
            "System.out.println(i);"
        ],
        "stack_traces": [],
        "summary_hints": ["DeserializationFeature"],
        "summary_text": [
            "Prevent coercion of int from empty String to null if DeserializationFeature .FAIL_ON_NULL_FOR_PRIMITIVES is true"
        ],
        "desc_hints": ["int.class", "mapper.readValue", "System.out.println"],
        "desc_text": [
            ["I got 0 from the code below.", ["OB", "SR"]],
            ["int i = mapper.readValue(\"\\\"\\\"\", int.class);", "CODE"],
            ["System.out.println(i);", "CODE"],
            ["It seems that Json Number type cannot start with \".", ["OB"]],
            ["Could I make the code throw some Exceptions?", []]
        ]
    },
    "Mockito-23": {
        "code_elements": [
            "abstract class AbstractClass {",
            "abstract protected Long lol();",
            "abstract protected String wow();",
            "public String give() {",
            "wow();",
            "lol();",
            "return \"give\";",
            "}",
            "}",
            "public class ClassExtendsAbstractClass extends AbstractClass {",
            "@Override",
            "protected Long lol() {",
            "return 2L;",
            "}",
            "@Override",
            "protected String wow() {",
            "return \"WOW\";",
            "}",
            "}",
            "public class A {",
            "private ClassExtendsAbstractClass classExtendsAbstractClass;",
            "public A(ClassExtendsAbstractClass classExtendsAbstractClass) {",
            "this.classExtendsAbstractClass = classExtendsAbstractClass;",
            "}",
            "public String doSomeThing(){",
            "return classExtendsAbstractClass.wow();",
            "}",
            "}",
            "private ClassExtendsAbstractClass classExtendsAbstractClass;",
            "public void before(){",
            "Mockito.when(classExtendsAbstractClass.give()).thenReturn(\"aaa\");",
            "}",
            "public void test() {",
            "a = new A(classExtendsAbstractClass);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["WrongTypeOfReturnValue"],
        "summary_text": [
            "WrongTypeOfReturnValue when abstract class have two abstract method"
        ],
        "desc_hints": [
            "classExtendsAbstractClass",
            "ClassExtendsAbstractClass",
            "doSomeThing",
            "org.mockito.exceptions.misusing.WrongTypeOfReturnValue",
            "AbstractClass",
            "Mockito.when",
            "classExtendsAbstractClass.wow",
            "thenReturn",
            "this.classExtendsAbstractClass",
            "classExtendsAbstractClass.give"
        ],
        "desc_text": [
            ["Hey", []],
            [
                "I found a strange problem, when i create a abstract class:",
                ["SR"]
            ],
            ["abstract class AbstractClass {", "CODE"],
            ["abstract protected Long lol();", "CODE"],
            ["abstract protected String wow();", "CODE"],
            ["public String give() {", "CODE"],
            ["wow();", "CODE"],
            ["lol();", "CODE"],
            ["return \"give\";", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["and i have another class extends abstract Class:", []],
            [
                "public class ClassExtendsAbstractClass extends AbstractClass {",
                "CODE"
            ],
            ["@Override", "CODE"],
            ["protected Long lol() {", "CODE"],
            ["return 2L;", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["protected String wow() {", "CODE"],
            ["return \"WOW\";", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["and I have class:", []],
            ["public class A {", "CODE"],
            [
                "private ClassExtendsAbstractClass classExtendsAbstractClass;",
                "CODE"
            ],
            [
                "public A(ClassExtendsAbstractClass classExtendsAbstractClass) {",
                "CODE"
            ],
            [
                "this.classExtendsAbstractClass = classExtendsAbstractClass;",
                "CODE"
            ],
            ["}", "CODE"],
            ["public String doSomeThing(){", "CODE"],
            ["return classExtendsAbstractClass.wow();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "and when i try mock method doSomeThing() from A class in test:",
                ["OB", "SR"]
            ],
            ["@Mock", []],
            [
                "private ClassExtendsAbstractClass classExtendsAbstractClass;",
                "CODE"
            ],
            ["private A a;", []],
            ["@Before", []],
            ["public void before(){", "CODE"],
            [
                "Mockito.when(classExtendsAbstractClass.give()).thenReturn(\"aaa\");",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", []],
            ["public void test() {", "CODE"],
            ["a = new A(classExtendsAbstractClass);", "CODE"],
            ["}", "CODE"],
            ["I get the error:", ["OB"]],
            ["org.mockito.exceptions.misusing.WrongTypeOfReturnValue:", []],
            ["String cannot be returned by lol()", ["OB"]],
            ["lol() should return Long", ["OB", "EB"]],
            [
                "This is strange behavior, because the method lol() should not be called, but when I delete one abstract method everything is good.",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-8": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["toString"],
        "summary_text": ["toString NPE for orphans"],
        "desc_hints": ["toString"],
        "desc_text": [
            [
                "I'm working on code that frequently calls 'remove' and then re-adds an element.",
                ["OB", "SR"]
            ],
            [
                "While the element is in a detached string, toString throws something, so Eclipse prints only an 'invocation target exception.' It would be nice if this were not so.",
                ["OB"]
            ]
        ]
    },
    "Time-23": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["#112 Incorrect mapping of the MET time zone"],
        "desc_hints": ["DateTimeZone"],
        "desc_text": [
            ["This timezone is mapped to Asia/Tehran in DateTimeZone.", ["OB"]],
            ["It should be middle europena time.", ["OB", "EB"]],
            [
                "I know that this bug has been raised before (Incorrect mapping of the MET time zone - ID: 2012274), and there is a comment stating that you won't break backward compatibility to fix this bug.",
                ["OB"]
            ],
            ["I disagree that this is a backward compatibility argument", []],
            ["No matter how you look at it, it is a bug.", []],
            [
                "You could very well state that ALL bugs won't be fixed, because of backward compatibility.",
                ["OB"]
            ],
            ["I request again that this bug be fixed.", []]
        ]
    },
    "Cli-1": {
        "code_elements": [
            "final String debugOpt = \"debug\";",
            ".create('d');",
            "String dbg = commandLine.getOptionValue(debugOpt);"
        ],
        "stack_traces": [],
        "summary_hints": ["CommandLine.getOptionValue"],
        "summary_text": [
            "[cli] CommandLine.getOptionValue() behaves contrary to docs"
        ],
        "desc_hints": [
            "debugOpt",
            "getOptionValue",
            "jakarta.apache.org",
            "commandLine.getOptionValue",
            "withDescription",
            "withArgName",
            "withLongOpt",
            "commandLine",
            "OptionBuilder",
            "usage.html"
        ],
        "desc_text": [
            ["Hi", []],
            ["If I have:", []],
            ["final String debugOpt = \"debug\";", "CODE"],
            ["Option debug = OptionBuilder", []],
            [".withArgName(debugOpt)", ["OB"]],
            [".withDescription(\"turn on debugging\")", ["OB"]],
            [".withLongOpt(debugOpt)", ["OB"]],
            [".create('d');", "CODE"],
            ["and then later I do:", ["SR"]],
            ["String dbg = commandLine.getOptionValue(debugOpt);", "CODE"],
            ["then dbg will be null.", ["OB"]],
            ["Instead, I have to use getOptionValue('d').", []],
            ["This seems", []],
            ["contrary to the docs (see bottom of", ["OB"]],
            [
                "http://jakarta.apache.org/commons/cli/usage.html), which implies that I should",
                ["EB"]
            ],
            [
                "be able to query the commandLine object using a full string, rather than just",
                ["OB", "SR"]
            ],
            ["the string's first character.", ["OB"]],
            [
                "Can I suggest that the API of OptionBuilder be made clearer so that it is",
                []
            ],
            [
                "obvious that you can have long and short option names---perhaps make the",
                ["OB"]
            ],
            [
                "create() method take no arguments (thus forcing long and short arg names to be",
                ["OB"]
            ],
            ["set explicitly).", ["OB"]],
            [
                "(Also, there seems to be some confusion between the terms",
                ["OB"]
            ],
            [
                "'argument' and 'option' in the API, but perhaps that is just me).",
                ["OB"]
            ],
            [
                "Also, I would hop to be able to query commandLine by either a single char or an",
                ["EB", "SR"]
            ],
            ["entire string, as suggested by the docs.", ["OB"]],
            ["Thanks,", []],
            ["Chris", []]
        ]
    },
    "Math-59": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FastMath.max"],
        "summary_text": [
            "FastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f"
        ],
        "desc_hints": ["FastMath.max", "testMinMaxFloat"],
        "desc_text": [
            [
                "FastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f.",
                ["EB"]
            ],
            ["This is because the wrong variable is returned.", ["OB"]],
            [
                "The bug was not detected by the test case \"testMinMaxFloat()\" because that has a bug too - it tests doubles, not floats.",
                ["OB"]
            ]
        ]
    },
    "Closure-94": {
        "code_elements": ["/** @define {string} */"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "closure-compiler @define annotation does not allow line to be split on 80 characters."
        ],
        "desc_hints": ["JavaScript"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Create a JavaScript file with the followiing:", ["SR"]],
            ["/** @define {string} */", "CODE"],
            [
                "var CONSTANT = \"some very long string name that I want to wrap \" +",
                []
            ],
            ["\"and so break using a + since I don't want to \" +", []],
            ["\"introduce a newline into the string.\"", ["OB", "SR"]],
            ["2.", ["OB", "SR"]],
            ["Run closure-compiler on the .js file.", ["OB", "SR"]],
            ["3.", ["OB", "SR"]],
            ["See it generate an error on the '+'.", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "It should work, since the line is assigning a constant value to the var.",
                ["OB", "EB", "SR"]
            ],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Removing the '+' and making the string all one line does work correctly.",
                ["OB"]
            ]
        ]
    },
    "JxPath-17": {
        "code_elements": [
            "if (equalStrings(testPrefix, nodePrefix))",
            "{",
            "return true;",
            "}",
            "if (testPrefix==null || equalStrings(testPrefix, nodePrefix)) {                return true;            }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Namespaced attribute not selected with wildcard"],
        "desc_hints": [
            "DOMAttributeIterator",
            "equalStrings",
            "testPrefix",
            "selectSingleNode",
            "nodePrefix"
        ],
        "desc_text": [
            ["With expression:", ["SR"]],
            ["xml/@*", []],
            ["On xml:", []],
            ["<xml xmlns:x='foo' x:pop='a'/>", []],
            ["selectSingleNode returns null, @x:* works fine.", ["OB"]],
            ["Possible Fix:", []],
            ["In DOMAttributeIterator, line 84", []],
            ["if (equalStrings(testPrefix, nodePrefix))", "CODE"],
            ["{", "CODE"],
            ["return true;", "CODE"],
            ["}", "CODE"],
            ["should probably be changed to", ["EB"]],
            [
                "if (testPrefix==null || equalStrings(testPrefix, nodePrefix)) {                return true;            }",
                "CODE"
            ]
        ]
    },
    "Closure-59": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["globalThis"],
        "summary_text": [
            "Cannot exclude globalThis checks through command line"
        ],
        "desc_hints": ["nonStandardJsDocs", "nonStandardJSDocs", "globalThis"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Run command line utility", ["SR"]],
            ["2.", ["OB", "SR"]],
            [
                "Supply flags --warning_level VERBOSE --jscomp_off globalThis --jscomp_off nonStandardJsDocs",
                []
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "I expect that globalThis and nonStandardJsDocs warnings will be ignored.",
                ["OB", "EB"]
            ],
            ["Only nonStandardJsDocs warnings are ignored.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Version 1180", []],
            ["Sun OS 5.10", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "--jscomp_error also doesn't work with globalThis (works with nonStandardJSDocs).",
                ["OB"]
            ]
        ]
    },
    "Closure-56": {
        "code_elements": ["alert(foo);", "alert(bar);", "alert(foo);"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Last warning or error in output is truncated"],
        "desc_hints": ["compiler.jar", "test.js"],
        "desc_text": [
            [
                "The last error or warning statement written to the output appears to be getting truncated.",
                ["OB"]
            ],
            ["It's causing a problem for my error / warning parser.", ["OB"]],
            [
                "To reproduce, create a file called test.js and add the following content to it:",
                ["OB", "SR"]
            ],
            ["---------------", []],
            ["alert(foo);", "CODE"],
            ["alert(bar);", "CODE"],
            ["---------------", []],
            ["When compiled, the output looks like this:", ["OB", "SR"]],
            ["---------------", []],
            [
                ">java -jar compiler.jar --warning_level VERBOSE --js test.js",
                []
            ],
            ["test.js:1: ERROR - variable foo is undefined", ["OB"]],
            ["alert(foo);", "CODE"],
            ["^", []],
            ["test.js:2: ERROR - variable bar is undefined", ["OB"]],
            ["2 error(s), 0 warning(s)", ["OB"]],
            ["---------------", []],
            [
                "If you look at the last error includes neither the line the error occurred on nor the column-indicating caret.",
                ["OB"]
            ],
            ["This happens with warnings as well.", ["OB"]],
            [
                "Tested against r1257 committed 2011-07-11 11:11:32 -0700.",
                ["OB"]
            ]
        ]
    },
    "Lang-20": {
        "code_elements": [
            "new Object() {",
            "@Override",
            "public String toString() {",
            "return null;",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["StringUtils.join", "toString"],
        "summary_text": [
            "StringUtils.join throws NPE when toString returns null for one of objects in collection"
        ],
        "desc_hints": [
            "javax.mail.internet.InternetAddress",
            "ToString",
            "StringUtils.join",
            "toString"
        ],
        "desc_text": [
            ["Try", []],
            ["StringUtils.join(new Object[]{", []],
            ["new Object() {", "CODE"],
            ["@Override", "CODE"],
            ["public String toString() {", "CODE"],
            ["return null;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}, ',');", []],
            [
                "ToString should probably never return null, but it does in javax.mail.internet.InternetAddress",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-8": {
        "code_elements": [
            "function(argument){",
            "...//use argument",
            "var variable = ...;",
            "...//argument not used anymore",
            "}",
            "function(a){",
            "...",
            "var a = ...;",
            "...",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TypeError"],
        "summary_text": ["Obfuscated code triggers TypeError in Firefox"],
        "desc_hints": ["code.google.com", "TypeError", "TypeErrors"],
        "desc_text": [
            [
                "The Closure Compiler is a great tool, but I'm having problems with it.",
                []
            ],
            [
                "It often produces code that triggers TypeError in Firefox, even though original code does not.",
                ["OB"]
            ],
            ["Here is why.", ["OB"]],
            ["The original code may look as follows:", ["SR"]],
            ["function(argument){", "CODE"],
            ["...//use argument", "CODE"],
            ["var variable = ...;", "CODE"],
            ["...//argument not used anymore", "CODE"],
            ["}", "CODE"],
            ["But often Closure Compiler will translate it to:", ["OB"]],
            ["function(a){", "CODE"],
            ["...", "CODE"],
            ["var a = ...;", "CODE"],
            ["...", "CODE"],
            ["}", "CODE"],
            [
                "This is not wrong JS, since argument is no longer used, Closure Compiler tries to reuse the name 'a' for something else.",
                ["OB"]
            ],
            ["This triggers the following in Firefox 13-15:", ["OB", "SR"]],
            ["TypeError: variable a re-declares argument", []],
            [
                "Still, the resulting code is correct and runs, but it's very annoying debugging it when I'm getting all the time a lot of TypeErrors in the console.",
                ["OB"]
            ],
            [
                "Also, our customers have noticed these TypeErrors when testing the product and it undermines our code reliability.",
                ["OB"]
            ],
            [
                "Could you please rename variables in such a way as to avoid these TypeErrors (not to rename vars in a way that will coincide with function argument names)?",
                []
            ],
            ["What steps will reproduce the problem?", "QUERY"],
            [
                "This happens reproducibly on our real-life JS input, which I cannot submit for various reasons.",
                ["OB"]
            ],
            [
                "If my problem description is not clear enough, please make a comment and I will try to construct some artificial example that also triggers the TypeError.",
                ["SR"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "The expected output is obfuscated code with variables renamed to unique names, in order not to trigger TypeError in Firefox.",
                ["OB"]
            ],
            [
                "Instead I see variables renamed to the same name, which runs OK, but Firefox complains with TypeError.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: 20120917 (revision 2180)", []],
            ["Built on: 2012/09/17 14:33", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Closure-119": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler==",
            "var x = 5;",
            "}",
            "catch(e) {",
            "var s = \"FAIL\" + e.name + \": \"+ e.message;",
            "}",
            "catch(e) {",
            "var s = \"FAIL\" + e.name + \": \"+ e.message;",
            "var s = \"FAIL\" + e.name + \": \"+ e.message;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "catch(e) yields JSC_UNDEFINED_NAME warning when e is used in catch in advanced mode"
        ],
        "desc_hints": ["compiler.appspot.com", "default.js", "ClosureCompiler"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["set closure for advanced compilation", []],
            ["2.", ["OB", "SR"]],
            ["compile this:", []],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["try {", []],
            ["var x = 5;", "CODE"],
            ["}", "CODE"],
            ["catch(e) {", "CODE"],
            ["var s = \"FAIL\" + e.name + \": \"+ e.message;", "CODE"],
            ["}", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I expect no warning or error for this.", ["OB", "EB"]],
            ["Instead I see this:", ["OB"]],
            [
                "JSC_UNREACHABLE_CODE: unreachable code at line 4 character 0",
                ["SR"]
            ],
            ["catch(e) {", "CODE"],
            ["^", []],
            [
                "JSC_UNDEFINED_NAME: e is never defined at line 5 character 17",
                []
            ],
            ["var s = \"FAIL\" + e.name + \": \"+ e.message;", "CODE"],
            ["^", []],
            [
                "JSC_UNDEFINED_NAME: e is never defined at line 5 character 32",
                []
            ],
            ["var s = \"FAIL\" + e.name + \": \"+ e.message;", "CODE"],
            ["^", []],
            [
                "In my case I'm especially complaining about the JSC_UNDEFINED_NAME warning...",
                []
            ],
            [
                "Also it seems the unreachable complaint isn't right, but i'm not sure.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "I'm using this url: http://closure-compiler.appspot.com/home",
                []
            ],
            ["using chrome browser on windows: Version 28.0.1500.95 m", ["SR"]],
            ["...", []],
            ["but this is a server side error from what I see...", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "JacksonCore-19": {
        "code_elements": [
            "public class Test {",
            "public static void main(String[] args) throws IOException {",
            "StringBuilder input = new StringBuilder();",
            "for (int i = 1; i < 201; i++) {",
            "input.append(1);",
            "}",
            "input.append(\".0\");",
            "JsonFactory factory = new JsonFactory();",
            "JsonParser parser =",
            "factory.createParser(new ByteArrayInputStream(input.toString().getBytes(Charset.forName(\"UTF-8\"))));",
            "parser.nextToken();",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["ArrayIndexOutOfBoundsException"],
        "summary_text": [
            "ArrayIndexOutOfBoundsException: 200 on floating point number with exactly 200-length decimal part"
        ],
        "desc_hints": [
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken",
            "parser.nextToken",
            "UTF8StreamJsonParser.java",
            "_parseFloat",
            "JsonFactory",
            "getBytes",
            "input.append",
            "JsonParser",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "ByteArrayInputStream",
            "StringBuilder",
            "_nextTokenNotInObject",
            "java.lang.ArrayIndexOutOfBoundsException",
            "_parseNumber2",
            "factory.createParser",
            "_parsePosNumber",
            "input.toString",
            "Charset.forName"
        ],
        "desc_text": [
            ["Very similar issue to #160 and #157", []],
            [
                "With jackson-core 2.8.1 when attempting to parse fractional number that has exactly 200 numbers in the decimal part and some random fractional part then java.lang.ArrayIndexOutOfBoundsException: 200 is thrown.",
                ["OB", "SR"]
            ],
            ["public class Test {", "CODE"],
            [
                "public static void main(String[] args) throws IOException {",
                "CODE"
            ],
            ["StringBuilder input = new StringBuilder();", "CODE"],
            ["for (int i = 1; i < 201; i++) {", "CODE"],
            ["input.append(1);", "CODE"],
            ["}", "CODE"],
            ["input.append(\".0\");", "CODE"],
            ["JsonFactory factory = new JsonFactory();", "CODE"],
            ["JsonParser parser =", "CODE"],
            [
                "factory.createParser(new ByteArrayInputStream(input.toString().getBytes(Charset.forName(\"UTF-8\"))));",
                "CODE"
            ],
            ["parser.nextToken();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Produces:", []],
            [
                "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 200 at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(UTF8StreamJsonParser.java:1576) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(UTF8StreamJsonParser.java:1509) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber(UTF8StreamJsonParser.java:1410) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:876) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:772)",
                []
            ]
        ]
    },
    "Lang-46": {
        "code_elements": [
            "import junit.framework.TestCase;",
            "import org.apache.commons.lang.StringEscapeUtils;",
            "public class StringEscapeUtilsTest extends TestCase {",
            "public void testEscapeJavaWithSlash()",
            "{",
            "final String input = \"String with a slash (/) in it\";",
            "final String expected = input;",
            "final String actual   = StringEscapeUtils.escapeJava( input );",
            "/**",
            "* In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters,",
            "* which are not a valid character to escape in a Java string.",
            "*/",
            "assertEquals( expected, actual );",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["StringEscapeUtils.escapeJava"],
        "summary_text": [
            "StringEscapeUtils.escapeJava(String) escapes '/' characters"
        ],
        "desc_hints": [
            "escapeJava",
            "assertEquals",
            "org.apache.commons.lang.StringEscapeUtils",
            "StringEscapeUtilsTest",
            "junit.framework.TestCase",
            "TestCase",
            "testEscapeJavaWithSlash",
            "StringEscapeUtils.escapeJava"
        ],
        "desc_text": [
            [
                "Commons Lang 2.4 StringEscapeUtils.escapeJava(String) now escapes '/' characters, which is not a valid \"escapable\" character in Java strings.",
                ["OB"]
            ],
            [
                "I haven't tried the other Java escape/unescape methods to see if they have a similar problem, or that only Java \"escapable\" characters are escaped by escapeJava(String).",
                []
            ],
            [
                "This bug may have appeared as an unintended side-effect of the fix for LANG-363.",
                []
            ],
            [
                "Also the javadoc for escapeJava is now a little off, in that '/' should now be included in the sentence describing the differences between Java and Javascript strings, with respect to escaping rules.",
                ["OB", "EB"]
            ],
            [
                "The following is a JUnit3 test demonstrating the bug.",
                ["OB", "SR"]
            ],
            ["import junit.framework.TestCase;", "CODE"],
            ["import org.apache.commons.lang.StringEscapeUtils;", "CODE"],
            ["public class StringEscapeUtilsTest extends TestCase {", "CODE"],
            ["public void testEscapeJavaWithSlash()", "CODE"],
            ["{", "CODE"],
            ["final String input = \"String with a slash (/) in it\";", "CODE"],
            ["final String expected = input;", "CODE"],
            [
                "final String actual   = StringEscapeUtils.escapeJava( input );",
                "CODE"
            ],
            ["/**", "CODE"],
            [
                "* In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters,",
                "CODE"
            ],
            [
                "* which are not a valid character to escape in a Java string.",
                "CODE"
            ],
            ["*/", "CODE"],
            ["assertEquals( expected, actual );", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-17": {
        "code_elements": [
            "import com.fasterxml.jackson.databind.JsonNode;",
            "import com.fasterxml.jackson.databind.MapperFeature;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.SerializationFeature;",
            "import java.io.IOException;",
            "public class App {",
            "public static void main(String[] args) throws IOException {",
            "ObjectMapper mapper = new ObjectMapper()",
            ".enableDefaultTyping() // works fine with disableDefaultTyping()",
            ".enable(MapperFeature.AUTO_DETECT_GETTERS)",
            ".enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)",
            ".disable(MapperFeature.USE_GETTERS_AS_SETTERS)",
            ".disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)",
            ".enable(SerializationFeature.INDENT_OUTPUT)",
            ".disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);",
            "Foo foo = new Foo(\"bar\");",
            "String serialized = mapper.writeValueAsString(foo); // {\"bar\" : \"bar\"}",
            "JsonNode jsonNode = mapper.readTree(serialized); // exception here",
            "JsonNode node = mapper.valueToTree(foo); // and here",
            "}",
            "public static class Foo {",
            "private String bar;",
            "public Foo() {",
            "}",
            "public Foo(String bar) {",
            "this.bar = bar;",
            "}",
            "public String getBar() {",
            "return bar;",
            "}",
            "public void setBar(String bar) {",
            "this.bar = bar;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["defaultTyping", "readTree"],
        "summary_text": [
            "readTree does not work with defaultTyping enabled but no type info provided"
        ],
        "desc_hints": [
            "defaultTyping",
            "SerializationFeature.INDENT_OUTPUT",
            "getBar",
            "jsonNode",
            "this.bar",
            "MapperFeature.AUTO_DETECT_GETTERS",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "App.java",
            "MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS",
            "com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeWithType",
            "com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserializeWithType",
            "com.fasterxml.jackson.databind.SerializationFeature",
            "setBar",
            "com.fasterxml.jackson.databind.ObjectMapper.readTree",
            "test.App.main",
            "disableDefaultTyping",
            "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "MapperFeature.REQUIRE_SETTERS_FOR_GETTERS",
            "mapper.valueToTree",
            "valueToTree",
            "ObjectMapper",
            "readTree",
            "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny",
            "_readMapAndClose",
            "JsonMappingException.java",
            "SerializationFeature.FAIL_ON_EMPTY_BEANS",
            "enableDefaultTyping",
            "JsonNode",
            "As.WRAPPER_ARRAY",
            "mapper.writeValueAsString",
            "TypeWrappedDeserializer.java",
            "java.io.IOException",
            "AsArrayTypeDeserializer.java",
            "com.fasterxml.jackson.databind.JsonMappingException.from",
            "com.fasterxml.jackson.databind.MapperFeature",
            "_locateTypeId",
            "com.fasterxml.jackson.databind.JsonNode",
            "DeserializationContext.java",
            "ObjectMapper.java",
            "JsonNodeDeserializer.java",
            "mapper.readTree",
            "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException",
            "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
            "MapperFeature.USE_GETTERS_AS_SETTERS"
        ],
        "desc_text": [
            [
                "I have enabled defaultTyping, and serialized Foo entity with no type info.",
                ["OB"]
            ],
            [
                "I'm trying to read json as a tree with mapper.readTree(json), and it throws an exception",
                ["OB", "SR"]
            ],
            [
                "Exception in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException:",
                []
            ],
            [
                "Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY",
                ["EB"]
            ],
            [
                "type information for class com.fasterxml.jackson.databind.JsonNode",
                []
            ],
            ["at [Source: {", []],
            ["\"bar\" : \"bar\"", []],
            ["}; line: 1, column: 1]", []],
            [
                "at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(DeserializationContext.java:927)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._locateTypeId(AsArrayTypeDeserializer.java:127)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:93)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:68)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:144)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:14)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3562)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2136)",
                []
            ],
            ["at test.App.main(App.java:23)", []],
            [
                "However, if I disable defaultTyping, the same code works fine.",
                ["OB"]
            ],
            [
                "So, readTree(json) does not actually need type info for the root element, because it works when defaultTyping is disabled (i.e.",
                ["OB"]
            ],
            [
                "{\"bar\" : \"bar\"}), but it throws the exception when defaultTyping is enabled, that's why it looks like a bug.",
                ["OB"]
            ],
            ["The same thing happens for valueToTree(foo).", ["OB"]],
            ["Jackson version is 2.5.3", []],
            ["Full code is provided.", ["OB"]],
            ["import com.fasterxml.jackson.databind.JsonNode;", "CODE"],
            ["import com.fasterxml.jackson.databind.MapperFeature;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.SerializationFeature;",
                "CODE"
            ],
            ["import java.io.IOException;", "CODE"],
            ["public class App {", "CODE"],
            [
                "public static void main(String[] args) throws IOException {",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper()", "CODE"],
            [
                ".enableDefaultTyping() // works fine with disableDefaultTyping()",
                "CODE"
            ],
            [".enable(MapperFeature.AUTO_DETECT_GETTERS)", "CODE"],
            [".enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)", "CODE"],
            [".disable(MapperFeature.USE_GETTERS_AS_SETTERS)", "CODE"],
            [".disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)", "CODE"],
            [".enable(SerializationFeature.INDENT_OUTPUT)", "CODE"],
            [".disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);", "CODE"],
            ["Foo foo = new Foo(\"bar\");", "CODE"],
            [
                "String serialized = mapper.writeValueAsString(foo); // {\"bar\" : \"bar\"}",
                "CODE"
            ],
            [
                "JsonNode jsonNode = mapper.readTree(serialized); // exception here",
                "CODE"
            ],
            ["JsonNode node = mapper.valueToTree(foo); // and here", "CODE"],
            ["}", "CODE"],
            ["public static class Foo {", "CODE"],
            ["private String bar;", "CODE"],
            ["public Foo() {", "CODE"],
            ["}", "CODE"],
            ["public Foo(String bar) {", "CODE"],
            ["this.bar = bar;", "CODE"],
            ["}", "CODE"],
            ["public String getBar() {", "CODE"],
            ["return bar;", "CODE"],
            ["}", "CODE"],
            ["public void setBar(String bar) {", "CODE"],
            ["this.bar = bar;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Lang-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FastDateParser"],
        "summary_text": [
            "FastDateParser does not handle unterminated quotes correctly"
        ],
        "desc_hints": ["SimpleDateFormat", "IsNd"],
        "desc_text": [
            [
                "FDP does not handled unterminated quotes the same way as SimpleDateFormat",
                ["OB"]
            ],
            ["For example:", ["OB", "SR"]],
            ["Format: 'd'd'", []],
            ["Date: d3", []],
            [
                "This should fail to parse the format and date but it actually works.",
                ["OB", "EB"]
            ],
            ["The format is parsed as:", ["OB"]],
            ["Pattern: d(\\p", []],
            ["{IsNd}", []],
            ["++)", []]
        ]
    },
    "Compress-23": {
        "code_elements": [
            "SevenZFile input = new SevenZFile(new File(arcName));"
        ],
        "stack_traces": [
            "at org.tukaani.xz.LZMAInputStream.initialize(Unknown Source)",
            "at org.tukaani.xz.LZMAInputStream.<init>(Unknown Source)",
            "at org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder.decode(Coders.java:117)",
            "at org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(Coders.java:48)",
            "at org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(SevenZFile.java:278)",
            "at org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:190)",
            "at org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)",
            "at org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)",
            "at compress.SevenZipError.main(SevenZipError.java:28)"
        ],
        "summary_hints": [],
        "summary_text": ["7z: 16 MB dictionary is too big"],
        "desc_hints": [
            "SevenZipError.java",
            "compress.SevenZipError.main",
            "Coders.java",
            "SevenZFile.java",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader",
            "org.tukaani.xz.LZMAInputStream.initialize",
            "LZMADecoder.decode",
            "SevenZFile",
            "org.tukaani.xz.UnsupportedOptionsException",
            "arcName",
            "org.tukaani.xz.LZMAInputStream",
            "org.apache.commons.compress.archivers.sevenz.Coders",
            "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder"
        ],
        "desc_text": [
            [
                "I created an archiv with 7zip 9.20 containing the compress-1.7-src directory.",
                ["OB", "SR"]
            ],
            ["Also tried it with 1.6 version and directory.", ["OB"]],
            ["I", []],
            ["downloaded the zip file and reziped it as 7z.", ["OB"]],
            ["The standard setting where used:", ["SR"]],
            ["Compression level: normal", []],
            ["Compression method: lzma2", []],
            ["Dictionary size: 16 MB", []],
            ["Word size: 32", []],
            ["Solid Block size: 2 GB", []],
            [
                "I get an exception if I try to open the file with the simple line of code:",
                ["OB", "SR"]
            ],
            ["SevenZFile input = new SevenZFile(new File(arcName));", "CODE"],
            [
                "Maybe it is a bug in the tukaani library, but I do not know how to report it to them.",
                []
            ],
            ["The exception thrown:", ["OB"]],
            [
                "org.tukaani.xz.UnsupportedOptionsException: LZMA dictionary is too big for this implementation",
                []
            ],
            [
                "at org.tukaani.xz.LZMAInputStream.initialize(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at org.tukaani.xz.LZMAInputStream.<init>(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder.decode(Coders.java:117)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(Coders.java:48)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(SevenZFile.java:278)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:190)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)",
                "STACK_TRACE"
            ],
            [
                "at compress.SevenZipError.main(SevenZipError.java:28)",
                "STACK_TRACE"
            ]
        ]
    },
    "Cli-26": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["OptionBuilder"],
        "summary_text": [
            "OptionBuilder is not reseted in case of an IAE at create"
        ],
        "desc_hints": [
            "OptionBuilder",
            "OptionBuilder.create",
            "IllegalArgumentException"
        ],
        "desc_text": [
            [
                "If the call to OptionBuilder.create() fails with an IllegalArgumentException, the OptionBuilder is not resetted and its next usage may contain unwanted settings.",
                ["OB", "SR"]
            ],
            [
                "Actually this let the CLI-1.2 RCs fail on IBM JDK 6 running on Maven 2.0.10.",
                ["OB", "SR"]
            ]
        ]
    },
    "Compress-2": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Ar doesn't delete correct"],
        "desc_hints": [
            "test2.xml",
            "test1.xml",
            "test.txt",
            "bla.ar",
            "getNextEntry"
        ],
        "desc_text": [
            [
                "When working on the Testcases i figured out that a deletion from an Ar Archive is not as successful as it look at first glance.",
                ["OB"]
            ],
            [
                "For example: my bla.ar file contains test1.xml and test2.xml.",
                ["OB", "SR"]
            ],
            ["I delete test2.xml", []],
            ["The \"getNextEntry\" Method just delivers test1.xml.", ["OB"]],
            ["Looks correct.", ["OB"]],
            [
                "But checking the result file at commandline brings the following:",
                ["OB", "SR"]
            ],
            ["$> ar -t /tmp/dir26673/bla.ar", []],
            ["test1.xml", []],
            ["test2.xml", []],
            [
                "vi shows me that there is still the test2.xml entry in the archive,",
                ["OB"]
            ],
            ["even when getNextEntry returns null.", ["OB"]],
            [
                "Deleting test2.xml and adding test.txt afterward brings the following:",
                ["OB", "SR"]
            ],
            ["$> ar -t /tmp/dir24825/bla.ar", []],
            ["test.txt", []],
            [
                "ar: /tmp/dir24825/bla.ar: Inappropriate file type or format",
                ["SR"]
            ]
        ]
    },
    "Csv-14": {
        "code_elements": [
            "// TODO where did this rule come from?",
            "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {",
            "quote = true;",
            "// TODO where did this rule come from?",
            "if (newRecord && (c !='-' && c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {",
            "quote = true;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Negative numeric values in the first column are always quoted in minimal mode"
        ],
        "desc_hints": ["newRecord"],
        "desc_text": [
            [
                "Negative Numeric values are always quoted in minimal mode if (and only if) they are in the first column.",
                ["OB", "EB"]
            ],
            ["i.e.", []],
            ["long,lat,data", []],
            ["\"-92.222\",43.333,3", []],
            [
                "Looking at the code, this is by design but seem to be for an unknown reason.",
                ["OB"]
            ],
            ["From v1.2 CSVPrinter line 230:", []],
            ["// TODO where did this rule come from?", "CODE"],
            [
                "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {",
                "CODE"
            ],
            ["quote = true;", "CODE"],
            ["} else ...", []],
            [
                "I propose this rule to either be remove or at a minimum be changed to:",
                []
            ],
            ["// TODO where did this rule come from?", "CODE"],
            [
                "if (newRecord && (c !='-' && c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {",
                "CODE"
            ],
            ["quote = true;", "CODE"],
            ["} else ...", []]
        ]
    },
    "JacksonDatabind-60": {
        "code_elements": [
            "public JsonFilter() {",
            "this.mapper = new ObjectMapper();",
            "mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);",
            "mapper.enableDefaultTyping();",
            "}",
            "/** @serial */",
            "public byte[] getBytes() {",
            "return apdu.clone();",
            "}",
            "public CommandAPDU(@JsonProperty(value = \"bytes\") byte[] apdu) {",
            "this.apdu = apdu.clone();",
            "parse();",
            "LOG.v(\"com.ubitricity.devices.common.pal.CommandAPDU creator (1)\");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonValue"],
        "summary_text": ["Polymorphic type lost when using @JsonValue"],
        "desc_hints": [
            "JsonProperty",
            "mapper.configure",
            "apdu.clone",
            "instanceId",
            "RemoteCall.class",
            "JsonIgnore",
            "AKQEAAnw8fLz9AAAAgA",
            "JsonFilter",
            "com.ubitricity.devices.common.tasks.ResponseReceiver",
            "com.ubitricity.devices.common.pal.CommandAPDU",
            "this.apdu",
            "className",
            "ObjectMapper",
            "net.sf.lipermi.call.RemoteInstance",
            "SerializationFeature.FAIL_ON_EMPTY_BEANS",
            "getBytes",
            "CommandAPDU",
            "JsonValue",
            "mapper.writeValueAsString",
            "mapper.readValue",
            "mapper.enableDefaultTyping",
            "this.mapper",
            "JsonCreator"
        ],
        "desc_text": [
            [
                "When suppressing all getters but one with @JsonIgnore and choosing to use a byte array for serialization (marking its getter with @JsonValue), the typing of the object is changed to \"[B\", which is deserialized to a byte array.",
                ["OB", "SR"]
            ],
            [
                "I would have expected verbose typing and usage of the constructor marked with @JsonCreator that accepts the byte array to construct the object on deserialization.",
                ["OB", "EB", "SR"]
            ],
            [
                "The behavior is as expected when choosing more fields for serialization, which is redundant data in this case.",
                ["OB", "EB"]
            ],
            ["Running jackson-databind 2.7.4 on Java 1.8.0_91.", ["OB", "SR"]],
            ["Configuration of the ObjectMapper:", []],
            ["private final ObjectMapper mapper;", []],
            ["public JsonFilter() {", "CODE"],
            ["this.mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);",
                "CODE"
            ],
            ["mapper.enableDefaultTyping();", "CODE"],
            ["}", "CODE"],
            ["Serialization: mapper.writeValueAsString(message)", []],
            ["Deserialization: mapper.readValue(json, RemoteCall.class)", []],
            ["Getter and field:", []],
            ["/** @serial */", "CODE"],
            ["private byte[] apdu;", []],
            ["@JsonValue", []],
            ["public byte[] getBytes() {", "CODE"],
            ["return apdu.clone();", "CODE"],
            ["}", "CODE"],
            ["Constructor:", []],
            ["@JsonCreator", []],
            [
                "public CommandAPDU(@JsonProperty(value = \"bytes\") byte[] apdu) {",
                "CODE"
            ],
            ["this.apdu = apdu.clone();", "CODE"],
            ["parse();", "CODE"],
            [
                "LOG.v(\"com.ubitricity.devices.common.pal.CommandAPDU creator (1)\");",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "Serializes to \"args\":[[\"[B\",\"AKQEAAnw8fLz9AAAAgA=\"],[\"net.sf.lipermi.call.RemoteInstance\",{\"instanceId\":\"b0e15098-f49e-4328-b072-fc5df42799bd\",\"className\":\"com.ubitricity.devices.common.tasks.ResponseReceiver\"}]] where \"args\" is an Object array field of the enclosing object.",
                []
            ]
        ]
    },
    "JacksonDatabind-54": {
        "code_elements": [
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);",
            "mapper.registerModule(new Jdk8Module());",
            "JsonResult result = new JsonResult();",
            "result.setA(Optional.empty());",
            "result.setB(Optional.empty());",
            "System.out.println(mapper.writeValueAsString(result));",
            "public class JsonResult {",
            "private Object a;",
            "private Optional<Object> b;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Optional.empty"],
        "summary_text": [
            "Optional.empty() not excluded if property declared with type Object"
        ],
        "desc_hints": [
            "JsonResult",
            "mapper.writeValueAsString",
            "mapper.setSerializationInclusion",
            "result.setB",
            "result.setA",
            "ObjectMapper",
            "Optional.empty",
            "JsonInclude.Include.NON_ABSENT",
            "mapper.registerModule",
            "System.out.println"
        ],
        "desc_text": [
            ["Jackson version is 2.6.6", []],
            ["Here is the code:", ["SR"]],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);",
                "CODE"
            ],
            ["mapper.registerModule(new Jdk8Module());", "CODE"],
            ["JsonResult result = new JsonResult();", "CODE"],
            ["result.setA(Optional.empty());", "CODE"],
            ["result.setB(Optional.empty());", "CODE"],
            ["System.out.println(mapper.writeValueAsString(result));", "CODE"],
            ["@Data", []],
            ["public class JsonResult {", "CODE"],
            ["private Object a;", "CODE"],
            ["private Optional<Object> b;", "CODE"],
            ["}", "CODE"],
            ["Then I got the output: {\"a\":null}", ["OB"]],
            [
                "The real value of both is the same, why the results are different?",
                []
            ],
            ["How can I avoid null in such case?", []],
            ["By the way, I tried 'NON_EMPTY'.", ["OB", "SR"]],
            ["It can work, but it also ignores zero and empty array.", ["OB"]],
            ["I want to keep them.", ["OB"]]
        ]
    },
    "Math-46": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Division by zero"],
        "desc_hints": [],
        "desc_text": [
            ["In class Complex, division by zero always returns NaN.", ["OB"]],
            [
                "I think that it should return NaN only when the numerator is also ZERO, otherwise the result should be INF.",
                ["OB", "EB"]
            ],
            ["See here.", ["OB"]]
        ]
    },
    "Compress-8": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TarArchiveEntry.parseTarHeader"],
        "summary_text": [
            "TarArchiveEntry.parseTarHeader() includes the trailing space/NUL when parsing the octal size"
        ],
        "desc_hints": ["TarArchiveEntry.parseTarHeader"],
        "desc_text": [
            [
                "TarArchiveEntry.parseTarHeader() includes the trailing space/NUL when parsing the octal size.",
                ["OB"]
            ],
            [
                "Although the size field in the header is 12 bytes, the last byte is supposed to be space or NUL - i.e.",
                []
            ],
            ["only 11 octal digits are allowed for the size.", ["OB"]]
        ]
    },
    "Closure-45": {
        "code_elements": ["var a = [], b;", "a.push(b = []);", "b[0] = 1;"],
        "stack_traces": [],
        "summary_hints": ["Array.push"],
        "summary_text": [
            "Assignment removed when used as an expression result to Array.push"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Open online closure-compiler", ["OB", "SR"]],
            ["2.", ["OB", "SR"]],
            ["Input code:", ["SR"]],
            ["function f() {", []],
            ["var a = [], b;", "CODE"],
            ["a.push(b = []);", "CODE"],
            ["b[0] = 1;", "CODE"],
            ["return a;", []],
            ["}", []],
            ["3.", ["OB", "SR"]],
            ["Press [Compile]", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Except OK.", ["OB"]],
            ["Output: function f(){var a=[];a.push([]);return a}; //wrong", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Current online version.", ["OB"]]
        ]
    },
    "Mockito-33": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArgumentCaptor.fromClass"],
        "summary_text": [
            "ArgumentCaptor.fromClass's return type should match a parameterized type"
        ],
        "desc_hints": [
            "ArgumentCaptor",
            "ArgumentCaptor.fromClass",
            "Consumer.class"
        ],
        "desc_text": [
            [
                "ArgumentCaptor.fromClass's return type should match a parameterized type.",
                ["OB", "EB"]
            ],
            ["I.e.", []],
            [
                "the expression ArgumentCaptor.fromClass(Class<S>) should be of type ArgumentCaptor<U> where S is a subtype of U.",
                ["EB", "SR"]
            ],
            ["For example:", ["OB", "SR"]],
            [
                "ArgumentCaptor<Consumer<String>> captor = ArgumentCaptor.fromClass(Consumer.class)",
                []
            ],
            ["does not type check (i.e.", ["OB"]],
            ["it is a compile time error).", ["OB"]],
            ["It should type check.", ["OB", "EB"]],
            [
                "The reasons that it is desirable for ArgumentCaptor.fromClass to allow expressions such as the example above to type check are:",
                ["SR"]
            ],
            [
                "ArgumentCaptor.fromClass is intended to be a convenience method to allow the user to construct an ArgumentCaptor without casting the returned value.",
                ["OB", "EB", "SR"]
            ],
            ["Currently, the user can devise a workaround such as:", []],
            ["ArgumentCaptor<?", []],
            ["extends Consumer<String>> captor", []],
            ["= ArgumentCaptor.fromClass(Consumer.class)", []],
            [
                "This workaround is inconvenient, and so contrary to ArgumentCaptor.fromClass being a convenience method.",
                []
            ],
            [
                "It is inconsistent with @Captor, which can be applied to a field with a paramterized type.",
                ["OB", "SR"]
            ],
            ["I.e.", []],
            ["@Captor ArgumentCaptor<Consumer<String>> captor", []],
            ["type checks.", ["OB"]]
        ]
    },
    "Jsoup-71": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Please support text node selector"],
        "desc_hints": [],
        "desc_text": [
            ["Please support some kind of text node selectors.", ["OB"]],
            [
                "Currently it's not possible to select a sibling text node of an element without coding Java.",
                ["OB", "SR"]
            ],
            ["A possible expression would be:", []],
            ["ELEM + :text", []]
        ]
    },
    "Math-11": {
        "code_elements": [
            "Assert.assertEquals(0.398942280401433, new MultivariateNormalDistribution(new double[]{0}, new double[][]{{1}}).density(new double[]{0}), 1e-15);"
        ],
        "stack_traces": [],
        "summary_hints": ["MultivariateNormalDistribution.density"],
        "summary_text": [
            "MultivariateNormalDistribution.density(double[]) returns wrong value when the dimension is odd"
        ],
        "desc_hints": ["MultivariateNormalDistribution", "Assert.assertEquals"],
        "desc_text": [
            ["To reproduce:", ["SR"]],
            [
                "Assert.assertEquals(0.398942280401433, new MultivariateNormalDistribution(new double[]{0}, new double[][]{{1}}).density(new double[]{0}), 1e-15);",
                "CODE"
            ]
        ]
    },
    "Compress-10": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Cannot Read Winzip Archives With Unicode Extra Fields"
        ],
        "desc_hints": [
            "ZipFile.getEntries",
            "ZipFile.getInputStream",
            "UTF8ZipFilesTest.patch",
            "ZipArchiveEntry",
            "WinZip",
            "ZipFile.java",
            "ZipFile.patch",
            "ZipArchiveEntries",
            "org.apache.commons.compress.archivers.zip.ZipFile",
            "HashMap",
            "ZipFile.getEntry"
        ],
        "desc_text": [
            [
                "I have a zip file created with WinZip containing Unicode extra fields.",
                ["OB", "SR"]
            ],
            [
                "Upon attempting to extract it with org.apache.commons.compress.archivers.zip.ZipFile, ZipFile.getInputStream() returns null for ZipArchiveEntries previously retrieved with ZipFile.getEntry() or even ZipFile.getEntries().",
                ["OB"]
            ],
            [
                "See UTF8ZipFilesTest.patch in the attachments for a test case exposing the bug.",
                ["OB"]
            ],
            [
                "The original test case stopped short of trying to read the entries, that's why this wasn't flagged up before.",
                ["SR"]
            ],
            [
                "The problem lies in the fact that inside ZipFile.java entries are stored in a HashMap.",
                []
            ],
            [
                "However, at one point after populating the HashMap, the unicode extra fields are read, which leads to a change of the ZipArchiveEntry name, and therefore a change of its hash code.",
                ["OB"]
            ],
            [
                "Because of this, subsequent gets on the HashMap fail to retrieve the original values.",
                ["OB"]
            ],
            [
                "ZipFile.patch contains an (admittedly simple-minded) fix for this problem by reconstructing the entries HashMap after the Unicode extra fields have been parsed.",
                []
            ],
            [
                "The purpose of this patch is mainly to show that the problem is indeed what I think, rather than providing a well-designed solution.",
                []
            ],
            ["The patches have been tested against revision 1210416.", ["OB"]]
        ]
    },
    "Closure-134": {
        "code_elements": [
            "/**",
            "* Interface",
            "* @interface",
            "*/",
            "A = function() {};",
            "/**",
            "* @param {string} a",
            "*/",
            "A.prototype.foo = function(a) {};",
            "/**",
            "* @constructor",
            "* @implements {A}",
            "*/",
            "B = function() {};",
            "/**",
            "* @inheritDoc",
            "*/",
            "B.prototype.foo = function(a) {",
            "alert(a.substring(0));   //  ERROR - could not determine the type of",
            "this expression"
        ],
        "stack_traces": [],
        "summary_hints": ["inheritDoc"],
        "summary_text": ["@inheritDoc doesn't play well with interfaces"],
        "desc_hints": ["prototype.foo", "inheritDoc"],
        "desc_text": [
            [
                "If I use interface inheritance with @inheritDoc, the compiler doesn't",
                ["OB"]
            ],
            ["know about the types used in the method signature.", ["OB"]],
            ["Sample code:", ["SR"]],
            ["/**", "CODE"],
            ["* Interface", "CODE"],
            ["* @interface", "CODE"],
            ["*/", "CODE"],
            ["A = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @param {string} a", "CODE"],
            ["*/", "CODE"],
            ["A.prototype.foo = function(a) {};", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @implements {A}", "CODE"],
            ["*/", "CODE"],
            ["B = function() {};", "CODE"],
            ["/**", "CODE"],
            ["* @inheritDoc", "CODE"],
            ["*/", "CODE"],
            ["B.prototype.foo = function(a) {", "CODE"],
            [
                "alert(a.substring(0));   //  ERROR - could not determine the type of",
                "CODE"
            ],
            ["this expression", "CODE"],
            ["};", []]
        ]
    },
    "Time-26": {
        "code_elements": [
            "public void jodaTest ()",
            "{",
            "Chronology chronUTC =",
            "GregorianChronology.getInstance(DateTimeZone.UTC);",
            "DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0,",
            "0, chronUTC);",
            "DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0,",
            "0, chronUTC);",
            "Chronology chronUSCentral =",
            "GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));",
            "Assert.assertTrue(\"Should be standard time\",",
            "chronUSCentral.getZone().isStandardOffset(",
            "usCentralStandardInUTC.getMillis()));",
            "Assert.assertFalse(\"Should be daylight time\",",
            "chronUSCentral.getZone().isStandardOffset(",
            "usCentralDaylightInUTC.getMillis()));",
            "DateTime usCentralStandardInUSCentral =",
            "usCentralStandardInUTC.toDateTime(chronUSCentral);",
            "DateTime usCentralDaylightInUSCentral =",
            "usCentralDaylightInUTC.toDateTime(chronUSCentral);",
            "assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());",
            "assertEquals(usCentralStandardInUSCentral.getHourOfDay(),",
            "usCentralDaylightInUSCentral.getHourOfDay());",
            "Assert.assertTrue(usCentralStandardInUSCentral.getMillis() !=",
            "usCentralDaylightInUSCentral.getMillis());",
            "DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0,",
            "0, 0, chronUTC);",
            "DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0,",
            "0, 0, chronUTC);",
            "Chronology chronAusNSW =",
            "GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));",
            "Assert.assertTrue(\"Should be standard time\",",
            "chronAusNSW.getZone().isStandardOffset(",
            "australiaNSWStandardInUTC.getMillis()));",
            "Assert.assertFalse(\"Should be daylight time\",",
            "chronAusNSW.getZone().isStandardOffset(",
            "australiaNSWDaylightInUTC.getMillis()));",
            "DateTime australiaNSWStandardInAustraliaNSW =",
            "australiaNSWStandardInUTC.toDateTime(chronAusNSW);",
            "DateTime australiaNSWDaylightInAusraliaNSW =",
            "australiaNSWDaylightInUTC.toDateTime(chronAusNSW);",
            "assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());",
            "assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(),",
            "australiaNSWDaylightInAusraliaNSW.getHourOfDay());",
            "Assert.assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() !=",
            "australiaNSWDaylightInAusraliaNSW.getMillis());",
            "// Verify that setting the hour of day on the DST boundary results",
            "in a daylight time for",
            "// both time zones.",
            "assertEquals(usCentralDaylightInUSCentral,",
            "usCentralStandardInUSCentral.withHourOfDay(1));",
            "assertEquals(australiaNSWDaylightInAusraliaNSW,",
            "australiaNSWStandardInAustraliaNSW.withHourOfDay(2));",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["withHourOfDay"],
        "summary_text": [
            "#60 .withHourOfDay() sets hour inconsistantly on DST transition."
        ],
        "desc_hints": [
            "australiaNSWDaylightInAusraliaNSW.getHourOfDay",
            "assertEquals",
            "australiaNSWStandardInAustraliaNSW",
            "usCentralDaylightInUSCentral",
            "usCentralStandardInUSCentral.getHourOfDay",
            "java.lang.AssertionError",
            "Assert.assertFalse",
            "DateTime",
            "usCentralDaylightInUTC.toDateTime",
            "jodaTest",
            "isStandardOffset",
            "chronUTC",
            "chronAusNSW",
            "chronUSCentral.getZone",
            "GregorianChronology.getInstance",
            "usCentralStandardInUTC.toDateTime",
            "australiaNSWStandardInAustraliaNSW.getHourOfDay",
            "usCentralStandardInUSCentral.getMillis",
            "australiaNSWStandardInUTC.getMillis",
            "usCentralDaylightInUSCentral.getHourOfDay",
            "australiaNSWDaylightInAusraliaNSW",
            "usCentralDaylightInUTC.getMillis",
            "australiaNSWDaylightInUTC.toDateTime",
            "usCentralStandardInUTC.getMillis",
            "usCentralStandardInUSCentral",
            "usCentralDaylightInUSCentral.getMillis",
            "australiaNSWDaylightInUTC.getMillis",
            "chronAusNSW.getZone",
            "australiaNSWStandardInUTC.toDateTime",
            "australiaNSWStandardInAustraliaNSW.withHourOfDay",
            "usCentralStandardInUTC",
            "australiaNSWStandardInUTC",
            "chronUSCentral",
            "usCentralStandardInUSCentral.withHourOfDay",
            "usCentralDaylightInUTC",
            "australiaNSWDaylightInUTC",
            "Assert.assertTrue",
            "DateTimeZone.forID",
            "australiaNSWStandardInAustraliaNSW.getMillis",
            "australiaNSWDaylightInAusraliaNSW.getMillis",
            "DateTimeZone.UTC"
        ],
        "desc_text": [
            [
                "When the hour of day is set to the ambiguous hour on the daylight to",
                ["OB", "SR"]
            ],
            [
                "standard time transition in a given time zone the result is inconsistent for different time zones.",
                ["OB"]
            ],
            ["Shoul the hour be set to the", []],
            ["daylight hour or the standard hour for all time zones?", []],
            ["I can't find anything", ["OB"]],
            ["that documents this behavior.", ["OB"]],
            [
                "My test code below returns different results for different time zones.",
                ["OB"]
            ],
            ["/", []],
            [
                "Verify Joda converts the hour of day the same for regions north and",
                ["OB"]
            ],
            [
                "south of the equator on the DST daylight to standard time transition.",
                ["OB", "SR"]
            ],
            ["*/", []],
            ["@Test", []],
            ["public void jodaTest ()", "CODE"],
            ["{", "CODE"],
            ["Chronology chronUTC =", "CODE"],
            ["GregorianChronology.getInstance(DateTimeZone.UTC);", "CODE"],
            [
                "DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0,",
                "CODE"
            ],
            ["0, chronUTC);", "CODE"],
            [
                "DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0,",
                "CODE"
            ],
            ["0, chronUTC);", "CODE"],
            ["Chronology chronUSCentral =", "CODE"],
            [
                "GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));",
                "CODE"
            ],
            ["Assert.assertTrue(\"Should be standard time\",", "CODE"],
            ["chronUSCentral.getZone().isStandardOffset(", "CODE"],
            ["usCentralStandardInUTC.getMillis()));", "CODE"],
            ["Assert.assertFalse(\"Should be daylight time\",", "CODE"],
            ["chronUSCentral.getZone().isStandardOffset(", "CODE"],
            ["usCentralDaylightInUTC.getMillis()));", "CODE"],
            ["DateTime usCentralStandardInUSCentral =", "CODE"],
            ["usCentralStandardInUTC.toDateTime(chronUSCentral);", "CODE"],
            ["DateTime usCentralDaylightInUSCentral =", "CODE"],
            ["usCentralDaylightInUTC.toDateTime(chronUSCentral);", "CODE"],
            [
                "assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());",
                "CODE"
            ],
            [
                "assertEquals(usCentralStandardInUSCentral.getHourOfDay(),",
                "CODE"
            ],
            ["usCentralDaylightInUSCentral.getHourOfDay());", "CODE"],
            [
                "Assert.assertTrue(usCentralStandardInUSCentral.getMillis() !=",
                "CODE"
            ],
            ["usCentralDaylightInUSCentral.getMillis());", "CODE"],
            [
                "DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0,",
                "CODE"
            ],
            ["0, 0, chronUTC);", "CODE"],
            [
                "DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0,",
                "CODE"
            ],
            ["0, 0, chronUTC);", "CODE"],
            ["Chronology chronAusNSW =", "CODE"],
            [
                "GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));",
                "CODE"
            ],
            ["Assert.assertTrue(\"Should be standard time\",", "CODE"],
            ["chronAusNSW.getZone().isStandardOffset(", "CODE"],
            ["australiaNSWStandardInUTC.getMillis()));", "CODE"],
            ["Assert.assertFalse(\"Should be daylight time\",", "CODE"],
            ["chronAusNSW.getZone().isStandardOffset(", "CODE"],
            ["australiaNSWDaylightInUTC.getMillis()));", "CODE"],
            ["DateTime australiaNSWStandardInAustraliaNSW =", "CODE"],
            ["australiaNSWStandardInUTC.toDateTime(chronAusNSW);", "CODE"],
            ["DateTime australiaNSWDaylightInAusraliaNSW =", "CODE"],
            ["australiaNSWDaylightInUTC.toDateTime(chronAusNSW);", "CODE"],
            [
                "assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());",
                "CODE"
            ],
            [
                "assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(),",
                "CODE"
            ],
            ["australiaNSWDaylightInAusraliaNSW.getHourOfDay());", "CODE"],
            [
                "Assert.assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() !=",
                "CODE"
            ],
            ["australiaNSWDaylightInAusraliaNSW.getMillis());", "CODE"],
            [
                "// Verify that setting the hour of day on the DST boundary results",
                "CODE"
            ],
            ["in a daylight time for", "CODE"],
            ["// both time zones.", "CODE"],
            ["assertEquals(usCentralDaylightInUSCentral,", "CODE"],
            ["usCentralStandardInUSCentral.withHourOfDay(1));", "CODE"],
            ["assertEquals(australiaNSWDaylightInAusraliaNSW,", "CODE"],
            ["australiaNSWStandardInAustraliaNSW.withHourOfDay(2));", "CODE"],
            ["}", "CODE"],
            [
                "The very last assertion fails on the Australia time zone cutover.",
                ["OB"]
            ],
            [
                "java.lang.AssertionError: expected:<2008-04-06T02:00:00.000+11:00> but",
                ["EB"]
            ],
            ["was:<2008-04-06T02:00:00.000+10:00>", []]
        ]
    },
    "Jsoup-68": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["java.lang.StackOverflowError"],
        "summary_text": ["version 1.11.1 java.lang.StackOverflowError"],
        "desc_hints": [
            "java.lang.StackOverflowError",
            "www.bhem.gov.cn",
            "www.beihai.gov.cn",
            "szshb.nxszs.gov.cn",
            "www.lnfsfda.gov.cn",
            "www.fsepb.gov.cn"
        ],
        "desc_text": [
            ["version 1.10.3 no problem", ["OB"]],
            ["version 1.11.1 java.lang.StackOverflowError", []],
            ["Example URL\uff1a", ["SR"]],
            ["http://szshb.nxszs.gov.cn/", []],
            ["http://www.lnfsfda.gov.cn/", []],
            ["http://www.beihai.gov.cn/", []],
            ["http://www.fsepb.gov.cn/", []],
            ["http://www.bhem.gov.cn", []]
        ]
    },
    "Time-8": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DateTimeZone.forOffsetHoursMinutes"],
        "summary_text": [
            "DateTimeZone.forOffsetHoursMinutes cannot handle negative offset < 1 hour"
        ],
        "desc_hints": ["forOffsetMillis", "DateTimeZone.forOffsetHoursMinutes"],
        "desc_text": [
            [
                "DateTimeZone.forOffsetHoursMinutes(h,m) cannot handle negative offset < 1 hour like -0:30 due to argument range checking.",
                ["OB"]
            ],
            ["I used forOffsetMillis() instead.", ["OB"]],
            [
                "This should probably be mentioned in the documentation or negative minutes be accepted.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-50": {
        "code_elements": [
            "var variable = confirm(\"value from user\");",
            "var array = [ \"constant\", variable ];",
            "alert( array.join(\",\") );",
            "var a=[\"constant\",confirm(\"value from user\")];alert(a.join(\",\"));",
            "var a=[\"constant\",confirm(\"value from user\")];alert(a.join());",
            "var my_jquery_selectors = [];",
            "// ... append to my_jquery_selectors from various parts of the codebase ...",
            "$(my_jquery_selectors.join(\",\")).html(\"the code is more readable with the comma left in place\");"
        ],
        "stack_traces": [],
        "summary_hints": ["array.join"],
        "summary_text": [
            "Optimisation: convert array.join(\",\") to array.join()"
        ],
        "desc_hints": [
            "foo.js",
            "code.google.com",
            "my_jquery_selectors.join",
            "compiler.jar",
            "array.join"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Compile this code:", ["SR"]],
            ["var variable = confirm(\"value from user\");", "CODE"],
            ["var array = [ \"constant\", variable ];", "CODE"],
            ["alert( array.join(\",\") );", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "$ java -jar /usr/local/slando/lib/Google/compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --js foo.js",
                []
            ],
            [
                "var a=[\"constant\",confirm(\"value from user\")];alert(a.join(\",\"));",
                "CODE"
            ],
            ["We could save three bytes here by producing:", []],
            [
                "var a=[\"constant\",confirm(\"value from user\")];alert(a.join());",
                "CODE"
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "$ java -jar /usr/local/slando/lib/Google/compiler.jar --version",
                []
            ],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: 1180", []],
            ["Built on: 2011/06/15 21:40", []],
            ["Running on Linux 2.6.18", []],
            ["Please provide any additional information below.", "QUERY"],
            ["Here's a common pattern this would be useful in:", []],
            ["var my_jquery_selectors = [];", "CODE"],
            [
                "// ... append to my_jquery_selectors from various parts of the codebase ...",
                "CODE"
            ],
            [
                "$(my_jquery_selectors.join(\",\")).html(\"the code is more readable with the comma left in place\");",
                "CODE"
            ]
        ]
    },
    "Lang-26": {
        "code_elements": [
            "import java.util.Calendar;",
            "import java.util.Date;",
            "import java.util.Locale;",
            "import java.text.SimpleDateFormat;",
            "import org.apache.commons.lang.time.FastDateFormat;",
            "public class FastDateFormatWeekBugDemo {",
            "public static void main(String[] args) {",
            "Locale.setDefault(new Locale(\"en\", \"US\"));",
            "Locale locale = new Locale(\"sv\", \"SE\");",
            "Calendar cal = Calendar.getInstance(); // setting locale here doesn't change outcome",
            "cal.set(2010, 0, 1, 12, 0, 0);",
            "Date d = cal.getTime();",
            "System.out.println(\"Target date: \" + d);",
            "FastDateFormat fdf = FastDateFormat.getInstance(\"EEEE', week 'ww\", locale);",
            "SimpleDateFormat sdf = new SimpleDateFormat(\"EEEE', week 'ww\", locale);",
            "System.out.println(\"FastDateFormat:   \" + fdf.format(d)); // will output \"FastDateFormat:   fredag, week 01\"",
            "System.out.println(\"SimpleDateFormat: \" + sdf.format(d)); // will output \"SimpleDateFormat: fredag, week 53\"",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["FastDateFormat.format"],
        "summary_text": [
            "FastDateFormat.format() outputs incorrect week of year because locale isn't respected"
        ],
        "desc_hints": [
            "cal.getTime",
            "Calendar.getInstance",
            "java.text.SimpleDateFormat",
            "java.util.Date",
            "cal.set",
            "sdf.format",
            "FastDateFormatWeekBugDemo",
            "Locale.setDefault",
            "FastDateFormat",
            "org.apache.commons.lang.time.FastDateFormat",
            "FastDateFormat.getInstance",
            "System.out.println",
            "SimpleDateFormat",
            "minimalDaysInFirstWeek",
            "fdf.format",
            "java.util.Calendar",
            "java.util.Locale",
            "firstDayOfWeek"
        ],
        "desc_text": [
            [
                "FastDateFormat apparently doesn't respect the locale it was sent on creation when outputting week in year (e.g.",
                ["OB"]
            ],
            ["\"ww\") in format().", ["OB"]],
            [
                "It seems to use the settings of the system locale for firstDayOfWeek and minimalDaysInFirstWeek, which (depending on the year) may result in the incorrect week number being output.",
                ["OB"]
            ],
            [
                "Here is a simple test program to demonstrate the problem by comparing with SimpleDateFormat, which gets the week number right:",
                ["SR"]
            ],
            ["import java.util.Calendar;", "CODE"],
            ["import java.util.Date;", "CODE"],
            ["import java.util.Locale;", "CODE"],
            ["import java.text.SimpleDateFormat;", "CODE"],
            ["import org.apache.commons.lang.time.FastDateFormat;", "CODE"],
            ["public class FastDateFormatWeekBugDemo {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["Locale.setDefault(new Locale(\"en\", \"US\"));", "CODE"],
            ["Locale locale = new Locale(\"sv\", \"SE\");", "CODE"],
            [
                "Calendar cal = Calendar.getInstance(); // setting locale here doesn't change outcome",
                "CODE"
            ],
            ["cal.set(2010, 0, 1, 12, 0, 0);", "CODE"],
            ["Date d = cal.getTime();", "CODE"],
            ["System.out.println(\"Target date: \" + d);", "CODE"],
            [
                "FastDateFormat fdf = FastDateFormat.getInstance(\"EEEE', week 'ww\", locale);",
                "CODE"
            ],
            [
                "SimpleDateFormat sdf = new SimpleDateFormat(\"EEEE', week 'ww\", locale);",
                "CODE"
            ],
            [
                "System.out.println(\"FastDateFormat:   \" + fdf.format(d)); // will output \"FastDateFormat:   fredag, week 01\"",
                "CODE"
            ],
            [
                "System.out.println(\"SimpleDateFormat: \" + sdf.format(d)); // will output \"SimpleDateFormat: fredag, week 53\"",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "If sv/SE is passed to Locale.setDefault() instead of en/US, both FastDateFormat and SimpleDateFormat output the correct week number.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-17": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:99)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:788)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:308)"
        ],
        "summary_hints": [],
        "summary_text": ["Tar file for Android backup cannot be read"],
        "desc_hints": [
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
            "TarArchiveEntry.java",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal",
            "TarUtils.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader",
            "java.lang.IllegalArgumentException"
        ],
        "desc_text": [
            [
                "Attached tar file was generated by some kind of backup tool on Android.",
                ["OB", "SR"]
            ],
            [
                "Normal tar utilities seem to handle it fine, but Commons Compress doesn't.",
                ["OB"]
            ],
            [
                "java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '01750{NUL}{NUL}{NUL}' len=8",
                []
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:99)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:788)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:308)",
                "STACK_TRACE"
            ]
        ]
    },
    "Jsoup-22": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["siblingElements"],
        "summary_text": [
            "siblingElements in Element throws Null Pointer Exception"
        ],
        "desc_hints": [
            "previousSibling",
            "nextSibling",
            "Node.java",
            "siblingElements"
        ],
        "desc_text": [
            ["Hi,", []],
            [
                "I have noticed that the sibling methods (nextSibling, previousSibling, siblingElements) rely on an element (underlying node) having a parent.",
                ["SR"]
            ],
            [
                "If the node does not have a parent it throws null pointer exception.",
                ["OB"]
            ],
            [
                "Would it be possible to modify the code so that it checks for parent nullness around Node.java:468?",
                []
            ],
            ["In the event of nullness return null as in the javadoc?", []],
            ["Confirmed in 1.6.2", ["OB"]]
        ]
    },
    "Math-20": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["CMAESOptimizer does not enforce bounds"],
        "desc_hints": [
            "doOptimize",
            "checkFeasableCount",
            "generationLoop",
            "isFeasible"
        ],
        "desc_text": [
            [
                "The CMAESOptimizer can exceed the bounds passed to optimize.",
                ["OB"]
            ],
            [
                "Looking at the generationLoop in doOptimize(), it does a bounds check by calling isFeasible() but if checkFeasableCount is zero (the default) then isFeasible() is never even called.",
                ["OB"]
            ],
            [
                "Also, even with non-zero checkFeasableCount it may give up before finding an in-bounds offspring and go forward with an out-of-bounds offspring.",
                ["OB", "SR"]
            ],
            ["This is against svn revision 1387637.", []],
            [
                "I can provide an example program where the optimizer ends up with a fit outside the prescribed bounds if that would help.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-89": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Block more JDK types from polymorphic deserialization (CVE 2017-15095)"
        ],
        "desc_hints": [],
        "desc_text": [
            ["(note: follow-up for #1599)", []],
            [
                "After initial set of types blocked new reports have arrived for more black-listing.",
                ["OB"]
            ],
            [
                "Although eventual approach is likely to rely separate module (for more timely updates and wider version coverage), at this point addition in databind is needed.",
                []
            ],
            [
                "I will update specific list of additions once complete and release is out.",
                ["OB"]
            ],
            [
                "Target versions are 2.8.10 and 2.9.1 -- it is possible to backport in 2.7 and even 2.6, but there is diminishing return on effort with those versions so it will not happen unless specifically requested (I'm happy to merge PRs).",
                ["OB"]
            ]
        ]
    },
    "Math-81": {
        "code_elements": [
            "// the reference values have been computed using routine DSTEMR",
            "// from the fortran library LAPACK version 3.2.1",
            "// the following line triggers the exception",
            "new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);",
            "double[] eigenValues = decomposition.getRealEigenvalues();",
            "for (int i = 0; i < refEigenValues.length; ++i) {",
            "assertEquals(refEigenValues[i], eigenValues[i], 1.0e-6);",
            "if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {",
            "assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-6);",
            "} else {",
            "assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-6);",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(EigenDecompositionImpl.java:1545)",
            "at org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(EigenDecompositionImpl.java:1072)",
            "at org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(EigenDecompositionImpl.java:894)",
            "at org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues(EigenDecompositionImpl.java:658)",
            "at org.apache.commons.math.linear.EigenDecompositionImpl.decompose(EigenDecompositionImpl.java:246)",
            "at org.apache.commons.math.linear.EigenDecompositionImpl.<init>(EigenDecompositionImpl.java:205)",
            "at org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308(EigenDecompositionImplTest.java:136)"
        ],
        "summary_hints": [
            "EigenDecompositionImpl",
            "ArrayIndexOutOfBoundException"
        ],
        "summary_text": [
            "ArrayIndexOutOfBoundException in EigenDecompositionImpl"
        ],
        "desc_hints": [
            "EigenDecompositionImpl.java",
            "assertEquals",
            "org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement",
            "testMath308",
            "EigenDecompositionImpl",
            "RealVector",
            "refEigenValues",
            "org.apache.commons.math.linear.EigenDecompositionImpl",
            "EigenDecomposition",
            "MathUtils.SAFE_MIN",
            "decomposition.getEigenvector",
            "org.apache.commons.math.linear.EigenDecompositionImpl.goodStep",
            "java.lang.ArrayIndexOutOfBoundsException",
            "org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308",
            "refEigenVectors",
            "getNorm",
            "refEigenValues.length",
            "dotProduct",
            "org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues",
            "org.apache.commons.math.linear.EigenDecompositionImpl.decompose",
            "ArrayIndexOutOfBoundException",
            "secondaryTridiagonal",
            "EigenDecompositionImplTest.java",
            "org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock",
            "ArrayRealVector",
            "mainTridiagonal",
            "eigenValues",
            "decomposition.getRealEigenvalues"
        ],
        "desc_text": [
            [
                "The following test triggers an ArrayIndexOutOfBoundException:",
                ["SR"]
            ],
            ["public void testMath308() {", []],
            ["double[] mainTridiagonal = {", []],
            [
                "22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437",
                []
            ],
            ["};", []],
            ["double[] secondaryTridiagonal = {", []],
            [
                "13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225",
                []
            ],
            ["};", []],
            [
                "// the reference values have been computed using routine DSTEMR",
                "CODE"
            ],
            ["// from the fortran library LAPACK version 3.2.1", "CODE"],
            ["double[] refEigenValues = {", []],
            [
                "14.138204224043099, 18.847969733754262, 52.536278520113882, 53.456697699894512, 82.044413207204002",
                []
            ],
            ["};", []],
            ["RealVector[] refEigenVectors = {", []],
            [
                "new ArrayRealVector(new double[] { 0.584677060845929, -0.367177264979103, -0.721453187784497, 0.052971054621812, -0.005740715188257 }),",
                []
            ],
            [
                "new ArrayRealVector(new double[] { 0.713933751051495, -0.190582113553930, 0.671410443368332, -0.056056055955050,  0.006541576993581 }),",
                []
            ],
            [
                "new ArrayRealVector(new double[] { 0.222368839324646, 0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),",
                []
            ],
            [
                "new ArrayRealVector(new double[] { 0.314647769490148, 0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),",
                []
            ],
            [
                "new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055, 0.011530080757413, 0.252322434584915,  0.967572088232592 })",
                []
            ],
            ["};", []],
            ["// the following line triggers the exception", "CODE"],
            ["EigenDecomposition decomposition =", []],
            [
                "new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);",
                "CODE"
            ],
            [
                "double[] eigenValues = decomposition.getRealEigenvalues();",
                "CODE"
            ],
            ["for (int i = 0; i < refEigenValues.length; ++i) {", "CODE"],
            [
                "assertEquals(refEigenValues[i], eigenValues[i], 1.0e-6);",
                "CODE"
            ],
            [
                "if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {",
                "CODE"
            ],
            [
                "assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-6);",
                "CODE"
            ],
            ["} else {", "CODE"],
            [
                "assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-6);",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Running the previous method as a Junit test triggers the exception when the EigenDecompositionImpl instance is built.",
                ["OB", "SR"]
            ],
            ["The first few lines of the stack trace are:", []],
            ["java.lang.ArrayIndexOutOfBoundsException: -1", []],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(EigenDecompositionImpl.java:1545)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(EigenDecompositionImpl.java:1072)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(EigenDecompositionImpl.java:894)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues(EigenDecompositionImpl.java:658)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImpl.decompose(EigenDecompositionImpl.java:246)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImpl.<init>(EigenDecompositionImpl.java:205)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308(EigenDecompositionImplTest.java:136)",
                "STACK_TRACE"
            ],
            ["I'm currently investigating this bug.", []],
            [
                "It is not a simple index translation error between the original fortran (Lapack) and commons-math implementation.",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonDatabind-64": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonInclude"],
        "summary_text": ["Further issues with @JsonInclude with NON_DEFAULT"],
        "desc_hints": ["JsonInclude", "JsonInclude.Include.NON_DEFAULT"],
        "desc_text": [
            ["(follow-up to #1351)", []],
            [
                "Looks like there are still cases where class annotation like:",
                ["SR"]
            ],
            ["@JsonInclude(JsonInclude.Include.NON_DEFAULT)", []],
            [
                "does not work for default null value suppression for String type (at least).",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-73": {
        "code_elements": [
            "public class TestPojo",
            "{",
            "private String firstName;",
            "private String lastName;",
            "@JsonProperty(access = Access.READ_ONLY)",
            "public String getFullName()",
            "{",
            "return firstName + \" \" + lastName;",
            "}",
            "public String getFirstName()",
            "{",
            "return firstName;",
            "}",
            "public void setFirstName(String firstName)",
            "{",
            "this.firstName = firstName;",
            "}",
            "public String getLastName()",
            "{",
            "return lastName;",
            "}",
            "public void setLastName(String lastName)",
            "{",
            "this.lastName = lastName;",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Access.READ_ONLY", "JsonProperty"],
        "summary_text": [
            "@JsonProperty(access = Access.READ_ONLY) - unexpected behaviour"
        ],
        "desc_hints": [
            "Access.READ_ONLY",
            "JsonProperty",
            "firstName",
            "getFirstName",
            "fullName",
            "setLastName",
            "getFullName",
            "TestPojo",
            "lastName",
            "setFirstName",
            "JsonIgnore",
            "this.lastName",
            "this.firstName",
            "getLastName"
        ],
        "desc_text": [
            ["Hey,", []],
            [
                "I was hoping to make use of @JsonProperty(access = Access.READ_ONLY), but failed.",
                ["OB"]
            ],
            ["Assume this class:", []],
            ["public class TestPojo", "CODE"],
            ["{", "CODE"],
            ["private String firstName;", "CODE"],
            ["private String lastName;", "CODE"],
            ["@JsonProperty(access = Access.READ_ONLY)", "CODE"],
            ["public String getFullName()", "CODE"],
            ["{", "CODE"],
            ["return firstName + \" \" + lastName;", "CODE"],
            ["}", "CODE"],
            ["public String getFirstName()", "CODE"],
            ["{", "CODE"],
            ["return firstName;", "CODE"],
            ["}", "CODE"],
            ["public void setFirstName(String firstName)", "CODE"],
            ["{", "CODE"],
            ["this.firstName = firstName;", "CODE"],
            ["}", "CODE"],
            ["public String getLastName()", "CODE"],
            ["{", "CODE"],
            ["return lastName;", "CODE"],
            ["}", "CODE"],
            ["public void setLastName(String lastName)", "CODE"],
            ["{", "CODE"],
            ["this.lastName = lastName;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "I couldn't find a way to stop the deserializer from attempting to deserialize the field \"fullName\".",
                ["OB"]
            ],
            [
                "The only thing that helps is to create a setter and annotate it with @JsonIgnore.",
                ["SR"]
            ],
            [
                "However, that setter does not make sense and I don't want to have it.",
                []
            ],
            ["Is this a bug in behaviour or am I missing something?", []],
            ["Thanks", []]
        ]
    },
    "Math-52": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["numerical problems in rotation creation"],
        "desc_hints": [],
        "desc_text": [
            [
                "building a rotation from the following vector pairs leads to NaN:",
                ["OB", "SR"]
            ],
            [
                "u1 = -4921140.837095533, -2.1512094250440013E7, -890093.279426377",
                []
            ],
            [
                "u2 = -2.7238580938724895E9, -2.169664921341876E9, 6.749688708885301E10",
                []
            ],
            ["v1 = 1, 0, 0", []],
            ["v2 = 0, 0, 1", []],
            [
                "The constructor first changes the (v1, v2) pair into (v1', v2') ensuring the following scalar products hold:",
                ["SR"]
            ],
            ["<v1'|v1'> == <u1|u1>", []],
            ["<v2'|v2'> == <u2|u2>", []],
            ["<u1 |u2> == <v1'|v2'>", []],
            [
                "Once the (v1', v2') pair has been computed, we compute the cross product:",
                []
            ],
            ["k = (v1' - u1)^(v2' - u2)", []],
            ["and the scalar product:", []],
            ["c = <k | (u1^u2)>", []],
            [
                "By construction, c is positive or null and the quaternion axis we want to build is q = k/[2*sqrt(c)].",
                []
            ],
            [
                "c should be null only if some of the vectors are aligned, and this is dealt with later in the algorithm.",
                ["OB", "EB"]
            ],
            [
                "However, there are numerical problems with the vector above with the way these computations are done, as shown",
                []
            ],
            [
                "by the following comparisons, showing the result we get from our Java code and the result we get from manual",
                ["OB", "SR"]
            ],
            [
                "computation with the same formulas but with enhanced precision:",
                ["OB"]
            ],
            [
                "commons math: k = 38514476.5,            -84.,                           -1168590144",
                []
            ],
            [
                "high precision: k = 38514410.36093388..., -0.374075245201180409222711..., -1168590152.10599715208...",
                []
            ],
            [
                "and it becomes worse when computing c because the vectors are almost orthogonal to each other, hence inducing additional cancellations.",
                ["OB"]
            ],
            ["We get:", []],
            ["commons math  c = -1.2397173627587605E20", []],
            ["high precision: c = 558382746168463196.7079627...", []],
            [
                "We have lost ALL significant digits in cancellations, and even the sign is wrong!",
                ["OB"]
            ]
        ]
    },
    "Closure-166": {
        "code_elements": [
            "/** @param {{prop: string, prop2: (string|undefined)}} record */",
            "var func = function(record) {",
            "window.console.log(record.prop);",
            "}",
            "/** @param {{prop: string, prop2: (string|undefined)}|string} record */",
            "var func2 = function(record) {",
            "if (typeof record == 'string') {",
            "window.console.log(record);",
            "} else {",
            "window.console.log(record.prop);",
            "}",
            "}",
            "func({prop: 'a'});",
            "func2({prop: 'a'});",
            "func2({prop: 'a'});"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "anonymous object type inference inconsistency when used in union"
        ],
        "desc_hints": ["record.prop", "window.console.log"],
        "desc_text": [
            ["Code:", ["SR"]],
            [
                "/** @param {{prop: string, prop2: (string|undefined)}} record */",
                "CODE"
            ],
            ["var func = function(record) {", "CODE"],
            ["window.console.log(record.prop);", "CODE"],
            ["}", "CODE"],
            [
                "/** @param {{prop: string, prop2: (string|undefined)}|string} record */",
                "CODE"
            ],
            ["var func2 = function(record) {", "CODE"],
            ["if (typeof record == 'string') {", "CODE"],
            ["window.console.log(record);", "CODE"],
            ["} else {", "CODE"],
            ["window.console.log(record.prop);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["func({prop: 'a'});", "CODE"],
            ["func2({prop: 'a'});", "CODE"],
            ["errors with:", ["OB"]],
            [
                "ERROR - actual parameter 1 of func2 does not match formal parameter",
                ["OB"]
            ],
            ["found : {prop: string}", []],
            [
                "required: (string|{prop: string, prop2: (string|undefined)})",
                []
            ],
            ["func2({prop: 'a'});", "CODE"],
            [
                "the type of the record input to func and func2 are identical but the parameters to func2 allow some other type.",
                ["OB"]
            ]
        ]
    },
    "Lang-42": {
        "code_elements": [
            "import org.apache.commons.lang.*;",
            "public class J2 {",
            "public static void main(String[] args) throws Exception {",
            "// this is the utf8 representation of the character:",
            "// COUNTING ROD UNIT DIGIT THREE",
            "// in unicode",
            "// codepoint: U+1D362",
            "byte[] data = new byte[]",
            "{ (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 }",
            ";",
            "//output is: &#55348;&#57186;",
            "// should be: &#119650;",
            "System.out.println(\"'\" + StringEscapeUtils.escapeHtml(new String(data, \"UTF8\")) + \"'\");",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["StringEscapeUtils.escapeHtml"],
        "summary_text": [
            "StringEscapeUtils.escapeHtml incorrectly converts unicode characters above U+00FFFF into 2 characters"
        ],
        "desc_hints": [
            "org.apache.commons.lang",
            "0xA2",
            "StringEscapeUtils.escapeHtml",
            "0xF0",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Characters that are represented as a 2 characters internaly by java are incorrectly converted by the function.",
                ["OB", "SR"]
            ],
            [
                "The following test displays the problem quite nicely:",
                ["OB", "SR"]
            ],
            ["import org.apache.commons.lang.*;", "CODE"],
            ["public class J2 {", "CODE"],
            [
                "public static void main(String[] args) throws Exception {",
                "CODE"
            ],
            ["// this is the utf8 representation of the character:", "CODE"],
            ["// COUNTING ROD UNIT DIGIT THREE", "CODE"],
            ["// in unicode", "CODE"],
            ["// codepoint: U+1D362", "CODE"],
            ["byte[] data = new byte[]", "CODE"],
            ["{ (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 }", "CODE"],
            [";", "CODE"],
            ["//output is: &#55348;&#57186;", "CODE"],
            ["// should be: &#119650;", "CODE"],
            [
                "System.out.println(\"'\" + StringEscapeUtils.escapeHtml(new String(data, \"UTF8\")) + \"'\");",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Should be very quick to fix, feel free to drop me an email if you want a patch.",
                ["EB"]
            ]
        ]
    },
    "Math-7": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "event state not updated if an unrelated event triggers a RESET_STATE during ODE integration"
        ],
        "desc_hints": ["eventOccurred"],
        "desc_text": [
            [
                "When an ODE solver manages several different event types, there are some unwanted side effects.",
                ["OB", "SR"]
            ],
            [
                "If one event handler asks for a RESET_STATE (for integration state) when its eventOccurred method is called, the other event handlers that did not trigger an event in the same step are not updated correctly, due to an early return.",
                ["OB", "EB"]
            ],
            [
                "As a result, when the next step is processed with a reset integration state, the forgotten event still refer to the start date of the previous state.",
                ["OB", "SR"]
            ],
            [
                "This implies that when these event handlers will be checked for In some cases, the function defining an event g(double t, double[] y) is called with state parameters y that are completely wrong.",
                ["OB"]
            ],
            [
                "In one case when the y array should have contained values between -1 and +1, one function call got values up to 1.0e20.",
                ["OB", "EB", "SR"]
            ],
            ["The attached file reproduces the problem.", ["SR"]]
        ]
    },
    "JxPath-10": {
        "code_elements": ["assertFalse(result.booleanValue());"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Binary operators behaviour involving node-sets is incorrect"
        ],
        "desc_hints": [
            "org.apache.xpath.objects.XObject",
            "pathContext.getValue",
            "pathContext",
            "Boolean.class",
            "StringReader",
            "newContext",
            "newDocumentBuilder",
            "lesserThan",
            "JXPathContext",
            "assertFalse",
            "result.booleanValue",
            "DocumentBuilderFactory.newInstance",
            "greaterThan",
            "InputSource"
        ],
        "desc_text": [
            ["According to XPath specification:", []],
            [
                "\"If both objects to be compared are node-sets, then the comparison will be true if and only if there is a node in the first node-set and a node in the second node-set such that the result of performing the comparison on the string-values of the two nodes is true.",
                ["OB", "EB", "SR"]
            ],
            [
                "If one object to be compared is a node-set and the other is a number, then the comparison will be true if and only if there is a node in the node-set such that the result of performing the comparison on the number to be compared and on the result of converting the string-value of that node to a number using the number function is true.\"",
                ["OB", "EB", "SR"]
            ],
            [
                "But following example illustrates, that this is not a JXPath behaviour:",
                ["SR"]
            ],
            ["JXPathContext pathContext = JXPathContext", []],
            [".newContext(DocumentBuilderFactory.newInstance()", ["OB"]],
            [".newDocumentBuilder().parse(", ["OB"]],
            ["new InputSource(new StringReader(", []],
            [
                "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\"",
                []
            ],
            ["+ \"<doc/>\"))));", []],
            [
                "Boolean result = (Boolean) pathContext.getValue(\"2.0 > child1\",",
                ["OB"]
            ],
            ["Boolean.class);", []],
            ["assertFalse(result.booleanValue());", "CODE"],
            [
                "\"child1\" is not found - right operand node set is empty, but result is TRUE, instead of FALSE.",
                ["OB", "EB"]
            ],
            [
                "Please, check greaterThan(), lesserThan(), etc methods of org.apache.xpath.objects.XObject for possible solution",
                []
            ]
        ]
    },
    "Mockito-5": {
        "code_elements": [
            "import org.testng.annotations.Test;",
            "import java.util.Observable;",
            "import static org.mockito.Mockito.*;",
            "public class VerifyErrorOnVerificationWithTimeoutTest {",
            "@Test public void should_not_throw_VerifyError() {",
            "verify(mock(Observable.class), timeout(500)).countObservers();",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
            "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
            "at org.mockito.Mockito.timeout(Mockito.java:2103)",
            "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:621)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)",
            "at java.net.URLClassLoader.access$000(URLClassLoader.java:58)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:197)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
            "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
            "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
            "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
            "at org.mockito.Mockito.timeout(Mockito.java:2103)",
            "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
            "Caused by: java.lang.ClassNotFoundException: junit.framework.ComparisonFailure",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:202)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
            "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
            "... 49 more"
        ],
        "summary_hints": ["VerifyError", "NoClassDefFoundError"],
        "summary_text": [
            "Mockito 1.10.x timeout verification needs JUnit classes (VerifyError, NoClassDefFoundError)"
        ],
        "desc_hints": [
            "Mockito.timeout",
            "VerifyError",
            "junit.framework.ComparisonFailure",
            "Observable.class",
            "java.net.URLClassLoader",
            "org.testng.annotations.Test",
            "org.mockito.verification.Timeout",
            "SecureClassLoader.java",
            "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
            "LinkageError",
            "java.lang.ClassLoader.defineClassCond",
            "com.example.UserServiceImplTest.test",
            "java.security.AccessController.doPrivileged",
            "VerificationOverTimeImpl",
            "URLClassLoader.java",
            "VerificationData",
            "java.lang.ClassNotFoundException",
            "VerifyErrorOnVerificationWithTimeoutTest",
            "java.util.Observable",
            "java.lang.ClassLoader.defineClass",
            "countObservers",
            "ClassLoader.java",
            "org.mockito.Mockito.timeout",
            "NoClassDefFoundError",
            "org.mockito.Mockito",
            "TestNG",
            "java.lang.NoClassDefFoundError",
            "Launcher.java",
            "VerficationOverTimeImpl",
            "ComparisonFailure",
            "java.lang.VerifyError",
            "Timeout.java",
            "java.security.SecureClassLoader.defineClass",
            "java.net.URLClassLoader.findClass",
            "StackOverflow",
            "java.lang.ClassLoader.defineClass1",
            "sun.misc.Launcher",
            "Mockito.after",
            "AppClassLoader.loadClass",
            "java.net.URLClassLoader.access",
            "should_not_throw_VerifyError",
            "java.lang.ClassLoader.loadClass",
            "java.net.URLClassLoader.defineClass",
            "Mockito.java",
            "UserServiceImplTest.java"
        ],
        "desc_text": [
            [
                "If JUnit is not on the classpath and mockito is version 1.10.x (as of now 1.10.1 up to 1.10.19) and the code is using the timeout verification which is not supposed to be related to JUnit, then the JVM may fail with a VerifyError or a NoClassDefFoundError.",
                ["OB", "SR"]
            ],
            [
                "This issue has been reported on the mailing list and on StackOverflow",
                []
            ],
            [
                "A simple test like that with TestNG (and no JUnit in the class path of course) exposes the issue:",
                ["SR"]
            ],
            ["import org.testng.annotations.Test;", "CODE"],
            ["import java.util.Observable;", "CODE"],
            ["import static org.mockito.Mockito.*;", "CODE"],
            ["public class VerifyErrorOnVerificationWithTimeoutTest {", "CODE"],
            ["@Test public void should_not_throw_VerifyError() {", "CODE"],
            [
                "verify(mock(Observable.class), timeout(500)).countObservers();",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["With TestNG 5.13.1, the stack trace is :", []],
            [
                "java.lang.VerifyError: (class: org/mockito/internal/verification/VerificationOverTimeImpl, method: verify signature: (Lorg/mockito/internal/verification/api/VerificationData;)V) Incompatible argument to function",
                []
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.Mockito.timeout(Mockito.java:2103)",
                "STACK_TRACE"
            ],
            [
                "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
                "STACK_TRACE"
            ],
            [
                "TestNG includes a dependency on JUnit 3.8.1, which has the junit.framework.ComparisonFailure, but the JVM cannot perform the linking at runtime (VerifyError extends LinkageError), probably because for the JVM there's some incompatible changes in this class between version 3.x and 4.x.",
                ["OB"]
            ],
            ["Note that Mockito is compiled against JUnit 4.x.", ["OB"]],
            [
                "This also reveal that Mockito is not anymore compatible with JUnit 3.x.",
                ["OB"]
            ],
            ["With TestNG 6.8.13, the stack trace is :", []],
            [
                "java.lang.NoClassDefFoundError: junit/framework/ComparisonFailure",
                []
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:621)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$000(URLClassLoader.java:58)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:197)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
                "STACK_TRACE"
            ],
            [
                "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.Mockito.timeout(Mockito.java:2103)",
                "STACK_TRACE"
            ],
            [
                "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.ClassNotFoundException: junit.framework.ComparisonFailure",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:202)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
                "STACK_TRACE"
            ],
            [
                "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
                "STACK_TRACE"
            ],
            ["... 49 more", "STACK_TRACE"],
            ["Indeed JUnit is not anymore a dependency of TestNG.", ["OB"]],
            [
                "In this specific case the issue is that the Timeout class wraps a VerficationOverTimeImpl that uses in try/catch block the exception org.mockito.exceptions.verification.junit.ArgumentsAreDifferent which extends junit.framework.ComparisonFailure.",
                ["OB", "SR"]
            ],
            [
                "At this time it seems to be the only place where JUnit is needed, this affect the following public API :",
                []
            ],
            ["Mockito.timeout(...)", []],
            ["Mockito.after(...)", []]
        ]
    },
    "JacksonDatabind-82": {
        "code_elements": [
            "public class JsonTest {",
            "private String username;",
            "private String password;",
            "public JsonTest() {",
            "super();",
            "// TODO Auto-generated constructor stub",
            "}",
            "public JsonTest(String username, String password) {",
            "super();",
            "this.username = username;",
            "this.password = password;",
            "}",
            "public String getUsername() {",
            "return username;",
            "}",
            "public void setUsername(String username) {",
            "this.username = username;",
            "}",
            "public String getPassword() {",
            "return password;",
            "}",
            "public void setPassword(String password) {",
            "this.password = password;",
            "}",
            "public static void main(String[] args) {",
            "ObjectMapper mapper = new ObjectMapper();",
            "JsonTest json = new JsonTest(\"user\", \"password\");",
            "try {",
            "System.out.println(mapper.writeValueAsString(json));",
            "} catch (JsonProcessingException e) {",
            "// TODO Auto-generated catch block",
            "e.printStackTrace();",
            "}",
            "String jsonString = \"{ \\\"username\\\":\\\"username\\\",\\\"password\\\":\\\"password\\\" }\";",
            "try {",
            "json = mapper.readValue(jsonString, JsonTest.class);",
            "System.out.println(json.getPassword());",
            "} catch (IOException e) {",
            "// TODO Auto-generated catch block",
            "e.printStackTrace();",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonIgnoreProperties.allowSetters"],
        "summary_text": [
            "JsonIgnoreProperties.allowSetters is not working in Jackson 2.8"
        ],
        "desc_hints": [
            "this.username",
            "this.password",
            "JsonProcessingException",
            "ignoreUnknown",
            "JsonTest.class",
            "ObjectMapper",
            "jsonString",
            "setPassword",
            "printStackTrace",
            "getUsername",
            "getPassword",
            "mapper.writeValueAsString",
            "setUsername",
            "mapper.readValue",
            "json.getPassword",
            "JsonIgnoreProperties",
            "allowSetters",
            "JsonTest",
            "System.out.println"
        ],
        "desc_text": [
            [
                "@JsonIgnoreProperties(value = { \"password\" }, ignoreUnknown = true, allowSetters = true)",
                []
            ],
            ["public class JsonTest {", "CODE"],
            ["private String username;", "CODE"],
            ["private String password;", "CODE"],
            ["public JsonTest() {", "CODE"],
            ["super();", "CODE"],
            ["// TODO Auto-generated constructor stub", "CODE"],
            ["}", "CODE"],
            ["public JsonTest(String username, String password) {", "CODE"],
            ["super();", "CODE"],
            ["this.username = username;", "CODE"],
            ["this.password = password;", "CODE"],
            ["}", "CODE"],
            ["public String getUsername() {", "CODE"],
            ["return username;", "CODE"],
            ["}", "CODE"],
            ["public void setUsername(String username) {", "CODE"],
            ["this.username = username;", "CODE"],
            ["}", "CODE"],
            ["public String getPassword() {", "CODE"],
            ["return password;", "CODE"],
            ["}", "CODE"],
            ["public void setPassword(String password) {", "CODE"],
            ["this.password = password;", "CODE"],
            ["}", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["JsonTest json = new JsonTest(\"user\", \"password\");", "CODE"],
            ["try {", "CODE"],
            ["System.out.println(mapper.writeValueAsString(json));", "CODE"],
            ["} catch (JsonProcessingException e) {", "CODE"],
            ["// TODO Auto-generated catch block", "CODE"],
            ["e.printStackTrace();", "CODE"],
            ["}", "CODE"],
            [
                "String jsonString = \"{ \\\"username\\\":\\\"username\\\",\\\"password\\\":\\\"password\\\" }\";",
                "CODE"
            ],
            ["try {", "CODE"],
            ["json = mapper.readValue(jsonString, JsonTest.class);", "CODE"],
            ["System.out.println(json.getPassword());", "CODE"],
            ["} catch (IOException e) {", "CODE"],
            ["// TODO Auto-generated catch block", "CODE"],
            ["e.printStackTrace();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["the version is 2.8.7.", ["OB"]],
            ["the password cannot deserialize.", ["OB"]],
            ["the output is:", ["OB"]],
            ["{\"username\":\"user\"}", []],
            ["null", []]
        ]
    },
    "Closure-31": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Add support for --manage_closure_dependencies and --only_closure_dependencies with compilation level WHITESPACE_ONLY"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "The compiler options --manage_closure_dependencies and --only_closure_dependencies are currently ignored with compilation level WHITESPACE_ONLY.",
                ["OB", "SR"]
            ],
            [
                "It would be helpful for testing, if dependency management were supported for WHITESPACE_ONLY in addition to SIMPLE_OPTIMIZATIONS and ADVANCED_OPTIMIZATIONS.",
                []
            ],
            [
                "For example, both Closure Builder and plovr automatically manage dependencies for all compilation levels.",
                ["OB", "SR"]
            ],
            [
                "The proposed change (see attached diff) does not automatically manage dependencies, but it enables dependency management if either --manage_closure_dependencies or --only_closure_dependencies is specified, or if at least one --closure_entry_point is specified.",
                ["OB"]
            ],
            ["The attached diff passed the JUnit tests: ant test", ["SR"]]
        ]
    },
    "Time-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Ensure there is a max/min valid offset"],
        "desc_hints": ["DateTimeZone"],
        "desc_text": [
            [
                "DateTimeZone does not apply a max/min value for an offset.",
                ["OB"]
            ],
            ["However the parse method is limited to 23:59.", ["OB"]],
            ["Make 23:59:59.999 the maximum.", ["OB"]]
        ]
    },
    "JacksonDatabind-91": {
        "code_elements": [
            "import org.apache.logging.log4j.core.LogEvent;",
            "import org.apache.logging.log4j.core.parser.LogEventParser;",
            "import org.apache.logging.log4j.core.parser.JsonLogEventParser;",
            "import java.nio.charset.StandardCharsets;",
            "LogEventParser parser = new JsonLogEventParser();",
            "LogEvent result = parser.parseFrom(inputString.getBytes(StandardCharsets.UTF_8));",
            "assert result != null;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["2.9.2 deserialization regression"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "Main.java",
            "org.apache.logging.log4j.Level",
            "JsonLogEventParser",
            "org.apache.logging.log4j.core.jackson.Log4jXmlObjectMapper",
            "timeMillis",
            "LogEventParser",
            "org.apache.logging.log4j.core.parser.LogEventParser",
            "org.apache.logging.log4j.core.parser.JsonLogEventParser",
            "org.apache.logging.log4j.core.jackson.Log4jYamlObjectMapper",
            "java.nio.charset.StandardCharsets",
            "contextStack",
            "inputString.getBytes",
            "loggerFqcn",
            "StandardCharsets.UTF_8",
            "org.apache.logging.log4j.core.parser.ParseException",
            "inputString",
            "logtest.Main",
            "HelloWorld",
            "threadPriority",
            "org.apache.logging.log4j.core.jackson.Log4jJsonObjectMapper",
            "LogEvent",
            "org.apache.logging.log4j",
            "parser.parseFrom",
            "threadId",
            "endOfBatch",
            "com.fasterxml.jackson.databind.exc.MismatchedInputException",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent",
            "contextMap",
            "extendedStackTrace",
            "loggerName",
            "org.apache.logging.log4j.spi.AbstractLogger",
            "org.apache.logging.log4j.core.LogEvent",
            "commonElementCount"
        ],
        "desc_text": [
            [
                "There seems to be a regression in the latest 2.9.2 release.",
                ["OB"]
            ],
            [
                "Using org.apache.logging.log4j.core.jackson.Log4jJsonObjectMapper from org.apache.logging.log4j:log4j-core:2.9.1 to deserialize the appended JSON object is throwing an exception with 2.9.2 but worked with 2.9.1.",
                ["OB", "SR"]
            ],
            [
                "org.apache.logging.log4j.core.jackson.Log4jYamlObjectMapper and org.apache.logging.log4j.core.jackson.Log4jXmlObjectMapper fail in similar ways.",
                ["OB"]
            ],
            ["inputString", []],
            ["{", []],
            ["\"timeMillis\" : 1493121664118,", []],
            ["\"thread\" : \"main\",", []],
            ["\"threadId\" : 1,", []],
            ["\"threadPriority\" : 5,", []],
            ["\"level\" : \"INFO\",", []],
            ["\"loggerName\" : \"HelloWorld\",", []],
            ["\"marker\" : {", []],
            ["\"name\" : \"child\",", []],
            ["\"parents\" : [ {", []],
            ["\"name\" : \"parent\",", []],
            ["\"parents\" : [ {", []],
            ["\"name\" : \"grandparent\"", []],
            ["} ]", []],
            ["} ]", []],
            ["},", []],
            ["\"message\" : \"Hello, world!\",", []],
            ["\"thrown\" : {", []],
            ["\"commonElementCount\" : 0,", []],
            ["\"message\" : \"error message\",", ["OB"]],
            ["\"name\" : \"java.lang.RuntimeException\",", []],
            ["\"extendedStackTrace\" : [ {", []],
            ["\"class\" : \"logtest.Main\",", []],
            ["\"method\" : \"main\",", []],
            ["\"file\" : \"Main.java\",", []],
            ["\"line\" : 29,", []],
            ["\"exact\" : true,", []],
            ["\"location\" : \"classes/\",", []],
            ["\"version\" : \"?\"", []],
            ["} ]", []],
            ["},", []],
            ["\"contextStack\" : [ \"one\", \"two\" ],", []],
            [
                "\"loggerFqcn\" : \"org.apache.logging.log4j.spi.AbstractLogger\",",
                []
            ],
            ["\"endOfBatch\" : false,", []],
            ["\"contextMap\" : {", []],
            ["\"bar\" : \"BAR\",", []],
            ["\"foo\" : \"FOO\"", []],
            ["},", []],
            ["\"source\" : {", []],
            ["\"class\" : \"logtest.Main\",", []],
            ["\"method\" : \"main\",", []],
            ["\"file\" : \"Main.java\",", []],
            ["\"line\" : 29", []],
            ["}", []],
            ["}", []],
            ["Exception", ["OB"]],
            [
                "org.apache.logging.log4j.core.parser.ParseException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `org.apache.logging.log4j.Level` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('INFO')",
                []
            ],
            ["at [Source: (byte[])\"{", []],
            ["\"timeMillis\" : 1493121664118,", []],
            ["\"thread\" : \"main\",", []],
            ["\"threadId\" : 1,", []],
            ["\"threadPriority\" : 5,", []],
            ["\"level\" : \"INFO\",", []],
            ["\"loggerName\" : \"HelloWorld\",", []],
            ["\"marker\" : {", []],
            ["\"name\" : \"child\",", []],
            ["\"parents\" : [ {", []],
            ["\"name\" : \"parent\",", []],
            ["\"parents\" : [ {", []],
            ["\"name\" : \"grandparent\"", []],
            ["} ]", []],
            ["} ]", []],
            ["},", []],
            ["\"message\" : \"Hello, world!\",", []],
            ["\"thrown\" : {", []],
            ["\"commonElementCount\" : 0,", []],
            ["\"message\" : \"error message\",", ["OB"]],
            ["\"name\" : \"java.lang.RuntimeException\",", []],
            ["\"extendedStackTrace\" : [ {", []],
            [
                "\"clas\"[truncated 482 bytes]; line: 6, column: 13] (through reference chain: org.apache.logging.log4j.core.impl.Log4jLogEvent[\"level\"])",
                []
            ],
            ["parsing pseudo code", ["OB"]],
            ["import org.apache.logging.log4j.core.LogEvent;", "CODE"],
            [
                "import org.apache.logging.log4j.core.parser.LogEventParser;",
                "CODE"
            ],
            [
                "import org.apache.logging.log4j.core.parser.JsonLogEventParser;",
                "CODE"
            ],
            ["import java.nio.charset.StandardCharsets;", "CODE"],
            ["LogEventParser parser = new JsonLogEventParser();", "CODE"],
            [
                "LogEvent result = parser.parseFrom(inputString.getBytes(StandardCharsets.UTF_8));",
                "CODE"
            ],
            ["assert result != null;", "CODE"]
        ]
    },
    "Mockito-12": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArgumentCaptor"],
        "summary_text": ["ArgumentCaptor no longer working for varargs"],
        "desc_hints": ["stackoverflow.com"],
        "desc_text": [
            [
                "I ran into the issue described here: http://stackoverflow.com/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor",
                ["SR"]
            ]
        ]
    },
    "Math-21": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Correlated random vector generator fails (silently) when faced with zero rows in covariance matrix"
        ],
        "desc_hints": [
            "CorrelatedRandomVectorGenerator.getRootMatrix",
            "RectangularCholeskyDecomposition",
            "CorrelatedRandomVectorGenerator",
            "CorrelatedRandomVectorGenerator.getRank",
            "Array2DRowRealMatrix"
        ],
        "desc_text": [
            [
                "The following three matrices (which are basically permutations of each other) produce different results when sampling a multi-variate Gaussian with the help of CorrelatedRandomVectorGenerator (sample covariances calculated in R, based on 10,000 samples):",
                ["OB", "SR"]
            ],
            ["Array2DRowRealMatrix", []],
            ["{", []],
            ["{0.0,0.0,0.0,0.0,0.0}", []],
            [",", []],
            ["{0.0,0.013445532,0.01039469,0.009881156,0.010499559}", []],
            [",", []],
            ["{0.0,0.01039469,0.023006616,0.008196856,0.010732709}", []],
            [",", []],
            ["{0.0,0.009881156,0.008196856,0.019023866,0.009210099}", []],
            [",", []],
            ["{0.0,0.010499559,0.010732709,0.009210099,0.019107243}}", []],
            ["> cov(data1)", []],
            ["V1 V2 V3 V4 V5", []],
            ["V1 0 0.000000000 0.00000000 0.000000000 0.000000000", []],
            ["V2 0 0.013383931 0.01034401 0.009913271 0.010506733", []],
            ["V3 0 0.010344006 0.02309479 0.008374730 0.010759306", []],
            ["V4 0 0.009913271 0.00837473 0.019005488 0.009187287", []],
            ["V5 0 0.010506733 0.01075931 0.009187287 0.019021483", []],
            ["Array2DRowRealMatrix", []],
            ["{", []],
            ["{0.013445532,0.01039469,0.0,0.009881156,0.010499559}", []],
            [",", []],
            ["{0.01039469,0.023006616,0.0,0.008196856,0.010732709}", []],
            [",", []],
            ["{0.0,0.0,0.0,0.0,0.0},", []],
            ["{0.009881156,0.008196856,0.0,0.019023866,0.009210099},", []],
            ["{0.010499559,0.010732709,0.0,0.009210099,0.019107243}}", []],
            ["> cov(data2)", []],
            ["V1 V2 V3 V4 V5", []],
            ["V1 0.006922905 0.010507692 0 0.005817399 0.010330529", []],
            ["V2 0.010507692 0.023428918 0 0.008273152 0.010735568", []],
            ["V3 0.000000000 0.000000000 0 0.000000000 0.000000000", []],
            ["V4 0.005817399 0.008273152 0 0.004929843 0.009048759", []],
            ["V5 0.010330529 0.010735568 0 0.009048759 0.018683544", []],
            ["Array2DRowRealMatrix{", []],
            ["{0.013445532,0.01039469,0.009881156,0.010499559},", []],
            ["{0.01039469,0.023006616,0.008196856,0.010732709},", []],
            ["{0.009881156,0.008196856,0.019023866,0.009210099},", []],
            ["{0.010499559,0.010732709,0.009210099,0.019107243}}", []],
            ["> cov(data3)", []],
            ["V1        V2          V3          V4", []],
            ["V1 0.013445047 0.010478862 0.009955904 0.010529542", []],
            ["V2 0.010478862 0.022910522 0.008610113 0.011046353", []],
            ["V3 0.009955904 0.008610113 0.019250975 0.009464442", []],
            ["V4 0.010529542 0.011046353 0.009464442 0.019260317", []],
            [
                "I've traced this back to the RectangularCholeskyDecomposition, which does not seem to handle the second matrix very well (decompositions in the same order as the matrices above):",
                []
            ],
            ["CorrelatedRandomVectorGenerator.getRootMatrix() =", []],
            ["Array2DRowRealMatrix{{0.0,0.0,0.0,0.0,0.0}", []],
            [",", []],
            ["{0.0759577418122063,0.0876125188474239,0.0,0.0,0.0}", []],
            [",", []],
            [
                "{0.07764443622513505,0.05132821221460752,0.11976381821791235,0.0,0.0}",
                []
            ],
            [",", []],
            [
                "{0.06662930527909404,0.05501661744114585,0.0016662506519307997,0.10749324207653632,0.0}",
                []
            ],
            [",{0.13822895138139477,0.0,0.0,0.0,0.0}}", []],
            ["CorrelatedRandomVectorGenerator.getRank() = 5", []],
            ["CorrelatedRandomVectorGenerator.getRootMatrix() =", []],
            [
                "Array2DRowRealMatrix{{0.0759577418122063,0.034512751379448724,0.0},",
                []
            ],
            ["{0.07764443622513505,0.13029949164628746,0.0}", []],
            [",", []],
            ["{0.0,0.0,0.0}", []],
            [",", []],
            ["{0.06662930527909404,0.023203936694855674,0.0}", []],
            [",{0.13822895138139477,0.0,0.0}}", []],
            ["CorrelatedRandomVectorGenerator.getRank() = 3", []],
            ["CorrelatedRandomVectorGenerator.getRootMatrix() =", []],
            [
                "Array2DRowRealMatrix{{0.0759577418122063,0.034512751379448724,0.033913748226348225,0.07303890149947785},",
                []
            ],
            ["{0.07764443622513505,0.13029949164628746,0.0,0.0}", []],
            [",", []],
            [
                "{0.06662930527909404,0.023203936694855674,0.11851573313229945,0.0}",
                []
            ],
            [",{0.13822895138139477,0.0,0.0,0.0}}", []],
            ["CorrelatedRandomVectorGenerator.getRank() = 4", []],
            [
                "Clearly, the rank of each of these matrices should be 4.",
                ["OB", "EB"]
            ],
            [
                "The first matrix does not lead to incorrect results, but the second one does.",
                ["OB"]
            ],
            [
                "Unfortunately, I don't know enough about the Cholesky decomposition to find the flaw in the implementation, and I could not find documentation for the \"rectangular\" variant (also not at the links provided in the javadoc).",
                []
            ]
        ]
    },
    "JacksonDatabind-109": {
        "code_elements": [
            "fun main() {",
            "val mapper = jacksonObjectMapper()",
            ".configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true)",
            "val test = Test(0.0000000005.toBigDecimal())",
            "println(mapper.writeValueAsString(test))",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonFormat"],
        "summary_text": [
            "WRITE_BIGDECIMAL_AS_PLAIN is ignored if @JsonFormat is used"
        ],
        "desc_hints": [
            "jacksonObjectMapper",
            "JsonFormat",
            "toBigDecimal",
            "JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN",
            "mapper.writeValueAsString",
            "JsonFormat.Shape.STRING",
            "BigDecimal"
        ],
        "desc_text": [
            [
                "I am trying to serialize BigDecimal as json string while avoiding scientific notation (kotlin):",
                ["SR"]
            ],
            ["data class Test(", []],
            ["@JsonFormat(shape= JsonFormat.Shape.STRING)", []],
            ["val value: BigDecimal", []],
            [")", []],
            ["fun main() {", "CODE"],
            ["val mapper = jacksonObjectMapper()", "CODE"],
            [
                ".configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true)",
                "CODE"
            ],
            ["val test = Test(0.0000000005.toBigDecimal())", "CODE"],
            ["println(mapper.writeValueAsString(test))", "CODE"],
            ["}", "CODE"],
            ["output {\"value\":\"5.0E-10\"}", []],
            [
                "If JsonFormat is removed, then WRITE_BIGDECIMAL_AS_PLAIN works and output is {\"value\":0.00000000050} (json number, not string), but trying to make it json string with JsonFormat results in WRITE_BIGDECIMAL_AS_PLAIN being ignored.",
                ["OB"]
            ],
            ["Using latest version, jackson-bom:2.9.8", []]
        ]
    },
    "Closure-98": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// @formatting pretty_print",
            "// ==/ClosureCompiler==",
            "function foo() {",
            "var arr = [1, 2, 3, 4, 5];",
            "for (var i = 0, l = arr.length; i < l; i++) {",
            "var j = arr[i];",
            "(function() {",
            "var k = j;",
            "setTimeout(function() { console.log(k); }, 0);",
            "})();",
            "}",
            "}",
            "foo();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["bad variable inlining in closure"],
        "desc_hints": [
            "ClosureCompiler",
            "arr.length",
            "setTimeout",
            "console.log",
            "default.js"
        ],
        "desc_text": [
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @formatting pretty_print", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["function foo() {", "CODE"],
            ["var arr = [1, 2, 3, 4, 5];", "CODE"],
            ["for (var i = 0, l = arr.length; i < l; i++) {", "CODE"],
            ["var j = arr[i];", "CODE"],
            ["(function() {", "CODE"],
            ["var k = j;", "CODE"],
            ["setTimeout(function() { console.log(k); }, 0);", "CODE"],
            ["})();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["foo();", "CODE"],
            ["\"k\" will get incorrectly inlined.", ["OB"]]
        ]
    },
    "Math-55": {
        "code_elements": [
            "Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);",
            "Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);",
            "System.out.println(Vector3D.crossProduct(v1, v2));"
        ],
        "stack_traces": [],
        "summary_hints": ["Vector3D.crossProduct"],
        "summary_text": [
            "Vector3D.crossProduct is sensitive to numerical cancellation"
        ],
        "desc_hints": ["Vector3D.crossProduct", "System.out.println"],
        "desc_text": [
            [
                "Cross product implementation uses the naive formulas (y1 z2 - y2 z1, ...).",
                ["OB"]
            ],
            [
                "These formulas fail when vectors are almost colinear, like in the following example:",
                ["OB", "SR"]
            ],
            [
                "Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);",
                "CODE"
            ],
            [
                "Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);",
                "CODE"
            ],
            ["System.out.println(Vector3D.crossProduct(v1, v2));", "CODE"],
            ["The previous code displays", ["OB"]],
            ["{ -1, 2, 0 }", ["SR"]],
            ["instead of the correct answer", ["OB", "EB"]],
            ["{ -1, 2, 1 }", ["SR"]]
        ]
    },
    "Math-39": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "too large first step with embedded Runge-Kutta integrators (Dormand-Prince 8(5,3) ...)"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "Adaptive step size integrators compute the first step size by themselves if it is not provided.",
                ["OB"]
            ],
            [
                "For embedded Runge-Kutta type, this step size is not checked against the integration range, so if the integration range is extremely short, this step size may evaluate the function out of the range (and in fact it tries afterward to go back, and fails to stop).",
                ["OB", "SR"]
            ],
            [
                "Gragg-Bulirsch-Stoer integrators do not have this problem, the step size is checked and truncated if needed.",
                []
            ]
        ]
    },
    "Jsoup-23": {
        "code_elements": [
            "String consumeLetterDigitSequence() {",
            "String letters = consumeLetterSequence();",
            "String digits = consumeDigitSequence();",
            "return letters + digits;",
            "}",
            "@Test public void letterDigitEntities() {",
            "String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";",
            "Whitelist whitelist = Whitelist.none();",
            "whitelist",
            ".addTags(\"p\");",
            "String html = Jsoup.clean(html, whitelist);",
            "assertEquals(\"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\", html);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Entity whose name is made up of letters and digits is not retained"
        ],
        "desc_hints": [
            "reader.consumerLetterSequence",
            "consumeLetterSequence",
            "consumeDigitSequence",
            "assertEquals",
            "Tokenizer.java",
            "CharacterReader.java",
            "letterDigitEntities",
            "Whitelist.none",
            "nameRef",
            "reader.consumeLetterSequence",
            "addTags",
            "Jsoup.clean",
            "consumeLetterDigitSequence",
            "Entities.isNamedEntity"
        ],
        "desc_text": [
            [
                "At about line 136 Tokenizer.java, reader.consumeLetterSequence() is called.",
                []
            ],
            [
                "This is fine until it an entity such as &sup1; is encountered - just the letter part of the entity name will be read causing the Entities.isNamedEntity(nameRef) call at about line 140 to fail.",
                ["OB"]
            ],
            [
                "I have fixed this quickly locally by replacing reader.consumerLetterSequence() with a call to a new consumeLetterDigitSequence() in the CharacterReader.java - there may be a better way of doing this:",
                ["SR"]
            ],
            ["String consumeLetterDigitSequence() {", "CODE"],
            ["String letters = consumeLetterSequence();", "CODE"],
            ["String digits = consumeDigitSequence();", "CODE"],
            ["return letters + digits;", "CODE"],
            ["}", "CODE"],
            ["The following is a sample unit test:", ["SR"]],
            ["@Test public void letterDigitEntities() {", "CODE"],
            [
                "String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";",
                "CODE"
            ],
            ["Whitelist whitelist = Whitelist.none();", "CODE"],
            ["whitelist", "CODE"],
            [".addTags(\"p\");", "CODE"],
            ["String html = Jsoup.clean(html, whitelist);", "CODE"],
            [
                "assertEquals(\"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\", html);",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Closure-174": {
        "code_elements": [
            "goog.provide(\"main\");",
            "goog.scope (function (){",
            "var a = foo, b, c = 1;"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.scope"],
        "summary_text": ["compiler crash on goog.scope locals"],
        "desc_hints": ["goog.provide", "goog.scope"],
        "desc_text": [
            ["goog.provide(\"main\");", "CODE"],
            ["goog.scope (function (){", "CODE"],
            ["var a = foo, b, c = 1;", "CODE"],
            ["});", []],
            ["Reported by Thomas Fischer", []],
            [
                "There are 2 separate issues here: that there's an error, and that the error make the compiler crash.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-35": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Problem with Object Id and Type Id as Wrapper Object (regression in 2.5.1)"
        ],
        "desc_hints": ["FasterXML"],
        "desc_text": [
            [
                "(note: originally from FasterXML/jackson-module-jaxb-annotations#51)",
                []
            ],
            [
                "Looks like fix for #669 caused a regression for the special use case of combining type and object ids, with wrapper-object type id inclusion.",
                ["OB", "SR"]
            ],
            ["The problem started with 2.5.1.", ["OB"]]
        ]
    },
    "Codec-1": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Fix case-insensitive string handling"],
        "desc_hints": [],
        "desc_text": [
            [
                "The language codecs are platform-depedent, please see Common Bug #3 for details.",
                ["OB"]
            ]
        ]
    },
    "Cli-35": {
        "code_elements": [
            "Options options = new Options();",
            "options.addOption(Option.builder().longOpt(\"importToOpen\").hasArg().argName(\"FILE\").build());",
            "options.addOption(Option.builder(\"i\").longOpt(\"import\").hasArg().argName(\"FILE\").build());"
        ],
        "stack_traces": [],
        "summary_hints": ["LongOpt"],
        "summary_text": ["LongOpt falsely detected as ambiguous"],
        "desc_hints": [
            "argName",
            "startsWith",
            "longOpt",
            "options.addOption",
            "DefaultParser",
            "importToOpen",
            "AmbiguousOptionException",
            "hasArg",
            "Option.builder"
        ],
        "desc_text": [
            ["Options options = new Options();", "CODE"],
            [
                "options.addOption(Option.builder().longOpt(\"importToOpen\").hasArg().argName(\"FILE\").build());",
                "CODE"
            ],
            [
                "options.addOption(Option.builder(\"i\").longOpt(\"import\").hasArg().argName(\"FILE\").build());",
                "CODE"
            ],
            [
                "Parsing \"--import=FILE\" is not possible since 1.3 as it throws a AmbiguousOptionException stating that it cannot decide whether import is import or importToOpen.",
                ["OB"]
            ],
            ["In 1.2 this is not an issue.", ["OB"]],
            [
                "The root lies in the new DefaultParser which does a startsWith check internally.",
                ["OB"]
            ]
        ]
    },
    "JacksonCore-20": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonGenerator.writeEmbeddedObject"],
        "summary_text": [
            "Add support for writing byte[] via JsonGenerator.writeEmbeddedObject()"
        ],
        "desc_hints": [
            "writeObject",
            "ObjectCodec",
            "ByteBuffer",
            "writeEmbeddedObject",
            "FasterXML"
        ],
        "desc_text": [
            ["(note: should be safe for patch, that is, 2.8.3)", ["EB"]],
            [
                "Default implementation of 2.8-added writeEmbeddedObject() throws exception (unsupported operation) for all values, since JSON does not have any native object types.",
                ["OB"]
            ],
            [
                "This is different from handling of writeObject(), which tries to either delegate to ObjectCodec (if one registered), or even encode \"simple\" values.",
                []
            ],
            [
                "However: since support for binary data is already handled in some cases using VALUE_EMBEDDED_OBJECT, it would actually make sense to handle case of byte[] (and, if feasible, perhaps ByteBuffer for extra points), and also ensure null can be written.",
                []
            ],
            [
                "This is likely necessary to support FasterXML/jackson-databind#1361 and should in general make system more robust.",
                ["EB"]
            ]
        ]
    },
    "Math-74": {
        "code_elements": [
            "final double[] scale= new double[y0.length];;",
            "if (vecAbsoluteTolerance == null) {",
            "for (int i = 0; i < scale.length; ++i)",
            "{",
            "final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));",
            "scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * yi;",
            "}",
            "} else {",
            "for (int i = 0; i < scale.length; ++i)",
            "{",
            "final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));",
            "scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yi;",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Wrong parameter for first step size guess for Embedded Runge Kutta methods"
        ],
        "desc_hints": [
            "AdaptiveStepsizeIntegrator",
            "DormandPrince853Integrator",
            "GraggBulirschStoerIntegrator",
            "vecAbsoluteTolerance",
            "getOrder",
            "initializeStep",
            "y0.length",
            "stepStart",
            "EmbeddedRungeKuttaIntegrator",
            "scalRelativeTolerance",
            "scale.length",
            "vecRelativeTolerance",
            "Math.abs",
            "scalAbsoluteTolerance",
            "Math.max"
        ],
        "desc_text": [
            [
                "In a space application using DOP853 i detected what seems to be a bad parameter in the call to the method initializeStep of class AdaptiveStepsizeIntegrator.",
                []
            ],
            [
                "Here, DormandPrince853Integrator is a subclass for EmbeddedRungeKuttaIntegrator which perform the call to initializeStep at the beginning of its method integrate(...)",
                []
            ],
            [
                "The problem comes from the array \"scale\" that is used as a parameter in the call off initializeStep(..)",
                []
            ],
            [
                "Following the theory described by Hairer in his book \"Solving Ordinary Differential Equations 1 : Nonstiff Problems\", the scaling should be :",
                ["EB"]
            ],
            ["sci = Atol i + |y0i| * Rtoli", []],
            ["Whereas EmbeddedRungeKuttaIntegrator uses : sci = Atoli", []],
            [
                "Note that the Gragg-Bulirsch-Stoer integrator uses the good implementation \"sci = Atol i + |y0i| * Rtoli \" when he performs the call to the same method initializeStep(..)",
                []
            ],
            [
                "In the method initializeStep, the error leads to a wrong step size h used to perform an Euler step.",
                ["OB", "SR"]
            ],
            ["Most of the time it is unvisible for the user.", ["OB"]],
            [
                "But in my space application the Euler step with this wrong step size h (much bigger than it should be) makes an exception occur (my satellite hits the ground...)",
                ["EB", "SR"]
            ],
            [
                "To fix the bug, one should use the same algorithm as in the rescale method in GraggBulirschStoerIntegrator",
                []
            ],
            ["For exemple :", []],
            ["final double[] scale= new double[y0.length];;", "CODE"],
            ["if (vecAbsoluteTolerance == null) {", "CODE"],
            ["for (int i = 0; i < scale.length; ++i)", "CODE"],
            ["{", "CODE"],
            [
                "final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));",
                "CODE"
            ],
            [
                "scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * yi;",
                "CODE"
            ],
            ["}", "CODE"],
            ["} else {", "CODE"],
            ["for (int i = 0; i < scale.length; ++i)", "CODE"],
            ["{", "CODE"],
            [
                "final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));",
                "CODE"
            ],
            [
                "scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yi;",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "hNew = initializeStep(equations, forward, getOrder(), scale,",
                []
            ],
            ["stepStart, y, yDotK[0], yTmp, yDotK[1]);", []],
            [
                "Sorry for the length of this message, looking forward to hearing from you soon",
                []
            ],
            ["Vincent Morand", []]
        ]
    },
    "JxPath-1": {
        "code_elements": [
            "JXPathContext context = JXPathContext.newContext(doc);",
            "assertEquals(value, context.selectSingleNode(\"//root/@id/text()\"));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Descendant or self axis does not work correctly at root node"
        ],
        "desc_hints": [
            "JXPathContext.newContext",
            "assertEquals",
            "context.selectSingleNode",
            "JXPathContext"
        ],
        "desc_text": [
            [
                "Given the following XML document: <root id=\"1234\"/>",
                ["OB", "SR"]
            ],
            ["and the XPath: //root/@id/text().", ["OB"]],
            ["JXPath returns null instead of \"1234\".", ["OB", "EB"]],
            ["JXPathContext context = JXPathContext.newContext(doc);", "CODE"],
            [
                "assertEquals(value, context.selectSingleNode(\"//root/@id/text()\"));",
                "CODE"
            ],
            ["The attached JUnit test highlights the problem.", ["OB"]],
            ["It seems that JXPath does not", ["OB"]],
            [
                "find the root node if it is accessed with the axis descendant-or-self.",
                ["OB", "SR"]
            ]
        ]
    },
    "Math-10": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DerivativeStructure.atan2"],
        "summary_text": [
            "DerivativeStructure.atan2(y,x) does not handle special cases properly"
        ],
        "desc_hints": ["Math.atan2", "FastMath.atan2"],
        "desc_text": [
            [
                "The four special cases +/-0 for both x and y should give the same values as Math.atan2 and FastMath.atan2.",
                ["OB", "EB"]
            ],
            ["However, they give NaN for the value in all cases.", ["OB"]]
        ]
    },
    "Closure-162": {
        "code_elements": [
            "goog.provide('foo.Foo');",
            "goog.provide('foo.Foo.Bar');",
            "goog.scope(function() {",
            "/**",
            "* @param {Foo.Bar} bar",
            "* @constructor",
            "*/",
            "foo.Foo = function(bar) {",
            "this.bar = bar;",
            "};",
            "var Foo = foo.Foo;",
            "/** @type {Foo.Bar} */",
            "Foo.prototype.bar = null;",
            "/** @constructor */",
            "Foo.Bar = function() {};",
            "* @param {Foo.Bar} bar"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Type aliases cannot be used in type annotations before their definitions"
        ],
        "desc_hints": [
            "goog.provide",
            "foo.Foo.Bar",
            "this.bar",
            "goog.scope",
            "foo.Foo",
            "Foo.prototype.bar",
            "Foo.Bar"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile the following with full warnings:", ["OB", "SR"]],
            ["goog.provide('foo.Foo');", "CODE"],
            ["goog.provide('foo.Foo.Bar');", "CODE"],
            ["goog.scope(function() {", "CODE"],
            ["/**", "CODE"],
            ["* @param {Foo.Bar} bar", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["foo.Foo = function(bar) {", "CODE"],
            ["this.bar = bar;", "CODE"],
            ["};", "CODE"],
            ["var Foo = foo.Foo;", "CODE"],
            ["/** @type {Foo.Bar} */", "CODE"],
            ["Foo.prototype.bar = null;", "CODE"],
            ["/** @constructor */", "CODE"],
            ["Foo.Bar = function() {};", "CODE"],
            ["});", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["This should work, but instead I get an error:", ["OB", "EB"]],
            ["ERROR - Bad type annotation.", ["OB"]],
            ["Unknown type Foo.Bar", []],
            ["* @param {Foo.Bar} bar", "CODE"],
            ["^", []],
            [
                "This can be worked around by writing explicitly foo.Foo.Bar, but this leads to strange inconsistencies in the code before vs.",
                ["OB"]
            ],
            ["after the alias definition.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["r1346 in Linux", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "JacksonDatabind-90": {
        "code_elements": [
            "import java.util.List;",
            "import com.fasterxml.jackson.annotation.JsonCreator;",
            "import com.fasterxml.jackson.annotation.JsonValue;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "public class ArrayDelegateDeserializationTest {",
            "public static class MyTypeImpl implements MyType {",
            "private final List<Integer> values;",
            "MyTypeImpl(List<Integer> values) {",
            "this.values = values;",
            "}",
            "@Override",
            "public List<Integer> getValues() {",
            "return values;",
            "}",
            "}",
            "public interface MyType {",
            "@JsonValue",
            "List<Integer> getValues();",
            "@JsonCreator",
            "static MyType of(List<Integer> values) {",
            "return new MyTypeImpl(values);",
            "}",
            "}",
            "public static void main(String[] args) throws Exception {",
            "ObjectMapper mapper = new ObjectMapper();",
            "MyType thing = mapper.readValue(\"[]\", MyType.class);",
            "System.out.println(thing.getValues());",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "canCreateUsingArrayDelegate",
            "ValueInstantiator.canInstantiate"
        ],
        "summary_text": [
            "ValueInstantiator.canInstantiate() ignores canCreateUsingArrayDelegate()"
        ],
        "desc_hints": [
            "AbstractDeserializer.java",
            "com.fasterxml.jackson.annotation.JsonValue",
            "thing.getValues",
            "com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator",
            "com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "getValues",
            "MyTypeImpl",
            "com.fasterxml.jackson.databind.exc.InvalidDefinitionException",
            "java.util.List",
            "ObjectMapper",
            "FasterXML",
            "this.values",
            "com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition",
            "MyType",
            "_readMapAndClose",
            "ArrayDelegateDeserializationTest.main",
            "ValueInstantiator.java",
            "github.com",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "JsonValue",
            "mapper.readValue",
            "InvalidDefinitionException.java",
            "MyType.class",
            "DeserializationContext.java",
            "ObjectMapper.java",
            "ArrayDelegateDeserializationTest.java",
            "JsonCreator",
            "com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize",
            "ArrayDelegateDeserializationTest",
            "System.out.println"
        ],
        "desc_text": [
            ["Problem", []],
            ["Method Javadoc doesn't match behavior.", ["OB"]],
            [
                "As a result, delegate collection constructors (for abstract types) don't work properly.",
                ["OB"]
            ],
            ["Tested versions", []],
            ["jackson-databind v2.8.7 and v2.9.2.", ["OB"]],
            ["Location in code", ["OB"]],
            [
                "https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java#L70",
                []
            ],
            ["Expected Behavior", ["EB"]],
            ["Outputs [].", ["OB"]],
            ["Observed Behavior", ["OB"]],
            [
                "Exception in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `ArrayDelegateDeserializationTest$MyType` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information",
                []
            ],
            ["at [Source: (String)\"[]\"; line: 1, column: 1]", []],
            [
                "at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1451)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1027)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(AbstractDeserializer.java:265)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2992)",
                []
            ],
            [
                "at ArrayDelegateDeserializationTest.main(ArrayDelegateDeserializationTest.java:35)",
                []
            ],
            ["Test code", []],
            ["import java.util.List;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonCreator;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonValue;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["public class ArrayDelegateDeserializationTest {", "CODE"],
            ["public static class MyTypeImpl implements MyType {", "CODE"],
            ["private final List<Integer> values;", "CODE"],
            ["MyTypeImpl(List<Integer> values) {", "CODE"],
            ["this.values = values;", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            ["public List<Integer> getValues() {", "CODE"],
            ["return values;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public interface MyType {", "CODE"],
            ["@JsonValue", "CODE"],
            ["List<Integer> getValues();", "CODE"],
            ["@JsonCreator", "CODE"],
            ["static MyType of(List<Integer> values) {", "CODE"],
            ["return new MyTypeImpl(values);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "public static void main(String[] args) throws Exception {",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["MyType thing = mapper.readValue(\"[]\", MyType.class);", "CODE"],
            ["System.out.println(thing.getValues());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Cli-3": {
        "code_elements": [
            ">   private static final String OPTION_TARGET = \"t\";",
            ">   private static final String OPTION_TARGET_LONG = \"target\";",
            "{",
            ">         parsedLine = parser.parse(cmdLineOpts, args);",
            ">       }",
            "catch (ParseException pe)",
            "{",
            ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
            "> \"\\n\");",
            ">         HelpFormatter hf = new HelpFormatter();",
            ">         hf.printHelp(USAGE, cmdLineOpts);",
            ">         System.exit(-1);",
            ">       }",
            ">   if (parsedLine.hasOption(OPTION_TARGET))",
            "{",
            ">     System.out.println(\"processing selected target: \" +",
            "> parsedLine.getOptionValue(OPTION_TARGET));",
            ">   }"
        ],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser interupts \"-target opt\" as \"-t arget opt\""
        ],
        "desc_hints": [
            "System.exit",
            "parsedLine.hasOption",
            "parsedLine.getOptionValue",
            "HelpFormatter",
            "pe.getMessage",
            "parser.parse",
            "posix.special.option",
            "PosixParser",
            "cmdLineOpts",
            "generateTarget",
            "Dsystem.property",
            "foobar.com",
            "hf.printHelp",
            "system.property",
            "parsedLine",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "This was posted on the Commons-Developer list and confirmed as a bug.",
                []
            ],
            ["> Is this a bug?", []],
            ["Or am I using this incorrectly?", []],
            ["> I have an option with short and long values.", ["OB", "SR"]],
            ["Given code that is", []],
            [
                "> essentially what is below, with a PosixParser I see results as",
                ["OB"]
            ],
            ["> follows:", []],
            [
                "> A command line with just \"-t\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block", ["OB"]],
            ["> (OK)", []],
            [
                "> A command line with just \"-target\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block (OK)", []],
            [
                "> A command line with just \"-t foobar.com\" prints out \"processing selected",
                ["OB", "SR"]
            ],
            ["> target: foobar.com\" (OK)", []],
            [
                "> A command line with just \"-target foobar.com\" prints out \"processing",
                ["SR"]
            ],
            ["> selected target: arget\" (ERROR?)", []],
            [
                "> ======================================================================",
                []
            ],
            ["> ==", []],
            ["> =======================", []],
            [">   private static final String OPTION_TARGET = \"t\";", "CODE"],
            [
                ">   private static final String OPTION_TARGET_LONG = \"target\";",
                "CODE"
            ],
            ["> // ...", []],
            ["> Option generateTarget = new Option(OPTION_TARGET,", []],
            [">                                    OPTION_TARGET_LONG,", []],
            [">                                    true,", []],
            [
                ">                                    \"Generate files for the specified",
                ["OB"]
            ],
            ["> target machine\");", []],
            ["> // ...", []],
            ["> try", []],
            ["{", "CODE"],
            [">         parsedLine = parser.parse(cmdLineOpts, args);", "CODE"],
            [">       }", "CODE"],
            ["catch (ParseException pe)", "CODE"],
            ["{", "CODE"],
            [
                ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
                "CODE"
            ],
            ["> \"\\n\");", "CODE"],
            [">         HelpFormatter hf = new HelpFormatter();", "CODE"],
            [">         hf.printHelp(USAGE, cmdLineOpts);", "CODE"],
            [">         System.exit(-1);", "CODE"],
            [">       }", "CODE"],
            [">   if (parsedLine.hasOption(OPTION_TARGET))", "CODE"],
            ["{", "CODE"],
            [
                ">     System.out.println(\"processing selected target: \" +",
                "CODE"
            ],
            ["> parsedLine.getOptionValue(OPTION_TARGET));", "CODE"],
            [">   }", "CODE"],
            [
                "It is a bug but it is due to well defined behaviour (so that makes me feel a",
                []
            ],
            ["little better about myself .", ["OB"]],
            ["To support special", []],
            [
                "(well I call them special anyway) like -Dsystem.property=value we need to be",
                []
            ],
            [
                "able to examine the first character of an option.",
                ["OB", "EB", "SR"]
            ],
            ["If the first character is", ["OB"]],
            [
                "itself defined as an Option then the remainder of the token is used as the",
                ["SR"]
            ],
            ["value, e.g.", ["OB"]],
            [
                "'D' is the token, it is an option so 'system.property=value' is the",
                []
            ],
            ["argument value for that option.", ["OB"]],
            ["This is the behaviour that we are seeing for", []],
            ["your example.", ["OB", "SR"]],
            [
                "'t' is the token, it is an options so 'arget' is the argument value.",
                []
            ],
            [
                "I suppose a solution to this could be to have a way to specify properties for",
                []
            ],
            ["parsers.", ["OB"]],
            ["In this case 'posix.special.option == true' for turning", []],
            ["on special options.", ["OB", "SR"]],
            ["I'll have a look into this and let you know.", []],
            [
                "Just to keep track of this and to get you used to how we operate, can you log a",
                []
            ],
            ["bug in bugzilla for this.", []],
            ["Thanks,", []],
            ["-John K", []]
        ]
    },
    "Closure-85": {
        "code_elements": [
            "switch (b.v) {",
            "case 'SWITCH':",
            "if (b.i >= 0) {",
            "return b.o;",
            "} else {",
            "return undefined;",
            "}",
            "break;",
            "}",
            "}",
            "break;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Reproduceable crash with switch statement"],
        "desc_hints": [
            "RuntimeException",
            "compiler.jar",
            "java.exe",
            "HotSpot",
            "test.js"
        ],
        "desc_text": [
            [
                "When attempting to compile the following code with default options (-jar compiler.jar --js filename) always produces the same error.",
                ["OB", "SR"]
            ],
            ["function a(b) {", []],
            ["switch (b.v) {", "CODE"],
            ["case 'SWITCH':", "CODE"],
            ["if (b.i >= 0) {", "CODE"],
            ["return b.o;", "CODE"],
            ["} else {", "CODE"],
            ["return undefined;", "CODE"],
            ["}", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Whenever I try and compile the above script I get a RuntimeException thrown:",
                ["OB", "SR"]
            ],
            ["INTERNAL COMPILER ERROR.", ["OB"]],
            ["Please report this problem.", []],
            ["null", []],
            ["Node(BREAK): C:\\test.js:11:3", []],
            ["break;", "CODE"],
            ["Parent: NULL", []],
            ["The result of calling --version on compiler.jar:", ["OB", "SR"]],
            ["Version: 20100917 (revision 440)", []],
            ["Built on: 2010/09/17 17:55", []],
            ["The result of calling -version on java.exe:", ["OB"]],
            ["java version \"1.6.0_11\"", []],
            ["Java(TM) SE Runtime Environment (build 1.6.0_11-b03)", []],
            [
                "Java HotSpot(TM) Client VM (build 11.0-b16, mixed mode, sharing)",
                []
            ],
            [
                "Anyone else with the same issue - to work around in the short term, comment out the \"break;\" line.",
                []
            ]
        ]
    },
    "Math-88": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Simplex Solver arrives at incorrect solution"],
        "desc_hints": [],
        "desc_text": [
            [
                "I have reduced the problem reported to me down to a minimal test case which I will attach.",
                ["SR"]
            ]
        ]
    },
    "Lang-15": {
        "code_elements": [
            "typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);",
            "Assert.assertEquals(2, typeVarAssigns.size());",
            "Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));",
            "Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));",
            "}",
            "public class Other<T> implements This<String, T> {",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TypeUtils.getTypeArguments"],
        "summary_text": [
            "TypeUtils.getTypeArguments() misses type arguments for partially-assigned classes"
        ],
        "desc_hints": [
            "This.class.getTypeParameters",
            "Assert.assertEquals",
            "Other.class",
            "typeVarAssigns.size",
            "String.class",
            "typeVarAssigns.get",
            "typeVarAssigns",
            "TypeUtils.getTypeArguments",
            "TypeUtilsTest.testGetTypeArguments",
            "Other.class.getTypeParameters",
            "This.class"
        ],
        "desc_text": [
            [
                "failing test code to add to TypeUtilsTest.testGetTypeArguments():",
                ["OB", "SR"]
            ],
            [
                "typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);",
                "CODE"
            ],
            ["Assert.assertEquals(2, typeVarAssigns.size());", "CODE"],
            [
                "Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));",
                "CODE"
            ],
            [
                "Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));",
                "CODE"
            ],
            ["These should pass based on:", ["EB"]],
            ["public interface This<K, V> {", []],
            ["}", "CODE"],
            ["public class Other<T> implements This<String, T> {", "CODE"],
            ["}", "CODE"],
            [
                "This case fails because the current code ignores the Other class due to its specifying its own type variables, which is obviously incorrect.",
                ["OB"]
            ],
            [
                "This report is extrapolated from an offline report received by Hen.",
                []
            ]
        ]
    },
    "Jsoup-24": {
        "code_elements": [
            "document.write('</scr' + 'ipt>');",
            "document.write('</scr + 'ipt>');"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "1.6.0 dropping a ' on a particular javascript string"
        ],
        "desc_hints": ["document.write", "scienceblogs.com", "JavaScript1"],
        "desc_text": [
            [
                "Loses a single quote when the javascript contains a partial tag, exampled pared from ad section of http://scienceblogs.com/pharyngula.",
                ["OB", "SR"]
            ],
            ["Note in the result that '</scr is missing closing ' :", ["OB"]],
            ["Input:", []],
            ["<HTML>", []],
            ["<body>", []],
            ["<div>", []],
            ["<script language=\"JavaScript1.1\">", []],
            ["document.write('</scr' + 'ipt>');", "CODE"],
            ["</script>", []],
            ["</div>", []],
            ["</body>", []],
            ["</HTML>", []],
            ["Result:", ["OB"]],
            ["<html>", []],
            ["<body>", []],
            ["<div>", []],
            ["<script language=\"JavaScript1.1\">", []],
            ["document.write('</scr + 'ipt>');", "CODE"],
            ["</script>", []],
            ["</div>", []],
            ["</body>", []],
            ["</html>", []]
        ]
    },
    "JacksonDatabind-37": {
        "code_elements": [],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:62)",
            "at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:855)",
            "at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1083)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1389)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1367)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:266)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:163)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:135)",
            "at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:136)",
            "at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:99)",
            "at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:142)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:279)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)",
            "at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:490)",
            "at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:260)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:125)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)",
            "at org.apache.calcite.test.ModelTest.testRead(ModelTest.java:58)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:483)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
            "at org.junit.runner.JUnitCore.run(JUnitCore.java:137)",
            "at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)",
            "at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)",
            "at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:483)",
            "at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)"
        ],
        "summary_hints": ["JsonType.defaultImpl"],
        "summary_text": [
            "Field in base class is not recognized, when using @JsonType.defaultImpl"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "org.apache.calcite.model.JsonMapSchema",
            "com.intellij.rt.execution.application.AppMain.main",
            "ReflectiveCallable.java",
            "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla",
            "AbstractDeserializer.java",
            "CollectionDeserializer.java",
            "FrameworkMethod.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "NativeMethodAccessorImpl.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty",
            "JUnitStarter.java",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "SettableBeanProperty.java",
            "java.util.ArrayList",
            "org.apache.calcite.model.JsonRoot",
            "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException",
            "com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet",
            "BeanDeserializer.java",
            "org.junit.runners.ParentRunner.runLeaf",
            "org.junit.runners.ParentRunner.access",
            "AppMain.java",
            "InvokeMethod.java",
            "UnrecognizedPropertyException.java",
            "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize",
            "org.apache.calcite.test.ModelTest.testRead",
            "FoodMart",
            "_readMapAndClose",
            "org.junit.runners.ParentRunner.runChildren",
            "com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty",
            "org.junit.runners.ParentRunner",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize",
            "com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer",
            "BeanDeserializerBase.java",
            "_deserializeTypedUsingDefaultImpl",
            "JsonMapSchema",
            "ModelTest.java",
            "ParentRunner.java",
            "github.com",
            "AsPropertyTypeDeserializer.java",
            "com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "BlockJUnit4ClassRunner.java",
            "com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart",
            "_deserializeOther",
            "JsonSchema",
            "com.intellij.rt.execution.junit.JUnitStarter.main",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "StdDeserializer.java",
            "JUnitCore.java",
            "DeserializationContext.java",
            "DelegatingMethodAccessorImpl.java",
            "java.lang.reflect.Method.invoke",
            "ObjectMapper.java",
            "org.junit.runners.model.FrameworkMethod",
            "org.junit.runners.ParentRunner.run",
            "JUnit4IdeaTestRunner.java",
            "Method.java",
            "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "runReflectiveCall",
            "com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "org.junit.runner.JUnitCore.run",
            "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "FieldProperty.java"
        ],
        "desc_text": [
            [
                "When deserializing JSON to Java POJOS, a field inherited from a base class is not recognized.",
                ["OB", "SR"]
            ],
            ["Here is the stack:", []],
            [
                "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"name\" (class org.apache.calcite.model.JsonMapSchema), not marked as ignorable (2 known properties: \"functions\", \"tables\"])",
                []
            ],
            ["at [Source: {", []],
            ["version: '1.0',", []],
            ["schemas: [", []],
            ["{", []],
            ["name: 'FoodMart',", []],
            ["tables: [", []],
            ["{", []],
            ["name: 'time_by_day',", []],
            ["columns: [", []],
            ["{", []],
            ["name: 'time_id'", []],
            ["}", []],
            ["]", []],
            ["},", []],
            ["{", []],
            ["name: 'sales_fact_1997',", []],
            ["columns: [", []],
            ["{", []],
            ["name: 'time_id'", []],
            ["}", []],
            ["]", []],
            ["}", []],
            ["]", []],
            ["}", []],
            ["]", []],
            [
                "}; line: 24, column: 7] (through reference chain: org.apache.calcite.model.JsonRoot[\"schemas\"]->java.util.ArrayList[0]->org.apache.calcite.model.JsonMapSchema[\"name\"])",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:62)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:855)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1083)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1389)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1367)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:266)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:163)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:135)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:136)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:99)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:142)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:279)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:490)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:260)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:125)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.calcite.test.ModelTest.testRead(ModelTest.java:58)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:483)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runner.JUnitCore.run(JUnitCore.java:137)",
                "STACK_TRACE"
            ],
            [
                "at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)",
                "STACK_TRACE"
            ],
            [
                "at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)",
                "STACK_TRACE"
            ],
            [
                "at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:483)",
                "STACK_TRACE"
            ],
            [
                "at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)",
                "STACK_TRACE"
            ],
            [
                "My JsonMapSchema class has a base class JsonSchema and it has a public field name.",
                ["OB", "SR"]
            ],
            [
                "See https://github.com/apache/calcite/blob/master/core/src/test/java/org/apache/calcite/test/ModelTest.java.",
                ["OB"]
            ],
            [
                "I have an application that worked in 2.6.3, fails in 2.7.0, so I suspect this is a regression.",
                []
            ]
        ]
    },
    "Closure-23": {
        "code_elements": [
            "console.log([console.log('hello, '), 'world!'][1]);",
            "console.log((console.log(\"hello\"), \"world!\"));",
            "console.log(\"world!\");"
        ],
        "stack_traces": [],
        "summary_hints": ["tryFoldArrayAccess"],
        "summary_text": ["tryFoldArrayAccess does not check for side effects"],
        "desc_hints": [
            "tryFoldArrayAccess",
            "console.log",
            "com.google.javascript.jscomp.PeepholeFoldConstants"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile the following program with simple or advanced optimization:",
                ["OB", "SR"]
            ],
            ["console.log([console.log('hello, '), 'world!'][1]);", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["The expected output would preserve side effects.", ["OB"]],
            [
                "It would not transform the program at all or transform it into:",
                []
            ],
            ["console.log((console.log(\"hello\"), \"world!\"));", "CODE"],
            ["Instead, the program is transformed into:", ["OB"]],
            ["console.log(\"world!\");", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Revision 2022.", ["OB"]],
            ["Ubuntu 12.04.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "tryFoldArrayAccess in com.google.javascript.jscomp.PeepholeFoldConstants should check whether every array element that is not going to be preserved has no side effects.",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-28": {
        "code_elements": [
            "private static final String URL = \"http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2\";",
            "/**",
            "* Passes",
            "*/",
            "public void testStringEscapeUtilsUnescapeHtml() throws Exception {",
            "// org.apache.commons.lang.StringEscapeUtils;",
            "assertEquals(URL, StringEscapeUtils.unescapeHtml(URL));",
            "}",
            "/**",
            "* Fails: unescapes &num, &chi, and &int to #, \u03c7, and \u222b respectively",
            "* Expected :http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2",
            "* Actual   :http://www.foo.com?a=1#_rooms=1\u03c7ldren=0\u222b=VA&amp;b=2",
            "*/",
            "public void testJsoupClean() throws Exception {",
            "String html = \"<a href=\\\"\" + URL + \"\\\">\" + URL + \"</a>\";",
            "assertEquals(URL, Jsoup.clean(html, Whitelist.none()));",
            "}",
            "/**",
            "* Fails: unescapes &num, &chi, and &int to #, \u03c7, and \u222b respectively",
            "* Expected :http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2",
            "* Actual   :http://www.foo.com?a=1#_rooms=1&children=0\u222b=VA&b=2",
            "*/",
            "public void testJsoupTextNodeCreateFromEncoded() throws Exception {",
            "assertEquals(URL, TextNode.createFromEncoded(URL, null).text());",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Jsoup.parse"],
        "summary_text": [
            "Jsoup.parse unescapes query params in plain text URL's"
        ],
        "desc_hints": [
            "assertEquals",
            "www.foo.com",
            "StringEscapeUtils.unescapeHtml",
            "TextNode.createFromEncoded",
            "testJsoupClean",
            "org.apache.commons.lang.StringEscapeUtils",
            "Whitelist.none",
            "testStringEscapeUtilsUnescapeHtml",
            "Jsoup.clean",
            "testJsoupTextNodeCreateFromEncoded"
        ],
        "desc_text": [
            [
                "I'm trying to clean the HTML snippet below, but unfortunately the URL parameter names have been mistaken for HTML entities and unescaped to HTML.",
                ["OB", "SR"]
            ],
            [
                "<a href=\"http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2\">",
                []
            ],
            ["http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2", []],
            ["</a>", []],
            [
                "Cleaned HTML:  http://www.foo.com?a=1#_rooms=1\u03c7ldren=0\u222b=VA&amp;b=2",
                []
            ],
            [
                "Expected HTML: http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2",
                ["EB"]
            ],
            ["Unit tests...", []],
            [
                "private static final String URL = \"http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2\";",
                "CODE"
            ],
            ["/**", "CODE"],
            ["* Passes", "CODE"],
            ["*/", "CODE"],
            ["@Test", []],
            [
                "public void testStringEscapeUtilsUnescapeHtml() throws Exception {",
                "CODE"
            ],
            ["// org.apache.commons.lang.StringEscapeUtils;", "CODE"],
            ["assertEquals(URL, StringEscapeUtils.unescapeHtml(URL));", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            [
                "* Fails: unescapes &num, &chi, and &int to #, \u03c7, and \u222b respectively",
                "CODE"
            ],
            [
                "* Expected :http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2",
                "CODE"
            ],
            [
                "* Actual   :http://www.foo.com?a=1#_rooms=1\u03c7ldren=0\u222b=VA&amp;b=2",
                "CODE"
            ],
            ["*/", "CODE"],
            ["@Test", []],
            ["public void testJsoupClean() throws Exception {", "CODE"],
            [
                "String html = \"<a href=\\\"\" + URL + \"\\\">\" + URL + \"</a>\";",
                "CODE"
            ],
            ["assertEquals(URL, Jsoup.clean(html, Whitelist.none()));", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            [
                "* Fails: unescapes &num, &chi, and &int to #, \u03c7, and \u222b respectively",
                "CODE"
            ],
            [
                "* Expected :http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2",
                "CODE"
            ],
            [
                "* Actual   :http://www.foo.com?a=1#_rooms=1&children=0\u222b=VA&b=2",
                "CODE"
            ],
            ["*/", "CODE"],
            ["@Test", []],
            [
                "public void testJsoupTextNodeCreateFromEncoded() throws Exception {",
                "CODE"
            ],
            [
                "assertEquals(URL, TextNode.createFromEncoded(URL, null).text());",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Closure-133": {
        "code_elements": ["/**", "* @return {@code foo} bar", "*    baz. */"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Exception when parsing erroneous jsdoc: /**@return {@code foo} bar   *    baz. */"
        ],
        "desc_hints": ["JSDocInfoParser"],
        "desc_text": [
            [
                "The following causes an exception in JSDocInfoParser.",
                ["OB", "SR"]
            ],
            ["/**", "CODE"],
            ["* @return {@code foo} bar", "CODE"],
            ["*    baz. */", "CODE"],
            ["var x;", []],
            ["Fix to follow.", ["OB"]]
        ]
    },
    "JacksonDatabind-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Regression updating from 2.3.3 to 2.4.0: null won't deserialize in String[]"
        ],
        "desc_hints": [
            "project.ext.versions",
            "AfterburnerModule",
            "LoggingJsonEncoder",
            "gradlew.bat",
            "github.com",
            "LoggingJsonDecoder",
            "dependencyDefinitions.gradle",
            "nullArgument"
        ],
        "desc_text": [
            ["Steps to reproduce", ["SR"]],
            ["Clone the repository at https://github.com/huxi/sulky", []],
            ["Execute the contained ./gradlew or gradlew.bat", ["OB"]],
            ["Clone the repository at https://github.com/huxi/lilith/", []],
            [
                "Change jackson-version in the project.ext.versions map of dependencyDefinitions.gradle from '2.3.3' to '2.4.0'.",
                ["OB"]
            ],
            ["Execute the contained ./gradlew or gradlew.bat", ["OB"]],
            [
                "There will be six test-failures with 2.4.0 that won't happen with 2.3.3.",
                ["OB"]
            ],
            [
                "There are actually only 2 test-methods that fail 3 times each.",
                ["OB", "SR"]
            ],
            ["Those methods reside at full() and nullArgument().", []],
            [
                "I first suspected that AfterburnerModule might be the culprit but removing it from LoggingJsonDecoder/LoggingJsonEncoder didn't fix the problem.",
                []
            ],
            ["Sorry for not narrowing down the problem further.", ["OB"]],
            [
                "I'll give this another look tomorrow but you may already be able to find the issue in the meantime.",
                ["OB"]
            ],
            [
                "The interesting thing is that several other test cases are working as intended...",
                []
            ]
        ]
    },
    "Jsoup-54": {
        "code_elements": [
            "org.jsoup.nodes.Document doc = Jsoup.parse(\"<html><head></head><body style=\\\"color: red\\\" \\\"></body></html>\");",
            "new W3CDom().fromJsoup(doc);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "INVALID_CHARACTER_ERR when converting Document to W3C"
        ],
        "desc_hints": [
            "ClearQuest",
            "org.jsoup.helper.W3CDom.fromJsoup",
            "org.jsoup.select.NodeTraversor.traverse",
            "copyAttributes",
            "org.jsoup.helper.W3CDom.convert",
            "org.apache.xerces.dom.ElementImpl.setAttribute",
            "NodeTraversor.java",
            "Jsoup.parse",
            "W3CBuilder.copyAttributes",
            "W3CDom.java",
            "org.apache.xerces.dom.CoreDocumentImpl.createAttribute",
            "fromJsoup",
            "org.jsoup.nodes.Document",
            "W3CBuilder.head",
            "org.w3c.dom.DOMException",
            "org.jsoup.helper.W3CDom"
        ],
        "desc_text": [
            [
                "A recent ClearQuest version has an HTML generation bug, which is ignored by both Chrome and Internet Explorer.",
                []
            ],
            ["Jsoup.parse is also successful:", []],
            [
                "org.jsoup.nodes.Document doc = Jsoup.parse(\"<html><head></head><body style=\\\"color: red\\\" \\\"></body></html>\");",
                "CODE"
            ],
            [
                "(Please note the single quotation mark at the end of the body start tag.)",
                ["OB"]
            ],
            [
                "But trying to convert this to a W3C document fails:",
                ["OB", "SR"]
            ],
            ["new W3CDom().fromJsoup(doc);", "CODE"],
            [
                "Exception in thread \"main\" org.w3c.dom.DOMException: INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified.",
                ["OB"]
            ],
            [
                "at org.apache.xerces.dom.CoreDocumentImpl.createAttribute(Unknown Source)",
                []
            ],
            [
                "at org.apache.xerces.dom.ElementImpl.setAttribute(Unknown Source)",
                []
            ],
            [
                "at org.jsoup.helper.W3CDom$W3CBuilder.copyAttributes(W3CDom.java:124)",
                []
            ],
            ["at org.jsoup.helper.W3CDom$W3CBuilder.head(W3CDom.java:92)", []],
            [
                "at org.jsoup.select.NodeTraversor.traverse(NodeTraversor.java:31)",
                []
            ],
            ["at org.jsoup.helper.W3CDom.convert(W3CDom.java:66)", []],
            ["at org.jsoup.helper.W3CDom.fromJsoup(W3CDom.java:46)", []],
            [
                "Perhaps copyAttributes() should ignore invalid attributes, or catch exactly this error, and ignore it, or W3CDom could have flags to ignore such errors...",
                ["EB"]
            ]
        ]
    },
    "Closure-171": {
        "code_elements": [
            "/** @constructor */",
            "function foo() {}",
            "(function() {",
            "foo.prototype = {",
            "alert: function() {",
            "alert(\"hello world\");",
            "}",
            "};"
        ],
        "stack_traces": [],
        "summary_hints": ["obj.prototype"],
        "summary_text": [
            "Assigning object literals to obj.prototype in a immediately executed function not recognized."
        ],
        "desc_hints": [
            "foo.prototype",
            "foo.prototype.alert",
            "window.console.log"
        ],
        "desc_text": [
            ["/** @constructor */", "CODE"],
            ["function foo() {}", "CODE"],
            ["(function() {", "CODE"],
            ["foo.prototype = {", "CODE"],
            ["alert: function() {", "CODE"],
            ["alert(\"hello world\");", "CODE"],
            ["}", "CODE"],
            ["};", "CODE"],
            ["})()", []],
            [
                "window.console.log(foo.prototype.alert); //undefined property warning",
                []
            ]
        ]
    },
    "Math-91": {
        "code_elements": [
            "// value is roughly PI - 3.07e-18",
            "Fraction pi1 = new Fraction(1068966896, 340262731);",
            "// value is roughly PI + 1.936e-17",
            "Fraction pi2 = new Fraction( 411557987, 131002976);"
        ],
        "stack_traces": [],
        "summary_hints": ["Fraction.comparTo"],
        "summary_text": [
            "Fraction.comparTo returns 0 for some differente fractions"
        ],
        "desc_hints": [
            "compareTo",
            "pi1.compareTo",
            "pi2.doubleValue",
            "pi1.doubleValue",
            "System.out.println"
        ],
        "desc_text": [
            [
                "If two different fractions evaluate to the same double due to limited precision,",
                ["OB"]
            ],
            [
                "the compareTo methode returns 0 as if they were identical.",
                ["OB"]
            ],
            ["// value is roughly PI - 3.07e-18", "CODE"],
            ["Fraction pi1 = new Fraction(1068966896, 340262731);", "CODE"],
            ["// value is roughly PI + 1.936e-17", "CODE"],
            ["Fraction pi2 = new Fraction( 411557987, 131002976);", "CODE"],
            [
                "System.out.println(pi1.doubleValue() - pi2.doubleValue()); // exactly 0.0 due to limited IEEE754 precision",
                []
            ],
            [
                "System.out.println(pi1.compareTo(pi2)); // display 0 instead of a negative value",
                ["OB"]
            ]
        ]
    },
    "Closure-62": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Column-indicating caret is sometimes not in error output"
        ],
        "desc_hints": ["compiler.jar", "test.js"],
        "desc_text": [
            [
                "For some reason, the caret doesn't always show up in the output when there are errors.",
                ["OB", "EB"]
            ],
            ["When test.js looks like this:", ["OB", "SR"]],
            [">alert(1;", []],
            [", the output is this:", []],
            [">java -jar compiler.jar --js test.js", []],
            ["test.js:1: ERROR - Parse error.", ["OB"]],
            ["missing ) after argument list", ["OB"]],
            ["1 error(s), 0 warning(s)", ["OB"]],
            [
                "However, when test.js looks like this (notice the line break after the semicolon):",
                ["OB", "SR"]
            ],
            [">alert(1;", []],
            [", the output is this:", []],
            [">java -jar compiler.jar --js test.js", []],
            ["test.js:1: ERROR - Parse error.", ["OB"]],
            ["missing ) after argument list", ["OB"]],
            ["alert(1;", []],
            ["^", []],
            ["1 error(s), 0 warning(s)", ["OB"]],
            [
                "That's the simplest reproduction of the problem that I could come up with, but I just encountered the problem in a file with ~100 LOC in it.",
                []
            ],
            [
                "This is the first time I believe I've run into the problem, but when it happens, my error parser fails and it becomes a pain to track down the raw output to find the actual problem.",
                ["OB"]
            ],
            ["Tested against r1171, committed 6/10 08:06.", ["OB"]],
            [
                "The problem is present going back to at least r1000, so this isn't a new issue.",
                []
            ]
        ]
    },
    "Math-38": {
        "code_elements": [
            "interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));",
            "//        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);",
            "final double[] lB = boundaries == null ? null : boundaries[0];",
            "final double[] uB = boundaries == null ? null : boundaries[1];",
            "BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 1);",
            "+        BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 2);",
            "RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);",
            "//        System.out.println(func.getClass().getName() + \" = \"",
            "//              + optim.getEvaluations() + \" f(\");"
        ],
        "stack_traces": [],
        "summary_hints": ["numberOfInterpolationPoints"],
        "summary_text": [
            "Errors in BOBYQAOptimizer when numberOfInterpolationPoints is greater than 2*dim+1"
        ],
        "desc_hints": [
            "interpolationPoints.getEntry",
            "interpolationPoints.setEntry",
            "optim.optimize",
            "RealPointValuePair",
            "startPoint",
            "func.getClass",
            "BOBYQAOptimizerTest",
            "getName",
            "BOBYQAOptimizerTest.java",
            "optim.getEvaluations",
            "maxEvaluations",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I've been having trouble getting BOBYQA to minimize a function (actually a non-linear least squares fit) so as one change I increased the number of interpolation points.",
                ["OB"]
            ],
            [
                "It seems that anything larger than 2*dim+1 causes an error (typically at",
                ["OB", "SR"]
            ],
            ["line 1662", []],
            [
                "interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));",
                "CODE"
            ],
            [
                "I'm guessing there is an off by one error in the translation from FORTRAN.",
                ["OB"]
            ],
            [
                "Changing the BOBYQAOptimizerTest as follows (increasing number of interpolation points by one) will cause failures.",
                ["OB", "SR"]
            ],
            ["Bruce", []],
            [
                "Index: src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java",
                []
            ],
            [
                "===================================================================",
                []
            ],
            [
                "\u2014 src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\t(revision 1221065)",
                []
            ],
            [
                "+++ src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\t(working copy)",
                []
            ],
            ["@@ -258,7 +258,7 @@", []],
            [
                "//        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);",
                "CODE"
            ],
            [
                "final double[] lB = boundaries == null ? null : boundaries[0];",
                "CODE"
            ],
            [
                "final double[] uB = boundaries == null ? null : boundaries[1];",
                "CODE"
            ],
            [
                "BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 1);",
                "CODE"
            ],
            [
                "+        BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 2);",
                "CODE"
            ],
            [
                "RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);",
                "CODE"
            ],
            [
                "//        System.out.println(func.getClass().getName() + \" = \"",
                "CODE"
            ],
            ["//              + optim.getEvaluations() + \" f(\");", "CODE"]
        ]
    },
    "Jsoup-48": {
        "code_elements": [
            "if (!values.isEmpty()) header(name, values.get(0));",
            "if (!values.isEmpty()) {",
            "String val = \"\";",
            "for(String str: values) {",
            "val = val.concat(str).concat(\" \");",
            "}",
            "header(name, val);",
            "}",
            "void processResponseHeaders(Map<String, List> resHeaders) {",
            "for (Map.Entry<String, List> entry : resHeaders.entrySet()) {",
            "String name = entry.getKey();",
            "if (name == null)",
            "continue; // http/1.1 line",
            "List<String> values = entry.getValue();",
            "if (name.equalsIgnoreCase(\"Set-Cookie\")) {",
            "for (String value : values) {",
            "if (value == null)",
            "continue;",
            "TokenQueue cd = new TokenQueue(value);",
            "String cookieName = cd.chompTo(\"=\").trim();",
            "String cookieVal = cd.consumeTo(\";\").trim();",
            "// ignores path, date, domain, validateTLSCertificates et al. req'd?",
            "// name not blank, value not null",
            "if (cookieName.length() > 0)",
            "cookie(cookieName, cookieVal);",
            "}",
            "} else { // only take the first instance of each header",
            "if (!values.isEmpty())",
            "header(name, values.get(0));",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["A small bug for duplicate tuple in response header"],
        "desc_hints": [
            "values.isEmpty",
            "cookieName.length",
            "Asp.NET",
            "values.get",
            "cd.consumeTo",
            "resHeaders",
            "entry.getValue",
            "resHeaders.entrySet",
            "TokenQueue",
            "processResponseHeaders",
            "validateTLSCertificates",
            "pt.com",
            "cd.chompTo",
            "entry.getKey",
            "name.equalsIgnoreCase",
            "ASP.NET",
            "Map.Entry",
            "cookieName",
            "val.concat",
            "cookieVal"
        ],
        "desc_text": [
            ["for response headers have duplicate tuple\uff0c", []],
            ["in this case", []],
            ["X-Powered-By:PHP/5.2.8", []],
            ["X-Powered-By:ASP.NET", []],
            ["Jsoup can only get the second one", ["OB"]],
            [
                "if I run header\uff08\u201cX-powered-by\u201d\uff09",
                ["OB", "SR"]
            ],
            ["I got Asp.NET", ["OB"]],
            ["URL\uff1ahttp://01pt.com/", []],
            [
                "Cache-Control:no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
                []
            ],
            ["Content-Encoding:gzip", []],
            ["Content-Length:16224", []],
            ["Content-Type:text/html;charset=gb2312", []],
            ["Date:Thu, 27 Aug 2015 09:22:40 GMT", []],
            ["Expires:Thu, 19 Nov 1981 08:52:00 GMT", []],
            ["Pragma:no-cache", []],
            ["Server:Microsoft-IIS/7.5", []],
            ["Vary:Accept-Encoding", []],
            ["X-Powered-By:PHP/5.2.8", []],
            ["X-Powered-By:ASP.NET", []],
            ["The bug is because", []],
            ["if (!values.isEmpty()) header(name, values.get(0));", "CODE"],
            ["I change it to", ["OB"]],
            ["if (!values.isEmpty()) {", "CODE"],
            ["String val = \"\";", "CODE"],
            ["for(String str: values) {", "CODE"],
            ["val = val.concat(str).concat(\" \");", "CODE"],
            ["}", "CODE"],
            ["header(name, val);", "CODE"],
            ["}", "CODE"],
            [
                "then I am able to get \u201cPHP/5.2.8 ASP.NET\u201d when I run header\uff08\u201cX-powered-by\u201d\uff09",
                ["OB", "SR"]
            ],
            [
                "void processResponseHeaders(Map<String, List> resHeaders) {",
                "CODE"
            ],
            [
                "for (Map.Entry<String, List> entry : resHeaders.entrySet()) {",
                "CODE"
            ],
            ["String name = entry.getKey();", "CODE"],
            ["if (name == null)", "CODE"],
            ["continue; // http/1.1 line", "CODE"],
            ["List<String> values = entry.getValue();", "CODE"],
            ["if (name.equalsIgnoreCase(\"Set-Cookie\")) {", "CODE"],
            ["for (String value : values) {", "CODE"],
            ["if (value == null)", "CODE"],
            ["continue;", "CODE"],
            ["TokenQueue cd = new TokenQueue(value);", "CODE"],
            ["String cookieName = cd.chompTo(\"=\").trim();", "CODE"],
            ["String cookieVal = cd.consumeTo(\";\").trim();", "CODE"],
            [
                "// ignores path, date, domain, validateTLSCertificates et al. req'd?",
                "CODE"
            ],
            ["// name not blank, value not null", "CODE"],
            ["if (cookieName.length() > 0)", "CODE"],
            ["cookie(cookieName, cookieVal);", "CODE"],
            ["}", "CODE"],
            ["} else { // only take the first instance of each header", "CODE"],
            ["if (!values.isEmpty())", "CODE"],
            ["header(name, values.get(0));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-83": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Cannot see version with --version"],
        "desc_hints": ["compiler.jar", "code.google.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Download sources of latest (r698) command-line version of closure compiler.",
                ["OB"]
            ],
            ["2.", ["OB", "SR"]],
            ["Build (with ant from command line).", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["Run compiler (java -jar compiler.jar --version).", []],
            ["What is the expected output?", "QUERY"],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: 698", []],
            ["Built on: 2011/01/17 12:16", []],
            ["What do you see instead?", "QUERY"],
            [
                "\u041e\u043f\u0446\u0438\u044f \"--version\" \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u043d\u0434",
                []
            ],
            ["(Option \"--version\" requires operand)", []],
            ["and full list of options with description.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Latest source of command-line compiler from SVN (r698).", []],
            ["OS Linux Mint 7, Sun Java 1.6.0_22.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            ["When running compiler with", ["OB", "SR"]],
            ["java -jar compiler.jar --version ?", []],
            [
                "it shows error message, then version info, then full list of options.",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonDatabind-29": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Handle null type id for polymorphic values that use external type id"
        ],
        "desc_hints": ["defaultImpl"],
        "desc_text": [
            ["What actual problem is this fixing?", []],
            [
                "Could you provide a test case to show the problem you have.",
                ["SR"]
            ],
            [
                "I am not sure, looking at the patch alone, that this is a valid change.",
                []
            ],
            [
                "Type Ids are typically required, unless there is defaultImpl defined.",
                ["OB"]
            ],
            [
                "How should actual expected polymorphic type determined, if no type id is available?",
                ["EB"]
            ]
        ]
    },
    "Gson-7": {
        "code_elements": [
            "@Test public void test() {",
            "Map<Integer, Integer> expected = new HashMap<Integer, Integer>() {{ put(0, 1); }};",
            "Map<Integer, Integer> actual = new Gson().fromJson(\"{0:1}\", new TypeToken<Map<Integer, Integer>>() {}.getType());",
            "assertEquals(expected, actual);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonReader.nextInt"],
        "summary_text": [
            "JsonReader.nextInt() doesent work if p == PEEKED_UNQUOTED"
        ],
        "desc_hints": [
            "code.google.com",
            "fromJson",
            "gmail.com",
            "assertEquals",
            "getType",
            "HashMap",
            "TypeToken"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["This unit test describes the problem:", []],
            ["@Test public void test() {", "CODE"],
            [
                "Map<Integer, Integer> expected = new HashMap<Integer, Integer>() {{ put(0, 1); }};",
                "CODE"
            ],
            [
                "Map<Integer, Integer> actual = new Gson().fromJson(\"{0:1}\", new TypeToken<Map<Integer, Integer>>() {}.getType());",
                "CODE"
            ],
            ["assertEquals(expected, actual);", "CODE"],
            ["}", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["2.3 (version 2.1 works OK)", []],
            [
                "Original issue reported on code.google.com by feathoro...@gmail.com on 28 Oct 2014 at 4:32",
                []
            ]
        ]
    },
    "Closure-104": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["html5.js"],
        "summary_text": ["Typos in externs/html5.js"],
        "desc_hints": [
            "CanvasRenderingContext2D.prototype.mitreLimit",
            "CanvasRenderingContext2D.prototype.globalCompositingOperation",
            "miterLimit",
            "globalCompositeOperation"
        ],
        "desc_text": [
            ["Line 354:", []],
            [
                "CanvasRenderingContext2D.prototype.globalCompositingOperation;",
                []
            ],
            ["Line 366:", []],
            ["CanvasRenderingContext2D.prototype.mitreLimit;", []],
            [
                "They should be globalCompositeOperation and miterLimit, respectively.",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-39": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "JSoup incorrectly moves content from the <head> section into <body> for sample URL"
        ],
        "desc_hints": [
            "try.jsoup.org",
            "Fhome.htm",
            "jornutzon.sydneyoperahouse.com",
            "home.htm",
            "Fvalidator.w3.org",
            "Fjornutzon.sydneyoperahouse.com",
            "validator.w3.org"
        ],
        "desc_text": [
            ["If you load the following URL:", ["OB", "SR"]],
            ["http://jornutzon.sydneyoperahouse.com/home.htm", []],
            ["into:", []],
            ["http://try.jsoup.org/", []],
            [
                "then it will move the content from the \"head\" section into the \"body\" section.",
                ["OB", "SR"]
            ],
            ["The URL", ["OB"]],
            ["being parsed validates using the W3C validator:", []],
            [
                "http://validator.w3.org/check?uri=http%3A%2F%2Fjornutzon.sydneyoperahouse.com%2Fhome.htm&charset=%28detect+automatically%29&doctype=Inline&ss=1&group=0&user-agent=W3C_Validator%2F1.3+http%3A%2F%2Fvalidator.w3.org%2Fservices",
                []
            ],
            ["We are using JSoup 1.7.2", []]
        ]
    },
    "Closure-38": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Identifier minus a negative number needs a space between the \"-\"s"
        ],
        "desc_hints": ["compiler.jar", "bulletfail.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile the attached file with    java -jar build/compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --js bulletfail.js --js_output_file cc.js",
                ["SR"]
            ],
            ["2.", ["OB", "SR"]],
            [
                "Try to run the file in a JS engine, for example         node cc.js",
                ["SR"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["The file does not parse properly, because it contains", ["OB"]],
            ["g--0.0", ["OB"]],
            [
                "This is subtraction of a negative number, but it looks like JS engines interpret it as decrementing g, and then fail to parse the 0.0.",
                ["OB", "SR"]
            ],
            ["(g- -0.0, with a space, would parse ok.)", ["OB", "SR"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Trunk closure compiler on Ubuntu", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Jsoup-33": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Self-closing script tag causes remainder of document to be html-escaped."
        ],
        "desc_hints": ["HtmlParserTest.handlesKnownEmptyBlocks"],
        "desc_text": [
            [
                "When a self-closing script block is encountered it appears that the state transitions do not account for the closing tag, so the rest of the document is considered to be in the body of the script tag, and so is escaped.",
                ["OB", "EB", "SR"]
            ],
            [
                "The unit test HtmlParserTest.handlesKnownEmptyBlocks() will fail if a self-closing script tag is included in the String h.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-2": {
        "code_elements": ["var inside = true;", "var inside = true;"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Unadorned text following data-only tags doesn't parse properly"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "This HTML, parsed and immediately printed out, results in:",
                ["OB"]
            ],
            ["<html>", []],
            ["<body>", []],
            ["<script type=\"text/javascript\">", []],
            ["var inside = true;", "CODE"],
            ["</script>", []],
            ["this should be outside.", ["EB"]],
            ["</body>", []],
            ["</html>", []],
            ["Results:", ["OB"]],
            ["<html>", []],
            ["<head>", []],
            ["</head>", []],
            ["<body>", []],
            ["<script type=\"text/javascript\">", []],
            ["var inside = true;", "CODE"],
            ["this should be outside.", ["EB"]],
            ["</script>", []],
            ["</body>", []],
            ["</html>", []],
            [
                "Note how \"this should be outside\" ends up inside the <script> tag, instead of following it.",
                ["OB", "EB"]
            ],
            [
                "From what I can tell, this only happens to data-only tags.",
                ["OB"]
            ]
        ]
    },
    "Compress-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArchiveOutputStream"],
        "summary_text": [
            "Are the public finish() methods ArchiveOutputStream implementations necessary and safe?"
        ],
        "desc_hints": ["ArchiveOutputStream"],
        "desc_text": [
            [
                "Some of the ArchiveOutputStream implementations have public finish() methods.",
                ["OB"]
            ],
            [
                "These are currently only called from the close() methods.",
                ["OB"]
            ],
            [
                "Seems to me that there is no need to allow the finish() methods to be called externally, and the user can corrupt the output if they do.",
                ["OB", "EB"]
            ],
            ["Surely the close() method is all that is needed?", []]
        ]
    },
    "Csv-7": {
        "code_elements": [
            ".withIgnoreSurroundingSpaces(true).withHeader().withSkipHeaderRecord(true);"
        ],
        "stack_traces": [],
        "summary_hints": ["HeaderMap"],
        "summary_text": [
            "HeaderMap is inconsistent when it is parsed from an input with duplicate columns names"
        ],
        "desc_hints": [
            "withQuoteChar",
            "withQuotePolicy",
            "withIgnoreSurroundingSpaces",
            "Quote.MINIMAL",
            "myFormat",
            "HeaderMap",
            "withSkipHeaderRecord",
            "withHeader",
            "CSVFormat.RFC4180.withDelimiter"
        ],
        "desc_text": [
            [
                "Given a parser format for csv files with a header line:",
                ["OB", "SR"]
            ],
            [
                "CSVFormat myFormat = CSVFormat.RFC4180.withDelimiter(\",\").withQuoteChar('\"').withQuotePolicy(Quote.MINIMAL)",
                []
            ],
            [
                ".withIgnoreSurroundingSpaces(true).withHeader().withSkipHeaderRecord(true);",
                "CODE"
            ],
            ["And given a file with duplicate header names:", ["OB"]],
            ["Col1,Col2,Col2,Col3,Col4", []],
            ["1,2,3,4,5", []],
            ["4,5,6,7,8", []],
            [
                "The HeaderMap returned by the parser misses an entry because of the Column name being used as a key, leading to wrong behavior when we rely on it.",
                ["OB", "SR"]
            ],
            [
                "If this is not supposed to happen in the file regarding the CSV format, at least this should raise an error.",
                ["OB", "EB"]
            ],
            [
                "If not we should come up with a more clever way to store and access the headers.",
                ["OB", "EB"]
            ]
        ]
    },
    "Lang-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["RandomStringUtils"],
        "summary_text": [
            "RandomStringUtils throws confusing IAE when end <= start"
        ],
        "desc_hints": [
            "RandomUtils",
            "java.lang.IllegalArgumentException",
            "nextInt"
        ],
        "desc_text": [
            [
                "RandomUtils invokes Random#nextInt where n = end - start.",
                ["OB"]
            ],
            ["If end <= start, then Random throws:", []],
            ["java.lang.IllegalArgumentException: n must be positive", []],
            [
                "This is confusing, and does not identify the source of the problem.",
                []
            ]
        ]
    },
    "Gson-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Update reader and writer for RFC 7159."],
        "desc_hints": [],
        "desc_text": [
            [
                "This allows for top-level value types without the requirement of leniency.",
                ["OB"]
            ]
        ]
    },
    "Lang-5": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["LocaleUtils.toLocale"],
        "summary_text": [
            "LocaleUtils.toLocale does not parse strings starting with an underscore"
        ],
        "desc_hints": ["LocaleUtils.toLocale", "Locale.toString"],
        "desc_text": [
            ["Hi,", []],
            [
                "Javadocs of Locale.toString() states that \"If the language is missing, the string will begin with an underbar.\".",
                ["OB"]
            ],
            [
                "This is not handled in the LocaleUtils.toLocale method if it is meant to be the inversion method of Locale.toString().",
                []
            ],
            [
                "The fix for the ticket 328 does not handle well the case \"fr__P\", which I found out during fixing the first bug.",
                []
            ],
            ["I am attaching the patch for both problems.", []]
        ]
    },
    "Closure-116": {
        "code_elements": [
            "window[\"anchor\"] = function (obj, modifiesProp) {",
            "return (function (saved) {",
            "return modifiesProp(obj) + saved;",
            "})(obj[\"prop\"]);",
            "}",
            "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};",
            "window.foo=function(a,b){return b(a)+a.prop};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Erroneous optimization in ADVANCED_OPTIMIZATIONS mode"
        ],
        "desc_hints": [
            "missouristate.edu",
            "history.state",
            "window.js",
            "modifiesProp",
            "compiler.jar",
            "window.foo",
            "EcmaScript",
            "input.js",
            "output.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Create a file input.js with the following \"minimal\" test case:",
                ["OB", "SR"]
            ],
            ["window[\"anchor\"] = function (obj, modifiesProp) {", "CODE"],
            ["return (function (saved) {", "CODE"],
            ["return modifiesProp(obj) + saved;", "CODE"],
            ["})(obj[\"prop\"]);", "CODE"],
            ["}", "CODE"],
            ["2.", ["OB", "SR"]],
            ["Compile it with:", []],
            ["java -jar .../build/compiler.jar                  \\", []],
            ["--compilation_level ADVANCED_OPTIMIZATIONS    \\", ["SR"]],
            ["--warning_level VERBOSE                       \\", ["SR"]],
            ["--externs window.js                           \\", ["SR"]],
            ["--js input.js                                 \\", ["SR"]],
            ["--js_output_file output.js", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["That's all!", []],
            ["What is the expected output?", "QUERY"],
            [
                "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};",
                "CODE"
            ],
            ["What do you see instead?", "QUERY"],
            ["window.foo=function(a,b){return b(a)+a.prop};", "CODE"],
            [
                "Note how this is semantically very different if modifiesProp/b (whose",
                []
            ],
            [
                "semantics are unknown to the compiler) side-effects a.prop.",
                ["OB"]
            ],
            [
                "The evaluation order of + is well-defined in EcmaScript 5, but even",
                ["OB"]
            ],
            [
                "then, this happens even if one substitutes the , (comma) operator.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Git HEAD", []],
            ["commit 4a62ee4bca02169dd77a6f26ed64a624b3f05f95", []],
            [
                "Author: Chad Killingsworth <chadkillingsworth@missouristate.edu>",
                []
            ],
            ["Date: Wed Sep 25 14:52:28 2013 -0500", []],
            ["Add history.state to html5 externs", []],
            ["on Linux.", ["OB"]]
        ]
    },
    "Compress-46": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ZipEntry"],
        "summary_text": [
            "Tests failing under jdk 9 : one reflection issue, one change to ZipEntry related issue"
        ],
        "desc_hints": [
            "TestRunner",
            "X5455_ExtendedTimestampTest",
            "bugs.openjdk.java.net",
            "getTime"
        ],
        "desc_text": [
            [
                "X5455_ExtendedTimestampTest is failing under JDK 9 , due to what appears to be a bogus value returned from getTime().",
                ["OB"]
            ],
            [
                "It seems like the test failure might be due to the changes introduced for this:",
                ["OB"]
            ],
            ["https://bugs.openjdk.java.net/browse/JDK-8073497", []],
            [
                "Tests were run using intelliJ TestRunner, using the openjdk9 build from the tip of the jdk9 tree (not dev).",
                ["OB"]
            ],
            [
                "I believe that this is at most one commit away from what will be the RC (which was delayed at the last minute due to two issues, one of which was javadoc related, and the other hotspot.",
                []
            ]
        ]
    },
    "Jsoup-12": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["tag[attr~=regex] fails if preceded by a combinator"],
        "desc_hints": ["SelectorParseException"],
        "desc_text": [
            [
                "All following selectors fail with a SelectorParseException:",
                ["OB", "SR"]
            ],
            ["div table[class~=x|y]", []],
            ["div > table[class~=x|y]", []],
            ["div + table[class~=x|y]", []],
            ["div ~ table[class~=x|y]", []],
            ["Note that div, table[class~=x|y] does not fail", ["OB"]],
            ["Using: jsoup 1.4.1 and JDK 7 build 116", []]
        ]
    },
    "Closure-74": {
        "code_elements": [
            "alert(true == null ? a() : b());",
            "alert(!0 == null ? a() : b());",
            "alert(true == false ? a() : b());",
            "function sum(a, b){",
            "return (a == true ? 2 : a) + b;",
            "}",
            "alert(sum(true, 1));",
            "alert((!0 == !0 ? 2 : 1) + 1);",
            "alert(3);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Obvious optimizations don't works in \"inline if\""],
        "desc_hints": [],
        "desc_text": [
            ["Try it (advanced mode):", []],
            ["alert(true == null ? a() : b());", "CODE"],
            [
                "EVER true != null, in this case, EVER will trigger b(), but we get:",
                []
            ],
            ["alert(!0 == null ? a() : b());", "CODE"],
            ["Same for:", []],
            ["alert(true == false ? a() : b());", "CODE"],
            ["Real life use:", []],
            ["function sum(a, b){", "CODE"],
            ["return (a == true ? 2 : a) + b;", "CODE"],
            ["}", "CODE"],
            ["alert(sum(true, 1));", "CODE"],
            ["Results in:", ["OB"]],
            ["alert((!0 == !0 ? 2 : 1) + 1);", "CODE"],
            ["But correct is:", []],
            ["alert(3);", "CODE"]
        ]
    },
    "Mockito-10": {
        "code_elements": [
            "public void test() {",
            "ToBeMocked mock = mock(ToBeMocked.class, RETURNS_DEEP_STUBS);",
            "assertThat(mock.getSomething()).isNotNull();",
            "}",
            "public static class ToBeMocked {",
            "NotSerializableReturnValue field1;",
            "public ToBeMocked(NotSerializableReturnValue field1) {",
            "this.field1 = field1;",
            "}",
            "public NotSerializableReturnValue getSomething() {",
            "return field1;",
            "}",
            "}",
            "public static class NotSerializableReturnValue {",
            "String field1 = \"\";",
            "public NotSerializableReturnValue(String field1) {",
            "this.field1 = field1;",
            "}",
            "public String getSomething2() {",
            "return field1;",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "RETURNS_DEEP_STUBS automatically tries to create serializable mocks"
        ],
        "desc_hints": [
            "ToBeMocked",
            "isNotNull",
            "mock.getSomething",
            "org.mockito.exceptions.base.MockitoException",
            "getSomething2",
            "this.field1",
            "NotSerializableReturnValue",
            "assertThat",
            "withSettings",
            "getSomething",
            "ToBeMocked.class"
        ],
        "desc_text": [
            ["I am just migrating from mockito 1.9.5 to 1.10.5", []],
            ["The following code runs fine with version 1.9.5.", ["OB", "SR"]],
            ["but breaks now:", ["OB"]],
            ["@Test", []],
            ["public void test() {", "CODE"],
            [
                "ToBeMocked mock = mock(ToBeMocked.class, RETURNS_DEEP_STUBS);",
                "CODE"
            ],
            ["assertThat(mock.getSomething()).isNotNull();", "CODE"],
            ["}", "CODE"],
            ["public static class ToBeMocked {", "CODE"],
            ["NotSerializableReturnValue field1;", "CODE"],
            ["public ToBeMocked(NotSerializableReturnValue field1) {", "CODE"],
            ["this.field1 = field1;", "CODE"],
            ["}", "CODE"],
            ["public NotSerializableReturnValue getSomething() {", "CODE"],
            ["return field1;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public static class NotSerializableReturnValue {", "CODE"],
            ["String field1 = \"\";", "CODE"],
            ["public NotSerializableReturnValue(String field1) {", "CODE"],
            ["this.field1 = field1;", "CODE"],
            ["}", "CODE"],
            ["public String getSomething2() {", "CODE"],
            ["return field1;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["org.mockito.exceptions.base.MockitoException:", []],
            [
                "You are using the setting 'withSettings().serializable()' however the type you are trying to mock 'NotSerializableReturnValue'",
                []
            ],
            [
                "do not implement Serializable AND do not have a no-arg constructor.",
                ["OB"]
            ]
        ]
    },
    "Time-6": {
        "code_elements": [
            "Chronology chronology = GJChronology.getInstance();",
            "LocalDate start = new LocalDate(2013, 5, 31, chronology);",
            "assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));",
            "assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Questionable behaviour of GJChronology when dates pass 1BC"
        ],
        "desc_hints": [
            "start.plus",
            "LocalDate",
            "org.joda.time.IllegalFieldValueException",
            "start.minusYears",
            "GJChronology.getInstance",
            "expectedEnd",
            "assertThat",
            "equalTo",
            "Period.years"
        ],
        "desc_text": [
            ["I expect the following test to pass:", ["EB", "SR"]],
            ["Chronology chronology = GJChronology.getInstance();", "CODE"],
            [
                "LocalDate start = new LocalDate(2013, 5, 31, chronology);",
                "CODE"
            ],
            [
                "LocalDate expectedEnd = new LocalDate(-1, 5, 31, chronology); // 1 BC",
                ["SR"]
            ],
            [
                "assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));",
                "CODE"
            ],
            [
                "assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));",
                "CODE"
            ],
            ["The error it gives is:", ["OB"]],
            [
                "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported",
                []
            ],
            ["However, I never provided \"0\" for the year myself.", ["OB"]],
            [
                "I thought it was the job of the framework to skip over non-existent year 0 for me to return 1 BC?",
                []
            ]
        ]
    },
    "Math-56": {
        "code_elements": [
            "MultidimensionalCounter counter = new MultidimensionalCounter(2, 4);",
            "for (Integer i : counter) {",
            "int[] x = counter.getCounts;",
            "System.out.println(i + \" \" + Arrays.toString);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["MultidimensionalCounter.getCounts"],
        "summary_text": [
            "MultidimensionalCounter.getCounts(int) returns wrong array of indices"
        ],
        "desc_hints": [
            "counter.getCounts",
            "Arrays.toString",
            "MultidimensionalCounter",
            "System.out.println"
        ],
        "desc_text": [
            [
                "MultidimensionalCounter counter = new MultidimensionalCounter(2, 4);",
                "CODE"
            ],
            ["for (Integer i : counter) {", "CODE"],
            ["int[] x = counter.getCounts;", "CODE"],
            ["System.out.println(i + \" \" + Arrays.toString);", "CODE"],
            ["}", "CODE"],
            ["Output is:", []],
            ["0 [0, 0]", []],
            ["1 [0, 1]", []],
            ["2 [0, 2]", []],
            ["3 [0, 2] <=== should be [0, 3]", ["EB"]],
            ["4 [1, 0]", []],
            ["5 [1, 1]", []],
            ["6 [1, 2]", ["OB", "SR"]],
            ["7 [1, 2] <=== should be [1, 3]", ["EB", "SR"]]
        ]
    },
    "Csv-5": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CSVFormat.format"],
        "summary_text": ["CSVFormat.format allways append null"],
        "desc_hints": [
            "withHeader",
            "withSkipHeaderRecord",
            "CSVFormat.newFormat"
        ],
        "desc_text": [
            ["When I now call", ["OB", "SR"]],
            [
                "CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(\"H1\",\"H2\").format(\"A\",\"B\")",
                ["OB"]
            ],
            ["I get the output A;Bnull", ["OB"]],
            ["The expected output would be", []],
            ["A;B", []]
        ]
    },
    "Compress-9": {
        "code_elements": [
            "public void tartest() throws Exception {",
            "FileOutputStream myOutputStream = new FileOutputStream(\"C:/temp/tartest.tar\");",
            "ArchiveOutputStream sTarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, myOutputStream);",
            "File sSource = new File(\"C:/share/od_l.txt\");",
            "TarArchiveEntry sEntry = new TarArchiveEntry(sSource);",
            "sTarOut.putArchiveEntry(sEntry);",
            "FileInputStream sInput = new FileInputStream(sSource);",
            "byte[] cpRead = new byte[8192];",
            "int iRead = 0;",
            "while ((iRead = sInput.read(cpRead)) > 0) {",
            "sTarOut.write(cpRead, 0, iRead);",
            "}",
            "sLog.info(\"Processed: \"+sTarOut.getBytesWritten()+\" bytes. File Len: \"+sSource.length());",
            "sInput.close();",
            "sTarOut.closeArchiveEntry();",
            "sTarOut.close();",
            "sLog.info(\"Processed: \"+sTarOut.getBytesWritten()+\" bytes. File Len: \"+sSource.length());",
            "return;",
            "}",
            "// eliminate some of the buffer copying.",
            "//",
            "}",
            "+",
            "+        count(numToWrite);",
            "if (assemLen > 0) {",
            "if ((assemLen + numToWrite) >= recordBuf.length) {",
            "@@ -325,7 +327,7 @@",
            "wOffset += num;",
            "}",
            "-        count(numToWrite);",
            "+",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TarArchiveOutputStream.getBytesWritten"],
        "summary_text": [
            "TarArchiveOutputStream.getBytesWritten() returns invalid value"
        ],
        "desc_hints": [
            "cpRead",
            "sTarOut",
            "tartest.tar",
            "ArchiveStreamFactory",
            "TarArchiveEntry",
            "recordBuf.length",
            "myOutputStream",
            "createArchiveOutputStream",
            "FileInputStream",
            "sInput.close",
            "sSource.length",
            "com.cronsult.jndmpd.test.Backup",
            "TarArchiveOutputStream.getBytesWritten",
            "sTarOut.write",
            "sTarOut.close",
            "assemLen",
            "ArchiveOutputStream",
            "sTarOut.closeArchiveEntry",
            "sTarOut.getBytesWritten",
            "ArchiveStreamFactory.TAR",
            "numToWrite",
            "od_l.txt",
            "sTarOut.putArchiveEntry",
            "FileOutputStream",
            "sInput.read",
            "TarArchiveOutputStream.java",
            "sLog.info"
        ],
        "desc_text": [
            [
                "It appears the TarArchiveOutputStream.getBytesWritten()returns zero or invalid value when queried.",
                ["OB", "SR"]
            ],
            [
                "In the code sample below, it returns zero, even after an sizeable file was processed.",
                ["OB", "SR"]
            ],
            [
                "I've printed it twice, once before closing the output stream, and once after, just for the reference.",
                ["OB", "SR"]
            ],
            ["It is also demonstrable on multiple processed files.", ["OB"]],
            [
                "Within the TarArchiveOutputStream.getBytesWritten() implementation, it appears the call for count(numToWrite) is made after the numToWrite is depleted in the process of actual byte writing.",
                ["OB"]
            ],
            [
                "When call for count(numToWrite); is moved up, the returned values for TarArchiveOutputStream.getBytesWritten() are getting equal to the sum of the sizes of processed files.",
                ["OB"]
            ],
            [
                "This is much closer to expected value (\"Returns the current number of bytes written to this stream.\") but still not correct, for that number should include the tar header sizes as well.",
                ["OB", "EB"]
            ],
            [
                "At any rate, please find the proposed patch below, merely moving count(numToWrite); up a few lines.",
                []
            ],
            [
                "This makes TarArchiveOutputStream.getBytesWritten() closer to true value.",
                ["OB"]
            ],
            ["Test code:", ["SR"]],
            ["@Test", []],
            ["public void tartest() throws Exception {", "CODE"],
            [
                "FileOutputStream myOutputStream = new FileOutputStream(\"C:/temp/tartest.tar\");",
                "CODE"
            ],
            [
                "ArchiveOutputStream sTarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, myOutputStream);",
                "CODE"
            ],
            ["File sSource = new File(\"C:/share/od_l.txt\");", "CODE"],
            ["TarArchiveEntry sEntry = new TarArchiveEntry(sSource);", "CODE"],
            ["sTarOut.putArchiveEntry(sEntry);", "CODE"],
            ["FileInputStream sInput = new FileInputStream(sSource);", "CODE"],
            ["byte[] cpRead = new byte[8192];", "CODE"],
            ["int iRead = 0;", "CODE"],
            ["while ((iRead = sInput.read(cpRead)) > 0) {", "CODE"],
            ["sTarOut.write(cpRead, 0, iRead);", "CODE"],
            ["}", "CODE"],
            [
                "sLog.info(\"Processed: \"+sTarOut.getBytesWritten()+\" bytes. File Len: \"+sSource.length());",
                "CODE"
            ],
            ["sInput.close();", "CODE"],
            ["sTarOut.closeArchiveEntry();", "CODE"],
            ["sTarOut.close();", "CODE"],
            [
                "sLog.info(\"Processed: \"+sTarOut.getBytesWritten()+\" bytes. File Len: \"+sSource.length());",
                "CODE"
            ],
            ["return;", "CODE"],
            ["}", "CODE"],
            ["Test Output:", []],
            [
                "Oct 21, 2011 9:09:28 AM com.cronsult.jndmpd.test.Backup tartest",
                []
            ],
            ["INFO: Processed: 0 bytes.", []],
            ["File Len: 186974208", []],
            [
                "Oct 21, 2011 9:09:28 AM com.cronsult.jndmpd.test.Backup tartest",
                []
            ],
            ["INFO: Processed: 0 bytes.", []],
            ["File Len: 186974208", []],
            ["Proposed Patch:", []],
            [
                "Index: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
                []
            ],
            [
                "===================================================================",
                []
            ],
            [
                "--- src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t(revision 1187150)",
                []
            ],
            [
                "+++ src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t(working copy)",
                []
            ],
            ["@@ -276,6 +276,8 @@", []],
            ["// eliminate some of the buffer copying.", "CODE"],
            ["//", "CODE"],
            ["}", "CODE"],
            ["+", "CODE"],
            ["+        count(numToWrite);", "CODE"],
            ["if (assemLen > 0) {", "CODE"],
            ["if ((assemLen + numToWrite) >= recordBuf.length) {", "CODE"],
            ["@@ -325,7 +327,7 @@", "CODE"],
            ["wOffset += num;", "CODE"],
            ["}", "CODE"],
            ["-        count(numToWrite);", "CODE"],
            ["+", "CODE"],
            ["}", "CODE"],
            ["/**", []]
        ]
    },
    "Gson-15": {
        "code_elements": [
            "&& (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {",
            "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
            "}",
            "if (Double.isNaN(value) || Double.isInfinite(value)) {",
            "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonWriter", "java.lang.Number"],
        "summary_text": [
            "JsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,"
        ],
        "desc_hints": [
            "Double.valueOf",
            "Double.NaN",
            "string.equals",
            "out.value",
            "java.lang.Number",
            "Double.isNaN",
            "IllegalArgumentException",
            "JsonWriter",
            "Double.isInfinite"
        ],
        "desc_text": [
            [
                "In lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like NaN, Infinity, -Infinity:",
                ["SR"]
            ],
            ["if (!lenient", []],
            [
                "&& (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {",
                "CODE"
            ],
            [
                "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
                "CODE"
            ],
            ["}", "CODE"],
            ["But JsonWriter#value(double) behaves in different way:", ["OB"]],
            ["if (Double.isNaN(value) || Double.isInfinite(value)) {", "CODE"],
            [
                "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "So, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e.",
                []
            ],
            ["g.", []],
            ["out.value((Number) Double.valueOf(Double.NaN))).", ["OB"]],
            [
                "I think, this should be possible, because boxing gives worse performance.",
                ["EB"]
            ]
        ]
    },
    "Closure-160": {
        "code_elements": [
            "foo={bar:function(){alert(this.baz)}};",
            "foo = {};",
            "foo={bar:function(){alert(this.baz)}};",
            "foo={bar:function(){alert(this.baz)}};",
            "foo={bar:function(){alert(this.baz)}};",
            "foo = {};",
            "foo.bar = function() { alert(this.baz); };"
        ],
        "stack_traces": [],
        "summary_hints": ["undefinedVars", "checkVars"],
        "summary_text": [
            "checkVars / undefinedVars diagnostics not working from command line"
        ],
        "desc_hints": [
            "undefinedVars",
            "foo.bar",
            "compiler.jar",
            "this.baz",
            "globalThis",
            "checkVars",
            "test.js"
        ],
        "desc_text": [
            [
                "It seems that setting neither checkVars nor undefinedVars via the jscomp_warning command line argument does anything.",
                ["OB", "SR"]
            ],
            [
                "The check(s) do work when \"warning_level VERBOSE\" is set though.",
                ["OB"]
            ],
            [
                "Other diagnostic groups, such as globalThis, do work however.",
                ["OB"]
            ],
            ["Here's what I'm seeing on the console:", ["OB"]],
            ["---------------------", []],
            [">java -jar compiler.jar --js test.js", []],
            ["foo={bar:function(){alert(this.baz)}};", "CODE"],
            [
                ">java -jar compiler.jar --js test.js --warning_level VERBOSE",
                []
            ],
            [
                "test.js:2: WARNING - dangerous use of the global this object",
                ["SR"]
            ],
            ["test.js:1: ERROR - variable foo is undefined", ["OB"]],
            ["foo = {};", "CODE"],
            ["^", []],
            ["1 error(s), 1 warning(s)", ["OB"]],
            [
                ">java -jar compiler.jar --js test.js --jscomp_warning globalThis",
                []
            ],
            [
                "test.js:2: WARNING - dangerous use of the global this object",
                ["SR"]
            ],
            ["0 error(s), 1 warning(s)", ["OB"]],
            ["foo={bar:function(){alert(this.baz)}};", "CODE"],
            [
                ">java -jar compiler.jar --js test.js --jscomp_warning checkVars",
                []
            ],
            ["foo={bar:function(){alert(this.baz)}};", "CODE"],
            [
                ">java -jar compiler.jar --js test.js --jscomp_warning undefinedVars",
                []
            ],
            ["foo={bar:function(){alert(this.baz)}};", "CODE"],
            ["---------------------", []],
            ["My test.js file looks like this:", ["OB", "SR"]],
            ["---------------------", []],
            ["foo = {};", "CODE"],
            ["foo.bar = function() { alert(this.baz); };", "CODE"],
            ["---------------------", []],
            ["Tested against r1123 which was committed 5/20/11.", ["OB"]]
        ]
    },
    "Csv-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CSVRecord.toMap"],
        "summary_text": [
            "CSVRecord.toMap() throws NPE on formats with no headers."
        ],
        "desc_hints": ["toMap", "NullPointerExcpetion"],
        "desc_text": [
            [
                "The method toMap() on CSVRecord throws a NullPointerExcpetion when called on records derived using a format with no headers.",
                ["OB", "SR"]
            ],
            [
                "The method documentation states a null map should be returned instead.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-154": {
        "code_elements": [
            "/**",
            "* @interface",
            "*/",
            "function I() {};",
            "/** @type {string} */",
            "/**",
            "* @constructor",
            "* @implements {I}",
            "*/",
            "// No warning generated here.",
            "this.foobar = 2;",
            "/** @type {I} */",
            "alert(test.foobar);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Add support for data members on interfaces"],
        "desc_hints": ["prototype.foobar", "this.foobar", "test.foobar"],
        "desc_text": [
            ["/**", "CODE"],
            ["* @interface", "CODE"],
            ["*/", "CODE"],
            ["function I() {};", "CODE"],
            ["/** @type {string} */", "CODE"],
            ["I.prototype.foobar;", []],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @implements {I}", "CODE"],
            ["*/", "CODE"],
            ["function C() {", []],
            ["// No warning generated here.", "CODE"],
            ["this.foobar = 2;", "CODE"],
            ["};", []],
            ["/** @type {I} */", "CODE"],
            ["var test = new C();", []],
            ["alert(test.foobar);", "CODE"]
        ]
    },
    "Closure-68": {
        "code_elements": ["/**", "* @type function", "*/", "*/"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Cryptic error message on invalid \"@type function\" annotation"
        ],
        "desc_hints": ["compiler.jar", "test.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["test.js:", []],
            ["/**", "CODE"],
            ["* @type function", "CODE"],
            ["*/", "CODE"],
            ["var callback;", []],
            ["2.", ["OB", "SR"]],
            ["java -jar compiler.jar --js test.js", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Warning reported is:", []],
            ["test.js:3: WARNING - Parse error.", ["OB"]],
            ["Unexpected end of file", []],
            ["*/", "CODE"],
            ["^", []],
            [
                "Expected to see the actual warning (e.g., \"expected '('\", for the *previous* line)",
                ["EB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["compiler-20110502", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Simply adding \"()\" to it (\"@type function()\") removes the warning, but it would be much more effective if it could communicate that properly.",
                ["OB"]
            ]
        ]
    },
    "Mockito-8": {
        "code_elements": [
            "T self();",
            "}",
            "public void typeVariable_of_self_type() {",
            "GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(\"self\", GenericsSelfReference.class));",
            "assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);",
            "}"
        ],
        "stack_traces": [
            "at sun.reflect.generics.reflectiveObjects.TypeVariableImpl.hashCode(TypeVariableImpl.java:201)",
            "at java.util.HashMap.hash(HashMap.java:338)",
            "at java.util.HashMap.get(HashMap.java:556)",
            "at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:193)",
            "at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)",
            "at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)"
        ],
        "summary_hints": ["StackOverflowError"],
        "summary_text": [
            "1.10 regression (StackOverflowError) with interface where generic type has itself as upper bound"
        ],
        "desc_hints": [
            "java.lang.StackOverflowError",
            "GenericMetadataSupport.java",
            "typeVariable_of_self_type",
            "inferFrom",
            "firstNamedMethod",
            "resolveGenericReturnType",
            "GenericMetadataSupport",
            "genericMetadata",
            "GenericsSelfReference",
            "org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor",
            "assertThat",
            "isEqualTo",
            "GenericMetadataSupportTest",
            "java.util.HashMap.get",
            "java.util.HashMap.hash",
            "genericMetadata.rawType",
            "sun.reflect.generics.reflectiveObjects.TypeVariableImpl.hashCode",
            "HashMap.java",
            "TypeVariableImpl.java",
            "GenericsSelfReference.class"
        ],
        "desc_text": [
            ["Add this to GenericMetadataSupportTest:", []],
            [
                "interface GenericsSelfReference<T extends GenericsSelfReference<T>> {",
                []
            ],
            ["T self();", "CODE"],
            ["}", "CODE"],
            ["@Test", []],
            ["public void typeVariable_of_self_type() {", "CODE"],
            [
                "GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(\"self\", GenericsSelfReference.class));",
                "CODE"
            ],
            [
                "assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["It fails on master and 1.10.8 with this:", ["OB", "SR"]],
            ["java.lang.StackOverflowError", []],
            [
                "at sun.reflect.generics.reflectiveObjects.TypeVariableImpl.hashCode(TypeVariableImpl.java:201)",
                "STACK_TRACE"
            ],
            ["at java.util.HashMap.hash(HashMap.java:338)", "STACK_TRACE"],
            ["at java.util.HashMap.get(HashMap.java:556)", "STACK_TRACE"],
            [
                "at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:193)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)",
                "STACK_TRACE"
            ],
            ["It worked on 1.9.5.", ["OB"]],
            ["May be caused by the changes in ab9e9f3 (cc @bric3).", ["OB"]],
            [
                "(Also note that while the above interface looks strange, it is commonly used for builder hierarchies, where base class methods want to return this with a more specific type.)",
                ["SR"]
            ]
        ]
    },
    "JacksonDatabind-20": {
        "code_elements": [
            "public class TestPropertyNamingStrategyIssue {",
            "public static class ClassWithObjectNodeField {",
            "public String id;",
            "public ObjectNode json;",
            "}",
            "@Test",
            "public void reproducer() throws Exception {",
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);",
            "ClassWithObjectNodeField deserialized =",
            "mapper.readValue(",
            "\"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",",
            "ClassWithObjectNodeField.class);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["PropertyNamingStrategy"],
        "summary_text": [
            "Presence of PropertyNamingStrategy Makes Deserialization Fail"
        ],
        "desc_hints": [
            "ClassWithObjectNodeField",
            "ObjectNode",
            "PropertyNamingStrategy.LOWER_CASE",
            "TestPropertyNamingStrategyIssue",
            "mapper.setPropertyNamingStrategy",
            "ObjectMapper",
            "mapper.readValue",
            "ClassWithObjectNodeField.class",
            "PropertyNamingStrategy"
        ],
        "desc_text": [
            [
                "I originally came across this issue using Dropwizard - dropwizard/dropwizard#1095.",
                []
            ],
            ["But it looks like this is a Jackson issue.", ["OB"]],
            ["Here's the rerproducer:", []],
            ["public class TestPropertyNamingStrategyIssue {", "CODE"],
            ["public static class ClassWithObjectNodeField {", "CODE"],
            ["public String id;", "CODE"],
            ["public ObjectNode json;", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void reproducer() throws Exception {", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);",
                "CODE"
            ],
            ["ClassWithObjectNodeField deserialized =", "CODE"],
            ["mapper.readValue(", "CODE"],
            [
                "\"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",",
                "CODE"
            ],
            ["ClassWithObjectNodeField.class);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Looks like the presence of any PropertyNamingStrategy make deserialization to ObjectNode fail.",
                ["OB"]
            ],
            [
                "This works fine if I remove the property naming strategy.",
                ["OB"]
            ]
        ]
    },
    "Closure-48": {
        "code_elements": [
            "/** @constructor */",
            "var myclass = function() {",
            "}",
            "/** @param {boolean} success */",
            "myclass.prototype.fn = function(success) { }",
            "myclass.prototype.test = function() {",
            "this.fn();",
            "this.fn = function() { };",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Type checking error when replacing a function with a stub after calling."
        ],
        "desc_hints": [
            "myclass.prototype.fn",
            "this.fn",
            "myclass.prototype.test"
        ],
        "desc_text": [
            ["Given the following Javascript:", ["OB", "SR"]],
            ["/** @constructor */", "CODE"],
            ["var myclass = function() {", "CODE"],
            ["}", "CODE"],
            ["/** @param {boolean} success */", "CODE"],
            ["myclass.prototype.fn = function(success) { }", "CODE"],
            ["myclass.prototype.test = function() {", "CODE"],
            ["this.fn();", "CODE"],
            ["this.fn = function() { };", "CODE"],
            ["}", "CODE"],
            ["I would expect an error at both lines of test().", ["EB"]],
            [
                "Instead, the second line causes the error in the first not to be reported.",
                ["OB"]
            ]
        ]
    },
    "Mockito-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "java.lang.Class",
            "java.lang.String",
            "java.lang.ClassCastException"
        ],
        "summary_text": [
            "java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String"
        ],
        "desc_hints": ["verifyZeroInteractions"],
        "desc_text": [
            [
                "Exception throws on verifyZeroInteractions when using mock with default answer.",
                ["OB", "SR"]
            ],
            ["checked on versions 1.10.5-2.0.5", []],
            ["all ok on 1.9.5", ["SR"]]
        ]
    },
    "Cli-7": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Tests fail under 1.6 + error at end that may or may not be related"
        ],
        "desc_hints": [
            "Bug27575Test.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "javax.xml.transform.TransformerFactoryConfigurationError",
            "java.util.prefs.FileSystemPreferences",
            "junit.framework.ComparisonFailure",
            "javax.xml.transform.TransformerFactory.newInstance",
            "java.util.prefs.XmlSupport.writeDoc",
            "NativeMethodAccessorImpl.java",
            "XmlSupport.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "testRequiredOptions",
            "org.apache.commons.cli2.bug.Bug27575Test.testRequiredOptions",
            "FileSystemPreferences.java",
            "org.apache.commons.cli2.bug.Bug27575Test",
            "java.util.prefs.XmlSupport.exportMap",
            "javax.xml.transform.TransformerFactory"
        ],
        "desc_text": [
            ["Testsuite: org.apache.commons.cli2.bug.Bug27575Test", []],
            [
                "Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0.058 sec",
                ["OB"]
            ],
            [
                "Testcase: testRequiredOptions(org.apache.commons.cli2.bug.Bug27575Test):      FAILED",
                []
            ],
            ["expected:<[-h]> but was:<-c <arg>>", ["EB"]],
            [
                "junit.framework.ComparisonFailure: expected:<[-h]> but was:<-c <arg>>",
                ["EB"]
            ],
            [
                "at org.apache.commons.cli2.bug.Bug27575Test.testRequiredOptions(Bug27575Test.java:36)",
                []
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                []
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                []
            ],
            ["and error at end of:", ["OB"]],
            [
                "Exception in thread \"Thread-1\" javax.xml.transform.TransformerFactoryConfigurationError: Provider for javax.xml.transform.TransformerFactory cannot be found",
                ["OB"]
            ],
            [
                "at javax.xml.transform.TransformerFactory.newInstance(Unknown Source)",
                []
            ],
            ["at java.util.prefs.XmlSupport.writeDoc(XmlSupport.java:246)", []],
            [
                "at java.util.prefs.XmlSupport.exportMap(XmlSupport.java:333)",
                []
            ],
            [
                "at java.util.prefs.FileSystemPreferences$8.run(FileSystemPreferences.java:607)",
                []
            ]
        ]
    },
    "JacksonCore-12": {
        "code_elements": [
            "public void testTokenLocationAfterFieldName() throws Exception",
            "{",
            "_testTokenLocationAfterFieldName(false);",
            "_testTokenLocationAfterFieldName(true);",
            "}",
            "private void _testTokenLocationAfterFieldName(Boolean useStream) throws Exception",
            "{",
            "final String DOC = \"{\\\"name\\\":123}\";",
            "JsonFactory jf = new JsonFactory();",
            "JsonParser jp = useStream ?",
            "jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))",
            ": jf.createJsonParser(new StringReader(DOC));",
            "assertEquals(JsonToken.START_OBJECT, jp.nextToken());",
            "assertEquals(JsonToken.FIELD_NAME, jp.nextToken());",
            "assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());",
            "assertEquals(1, jp.getTokenLocation().getLineNr());",
            "assertEquals(9, jp.getTokenLocation().getColumnNr());",
            "jp.close();",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonParser.getTokenLocation"],
        "summary_text": [
            "JsonParser.getTokenLocation() doesn't update after field names."
        ],
        "desc_hints": [
            "DOC.getBytes",
            "assertEquals",
            "StringReader",
            "UTF8StreamJsonParser",
            "JsonToken.FIELD_NAME",
            "jp.close",
            "_currToken",
            "useStream",
            "jf.createJsonParser",
            "JsonFactory",
            "_nextAfterName",
            "_tokenInputCol",
            "JsonParser",
            "jp.nextToken",
            "getColumnNr",
            "_nextToken",
            "ByteArrayInputStream",
            "_testTokenLocationAfterFieldName",
            "JsonToken.START_OBJECT",
            "getLineNr",
            "JsonToken.VALUE_NUMBER_INT",
            "ReaderBasedJsonParser",
            "nextToken",
            "jp.getTokenLocation",
            "testTokenLocationAfterFieldName",
            "getTokenLocation",
            "_tokenInputRow"
        ],
        "desc_text": [
            ["There's a unit test to repro the issue below.", ["OB", "SR"]],
            [
                "Basically, when you're on a FIELD_NAME token, if you call getTokenLocation() and then nextToken() and then getTokenLocation() again, you'll get the same location for both calls to getTokenLocation(), even though you've advanced to a new token.",
                ["OB", "SR"]
            ],
            [
                "The issue seems to be the _nextToken logic in ReaderBasedJsonParser and UTF8StreamJsonParser.",
                ["OB"]
            ],
            [
                "When calling nextToken() on a FIELD_NAME, it calls _nextAfterName(), which updates _currToken but doesn't update _tokenInputRow and _tokenInputCol for the new token's location.",
                ["OB"]
            ],
            [
                "I started to try to fix it, but the _nextToken logic is spread across so much code that it looked like it'd be a pretty major surgery.",
                ["SR"]
            ],
            ["Not something I'm willing to do at this point.", []],
            [":-)", []],
            [
                "public void testTokenLocationAfterFieldName() throws Exception",
                "CODE"
            ],
            ["{", "CODE"],
            ["_testTokenLocationAfterFieldName(false);", "CODE"],
            ["_testTokenLocationAfterFieldName(true);", "CODE"],
            ["}", "CODE"],
            [
                "private void _testTokenLocationAfterFieldName(Boolean useStream) throws Exception",
                "CODE"
            ],
            ["{", "CODE"],
            ["final String DOC = \"{\\\"name\\\":123}\";", "CODE"],
            ["JsonFactory jf = new JsonFactory();", "CODE"],
            ["JsonParser jp = useStream ?", "CODE"],
            [
                "jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))",
                "CODE"
            ],
            [": jf.createJsonParser(new StringReader(DOC));", "CODE"],
            ["assertEquals(JsonToken.START_OBJECT, jp.nextToken());", "CODE"],
            ["assertEquals(JsonToken.FIELD_NAME, jp.nextToken());", "CODE"],
            [
                "assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());",
                "CODE"
            ],
            ["assertEquals(1, jp.getTokenLocation().getLineNr());", "CODE"],
            ["assertEquals(9, jp.getTokenLocation().getColumnNr());", "CODE"],
            ["jp.close();", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-102": {
        "code_elements": [
            "function name() {",
            "var arguments = Array.prototype.slice.call(arguments, 0);",
            "}",
            "function name(){ var c=Array.prototype.slice.call(c,0); }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["compiler assumes that 'arguments' can be shadowed"],
        "desc_hints": ["Array.prototype.slice.call"],
        "desc_text": [
            ["The code:", ["SR"]],
            ["function name() {", "CODE"],
            [
                "var arguments = Array.prototype.slice.call(arguments, 0);",
                "CODE"
            ],
            ["}", "CODE"],
            ["gets compiled to:", ["OB"]],
            [
                "function name(){ var c=Array.prototype.slice.call(c,0); }",
                "CODE"
            ],
            ["Thanks to tescosquirrel for the report.", ["OB"]]
        ]
    },
    "Math-16": {
        "code_elements": [
            "double t = exp(x*0.5);",
            "return (0.5*t)*t;",
            "double t = exp(-x*0.5);",
            "return (-0.5*t)*t;"
        ],
        "stack_traces": [],
        "summary_hints": ["FastMath"],
        "summary_text": [
            "FastMath.[cosh, sinh] do not support the same range of values as the Math counterparts"
        ],
        "desc_hints": [
            "StrictMath.log",
            "Math.cosh",
            "Math.sinh",
            "FastMath.cosh",
            "Double.MAX_VALUE",
            "FastMath.sinh"
        ],
        "desc_text": [
            ["As reported by Jeff Hain:", []],
            ["cosh(double) and sinh(double):", []],
            ["Math.cosh(709.783) = 8.991046692770538E307", []],
            ["FastMath.cosh(709.783) = Infinity", []],
            ["Math.sinh(709.783) = 8.991046692770538E307", []],
            ["FastMath.sinh(709.783) = Infinity", []],
            ["===> This is due to using exp( x )/2 for values of |x|", ["SR"]],
            [
                "above 20: the result sometimes should not overflow,",
                ["OB", "EB"]
            ],
            ["but exp( x ) does, so we end up with some infinity.", ["OB"]],
            ["===> for values of |x| >= StrictMath.log(Double.MAX_VALUE),", []],
            ["exp will overflow, so you need to use that instead:", []],
            ["for x positive:", []],
            ["double t = exp(x*0.5);", "CODE"],
            ["return (0.5*t)*t;", "CODE"],
            ["for x negative:", []],
            ["double t = exp(-x*0.5);", "CODE"],
            ["return (-0.5*t)*t;", "CODE"]
        ]
    },
    "Closure-75": {
        "code_elements": [
            "function urlEncodeIfNecessary(s) {",
            "var regex = /[\\\\\\\"<>\\.;]/;",
            "var hasBadChars = regex.exec(s) != null;",
            "return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["closure compiled swfobject error"],
        "desc_hints": [
            "hasBadChars",
            "encodeURIComponent",
            "error.and",
            "regex.exec",
            "JSMin_UnterminatedStringException",
            "urlEncodeIfNecessary",
            "swfobject.js"
        ],
        "desc_text": [
            ["swfobject.js code", []],
            ["function urlEncodeIfNecessary(s) {", "CODE"],
            ["var regex = /[\\\\\\\"<>\\.;]/;", "CODE"],
            ["var hasBadChars = regex.exec(s) != null;", "CODE"],
            [
                "return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;",
                "CODE"
            ],
            ["}", "CODE"],
            ["closure compiled:", []],
            ["function Z(a){return/[\\\"<>.;]/.exec(a)!=", []],
            ["null&&typeof encodeURIComponent!=j?encodeURIComponent(a):a}", []],
            ["but it's error.and minify erray:", ["OB"]],
            [
                "Fatal error: Uncaught exception 'JSMin_UnterminatedStringException' with message 'Unterminated String: '\"<>.;]/.exec(a)!=''",
                ["OB"]
            ],
            ["return/[\\\"<>.;]/ to return /[\\\"<>.;]/  that's OK", ["OB"]],
            ["ie = !+\"\\v1\", closure compiled to   ie=!1,    my god!!", []]
        ]
    },
    "Closure-67": {
        "code_elements": [
            "this._x = 1;",
            "}",
            "A.prototype.func1 = function() {",
            "this._x = 2;",
            "this.func2();",
            "}",
            "A.prototype.func2 = function() {",
            "this._x = 3;",
            "this.func3();",
            "}",
            "window['A'] = A;",
            "}",
            "a.prototype.func1 = a.prototype.b = function() {",
            "this.a = 2;",
            "this.c() // Problem!",
            "window.A = a;",
            "A.prototype.func1 = function() {",
            "...",
            "}",
            "A.prototype['func1'] = A.prototype.func1;",
            "A.prototype.func1 = function() {",
            "this._x = 2;",
            "this.func2();",
            "}",
            "}",
            "a.prototype.func1 = a.prototype.b;",
            "a.prototype.b = function() {",
            "this.a = 2;",
            "this.a = 3 // func2, correctly minified",
            "window.A = a;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Advanced compilations renames a function and then deletes it, leaving a reference to a renamed but non-existent function"
        ],
        "desc_hints": [
            "prototype.func2",
            "this.func2",
            "prototype.func1",
            "this.func3"
        ],
        "desc_text": [
            ["If we provide the below code to advanced:", ["SR"]],
            ["function A() {", []],
            ["this._x = 1;", "CODE"],
            ["}", "CODE"],
            [
                "A.prototype['func1'] = // done to save public reference to func1",
                []
            ],
            ["A.prototype.func1 = function() {", "CODE"],
            ["this._x = 2;", "CODE"],
            ["this.func2();", "CODE"],
            ["}", "CODE"],
            ["A.prototype.func2 = function() {", "CODE"],
            ["this._x = 3;", "CODE"],
            ["this.func3();", "CODE"],
            ["}", "CODE"],
            ["window['A'] = A;", "CODE"],
            ["We get the output:", ["OB"]],
            ["function a() {", []],
            ["this.a = 1", []],
            ["}", "CODE"],
            ["a.prototype.func1 = a.prototype.b = function() {", "CODE"],
            ["this.a = 2;", "CODE"],
            ["this.c() // Problem!", "CODE"],
            ["};", []],
            ["window.A = a;", "CODE"],
            [
                "So the compiler emits no errors, and renames 'func2' to 'c' but ends up throwing away the definition of that function!",
                ["OB", "EB"]
            ],
            ["The problem arises when I use:", ["SR"]],
            [
                "A.prototype['func1'] = // done to save public reference to func1",
                []
            ],
            ["A.prototype.func1 = function() {", "CODE"],
            ["...", "CODE"],
            ["}", "CODE"],
            [
                "The ['func1'] line is apparently enough to save the reference correctly, but also has the side effect of causing the function innards to do the wrong thing.",
                ["OB"]
            ],
            ["I can of course instead write it as:", []],
            ["A.prototype['func1'] = A.prototype.func1;", "CODE"],
            ["A.prototype.func1 = function() {", "CODE"],
            ["this._x = 2;", "CODE"],
            ["this.func2();", "CODE"],
            ["}", "CODE"],
            [
                "In which case Advanced will compile correctly and the results will also be valid.",
                ["OB"]
            ],
            ["function a() {", []],
            ["this.a = 1", []],
            ["}", "CODE"],
            ["a.prototype.func1 = a.prototype.b;", "CODE"],
            ["a.prototype.b = function() {", "CODE"],
            ["this.a = 2;", "CODE"],
            ["this.a = 3 // func2, correctly minified", "CODE"],
            ["};", []],
            ["window.A = a;", "CODE"],
            [
                "For now I can just use the expected way of declaring that func1 export, but since the compiler returns with no errors or warnings and creates a function with no definition, it seems worth reporting.",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonDatabind-12": {
        "code_elements": [
            "import static org.junit.Assert.assertEquals;",
            "import java.io.IOException;",
            "import java.util.Map;",
            "import org.junit.Test;",
            "import com.fasterxml.jackson.annotation.JsonProperty;",
            "import com.fasterxml.jackson.core.JsonParser;",
            "import com.fasterxml.jackson.core.JsonProcessingException;",
            "import com.fasterxml.jackson.databind.DeserializationContext;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;",
            "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;",
            "public class DeserializeTest {",
            "@Test",
            "public void testIt() throws Exception {",
            "ObjectMapper om = new ObjectMapper();",
            "String json = \"{\\\"map1\\\":{\\\"a\\\":1},\\\"map2\\\":{\\\"a\\\":1}}\";",
            "TestBean bean = om.readValue(json.getBytes(), TestBean.class);",
            "assertEquals(100, bean.getMap1().get(\"a\").intValue());",
            "assertEquals(1, bean.getMap2().get(\"a\").intValue());",
            "}",
            "public static class TestBean {",
            "@JsonProperty(\"map1\")",
            "@JsonDeserialize(contentUsing = CustomDeserializer.class)",
            "Map<String, Integer> map1;",
            "@JsonProperty(\"map2\")",
            "Map<String, Integer> map2;",
            "public Map<String, Integer> getMap1() {",
            "return map1;",
            "}",
            "public void setMap1(Map<String, Integer> map1) {",
            "this.map1 = map1;",
            "}",
            "public Map<String, Integer> getMap2() {",
            "return map2;",
            "}",
            "public void setMap2(Map<String, Integer> map2) {",
            "this.map2 = map2;",
            "}",
            "}",
            "public static class CustomDeserializer extends StdDeserializer<Integer> {",
            "public CustomDeserializer() {",
            "super(Integer.class);",
            "}",
            "@Override",
            "public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {",
            "Integer value = p.readValueAs(Integer.class);",
            "return value * 100;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["contentUsing", "JsonDeserialize"],
        "summary_text": [
            "@JsonDeserialize on Map with contentUsing custom deserializer overwrites default behavior"
        ],
        "desc_hints": [
            "CustomDeserializer.class",
            "getMap1",
            "JsonProperty",
            "assertEquals",
            "JsonDeserialize",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "this.map1",
            "JsonProcessingException",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "this.map2",
            "intValue",
            "setMap1",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize",
            "TestBean.class",
            "setMap2",
            "CustomDeserializer",
            "JsonParser",
            "ObjectMapper",
            "bean.getMap2",
            "com.fasterxml.jackson.core.JsonParser",
            "DeserializeTest",
            "getMap2",
            "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
            "StdDeserializer",
            "org.junit.Assert.assertEquals",
            "java.io.IOException",
            "Integer.class",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "com.fasterxml.jackson.core.JsonProcessingException",
            "TestBean",
            "testIt",
            "contentUsing",
            "org.junit.Test",
            "java.util.Map",
            "json.getBytes",
            "DeserializationContext",
            "readValueAs",
            "om.readValue",
            "bean.getMap1"
        ],
        "desc_text": [
            [
                "I recently updated from version 2.3.3 to 2.5.1 and encountered a new issue with our custom deserializers.",
                ["OB"]
            ],
            [
                "They either seemed to stop working or were active on the wrong fields.",
                ["OB"]
            ],
            [
                "I could narrow it down to some change in version 2.4.4 (2.4.3 is still working for me)",
                []
            ],
            ["I wrote a test to show this behavior.", ["OB", "SR"]],
            [
                "It seems to appear when there a two maps with the same key and value types in a bean, and only one of them has a custom deserializer.",
                ["OB", "EB", "SR"]
            ],
            [
                "The deserializer is then falsely used either for both or none of the maps.",
                ["OB", "SR"]
            ],
            [
                "This test works for me in version 2.4.3 and fails with higher versions.",
                ["OB"]
            ],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import java.util.Map;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonProperty;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonParser;", "CODE"],
            [
                "import com.fasterxml.jackson.core.JsonProcessingException;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.DeserializationContext;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;",
                "CODE"
            ],
            ["public class DeserializeTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void testIt() throws Exception {", "CODE"],
            ["ObjectMapper om = new ObjectMapper();", "CODE"],
            [
                "String json = \"{\\\"map1\\\":{\\\"a\\\":1},\\\"map2\\\":{\\\"a\\\":1}}\";",
                "CODE"
            ],
            [
                "TestBean bean = om.readValue(json.getBytes(), TestBean.class);",
                "CODE"
            ],
            [
                "assertEquals(100, bean.getMap1().get(\"a\").intValue());",
                "CODE"
            ],
            ["assertEquals(1, bean.getMap2().get(\"a\").intValue());", "CODE"],
            ["}", "CODE"],
            ["public static class TestBean {", "CODE"],
            ["@JsonProperty(\"map1\")", "CODE"],
            [
                "@JsonDeserialize(contentUsing = CustomDeserializer.class)",
                "CODE"
            ],
            ["Map<String, Integer> map1;", "CODE"],
            ["@JsonProperty(\"map2\")", "CODE"],
            ["Map<String, Integer> map2;", "CODE"],
            ["public Map<String, Integer> getMap1() {", "CODE"],
            ["return map1;", "CODE"],
            ["}", "CODE"],
            ["public void setMap1(Map<String, Integer> map1) {", "CODE"],
            ["this.map1 = map1;", "CODE"],
            ["}", "CODE"],
            ["public Map<String, Integer> getMap2() {", "CODE"],
            ["return map2;", "CODE"],
            ["}", "CODE"],
            ["public void setMap2(Map<String, Integer> map2) {", "CODE"],
            ["this.map2 = map2;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "public static class CustomDeserializer extends StdDeserializer<Integer> {",
                "CODE"
            ],
            ["public CustomDeserializer() {", "CODE"],
            ["super(Integer.class);", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            [
                "public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {",
                "CODE"
            ],
            ["Integer value = p.readValueAs(Integer.class);", "CODE"],
            ["return value * 100;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-58": {
        "code_elements": [
            "function keys(obj) {",
            "var a = [], i = 0;",
            "for (a[i++] in obj)",
            ";",
            "return a;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Online CC bug: report java error."],
        "desc_hints": ["compiler.appspot.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["open http://closure-compiler.appspot.com/", ["OB"]],
            ["2.", ["OB", "SR"]],
            ["input js code:", ["SR"]],
            ["function keys(obj) {", "CODE"],
            ["var a = [], i = 0;", "CODE"],
            ["for (a[i++] in obj)", "CODE"],
            [";", "CODE"],
            ["return a;", "CODE"],
            ["}", "CODE"],
            ["3.", ["OB", "SR"]],
            ["press [compile] button.", ["OB", "SR"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Except OK.", ["OB"]],
            ["See java error.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Online CC version.", ["OB"]]
        ]
    },
    "Closure-143": {
        "code_elements": ["/** @define {string} */", "test.VERSION = \"\";"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["@define does not support strings"],
        "desc_hints": [
            "test.VERSION",
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.initOptionsFromFlags",
            "com.google.javascript.jscomp.CommandLineRunner.createOptions",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "compiler.jar",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "min.js",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "test.js"
        ],
        "desc_text": [
            [
                "$ java -jar compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --define='test.VERSION=1.0.0' --js_output_file",
                []
            ],
            ["test-min.js --js test.js", []],
            [
                "java.lang.RuntimeException: --define flag syntax invalid: test.VERSION=1.0.0",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.initOptionsFromFlags(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.createOptions(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
                []
            ],
            ["test.js:", []],
            ["/** @define {string} */", "CODE"],
            ["test.VERSION = \"\";", "CODE"],
            ["I have tried both of these:", []],
            ["--define='test.VERSION=1.0.0'", []],
            ["--define='test.VERSION=\"1.0.0\"'", []],
            ["Both generate the same error.", ["OB"]]
        ]
    },
    "Math-37": {
        "code_elements": [
            "if (real>20.0){",
            "return createComplex(1.0, 0.0);",
            "}",
            "if (real<-20.0){",
            "return createComplex(-1.0, 0.0);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["[math] Complex Tanh for \"big\" numbers"],
        "desc_hints": ["FastMath", "createComplex", "Complex.java"],
        "desc_text": [
            ["Hi,", []],
            [
                "In Complex.java the tanh is computed with the following formula:",
                ["OB", "SR"]
            ],
            [
                "tanh(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i",
                []
            ],
            [
                "The problem that I'm finding is that as soon as \"a\" is a \"big\" number,",
                []
            ],
            [
                "both sinh(2a) and cosh(2a) are infinity and then the method tanh returns in",
                ["OB"]
            ],
            [
                "the real part NaN (infinity/infinity) when it should return 1.0.",
                ["OB", "EB"]
            ],
            [
                "Wouldn't it be appropiate to add something as in the FastMath library??:",
                []
            ],
            ["if (real>20.0){", "CODE"],
            ["return createComplex(1.0, 0.0);", "CODE"],
            ["}", "CODE"],
            ["if (real<-20.0){", "CODE"],
            ["return createComplex(-1.0, 0.0);", "CODE"],
            ["}", "CODE"],
            ["Best regards,", []],
            ["JBB", []]
        ]
    },
    "Cli-4": {
        "code_elements": [
            ">   private static final String OPTION_TARGET = \"t\";",
            ">   private static final String OPTION_TARGET_LONG = \"target\";",
            "{",
            ">         parsedLine = parser.parse(cmdLineOpts, args);",
            ">       }",
            "catch (ParseException pe)",
            "{",
            ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
            "> \"\\n\");",
            ">         HelpFormatter hf = new HelpFormatter();",
            ">         hf.printHelp(USAGE, cmdLineOpts);",
            ">         System.exit(-1);",
            ">       }",
            ">   if (parsedLine.hasOption(OPTION_TARGET))",
            "{",
            ">     System.out.println(\"processing selected target: \" +",
            "> parsedLine.getOptionValue(OPTION_TARGET));",
            ">   }"
        ],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser interupts \"-target opt\" as \"-t arget opt\""
        ],
        "desc_hints": [
            "System.exit",
            "parsedLine.hasOption",
            "parsedLine.getOptionValue",
            "HelpFormatter",
            "pe.getMessage",
            "parser.parse",
            "posix.special.option",
            "PosixParser",
            "cmdLineOpts",
            "generateTarget",
            "Dsystem.property",
            "foobar.com",
            "hf.printHelp",
            "system.property",
            "parsedLine",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "This was posted on the Commons-Developer list and confirmed as a bug.",
                []
            ],
            ["> Is this a bug?", []],
            ["Or am I using this incorrectly?", []],
            ["> I have an option with short and long values.", ["OB", "SR"]],
            ["Given code that is", []],
            [
                "> essentially what is below, with a PosixParser I see results as",
                ["OB"]
            ],
            ["> follows:", []],
            [
                "> A command line with just \"-t\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block", ["OB"]],
            ["> (OK)", []],
            [
                "> A command line with just \"-target\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block (OK)", []],
            [
                "> A command line with just \"-t foobar.com\" prints out \"processing selected",
                ["OB", "SR"]
            ],
            ["> target: foobar.com\" (OK)", []],
            [
                "> A command line with just \"-target foobar.com\" prints out \"processing",
                ["SR"]
            ],
            ["> selected target: arget\" (ERROR?)", []],
            [
                "> ======================================================================",
                []
            ],
            ["> ==", []],
            ["> =======================", []],
            [">   private static final String OPTION_TARGET = \"t\";", "CODE"],
            [
                ">   private static final String OPTION_TARGET_LONG = \"target\";",
                "CODE"
            ],
            ["> // ...", []],
            ["> Option generateTarget = new Option(OPTION_TARGET,", []],
            [">                                    OPTION_TARGET_LONG,", []],
            [">                                    true,", []],
            [
                ">                                    \"Generate files for the specified",
                ["OB"]
            ],
            ["> target machine\");", []],
            ["> // ...", []],
            ["> try", []],
            ["{", "CODE"],
            [">         parsedLine = parser.parse(cmdLineOpts, args);", "CODE"],
            [">       }", "CODE"],
            ["catch (ParseException pe)", "CODE"],
            ["{", "CODE"],
            [
                ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
                "CODE"
            ],
            ["> \"\\n\");", "CODE"],
            [">         HelpFormatter hf = new HelpFormatter();", "CODE"],
            [">         hf.printHelp(USAGE, cmdLineOpts);", "CODE"],
            [">         System.exit(-1);", "CODE"],
            [">       }", "CODE"],
            [">   if (parsedLine.hasOption(OPTION_TARGET))", "CODE"],
            ["{", "CODE"],
            [
                ">     System.out.println(\"processing selected target: \" +",
                "CODE"
            ],
            ["> parsedLine.getOptionValue(OPTION_TARGET));", "CODE"],
            [">   }", "CODE"],
            [
                "It is a bug but it is due to well defined behaviour (so that makes me feel a",
                []
            ],
            ["little better about myself .", ["OB"]],
            ["To support special", []],
            [
                "(well I call them special anyway) like -Dsystem.property=value we need to be",
                []
            ],
            [
                "able to examine the first character of an option.",
                ["OB", "EB", "SR"]
            ],
            ["If the first character is", ["OB"]],
            [
                "itself defined as an Option then the remainder of the token is used as the",
                ["SR"]
            ],
            ["value, e.g.", ["OB"]],
            [
                "'D' is the token, it is an option so 'system.property=value' is the",
                []
            ],
            ["argument value for that option.", ["OB"]],
            ["This is the behaviour that we are seeing for", []],
            ["your example.", ["OB", "SR"]],
            [
                "'t' is the token, it is an options so 'arget' is the argument value.",
                []
            ],
            [
                "I suppose a solution to this could be to have a way to specify properties for",
                []
            ],
            ["parsers.", ["OB"]],
            ["In this case 'posix.special.option == true' for turning", []],
            ["on special options.", ["OB", "SR"]],
            ["I'll have a look into this and let you know.", []],
            [
                "Just to keep track of this and to get you used to how we operate, can you log a",
                []
            ],
            ["bug in bugzilla for this.", []],
            ["Thanks,", []],
            ["-John K", []]
        ]
    },
    "Lang-41": {
        "code_elements": [
            "String sArray[] = new String[2];",
            "sArray[0] = \"mark\";",
            "sArray[1] = \"is cool\";",
            "String simpleString = \"chris\";",
            "assertEquals(\"String\", ClassUtils.getShortClassName(simpleString, null));",
            "assertEquals(\"String;\", ClassUtils.getShortClassName(sArray, null));"
        ],
        "stack_traces": [],
        "summary_hints": ["ClassUtils.getShortClassName"],
        "summary_text": [
            "ClassUtils.getShortClassName() will not work with an array;  it seems to add a semicolon to the end."
        ],
        "desc_hints": [
            "simpleString",
            "ClassUtils.getShortClassName",
            "assertEquals"
        ],
        "desc_text": [
            [
                "A semicolon is introduced into the class name at the end for all arrays...",
                []
            ],
            ["String sArray[] = new String[2];", "CODE"],
            ["sArray[0] = \"mark\";", "CODE"],
            ["sArray[1] = \"is cool\";", "CODE"],
            ["String simpleString = \"chris\";", "CODE"],
            [
                "assertEquals(\"String\", ClassUtils.getShortClassName(simpleString, null));",
                "CODE"
            ],
            [
                "assertEquals(\"String;\", ClassUtils.getShortClassName(sArray, null));",
                "CODE"
            ]
        ]
    },
    "JacksonDatabind-92": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Block more JDK types from polymorphic deserialization (CVE 2017-15095)"
        ],
        "desc_hints": [],
        "desc_text": [
            ["(note: follow-up for #1599)", []],
            [
                "After initial set of types blocked new reports have arrived for more black-listing.",
                ["OB"]
            ],
            [
                "Although eventual approach is likely to rely separate module (for more timely updates and wider version coverage), at this point addition in databind is needed.",
                []
            ],
            [
                "I will update specific list of additions once complete and release is out.",
                ["OB"]
            ],
            [
                "Target versions are 2.8.10 and 2.9.1 -- it is possible to backport in 2.7 and even 2.6, but there is diminishing return on effort with those versions so it will not happen unless specifically requested (I'm happy to merge PRs).",
                ["OB"]
            ]
        ]
    },
    "Closure-15": {
        "code_elements": [
            "// Input:",
            "var customData = { key: 'value' };",
            "function testRemoveKey( key ) {",
            "var dataSlot = customData,",
            "retval = dataSlot && dataSlot[ key ],",
            "hadKey = dataSlot && ( key in dataSlot );",
            "if ( dataSlot )",
            "delete dataSlot[ key ];",
            "return hadKey ? retval : null;",
            "// Compiled version:",
            "var customData={key:\"value\"};function testRemoveKey(b){var a=customData,c=a&&a[b];a&&delete a[b];return a&&b in a?c:null}console.log(testRemoveKey(\"key\"));console.log(\"key\"in customData);",
            "// null",
            "// false"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Switched order of \"delete key\" and \"key in\" statements changes semantic"
        ],
        "desc_hints": [
            "hadKey",
            "compiler.appspot.com",
            "testRemoveKey",
            "dataSlot",
            "console.log",
            "customData"
        ],
        "desc_text": [
            ["// Input:", "CODE"],
            ["var customData = { key: 'value' };", "CODE"],
            ["function testRemoveKey( key ) {", "CODE"],
            ["var dataSlot = customData,", "CODE"],
            ["retval = dataSlot && dataSlot[ key ],", "CODE"],
            ["hadKey = dataSlot && ( key in dataSlot );", "CODE"],
            ["if ( dataSlot )", "CODE"],
            ["delete dataSlot[ key ];", "CODE"],
            ["return hadKey ? retval : null;", "CODE"],
            ["};", []],
            ["console.log( testRemoveKey( 'key' ) ); // 'value'", []],
            ["console.log( 'key' in customData ); // false", []],
            ["// Compiled version:", "CODE"],
            [
                "var customData={key:\"value\"};function testRemoveKey(b){var a=customData,c=a&&a[b];a&&delete a[b];return a&&b in a?c:null}console.log(testRemoveKey(\"key\"));console.log(\"key\"in customData);",
                "CODE"
            ],
            ["// null", "CODE"],
            ["// false", "CODE"],
            [
                "\"b in a\" is executed after \"delete a[b]\" what obviously doesn't make sense in this case.",
                ["OB"]
            ],
            [
                "Reproducible on: http://closure-compiler.appspot.com/home and in \"Version: 20120430 (revision 1918) Built on: 2012/04/30 18:02\"",
                []
            ]
        ]
    },
    "Chart-12": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["MultiplePiePlot"],
        "summary_text": ["#213 Fix for MultiplePiePlot"],
        "desc_hints": ["setDataset", "MultiplePiePlot"],
        "desc_text": [
            [
                "When dataset is passed into constructor for MultiplePiePlot, the dataset is not wired to a listener, as it would be if setDataset is called.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-21": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Writing 7z empty entries produces incorrect or corrupt archive"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "I couldn't find an exact rule that causes this incorrect behavior, but I tried to reduce it to some simple scenarios to reproduce it:",
                ["SR"]
            ],
            [
                "Input: A folder with certain files -> tried to archive it.",
                ["OB", "SR"]
            ],
            [
                "If the folder contains more than 7 files the incorrect behavior appears.",
                ["OB", "SR"]
            ],
            ["Scenario 1: 7 empty files", ["OB", "SR"]],
            [
                "Result: The created archive contains a single folder entry with the name of the archive (no matter which was the name of the file)",
                ["OB", "SR"]
            ],
            [
                "Scenario 2: 7 files, some empty, some with content",
                ["OB", "SR"]
            ],
            [
                "Result: The created archive contains a folder entry with the name of the archive and a number of file entries also with the name of the archive.",
                ["OB", "SR"]
            ],
            [
                "The number of the entries is equal to the number of non empty files.",
                ["OB"]
            ],
            ["Scenario 3: 8 empty files", ["OB", "SR"]],
            [
                "Result: 7zip Manager cannot open archive and stops working.",
                ["OB"]
            ],
            [
                "Scenario 4.1: 8 files: some empty, some with content, last file (alphabetically) with content",
                []
            ],
            ["Result: same behavior as described for Scenario 2.", ["OB"]],
            [
                "Scenario 4.2: 8 files, some empty, some with content, last file empy",
                ["OB"]
            ],
            [
                "Result: archive is corrupt, the following message is received: \"Cannot open file 'archivename.7z' as archive\" (7Zip Manager does not crash).",
                ["OB"]
            ]
        ]
    },
    "JacksonCore-5": {
        "code_elements": [
            "final int len = str.length();",
            "if (len == 0) {",
            "return -1;",
            "}",
            "for (int i = 0; i < len; ++i) {",
            "char c = str.charAt(i++);",
            "if (c > '9' || c < '0') {",
            "return -1;",
            "}",
            "}",
            "// for now, we'll assume 32-bit indexes are fine",
            "return NumberInput.parseInt(str);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonPointer"],
        "summary_text": [
            "An exception is thrown for a valid JsonPointer expression"
        ],
        "desc_hints": [
            "_parseInt",
            "NumberInput.parseInt",
            "JsonPointer",
            "str.charAt",
            "str.length",
            "JsonPointer.compile",
            "NumberFormatExpcetion"
        ],
        "desc_text": [
            [
                "Json-Patch project leader has noted me that there is a bug on JsonPointer implementation and I have decided to investigate.",
                ["SR"]
            ],
            [
                "Basically if you do something like JsonPointer.compile(\"/1e0\"); it throws a NumberFormatExpcetion which is not true.",
                ["OB"]
            ],
            ["This is because this piece of code:", []],
            ["private final static int _parseInt(String str)", []],
            ["{", []],
            ["final int len = str.length();", "CODE"],
            ["if (len == 0) {", "CODE"],
            ["return -1;", "CODE"],
            ["}", "CODE"],
            ["for (int i = 0; i < len; ++i) {", "CODE"],
            ["char c = str.charAt(i++);", "CODE"],
            ["if (c > '9' || c < '0') {", "CODE"],
            ["return -1;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["// for now, we'll assume 32-bit indexes are fine", "CODE"],
            ["return NumberInput.parseInt(str);", "CODE"],
            ["}", "CODE"],
            [
                "When they found a number it interprets the segment as integer but in reality it should be the whole expression.",
                ["OB", "EB", "SR"]
            ],
            [
                "For this reason I think that the condition should be changed to the inverse condition (if it doesn't found any char then it is a number.",
                ["OB", "EB"]
            ],
            ["If you want I can send you a PR as well.", ["OB"]],
            ["Alex.", ["OB"]]
        ]
    },
    "Closure-164": {
        "code_elements": [
            "/** @param {function(string,number):boolean} param */",
            "function func(param) {}",
            "/** @type {function(string,number,boolean):boolean} */",
            "function paramFunc1() {}",
            "/** @type {function(string):boolean} */",
            "function paramFunc2() {}",
            "// first call",
            "func(paramFunc1);",
            "// second call",
            "func(paramFunc2);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "{function(number, string)} should not be assignable to {function(number)}"
        ],
        "desc_hints": ["paramFunc1", "paramFunc2"],
        "desc_text": [
            ["Consider the following snippet.", ["OB", "SR"]],
            ["I don't think the \"second call\" should compile.", ["OB", "EB"]],
            [
                "As a side note: it would be great if none of the compiled in some pseudo-strict compile mode.",
                []
            ],
            ["/** @param {function(string,number):boolean} param */", "CODE"],
            ["function func(param) {}", "CODE"],
            ["/** @type {function(string,number,boolean):boolean} */", "CODE"],
            ["function paramFunc1() {}", "CODE"],
            ["/** @type {function(string):boolean} */", "CODE"],
            ["function paramFunc2() {}", "CODE"],
            ["// first call", "CODE"],
            ["func(paramFunc1);", "CODE"],
            ["// second call", "CODE"],
            ["func(paramFunc2);", "CODE"]
        ]
    },
    "Lang-55": {
        "code_elements": [
            "StopWatch sw = new StopWatch();",
            "sw.start();",
            "Thread.sleep(1000);",
            "sw.suspend();",
            "// Time 1 (ok)",
            "System.out.println(sw.getTime());",
            "Thread.sleep(2000);",
            "// Time 1 (again, ok)",
            "System.out.println(sw.getTime());",
            "sw.resume();",
            "Thread.sleep(3000);",
            "sw.suspend();",
            "// Time 2 (ok)",
            "System.out.println(sw.getTime());",
            "Thread.sleep(4000);",
            "// Time 2 (again, ok)",
            "System.out.println(sw.getTime());",
            "Thread.sleep(5000);",
            "sw.stop();",
            "// Time 2 (should be, but is Time 3 => NOT ok)",
            "System.out.println(sw.getTime());"
        ],
        "stack_traces": [],
        "summary_hints": ["StopWatch"],
        "summary_text": [
            "StopWatch: suspend() acts as split(), if followed by stop()"
        ],
        "desc_hints": [
            "sw.suspend",
            "sw.resume",
            "sw.stop",
            "Thread.sleep",
            "sw.start",
            "sw.getTime",
            "StopWatch",
            "System.out.println"
        ],
        "desc_text": [
            [
                "In my opinion, it is a bug that suspend() acts as split(), if followed by stop(); see below:",
                []
            ],
            ["StopWatch sw = new StopWatch();", "CODE"],
            ["sw.start();", "CODE"],
            ["Thread.sleep(1000);", "CODE"],
            ["sw.suspend();", "CODE"],
            ["// Time 1 (ok)", "CODE"],
            ["System.out.println(sw.getTime());", "CODE"],
            ["Thread.sleep(2000);", "CODE"],
            ["// Time 1 (again, ok)", "CODE"],
            ["System.out.println(sw.getTime());", "CODE"],
            ["sw.resume();", "CODE"],
            ["Thread.sleep(3000);", "CODE"],
            ["sw.suspend();", "CODE"],
            ["// Time 2 (ok)", "CODE"],
            ["System.out.println(sw.getTime());", "CODE"],
            ["Thread.sleep(4000);", "CODE"],
            ["// Time 2 (again, ok)", "CODE"],
            ["System.out.println(sw.getTime());", "CODE"],
            ["Thread.sleep(5000);", "CODE"],
            ["sw.stop();", "CODE"],
            ["// Time 2 (should be, but is Time 3 => NOT ok)", "CODE"],
            ["System.out.println(sw.getTime());", "CODE"],
            [
                "suspend/resume is like a pause, where time counter doesn't continue.",
                ["OB"]
            ],
            [
                "So a following stop()-call shouldn't increase the time counter, should it?",
                ["EB"]
            ]
        ]
    },
    "Jsoup-61": {
        "code_elements": [
            ".first();",
            ".first();",
            "Logger.getLogger(this.getClass().getName())",
            "new Object[]{(tableNotOk != null), (tableOk != null)});",
            "} catch (UnsupportedCharsetException | ParseException | Selector.SelectorParseException ex) {",
            "Logger.getLogger(this.getClass().getName())",
            ".log(Level.SEVERE,",
            "null,",
            "ex);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Unexpected case sensitivity for CSS class selector"],
        "desc_hints": [
            "htmlDoc",
            "htmlDoc.select",
            "tableOk",
            "UnsupportedCharsetException",
            "Logger.getLogger",
            "htmlStr",
            "tableNotOk",
            "Jsoup.parse",
            "Level.INFO",
            "Selector.SelectorParseException",
            "www.w3.org",
            "getName",
            "ParseException",
            "loose.dtd",
            "table.Lst",
            "Level.SEVERE",
            "this.getClass"
        ],
        "desc_text": [
            ["Hi,", []],
            [
                "i use JSoup version 1.10.2 and noticed an unexpected case sensitivity for a CSS class selector.",
                ["OB"]
            ],
            [
                "I tried to parse the following HTML document with capitalized class attributes:",
                ["OB", "SR"]
            ],
            [
                "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>",
                []
            ],
            ["<HTML>", []],
            ["<HEAD>", []],
            ["<FORM Method='POST' name='Form' Action='Action'>", []],
            ["<TABLE Class='Lst'>", []],
            ["<TR Class='Lst'>", []],
            ["<TH Class='Lst'>Header 1</TH>", []],
            ["<TH Class='Lst'>Header 2</TH>", []],
            ["<TH Class='Lst'>Header 3</TH>", []],
            ["</TR>", []],
            ["<TR Class='Lst1'>", []],
            ["<TD Class='Lst'>Cell 1</TD>", []],
            ["<TD Class='Lst'>Cell 2</TD>", ["SR"]],
            ["<TD Class='Lst'>Cell 3</TD>", ["SR"]],
            ["</TR>", []],
            ["</TABLE>", []],
            ["</FORM>", []],
            ["</BODY>", []],
            ["</HTML>", []],
            [
                "I wanted to select the table using the selector \"html > body > form table.Lst\" because I expected it to choose the table with the class attribute \"Lst\", but that did not work.",
                ["OB", "EB"]
            ],
            [
                "The selector \"html > body > form table[class=Lst]\" works.",
                ["OB"]
            ],
            ["Is this a bug?", []],
            ["Here is the parser code:", ["SR"]],
            ["try {", []],
            [
                "final String htmlStr = \"<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>\\n\"",
                []
            ],
            ["+ \"<HTML>\\n\"", []],
            ["+ \" <HEAD>\\n\"", []],
            ["+ \"  <FORM Method='POST' name='Form' Action='Action'>\\n\"", []],
            ["+ \"    <TABLE Class='Lst'>\\n\"", []],
            ["+ \"      <TR Class='Lst'>\\n\"", []],
            ["+ \"        <TH Class='Lst'>Header 1</TH>\\n\"", []],
            ["+ \"        <TH Class='Lst'>Header 2</TH>\\n\"", []],
            ["+ \"        <TH Class='Lst'>Header 3</TH>\\n\"", []],
            ["+ \"      </TR>\\n\"", []],
            ["+ \"      <TR Class='Lst1'>\\n\"", []],
            ["+ \"        <TD Class='Lst'>Cell 1</TD>\\n\"", ["SR"]],
            ["+ \"        <TD Class='Lst'>Cell 2</TD>\\n\"", ["SR"]],
            ["+ \"        <TD Class='Lst'>Cell 3</TD>\\n\"", ["SR"]],
            ["+ \"      </TR>\\n\"", []],
            ["+ \"    </TABLE>\\n\"", []],
            ["+ \"  </FORM>\\n\"", []],
            ["+ \" </BODY>\\n\"", []],
            ["+ \"</HTML>\";", []],
            ["final Document htmlDoc = Jsoup.parse(htmlStr,", []],
            ["\"\");", []],
            [
                "final Element tableNotOk = htmlDoc.select(\"html > body > form table.Lst\")",
                []
            ],
            [".first();", "CODE"],
            [
                "final Element tableOk = htmlDoc.select(\"html > body > form table[class=Lst]\")",
                []
            ],
            [".first();", "CODE"],
            ["Logger.getLogger(this.getClass().getName())", "CODE"],
            [".log(Level.INFO,", ["OB"]],
            ["\"tableNotOk found: ''{0}'', tableOk found: ''{1}''\",", []],
            ["new Object[]{(tableNotOk != null), (tableOk != null)});", "CODE"],
            [
                "} catch (UnsupportedCharsetException | ParseException | Selector.SelectorParseException ex) {",
                "CODE"
            ],
            ["Logger.getLogger(this.getClass().getName())", "CODE"],
            [".log(Level.SEVERE,", "CODE"],
            ["null,", "CODE"],
            ["ex);", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Lang-35": {
        "code_elements": [
            "String[] sa = ArrayUtils.add(stringArray, aString);"
        ],
        "stack_traces": [],
        "summary_hints": ["ClassCastException", "ArrayUtils.add"],
        "summary_text": [
            "ArrayUtils.add(T[] array, T element) can create unexpected ClassCastException"
        ],
        "desc_hints": [
            "ClassCastException",
            "stringArray",
            "ArrayUtils.add",
            "IllegalParameterException"
        ],
        "desc_text": [
            [
                "ArrayUtils.add(T[] array, T element) can create an unexpected ClassCastException.",
                ["OB"]
            ],
            [
                "For example, the following code compiles without a warning:",
                ["SR"]
            ],
            ["String[] sa = ArrayUtils.add(stringArray, aString);", "CODE"],
            [
                "and works fine, provided at least one of the parameters is non-null.",
                ["OB"]
            ],
            [
                "However, if both parameters are null, the add() method returns an Object[] array, hence the Exception.",
                ["OB"]
            ],
            [
                "If both parameters are null, it's not possible to determine the correct array type to return, so it seems to me this should be disallowed.",
                ["OB", "EB"]
            ],
            [
                "I think the method ought to be changed to throw IllegalParameterException when both parameters are null.",
                ["OB", "EB"]
            ]
        ]
    },
    "Mockito-30": {
        "code_elements": [
            "Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));",
            "String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.').replace('\\\\', '.');"
        ],
        "stack_traces": [
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
            "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:497)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
            "Caused by: java.lang.NoClassDefFoundError: org\\mockito\\configuration\\MockitoConfiguration (wrong name: org/mockito/configuration/MockitoConfiguration)",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
            "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "at java.lang.Class.forName0(Native Method)",
            "at java.lang.Class.forName(Class.java:348)",
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
            "... 24 more",
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
            "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:497)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
            "Caused by: java.lang.NoClassDefFoundError: junit/framework/Assert",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
            "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
            "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "at java.lang.Class.forName0(Native Method)",
            "at java.lang.Class.forName(Class.java:348)",
            "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
            "... 24 more",
            "Caused by: java.lang.ClassNotFoundException: classes with prefix : [junit, org.junit] are excluded",
            "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:155)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
            "... 51 more"
        ],
        "summary_hints": [],
        "summary_text": ["Failing tests on Windows machine"],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "ReflectiveCallable.java",
            "org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy",
            "java.net.URLClassLoader",
            "FrameworkMethod.java",
            "NativeMethodAccessorImpl.java",
            "SecureClassLoader.java",
            "java.lang.AssertionError",
            "JUnit4TestReference.java",
            "org.junit",
            "TimesTest",
            "root.getAbsolutePath",
            "extraInterfaces",
            "java.security.AccessController.doPrivileged",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "TestExecution.java",
            "URLClassLoader.java",
            "MockitoConfiguration",
            "org.mockitoutil.ClassLoaders",
            "java.lang.ClassNotFoundException",
            "java.net.URLClassLoader.defineClass",
            "org.junit.runners.ParentRunner.runLeaf",
            "org.junit.runners.ParentRunner.access",
            "InvokeMethod.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "DefaultMockingDetailsTest.should_get_extra_interfaces",
            "java.lang.ClassLoader.defineClass",
            "ClassLoaders.java",
            "ClassLoader.java",
            "org.junit.runners.ParentRunner.runChildren",
            "org.junit.runners.ParentRunner",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "Observer.class",
            "List.class",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "java.lang.NoClassDefFoundError",
            "file.getAbsolutePath",
            "github.com",
            "BlockJUnit4ClassRunner.java",
            "org.mockito.internal.progress.TimesTest",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "withSettings",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "ClassLoadersTest.excluding_class_loader_cannot_load_classes_when_no_correct_source_url_set",
            "DefaultMockingDetailsTest.java",
            "org.mockitointegration.NoJUnitDependenciesTest.checkDependency",
            "java.security.SecureClassLoader.defineClass",
            "LocalExcludingURLClassLoader.findClass",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "java.net.URLClassLoader.findClass",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy",
            "java.lang.Class.forName0",
            "NoJUnitDependenciesTest.java",
            "java.lang.ClassLoader.defineClass1",
            "java.lang.reflect.Method.invoke",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "java.lang.Class.forName",
            "Class.java",
            "Bar.class",
            "org.junit.runners.model.FrameworkMethod",
            "org.junit.runners.ParentRunner.run",
            "Method.java",
            "runReflectiveCall",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "java.net.URLClassLoader.access",
            "java.lang.ClassLoader.loadClass",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "ParentRunner.java"
        ],
        "desc_text": [
            [
                "I just posted on the Google Forums, but someway somehow my post immediately disappeared in the void.",
                ["OB"]
            ],
            ["So I am reposting it again here.", []],
            ["I have 3 failing tests on my Windows 8.1 machine.", ["OB", "SR"]],
            ["DefaultMockingDetailsTest.should_get_extra_interfaces", []],
            [
                "NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy",
                []
            ],
            [
                "ClassLoadersTest.excluding_class_loader_cannot_load_classes_when_no_correct_source_url_set",
                []
            ],
            [
                "For the first test, I was able to let it pass by changing line https://github.com/mockito/mockito/blob/master/test/org/mockito/internal/util/DefaultMockingDetailsTest.java#L56 to",
                ["SR"]
            ],
            [
                "Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));",
                "CODE"
            ],
            [
                "I am not sure if this is indeed the correct test, so please let me know.",
                []
            ],
            ["For the 2nd test, I first get the stack trace", ["OB"]],
            [
                "java.lang.AssertionError: 'org\\mockito\\configuration\\MockitoConfiguration' has some dependency to JUnit",
                []
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:497)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.NoClassDefFoundError: org\\mockito\\configuration\\MockitoConfiguration (wrong name: org/mockito/configuration/MockitoConfiguration)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            ["at java.lang.Class.forName0(Native Method)", "STACK_TRACE"],
            ["at java.lang.Class.forName(Class.java:348)", "STACK_TRACE"],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
                "STACK_TRACE"
            ],
            ["... 24 more", "STACK_TRACE"],
            [
                "When I change line https://github.com/mockito/mockito/blob/master/test/org/mockitoutil/ClassLoaders.java#L361 to",
                ["OB", "SR"]
            ],
            [
                "String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.').replace('\\\\', '.');",
                "CODE"
            ],
            ["I get the following stack trace:", ["OB"]],
            [
                "java.lang.AssertionError: 'org.mockito.internal.progress.TimesTest' has some dependency to JUnit",
                []
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:40)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy(NoJUnitDependenciesTest.java:32)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:497)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:300)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.NoClassDefFoundError: junit/framework/Assert",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:760)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$100(URLClassLoader.java:73)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:368)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:362)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:361)",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            ["at java.lang.Class.forName0(Native Method)", "STACK_TRACE"],
            ["at java.lang.Class.forName(Class.java:348)", "STACK_TRACE"],
            [
                "at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:38)",
                "STACK_TRACE"
            ],
            ["... 24 more", "STACK_TRACE"],
            [
                "Caused by: java.lang.ClassNotFoundException: classes with prefix : [junit, org.junit] are excluded",
                "STACK_TRACE"
            ],
            [
                "at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:155)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:424)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:357)",
                "STACK_TRACE"
            ],
            ["... 51 more", "STACK_TRACE"],
            [
                "The reason I changed that line is because the temp result does not contain dots on windows machines, due to the fact that absolutepath does not return a path seperated by / but by \\\\.",
                ["OB", "SR"]
            ],
            [
                "However then the test fails because the TimesTest in test/ does indeed depend on junit.",
                ["OB", "SR"]
            ],
            ["Shouldn't it only load classes that are under src/?", ["EB"]],
            [
                "The 3rd test I sadly have no clue why it is succeeding and not throwing an exception.",
                ["OB"]
            ],
            ["Looking forward to your responses =]", ["OB"]]
        ]
    },
    "Math-33": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["SimplexSolver"],
        "summary_text": ["SimplexSolver gives bad results"],
        "desc_hints": ["SimplexSolver.optimeze"],
        "desc_text": [
            [
                "Methode SimplexSolver.optimeze(...) gives bad results with commons-math3-3.0",
                ["OB"]
            ],
            ["in a simple test problem.", ["OB"]],
            ["It works well in commons-math-2.2.", ["OB"]]
        ]
    },
    "JacksonDatabind-77": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Jackson Deserializer security vulnerability via default typing (CVE-2017-7525)"
        ],
        "desc_hints": ["fasterxml.com"],
        "desc_text": [["I have send email to info@fasterxml.com", []]]
    },
    "Gson-12": {
        "code_elements": [
            "public void testSkipValue_JsonReader() throws IOException {",
            "try (JsonReader in = new JsonReader(new StringReader(\"{}\"))) {",
            "in.skipValue();",
            "}",
            "}",
            "public void testSkipValue_JsonTreeReader() throws IOException {",
            "try (JsonTreeReader in = new JsonTreeReader(new JsonObject())) {",
            "in.skipValue();",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.google.gson.internal.bind.JsonTreeReader.skipValue(JsonTreeReader.java:262)"
        ],
        "summary_hints": ["JsonTreeReader"],
        "summary_text": [
            "Bug when skipping a value while using the JsonTreeReader"
        ],
        "desc_hints": [
            "JsonTreeReader.java",
            "JsonTreeReader",
            "popStack",
            "StringReader",
            "ArrayIndexOutOfBoundsException",
            "JsonReader",
            "skipValue",
            "testSkipValue_JsonReader",
            "JsonObject",
            "java.lang.ArrayIndexOutOfBoundsException",
            "in.skipValue",
            "testSkipValue_JsonTreeReader",
            "com.google.gson.internal.bind.JsonTreeReader.skipValue",
            "stackSize"
        ],
        "desc_text": [
            [
                "When using a JsonReader to read a JSON object, skipValue() skips the structure successfully.",
                ["OB", "SR"]
            ],
            ["@Test", []],
            [
                "public void testSkipValue_JsonReader() throws IOException {",
                "CODE"
            ],
            [
                "try (JsonReader in = new JsonReader(new StringReader(\"{}\"))) {",
                "CODE"
            ],
            ["in.skipValue();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "But when using a JsonTreeReader to read a JSON object, skipValue() throws a ArrayIndexOutOfBoundsException.",
                ["OB", "SR"]
            ],
            ["@Test", []],
            [
                "public void testSkipValue_JsonTreeReader() throws IOException {",
                "CODE"
            ],
            [
                "try (JsonTreeReader in = new JsonTreeReader(new JsonObject())) {",
                "CODE"
            ],
            ["in.skipValue();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Stacktrace", ["OB"]],
            ["java.lang.ArrayIndexOutOfBoundsException: -1", []],
            [
                "at com.google.gson.internal.bind.JsonTreeReader.skipValue(JsonTreeReader.java:262)",
                "STACK_TRACE"
            ],
            [
                "The method popStack() is being called on line 261 with a stackSize of 1 and afterwards the stackSize is 0 and the call on line 262 must result in an ArrayIndexOutOfBoundsException.",
                ["OB", "SR"]
            ]
        ]
    },
    "Math-22": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["isSupportXxxInclusive", "RealDistribution"],
        "summary_text": [
            "Fix and then deprecate isSupportXxxInclusive in RealDistribution interface"
        ],
        "desc_hints": [
            "RealDistribution",
            "markmail.org",
            "getSupportXxxBound",
            "isSupportXxxInclusive"
        ],
        "desc_text": [
            ["The conclusion from [1] was never implemented.", ["OB"]],
            ["We should deprecate these", ["EB"]],
            [
                "properties from the RealDistribution interface, but since removal",
                ["OB"]
            ],
            ["will have to wait until 4.0, we should agree on a precise", []],
            [
                "definition and fix the code to match it in the mean time.",
                ["OB"]
            ],
            [
                "The definition that I propose is that isSupportXxxInclusive means",
                []
            ],
            [
                "that when the density function is applied to the upper or lower",
                ["OB", "SR"]
            ],
            [
                "bound of support returned by getSupportXxxBound, a finite (i.e.",
                []
            ],
            ["not", ["OB"]],
            ["infinite), not NaN value is returned.", ["OB"]],
            ["[1] http://markmail.org/message/dxuxh7eybl7xejde", []]
        ]
    },
    "Closure-165": {
        "code_elements": [
            "/** @typedef {{name: string, id: number}} */",
            "/**",
            "* @param {RecordType1} rec",
            "*/",
            "var func = function(rec) {",
            "alert(rec.name2);",
            "func({name: 'jim', id: 0});",
            "alert(rec.name2);",
            "/** @typedef {{name: string, id: number}} */",
            "/** @typedef {{name2: string}} */",
            "/**",
            "* @param {RecordType1} rec",
            "*/",
            "var func = function(rec) {",
            "alert(rec.name2);",
            "func({name: 'jim', id: 0});"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Properties defined on any record type applying to unrelated record types"
        ],
        "desc_hints": [
            "RecordType1",
            "rec.name2",
            "checkTypes",
            "RecordType2",
            "compiler.jar",
            "accessControls",
            "checkVars",
            "test.js"
        ],
        "desc_text": [
            ["Consider the following code:", ["OB", "SR"]],
            ["/** @typedef {{name: string, id: number}} */", "CODE"],
            ["var RecordType1;", []],
            ["/**", "CODE"],
            ["* @param {RecordType1} rec", "CODE"],
            ["*/", "CODE"],
            ["var func = function(rec) {", "CODE"],
            ["alert(rec.name2);", "CODE"],
            ["};", []],
            ["func({name: 'jim', id: 0});", "CODE"],
            ["Compiled with:", []],
            [
                "java -jar build/compiler.jar --compilation_level=ADVANCED_OPTIMIZATIONS --jscomp_error=accessControls --jscomp_error=checkTypes --jscomp_error=checkVars --js ~/Desktop/test.js",
                []
            ],
            ["Properly errors:", ["OB"]],
            [
                "/Users/dolapo/Desktop/test.js:9: ERROR - Property name2 never defined on rec",
                ["OB"]
            ],
            ["alert(rec.name2);", "CODE"],
            ["However, add another recordtype with name2 defined:", []],
            ["/** @typedef {{name: string, id: number}} */", "CODE"],
            ["var RecordType1;", []],
            ["/** @typedef {{name2: string}} */", "CODE"],
            ["var RecordType2;", []],
            ["/**", "CODE"],
            ["* @param {RecordType1} rec", "CODE"],
            ["*/", "CODE"],
            ["var func = function(rec) {", "CODE"],
            ["alert(rec.name2);", "CODE"],
            ["};", []],
            ["func({name: 'jim', id: 0});", "CODE"],
            ["and this compiles with no errors.", ["OB", "EB"]]
        ]
    },
    "JacksonDatabind-72": {
        "code_elements": [
            "public class Something {",
            "public InnerSomething a;",
            "@JsonCreator",
            "public Something(@JsonProperty(\"a\") InnerSomething a) {}",
            "class InnerSomething {",
            "@JsonCreator",
            "public InnerSomething() {}",
            "}",
            "}",
            "ObjectMapper mapper = new ObjectMapper();",
            "String ser = mapper.writeValueAsString(new Something(null));",
            "mapper.readValue(ser, Something.class);"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer.assignParameter(PropertyValueBuffer.java:210)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:380)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1123)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:298)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:133)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3807)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2797)"
        ],
        "summary_hints": ["ArrayIndexOutOfBoundsException"],
        "summary_text": [
            "ArrayIndexOutOfBoundsException on impossible non-static inner class constructor"
        ],
        "desc_hints": [
            "JsonProperty",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "_deserializeUsingPropertyBased",
            "BeanDeserializer.java",
            "PropertyValueBuffer.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject",
            "ObjectMapper",
            "java.lang.ArrayIndexOutOfBoundsException",
            "InnerSomething",
            "_readMapAndClose",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer",
            "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer.assignParameter",
            "BeanDeserializerBase.java",
            "Something.class",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "mapper.writeValueAsString",
            "mapper.readValue",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault",
            "ObjectMapper.java",
            "JsonCreator"
        ],
        "desc_text": [
            ["Minimal repro:", ["SR"]],
            ["public class Something {", "CODE"],
            ["public InnerSomething a;", "CODE"],
            ["@JsonCreator", "CODE"],
            [
                "public Something(@JsonProperty(\"a\") InnerSomething a) {}",
                "CODE"
            ],
            ["class InnerSomething {", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public InnerSomething() {}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "String ser = mapper.writeValueAsString(new Something(null));",
                "CODE"
            ],
            ["mapper.readValue(ser, Something.class);", "CODE"],
            ["Fails like this:", ["OB", "SR"]],
            ["java.lang.ArrayIndexOutOfBoundsException: -1", []],
            [
                "at com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer.assignParameter(PropertyValueBuffer.java:210)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:380)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1123)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:298)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:133)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3807)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2797)",
                "STACK_TRACE"
            ],
            ["Validation is missing for this impossible constructor.", ["OB"]],
            ["Works as expected when InnerSomething is static.", ["OB", "EB"]]
        ]
    },
    "Jsoup-38": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Jsoup converts \"svg image\" to \"svg img\""],
        "desc_hints": ["myimage.jpg", "HtmlTreeBuilderState.java"],
        "desc_text": [
            ["Hi,", []],
            [
                "when I parse a html page with a svg element, which contains an image element, the \"image\" element is replaced by \"img\".",
                ["OB", "SR"]
            ],
            ["But this is not correct.", ["OB"]],
            ["The \"image\" must be \"image\".", ["OB"]],
            ["Example:", ["OB", "SR"]],
            ["Input:", []],
            ["<svg width=\"560\" height=\"150\">", []],
            ["<image xlink:href=\"myimage.jpg\"", []],
            ["y=\"5\" x=\"100\"", []],
            ["height=\"140\" width=\"230\" />", []],
            ["</svg>", []],
            ["Output:", ["OB"]],
            ["<svg width=\"560\" height=\"150\">", []],
            ["<img xlink:href=\"myimage.jpg\"", []],
            ["y=\"5\" x=\"100\"", []],
            ["height=\"140\" width=\"230\" />", []],
            ["</svg>", []],
            [
                "The problem seems to be in line 457 of HtmlTreeBuilderState.java.",
                ["OB"]
            ]
        ]
    },
    "Closure-175": {
        "code_elements": [
            "window[\"anchor\"] = function (obj, modifiesProp) {",
            "return (function (saved) {",
            "return modifiesProp(obj) + saved;",
            "})(obj[\"prop\"]);",
            "}",
            "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};",
            "window.foo=function(a,b){return b(a)+a.prop};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Erroneous optimization in ADVANCED_OPTIMIZATIONS mode"
        ],
        "desc_hints": [
            "missouristate.edu",
            "history.state",
            "window.js",
            "modifiesProp",
            "compiler.jar",
            "window.foo",
            "EcmaScript",
            "input.js",
            "output.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Create a file input.js with the following \"minimal\" test case:",
                ["OB", "SR"]
            ],
            ["window[\"anchor\"] = function (obj, modifiesProp) {", "CODE"],
            ["return (function (saved) {", "CODE"],
            ["return modifiesProp(obj) + saved;", "CODE"],
            ["})(obj[\"prop\"]);", "CODE"],
            ["}", "CODE"],
            ["2.", ["OB", "SR"]],
            ["Compile it with:", []],
            ["java -jar .../build/compiler.jar                  \\", []],
            ["--compilation_level ADVANCED_OPTIMIZATIONS    \\", ["SR"]],
            ["--warning_level VERBOSE                       \\", ["SR"]],
            ["--externs window.js                           \\", ["SR"]],
            ["--js input.js                                 \\", ["SR"]],
            ["--js_output_file output.js", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["That's all!", []],
            ["What is the expected output?", "QUERY"],
            [
                "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};",
                "CODE"
            ],
            ["What do you see instead?", "QUERY"],
            ["window.foo=function(a,b){return b(a)+a.prop};", "CODE"],
            [
                "Note how this is semantically very different if modifiesProp/b (whose",
                []
            ],
            [
                "semantics are unknown to the compiler) side-effects a.prop.",
                ["OB"]
            ],
            [
                "The evaluation order of + is well-defined in EcmaScript 5, but even",
                ["OB"]
            ],
            [
                "then, this happens even if one substitutes the , (comma) operator.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Git HEAD", []],
            ["commit 4a62ee4bca02169dd77a6f26ed64a624b3f05f95", []],
            [
                "Author: Chad Killingsworth <chadkillingsworth@missouristate.edu>",
                []
            ],
            ["Date: Wed Sep 25 14:52:28 2013 -0500", []],
            ["Add history.state to html5 externs", []],
            ["on Linux.", ["OB"]]
        ]
    },
    "Closure-135": {
        "code_elements": [
            "//--------------------------",
            "/**",
            "* @constructor",
            "*/",
            "function SuperClass () {",
            "}",
            "SuperClass.prototype.CustomMethod = function() {",
            "}",
            "/**",
            "* @constructor",
            "* @extends {SuperClass}",
            "*/",
            "function SubClass () {",
            "}",
            "SubClass.prototype = new SuperClass();",
            "/**",
            "* @override",
            "*/",
            "SubClass.prototype.CustomMethod = function() {",
            "this.myProperty = \"value\";",
            "}",
            "window['SubClassInstance'] = new SubClass();",
            "//---------------------------------",
            "//---------------------------------",
            "function inherit(Child, Parent) {",
            "Child.prototype = new Parent();",
            "}",
            "inherit(SubClass, SuperClass);",
            "//---------------------------------"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Inheritance not detected when prototype directly assigned"
        ],
        "desc_hints": [
            "this.myProperty",
            "SuperClass.prototype.CustomMethod",
            "SubClass.prototype",
            "Child.prototype",
            "SubClass.prototype.CustomMethod",
            "SuperClass",
            "SubClass",
            "CustomMethod",
            "SubClassInstance"
        ],
        "desc_text": [
            ["Given the following input JS:", ["OB", "SR"]],
            ["//--------------------------", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["function SuperClass () {", "CODE"],
            ["}", "CODE"],
            ["SuperClass.prototype.CustomMethod = function() {", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @extends {SuperClass}", "CODE"],
            ["*/", "CODE"],
            ["function SubClass () {", "CODE"],
            ["}", "CODE"],
            ["SubClass.prototype = new SuperClass();", "CODE"],
            ["/**", "CODE"],
            ["* @override", "CODE"],
            ["*/", "CODE"],
            ["SubClass.prototype.CustomMethod = function() {", "CODE"],
            ["this.myProperty = \"value\";", "CODE"],
            ["}", "CODE"],
            ["window['SubClassInstance'] = new SubClass();", "CODE"],
            ["//---------------------------------", "CODE"],
            [
                "When compiled with ADVANCED_OPTIMIZATIONS produces the warning:",
                ["OB", "SR"]
            ],
            [
                "JSC_UNKNOWN_OVERRIDE: property CustomMethod not defined on any superclass",
                ["OB"]
            ],
            ["of SubClass", []],
            [
                "This error has been reproduced in both the downloaded compiler and the",
                []
            ],
            ["Compiler Service UI.", ["OB"]],
            [
                "When the prototype assignment is wrapped in a function, it is correctly",
                ["OB"]
            ],
            ["detected.", ["OB"]],
            ["See below:", []],
            ["//---------------------------------", "CODE"],
            ["function inherit(Child, Parent) {", "CODE"],
            ["Child.prototype = new Parent();", "CODE"],
            ["}", "CODE"],
            ["inherit(SubClass, SuperClass);", "CODE"],
            ["//---------------------------------", "CODE"]
        ]
    },
    "JacksonCore-26": {
        "code_elements": [
            "import com.fasterxml.jackson.core.JsonFactory;",
            "import com.fasterxml.jackson.core.JsonParser;",
            "import com.fasterxml.jackson.core.JsonToken;",
            "import com.fasterxml.jackson.core.async.ByteArrayFeeder;",
            "import org.junit.Test;",
            "import static java.nio.charset.StandardCharsets.UTF_8;",
            "import static org.junit.Assert.assertEquals;",
            "public class FeedingOffsetTest {",
            "@Test",
            "public void inputOffsetShouldNotAffectLocations() throws Exception {",
            "JsonFactory jsonFactory = new JsonFactory();",
            "JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();",
            "ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();",
            "byte[] input = \"[[[\".getBytes(UTF_8);",
            "feeder.feedInput(input, 2, 3);",
            "assertEquals(JsonToken.START_ARRAY, parser.nextToken());",
            "assertEquals(1, parser.getCurrentLocation().getByteOffset()); // ACTUAL = 3",
            "assertEquals(1, parser.getTokenLocation().getByteOffset());   // ACTUAL = 3",
            "feeder.feedInput(input, 0, 1);",
            "assertEquals(JsonToken.START_ARRAY, parser.nextToken());",
            "assertEquals(2, parser.getCurrentLocation().getByteOffset());",
            "assertEquals(2, parser.getTokenLocation().getByteOffset());",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Non-blocking parser reports incorrect locations when fed with non-zero offset"
        ],
        "desc_hints": [
            "assertEquals",
            "parser.getNonBlockingInputFeeder",
            "getCurrentLocation",
            "com.fasterxml.jackson.core.JsonToken",
            "FeedingOffsetTest",
            "com.fasterxml.jackson.core.JsonFactory",
            "JsonFactory",
            "jsonFactory",
            "JsonParser",
            "java.nio.charset.StandardCharsets.UTF_8",
            "jsonFactory.createNonBlockingByteArrayParser",
            "com.fasterxml.jackson.core.JsonParser",
            "feeder.feedInput",
            "getByteOffset",
            "getBytes",
            "ByteArrayFeeder",
            "com.fasterxml.jackson.core.async.ByteArrayFeeder",
            "parser.getCurrentLocation",
            "parser.getTokenLocation",
            "org.junit.Assert.assertEquals",
            "parser.nextToken",
            "org.junit.Test",
            "inputOffsetShouldNotAffectLocations",
            "getTokenLocation",
            "JsonToken.START_ARRAY"
        ],
        "desc_text": [
            [
                "When feeding a non-blocking parser, the input array offset leaks into the offsets reported by getCurrentLocation() and getTokenLocation().",
                ["OB", "SR"]
            ],
            [
                "For example, feeding with an offset of 7 yields tokens whose reported locations are 7 greater than they should be.",
                ["OB", "EB", "SR"]
            ],
            [
                "Likewise the current location reported by the parser is 7 greater than the correct location.",
                ["OB"]
            ],
            [
                "It's not possible for a user to work around this issue by subtracting 7 from the reported locations, because the token location may have been established by an earlier feeding with a different offset.",
                []
            ],
            ["Jackson version: 2.9.8", []],
            ["Unit test:", ["SR"]],
            ["import com.fasterxml.jackson.core.JsonFactory;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonParser;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonToken;", "CODE"],
            [
                "import com.fasterxml.jackson.core.async.ByteArrayFeeder;",
                "CODE"
            ],
            ["import org.junit.Test;", "CODE"],
            ["import static java.nio.charset.StandardCharsets.UTF_8;", "CODE"],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["public class FeedingOffsetTest {", "CODE"],
            ["@Test", "CODE"],
            [
                "public void inputOffsetShouldNotAffectLocations() throws Exception {",
                "CODE"
            ],
            ["JsonFactory jsonFactory = new JsonFactory();", "CODE"],
            [
                "JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();",
                "CODE"
            ],
            [
                "ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();",
                "CODE"
            ],
            ["byte[] input = \"[[[\".getBytes(UTF_8);", "CODE"],
            ["feeder.feedInput(input, 2, 3);", "CODE"],
            [
                "assertEquals(JsonToken.START_ARRAY, parser.nextToken());",
                "CODE"
            ],
            [
                "assertEquals(1, parser.getCurrentLocation().getByteOffset()); // ACTUAL = 3",
                "CODE"
            ],
            [
                "assertEquals(1, parser.getTokenLocation().getByteOffset());   // ACTUAL = 3",
                "CODE"
            ],
            ["feeder.feedInput(input, 0, 1);", "CODE"],
            [
                "assertEquals(JsonToken.START_ARRAY, parser.nextToken());",
                "CODE"
            ],
            [
                "assertEquals(2, parser.getCurrentLocation().getByteOffset());",
                "CODE"
            ],
            [
                "assertEquals(2, parser.getTokenLocation().getByteOffset());",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-77": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "\\0 \\x00 and \\u0000 are translated to null character"
        ],
        "desc_hints": ["jQuery.getScript"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "write script with string constant \"\\0\" or \"\\x00\" or \"\\u0000\"",
                ["SR"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "I expected a string literal with \"\\0\" (or something like that)",
                ["EB", "SR"]
            ],
            [
                "and instead get a string literal with three null character values.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["compiler-20110119.zip on windows 7 x64", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            ["This is causing an issue with IE9 and jQuery.getScript.", ["OB"]],
            [
                "It causes IE9 to interpret the null character as the end of the file instead of a null character.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Mockito-17": {
        "code_elements": [
            "import org.testng.annotations.Test;",
            "import java.util.Observable;",
            "import static org.mockito.Mockito.*;",
            "public class VerifyErrorOnVerificationWithTimeoutTest {",
            "@Test public void should_not_throw_VerifyError() {",
            "verify(mock(Observable.class), timeout(500)).countObservers();",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
            "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
            "at org.mockito.Mockito.timeout(Mockito.java:2103)",
            "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
            "at java.lang.ClassLoader.defineClass1(Native Method)",
            "at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)",
            "at java.lang.ClassLoader.defineClass(ClassLoader.java:621)",
            "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)",
            "at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)",
            "at java.net.URLClassLoader.access$000(URLClassLoader.java:58)",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:197)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
            "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
            "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
            "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
            "at org.mockito.Mockito.timeout(Mockito.java:2103)",
            "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
            "Caused by: java.lang.ClassNotFoundException: junit.framework.ComparisonFailure",
            "at java.net.URLClassLoader$1.run(URLClassLoader.java:202)",
            "at java.security.AccessController.doPrivileged(Native Method)",
            "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
            "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
            "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
            "... 49 more"
        ],
        "summary_hints": ["VerifyError", "NoClassDefFoundError"],
        "summary_text": [
            "Mockito 1.10.x timeout verification needs JUnit classes (VerifyError, NoClassDefFoundError)"
        ],
        "desc_hints": [
            "Mockito.timeout",
            "VerifyError",
            "junit.framework.ComparisonFailure",
            "Observable.class",
            "java.net.URLClassLoader",
            "org.testng.annotations.Test",
            "org.mockito.verification.Timeout",
            "SecureClassLoader.java",
            "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
            "LinkageError",
            "java.lang.ClassLoader.defineClassCond",
            "com.example.UserServiceImplTest.test",
            "java.security.AccessController.doPrivileged",
            "VerificationOverTimeImpl",
            "URLClassLoader.java",
            "VerificationData",
            "java.lang.ClassNotFoundException",
            "VerifyErrorOnVerificationWithTimeoutTest",
            "java.util.Observable",
            "java.lang.ClassLoader.defineClass",
            "countObservers",
            "ClassLoader.java",
            "org.mockito.Mockito.timeout",
            "NoClassDefFoundError",
            "org.mockito.Mockito",
            "TestNG",
            "java.lang.NoClassDefFoundError",
            "Launcher.java",
            "VerficationOverTimeImpl",
            "ComparisonFailure",
            "java.lang.VerifyError",
            "Timeout.java",
            "java.security.SecureClassLoader.defineClass",
            "java.net.URLClassLoader.findClass",
            "StackOverflow",
            "java.lang.ClassLoader.defineClass1",
            "sun.misc.Launcher",
            "Mockito.after",
            "AppClassLoader.loadClass",
            "java.net.URLClassLoader.access",
            "should_not_throw_VerifyError",
            "java.lang.ClassLoader.loadClass",
            "java.net.URLClassLoader.defineClass",
            "Mockito.java",
            "UserServiceImplTest.java"
        ],
        "desc_text": [
            [
                "If JUnit is not on the classpath and mockito is version 1.10.x (as of now 1.10.1 up to 1.10.19) and the code is using the timeout verification which is not supposed to be related to JUnit, then the JVM may fail with a VerifyError or a NoClassDefFoundError.",
                ["OB", "SR"]
            ],
            [
                "This issue has been reported on the mailing list and on StackOverflow",
                []
            ],
            [
                "A simple test like that with TestNG (and no JUnit in the class path of course) exposes the issue:",
                ["SR"]
            ],
            ["import org.testng.annotations.Test;", "CODE"],
            ["import java.util.Observable;", "CODE"],
            ["import static org.mockito.Mockito.*;", "CODE"],
            ["public class VerifyErrorOnVerificationWithTimeoutTest {", "CODE"],
            ["@Test public void should_not_throw_VerifyError() {", "CODE"],
            [
                "verify(mock(Observable.class), timeout(500)).countObservers();",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["With TestNG 5.13.1, the stack trace is :", []],
            [
                "java.lang.VerifyError: (class: org/mockito/internal/verification/VerificationOverTimeImpl, method: verify signature: (Lorg/mockito/internal/verification/api/VerificationData;)V) Incompatible argument to function",
                []
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.Mockito.timeout(Mockito.java:2103)",
                "STACK_TRACE"
            ],
            [
                "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
                "STACK_TRACE"
            ],
            [
                "TestNG includes a dependency on JUnit 3.8.1, which has the junit.framework.ComparisonFailure, but the JVM cannot perform the linking at runtime (VerifyError extends LinkageError), probably because for the JVM there's some incompatible changes in this class between version 3.x and 4.x.",
                ["OB"]
            ],
            ["Note that Mockito is compiled against JUnit 4.x.", ["OB"]],
            [
                "This also reveal that Mockito is not anymore compatible with JUnit 3.x.",
                ["OB"]
            ],
            ["With TestNG 6.8.13, the stack trace is :", []],
            [
                "java.lang.NoClassDefFoundError: junit/framework/ComparisonFailure",
                []
            ],
            [
                "at java.lang.ClassLoader.defineClass1(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.defineClass(ClassLoader.java:621)",
                "STACK_TRACE"
            ],
            [
                "at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.access$000(URLClassLoader.java:58)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:197)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
                "STACK_TRACE"
            ],
            [
                "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:32)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.verification.Timeout.<init>(Timeout.java:25)",
                "STACK_TRACE"
            ],
            [
                "at org.mockito.Mockito.timeout(Mockito.java:2103)",
                "STACK_TRACE"
            ],
            [
                "at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.ClassNotFoundException: junit.framework.ComparisonFailure",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader$1.run(URLClassLoader.java:202)",
                "STACK_TRACE"
            ],
            [
                "at java.security.AccessController.doPrivileged(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at java.net.URLClassLoader.findClass(URLClassLoader.java:190)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:306)",
                "STACK_TRACE"
            ],
            [
                "at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.ClassLoader.loadClass(ClassLoader.java:247)",
                "STACK_TRACE"
            ],
            ["... 49 more", "STACK_TRACE"],
            ["Indeed JUnit is not anymore a dependency of TestNG.", ["OB"]],
            [
                "In this specific case the issue is that the Timeout class wraps a VerficationOverTimeImpl that uses in try/catch block the exception org.mockito.exceptions.verification.junit.ArgumentsAreDifferent which extends junit.framework.ComparisonFailure.",
                ["OB", "SR"]
            ],
            [
                "At this time it seems to be the only place where JUnit is needed, this affect the following public API :",
                []
            ],
            ["Mockito.timeout(...)", []],
            ["Mockito.after(...)", []]
        ]
    },
    "Lang-54": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["LocaleUtils.toLocale"],
        "summary_text": [
            "LocaleUtils.toLocale() rejects strings with only language+variant"
        ],
        "desc_hints": [
            "LocaleUtils.toLocale",
            "PropertyConverter.toLocale",
            "LocaleUtils",
            "toString"
        ],
        "desc_text": [
            [
                "LocaleUtils.toLocale() throws an exception on strings containing a language and a variant but no country code.",
                ["OB"]
            ],
            ["For example : fr__POSIX", ["OB", "SR"]],
            [
                "This string can be produced with the JDK by instanciating a Locale with an empty string for the country : new Locale(\"fr\", \"\", \"POSIX\").toString().",
                ["OB", "SR"]
            ],
            [
                "According to the javadoc for the Locale class a variant is allowed with just a language code or just a country code.",
                ["OB", "SR"]
            ],
            [
                "Commons Configuration handles this case in its PropertyConverter.toLocale() method.",
                ["OB"]
            ],
            [
                "I'd like to replace our implementation by the one provided by LocaleUtils, but our tests fail due to this case.",
                ["OB"]
            ]
        ]
    },
    "Math-57": {
        "code_elements": ["int sum = 0;"],
        "stack_traces": [],
        "summary_hints": ["KMeansPlusPlusClusterer"],
        "summary_text": ["Truncation issue in KMeansPlusPlusClusterer"],
        "desc_hints": [
            "KMeansPlusPlusClusterer.chooseInitialClusters",
            "EmptyClusterStrategy"
        ],
        "desc_text": [
            [
                "The for loop inside KMeansPlusPlusClusterer.chooseInitialClusters defines a variable",
                []
            ],
            ["int sum = 0;", "CODE"],
            [
                "This variable should have type double, rather than int.",
                ["OB", "EB"]
            ],
            [
                "Using an int causes the method to truncate the distances between points to (square roots of) integers.",
                ["OB"]
            ],
            [
                "It's especially bad when the distances between points are typically less than 1.",
                ["OB", "SR"]
            ],
            [
                "As an aside, in version 2.2, this bug manifested itself by making the clusterer return empty clusters.",
                ["OB"]
            ],
            [
                "I wonder if the EmptyClusterStrategy would still be necessary if this bug were fixed.",
                []
            ]
        ]
    },
    "Jsoup-75": {
        "code_elements": [
            "public void test() {",
            "Document document = Jsoup.parse(",
            "\"<html><head></head><body><hr size=\\\"1\\\" noshade=\\\"\\\"></body></html>\");",
            "assertEquals(\"<html>\\n\" +",
            "\" <head></head>\\n\" +",
            "\" <body>\\n\" +",
            "\"  <hr size=\\\"1\\\" noshade>\\n\" +",
            "\" </body>\\n\" +",
            "\"</html>\",",
            "document.outerHtml());",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Regression - Boolean attributes not collapsed when using HTML syntax"
        ],
        "desc_hints": [
            "Document.OutputSettings",
            "assertEquals",
            "document.outerHtml",
            "Jsoup.parse",
            "LinkedHashSet",
            "Attribute.shouldCollapseAttribute",
            "Attibutes.html"
        ],
        "desc_text": [
            ["Hello,", []],
            ["First off, thanks for a really useful library.", []],
            [
                "So, upgrading from 1.10.2 to 1.11.2 we see that boolean attributes are no longer collapsed when using html syntax.",
                ["OB"]
            ],
            ["Example test case:", ["SR"]],
            ["@Test", []],
            ["public void test() {", "CODE"],
            ["Document document = Jsoup.parse(", "CODE"],
            [
                "\"<html><head></head><body><hr size=\\\"1\\\" noshade=\\\"\\\"></body></html>\");",
                "CODE"
            ],
            ["assertEquals(\"<html>\\n\" +", "CODE"],
            ["\" <head></head>\\n\" +", "CODE"],
            ["\" <body>\\n\" +", "CODE"],
            ["\"  <hr size=\\\"1\\\" noshade>\\n\" +", "CODE"],
            ["\" </body>\\n\" +", "CODE"],
            ["\"</html>\",", "CODE"],
            ["document.outerHtml());", "CODE"],
            ["}", "CODE"],
            [
                "Tracked it down to commit \"Refactored Attributes to be an array pair vs LinkedHashSet \" ea1fb65.",
                []
            ],
            [
                "The Attibutes.html(final Appendable accum, final Document.OutputSettings out) method no longer uses Attribute and fails to check the value of the attribute for an empty string(line 320).",
                ["OB", "SR"]
            ],
            [
                "If I may also suggest to use Attribute.shouldCollapseAttribute(String key, String val, Document.OutputSettings out) instead as a single source of truth as the boolean expression is complex enough and easy to make a mistake.",
                ["SR"]
            ],
            [
                "Not sure if this would have an impact in performance though but I am guessing that optimizer will inline the call at some point anyways?",
                []
            ]
        ]
    },
    "Jsoup-83": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Could handle missing tag ends (>) better"],
        "desc_hints": ["document.select", "div.great"],
        "desc_text": [
            [
                "We are using Jsoup to parse HTML documents from some external websites, which are not under our control.",
                ["OB"]
            ],
            [
                "A few days ago, one of these sites updated their website, and introduced a bug, causing our crawling to fail spectacularly.",
                ["OB"]
            ],
            ["The HTML which was broken looked a bit like this:", ["SR"]],
            ["<td class=\"my-cell\"", []],
            ["<div class=\"great-formatting\">100</div>", []],
            ["</td>", []],
            [
                "As you can see, the TD is missing a closing >, while we did a document.select(\"div.great-formatting\").",
                ["OB"]
            ],
            [
                "This failed, because Jsoup couldn't parse the document correctly anymore.",
                ["OB"]
            ],
            [
                "I understand it's a very edge case, and maybe very hard to fix.",
                []
            ],
            [
                "However, for us it was a production issue, and caused us quite a few headaches.",
                []
            ],
            [
                "Right now, we have a sort of preprocessor running over the HTML to close all elements which should be closed, but it would be much nicer if Jsoup would handle this out of the box.",
                ["EB"]
            ]
        ]
    },
    "JacksonDatabind-5": {
        "code_elements": [
            "String getCity();",
            "}",
            "public class ContactImpl implements Contact {",
            "public String getCity() { ... }",
            "}",
            "public class ContactMixin implements Contact {",
            "@JsonProperty",
            "public String getCity() { return null; }",
            "}",
            "public class PersonImpl extends ContactImpl implements Person {}",
            "public class PersonMixin extends ContactMixin implements Person {}",
            "// There are other getters/properties in the Impl class that do not need to be serialized and so",
            "// I am using the Mixin to match the interface and explicitly annotate all the inherited methods",
            ".disable(MapperFeature.INFER_PROPERTY_MUTATORS);",
            "module.setMixInAnnotation(Person.class, PersonMixin.class);",
            "module.setMixInAnnotation(Contact.class, ContactMixin.class);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Mixin annotations lost when using a mixin class hierarchy with non-mixin interfaces"
        ],
        "desc_hints": [
            "ContactMixin.class",
            "JsonProperty",
            "MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS",
            "MapperFeature.AUTO_DETECT_GETTERS",
            "PersonMixin",
            "module.setMixInAnnotation",
            "MapperFeature.AUTO_DETECT_FIELDS",
            "PersonMixin.class",
            "MapperFeature.AUTO_DETECT_IS_GETTERS",
            "ContactMixin",
            "AnnotatedClass.resolveMemberMethods",
            "AnnotatedClass",
            "getCity",
            "Person.class",
            "module.disable",
            "_addMethodMixIns",
            "ContactImpl.class",
            "Contact.class",
            "AnnotatedMethod",
            "MapperFeature.INFER_PROPERTY_MUTATORS",
            "PersonImpl",
            "ContactImpl"
        ],
        "desc_text": [
            [
                "In summary, mixin annotations are lost when Jackson scans a parent mixin class with Json annotations followed by an interface implemented by the parent mixin class that does not have the same Json annotations.",
                ["OB", "SR"]
            ],
            ["Jackson version: 2.4.0", []],
            ["Detail:", []],
            ["I have the following class structure", ["SR"]],
            ["public interface Contact {", []],
            ["String getCity();", "CODE"],
            ["}", "CODE"],
            ["public class ContactImpl implements Contact {", "CODE"],
            ["public String getCity() { ... }", "CODE"],
            ["}", "CODE"],
            ["public class ContactMixin implements Contact {", "CODE"],
            ["@JsonProperty", "CODE"],
            ["public String getCity() { return null; }", "CODE"],
            ["}", "CODE"],
            ["public interface Person extends Contact {}", []],
            [
                "public class PersonImpl extends ContactImpl implements Person {}",
                "CODE"
            ],
            [
                "public class PersonMixin extends ContactMixin implements Person {}",
                "CODE"
            ],
            ["and I configure a module as", []],
            [
                "// There are other getters/properties in the Impl class that do not need to be serialized and so",
                "CODE"
            ],
            [
                "// I am using the Mixin to match the interface and explicitly annotate all the inherited methods",
                "CODE"
            ],
            [
                "module.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)",
                []
            ],
            [".disable(MapperFeature.AUTO_DETECT_FIELDS)", ["OB"]],
            [".disable(MapperFeature.AUTO_DETECT_GETTERS)", ["OB"]],
            [".disable(MapperFeature.AUTO_DETECT_IS_GETTERS)", ["OB"]],
            [".disable(MapperFeature.INFER_PROPERTY_MUTATORS);", "CODE"],
            [
                "module.setMixInAnnotation(Person.class, PersonMixin.class);",
                "CODE"
            ],
            [
                "When a PersonImpl instance is serialized, city is not included.",
                ["OB"]
            ],
            ["I debugged the code and this is what happens:", []],
            [
                "In AnnotatedClass.resolveMemberMethods() the supertypes of PersonImpl are [Person.class, Contact.class, ContactImpl.class] in that order.",
                ["OB"]
            ],
            [
                "It starts with Person for which it finds PersonMixin and proceeds to AnnotatedClass._addMethodMixIns().",
                ["OB"]
            ],
            [
                "Here the parents list has [PersonMixin, ContactMixin, Contact].",
                ["OB"]
            ],
            [
                "When it processes ContactMixin it adds getCity() with the JsonProperty annotation.",
                ["OB"]
            ],
            [
                "Then it processes Contact, doesn't find getCity() in methods map and so creates a new AnnotatedMethod for getCity() with the one from the interface which has no annotation which replaces the one from ContactMixin",
                ["OB", "SR"]
            ],
            [
                "The workaround for this issue is to explicitly add any parent mixins to the module i.e.",
                []
            ],
            [
                "module.setMixInAnnotation(Contact.class, ContactMixin.class);",
                "CODE"
            ]
        ]
    },
    "JxPath-7": {
        "code_elements": ["assertFalse(result.booleanValue());"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Binary operators behaviour involving node-sets is incorrect"
        ],
        "desc_hints": [
            "org.apache.xpath.objects.XObject",
            "pathContext.getValue",
            "pathContext",
            "Boolean.class",
            "StringReader",
            "newContext",
            "newDocumentBuilder",
            "lesserThan",
            "JXPathContext",
            "assertFalse",
            "result.booleanValue",
            "DocumentBuilderFactory.newInstance",
            "greaterThan",
            "InputSource"
        ],
        "desc_text": [
            ["According to XPath specification:", []],
            [
                "\"If both objects to be compared are node-sets, then the comparison will be true if and only if there is a node in the first node-set and a node in the second node-set such that the result of performing the comparison on the string-values of the two nodes is true.",
                ["OB", "EB", "SR"]
            ],
            [
                "If one object to be compared is a node-set and the other is a number, then the comparison will be true if and only if there is a node in the node-set such that the result of performing the comparison on the number to be compared and on the result of converting the string-value of that node to a number using the number function is true.\"",
                ["OB", "EB", "SR"]
            ],
            [
                "But following example illustrates, that this is not a JXPath behaviour:",
                ["SR"]
            ],
            ["JXPathContext pathContext = JXPathContext", []],
            [".newContext(DocumentBuilderFactory.newInstance()", ["OB"]],
            [".newDocumentBuilder().parse(", ["OB"]],
            ["new InputSource(new StringReader(", []],
            [
                "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\"",
                []
            ],
            ["+ \"<doc/>\"))));", []],
            [
                "Boolean result = (Boolean) pathContext.getValue(\"2.0 > child1\",",
                ["OB"]
            ],
            ["Boolean.class);", []],
            ["assertFalse(result.booleanValue());", "CODE"],
            [
                "\"child1\" is not found - right operand node set is empty, but result is TRUE, instead of FALSE.",
                ["OB", "EB"]
            ],
            [
                "Please, check greaterThan(), lesserThan(), etc methods of org.apache.xpath.objects.XObject for possible solution",
                []
            ]
        ]
    },
    "JacksonDatabind-61": {
        "code_elements": [
            "import com.fasterxml.jackson.annotation.JsonTypeInfo;",
            "import com.fasterxml.jackson.core.JsonFactory;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.SerializationFeature;",
            "import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;",
            "import java.io.IOException;",
            "import java.util.HashMap;",
            "import java.util.Map;",
            "public class Main {",
            "public static void main(String[] args) throws IOException {",
            "// Create test data",
            "Data data = new Data();",
            "data.key = 1;",
            "Map<String, Object> mapData = new HashMap<>();",
            "mapData.put(\"longInMap\", 2L);",
            "mapData.put(\"longAsField\", data);",
            "// Configure Jackson to preserve types",
            "JsonFactory factory = new JsonFactory();",
            "ObjectMapper mapper = new ObjectMapper(factory);",
            "StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();",
            "resolver.init(JsonTypeInfo.Id.CLASS, null);",
            "resolver.inclusion(JsonTypeInfo.As.PROPERTY);",
            "resolver.typeProperty(\"__t\");",
            "mapper.setDefaultTyping(resolver);",
            "mapper.enable(SerializationFeature.INDENT_OUTPUT);",
            "// Serialize",
            "String json = mapper.writeValueAsString(mapData);",
            "System.out.println(\"json = \" + json);",
            "// Deserialize",
            "Map deserializedData = mapper.readValue(json, Map.class);",
            "}",
            "static class Data {",
            "public long key;",
            "}",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [
            "Caused by: java.lang.IllegalArgumentException: Class java.lang.Long not subtype of [simple type, class long]",
            "at com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(TypeFactory.java:359)",
            "at com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._typeFromId(ClassNameIdResolver.java:72)",
            "at com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId(ClassNameIdResolver.java:42)"
        ],
        "summary_hints": ["TypeResolverBuilder"],
        "summary_text": [
            "Problems deserializing primitive long field while using TypeResolverBuilder"
        ],
        "desc_hints": [
            "SerializationFeature.INDENT_OUTPUT",
            "resolver.init",
            "mapper.enable",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
            "_typeFromId",
            "com.fasterxml.jackson.databind.SerializationFeature",
            "data.key",
            "mapData",
            "com.fasterxml.jackson.core.JsonFactory",
            "resolver.inclusion",
            "mapper.setDefaultTyping",
            "deserializedData",
            "JsonFactory",
            "java.lang.Long",
            "TypeFactory.java",
            "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType",
            "BeanDeserializer.java",
            "com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "ClassNameIdResolver.java",
            "mapData.put",
            "ObjectMapper",
            "java.util.HashMap",
            "longAsField",
            "java.lang.IllegalArgumentException",
            "JsonMappingException.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize",
            "BeanDeserializerBase.java",
            "Map.class",
            "com.pinkmatter.bean.serialization.Data",
            "com.pinkmatter.bean.serialization.Main",
            "mapper.writeValueAsString",
            "java.io.IOException",
            "mapper.readValue",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow",
            "StdTypeResolverBuilder",
            "JsonTypeInfo.As.PROPERTY",
            "JsonTypeInfo.Id.CLASS",
            "longInMap",
            "java.util.Map",
            "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "resolver.typeProperty",
            "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
            "HashMap",
            "System.out.println"
        ],
        "desc_text": [
            ["When running the following test app", ["OB", "SR"]],
            ["import com.fasterxml.jackson.annotation.JsonTypeInfo;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonFactory;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.SerializationFeature;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;",
                "CODE"
            ],
            ["import java.io.IOException;", "CODE"],
            ["import java.util.HashMap;", "CODE"],
            ["import java.util.Map;", "CODE"],
            ["public class Main {", "CODE"],
            [
                "public static void main(String[] args) throws IOException {",
                "CODE"
            ],
            ["// Create test data", "CODE"],
            ["Data data = new Data();", "CODE"],
            ["data.key = 1;", "CODE"],
            ["Map<String, Object> mapData = new HashMap<>();", "CODE"],
            ["mapData.put(\"longInMap\", 2L);", "CODE"],
            ["mapData.put(\"longAsField\", data);", "CODE"],
            ["// Configure Jackson to preserve types", "CODE"],
            ["JsonFactory factory = new JsonFactory();", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper(factory);", "CODE"],
            [
                "StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();",
                "CODE"
            ],
            ["resolver.init(JsonTypeInfo.Id.CLASS, null);", "CODE"],
            ["resolver.inclusion(JsonTypeInfo.As.PROPERTY);", "CODE"],
            ["resolver.typeProperty(\"__t\");", "CODE"],
            ["mapper.setDefaultTyping(resolver);", "CODE"],
            ["mapper.enable(SerializationFeature.INDENT_OUTPUT);", "CODE"],
            ["// Serialize", "CODE"],
            ["String json = mapper.writeValueAsString(mapData);", "CODE"],
            ["System.out.println(\"json = \" + json);", "CODE"],
            ["// Deserialize", "CODE"],
            [
                "Map deserializedData = mapper.readValue(json, Map.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["static class Data {", "CODE"],
            ["public long key;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["I get this output and exception", ["OB"]],
            ["json = {", []],
            ["\"__t\" : \"java.util.HashMap\",", []],
            ["\"longInMap\" : [ \"java.lang.Long\", 2 ],", []],
            ["\"longAsField\" : {", []],
            ["\"__t\" : \"com.pinkmatter.bean.serialization.Main$Data\",", []],
            ["\"key\" : [ \"java.lang.Long\", 1 ]", []],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Exception in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: Class java.lang.Long not subtype of [simple type, class long] (through reference chain: java.util.HashMap[\"longAsField\"]->com.pinkmatter.bean.serialization.Data[\"key\"])",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:379)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:339)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1591)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:278)",
                []
            ],
            ["...", []],
            [
                "Caused by: java.lang.IllegalArgumentException: Class java.lang.Long not subtype of [simple type, class long]",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(TypeFactory.java:359)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._typeFromId(ClassNameIdResolver.java:72)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId(ClassNameIdResolver.java:42)",
                "STACK_TRACE"
            ],
            ["...", []],
            [
                "I am trying to serialize a bunch of basic plain old java objects from libraries we are using (so we cannot modify the classes or add annotations), while also trying to preserve the types of values in collections (\"longInMap\" in the above example must stay a Long object).",
                ["SR"]
            ],
            [
                "The problem is that Jackson throws the above exception when trying to deserialize the primitive public long key in the Data class.",
                ["OB"]
            ],
            [
                "If I change the type to public int key then no exception is thrown and deserialization works.",
                ["OB"]
            ],
            [
                "Also, since there are many different types of objects and I don't know at compile time exactly what will be serialized I don't think using mix-ins will work.",
                []
            ],
            ["I am using Jackson 2.8.3.", []]
        ]
    },
    "Jsoup-67": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Quadratic behaviour on deeply nested pages"],
        "desc_hints": [
            "sv.stargate.wikia.com",
            "github.com",
            "HtmlTreeBuilder.java"
        ],
        "desc_text": [
            [
                "On pages with very deep sequence of elements (like this one sv.stargate.wikia.com/wiki/M2J), Jsoup gets very slow and spends too much time in this function:",
                ["OB", "SR"]
            ],
            [
                "https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java#L462",
                []
            ],
            ["Is there any way to remove this quadratic behaviour?", []],
            [
                "Either by using better data structures or by having option to limit stack size (and throw exception when it is too deep).",
                ["OB"]
            ]
        ]
    },
    "Closure-88": {
        "code_elements": [
            "function closureCompilerTest(someNode) {",
            "var nodeId;",
            "return ((nodeId=someNode.id) && (nodeId=parseInt(nodeId.substr(1))) && nodeId>0);",
            "}",
            "function closureCompilerTest(b){var a;return b.id&&(a=parseInt(a.substr(1)))&&a>0};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Incorrect assignment removal from expression in simple mode."
        ],
        "desc_hints": [
            "someNode",
            "nodeId",
            "someNode.id",
            "parseInt",
            "nodeId.substr",
            "closureCompilerTest"
        ],
        "desc_text": [
            ["function closureCompilerTest(someNode) {", "CODE"],
            ["var nodeId;", "CODE"],
            [
                "return ((nodeId=someNode.id) && (nodeId=parseInt(nodeId.substr(1))) && nodeId>0);",
                "CODE"
            ],
            ["}", "CODE"],
            ["COMPILES TO:", []],
            [
                "function closureCompilerTest(b){var a;return b.id&&(a=parseInt(a.substr(1)))&&a>0};",
                "CODE"
            ],
            [
                "\"nodeId=someNode.id\" is replaced with simply \"b.id\" which is incorrect as the value of \"nodeId\" is used.",
                ["OB"]
            ]
        ]
    },
    "Closure-155": {
        "code_elements": [
            "function d3_call(callback) {",
            "var f = callback;",
            "arguments[0] = this;",
            "f.apply(this, arguments);",
            "return this;",
            "}",
            "function d3_call(a){arguments[0]=this;a.apply(this,arguments);return this};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Overzealous arguments optimisation"],
        "desc_hints": ["JavaScript", "github.com"],
        "desc_text": [
            ["Consider the following JavaScript code:", ["OB", "SR"]],
            ["function d3_call(callback) {", "CODE"],
            ["var f = callback;", "CODE"],
            ["arguments[0] = this;", "CODE"],
            ["f.apply(this, arguments);", "CODE"],
            ["return this;", "CODE"],
            ["}", "CODE"],
            ["This is optimised to:", []],
            [
                "function d3_call(a){arguments[0]=this;a.apply(this,arguments);return this};",
                "CODE"
            ],
            [
                "However, the use of a temporary variable `f` is necessary to avoid `arguments[0] = this` from overwriting the first argument.",
                []
            ],
            [
                "In the above optimised code, `arguments[0] = this` causes `this` to be assigned to `a`.",
                ["OB"]
            ],
            ["Verified on latest SVN r878.", ["OB"]],
            [
                "See also: https://github.com/mbostock/d3/issues/closed#issue/68",
                []
            ]
        ]
    },
    "Jsoup-70": {
        "code_elements": [
            "Document doc = Jsoup.parse(s);",
            "System.out.println(doc.select(\"pre\").first().outerHtml());"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Whitespaces not properly handled in <pre> tag"],
        "desc_hints": [
            "Jsoup.parse",
            "outerHtml",
            "doc.select",
            "System.out.println"
        ],
        "desc_text": [
            [
                "If a \"pre\" tag contains deep nested tags, whitespaces in nested tags are not preserved.",
                ["OB"]
            ],
            ["Example:", ["OB", "SR"]],
            ["String s = \"<pre><code>\\n\"", []],
            [
                "+ \" message <span style=\\\"color:red\\\"> other  \\n    message  with \\n\"",
                []
            ],
            ["+ \" whitespaces      </span>\\n\"", []],
            ["+ \"</code></pre>\";", []],
            ["Document doc = Jsoup.parse(s);", "CODE"],
            [
                "System.out.println(doc.select(\"pre\").first().outerHtml());",
                "CODE"
            ],
            ["Will output:", ["OB"]],
            ["<pre><code>", []],
            [
                "message <span style=\"color:red\"> other message with whiptespaces </span>",
                []
            ],
            ["</pre></code>", []],
            ["Output is OK if we omit the \"code\" tag", []]
        ]
    },
    "JacksonDatabind-30": {
        "code_elements": [
            "import org.junit.Test;",
            "import org.junit.Assert;",
            "import java.math.BigDecimal;",
            "import com.fasterxml.jackson.annotation.*;",
            "import com.fasterxml.jackson.databind.DeserializationFeature;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "public class JacksonTest {",
            "enum Type { BIG_DECIMAL }",
            "static class Wrapper {",
            "@JsonIgnore",
            "Type typeEnum;",
            "@JsonIgnore",
            "Object value;",
            "Wrapper() { }",
            "@JsonGetter(value = \"type\")",
            "String getTypeString() {",
            "return typeEnum.name();",
            "}",
            "@JsonSetter(value = \"type\")",
            "void setTypeString(String type) {",
            "this.typeEnum = Type.valueOf(type);",
            "}",
            "@JsonGetter(value = \"objectValue\")",
            "Object getValue() {",
            "return value;",
            "}",
            "@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = \"type\")",
            "@JsonSubTypes({ @JsonSubTypes.Type(name = \"BIG_DECIMAL\", value = BigDecimal.class) })",
            "@JsonSetter(value = \"objectValue\")",
            "private void setValue(Object value) {",
            "this.value = value;",
            "}",
            "}",
            "@Test",
            "public void test() throws Exception {",
            "ObjectMapper m = new ObjectMapper();",
            "m.configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, true);",
            "Wrapper w = new Wrapper();",
            "w.typeEnum = Type.BIG_DECIMAL;",
            "w.value = new BigDecimal(\"-10000000000.0000000001\");",
            "String json = m.writeValueAsString(w);",
            "Wrapper w2 = m.readValue(json, Wrapper.class);",
            "Assert.assertEquals(w.typeEnum, w2.typeEnum);",
            "Assert.assertTrue(String.format(\"Expected %s = %s; got back %s = %s\",",
            "w.value.getClass().getSimpleName(), w.value.toString(), w2.value.getClass().getSimpleName(), w2.value.toString()),",
            "w.value.equals(w2.value));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonTypeInfo", "BigDecimal", "JsonSubTypes"],
        "summary_text": [
            "BigDecimal values via @JsonTypeInfo/@JsonSubTypes get rounded"
        ],
        "desc_hints": [
            "Assert.assertEquals",
            "JsonTypeInfo",
            "JsonSubTypes",
            "JsonGetter",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "this.typeEnum",
            "JsonIgnore",
            "Type.BIG_DECIMAL",
            "w2.value.getClass",
            "com.fasterxml.jackson.annotation",
            "java.math.BigDecimal",
            "typeEnum.name",
            "JsonTypeInfo.As.EXTERNAL_PROPERTY",
            "ObjectMapper",
            "JsonSubTypes.Type",
            "setValue",
            "w2.typeEnum",
            "DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS",
            "typeEnum",
            "value.equals",
            "getValue",
            "com.fasterxml.jackson.databind.DeserializationFeature",
            "String.format",
            "JsonSetter",
            "getTypeString",
            "Wrapper.class",
            "this.value",
            "setTypeString",
            "BigDecimal.class",
            "readValue",
            "getSimpleName",
            "BigDecimal",
            "JsonTypeInfo.Id.NAME",
            "writeValueAsString",
            "w2.value",
            "Type.valueOf",
            "value.getClass",
            "org.junit.Test",
            "w2.value.toString",
            "JacksonTest",
            "Assert.assertTrue",
            "objectValue",
            "org.junit.Assert",
            "value.toString"
        ],
        "desc_text": [
            [
                "When using an ObjectMapper to serialize/deserialize a class with an Object field annotated with a @JsonSubTypes.Type that indicate BigDecimal, it looks like the value is getting rounded to a double.",
                ["OB", "SR"]
            ],
            [
                "I tried configuring DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, but that didn't seem to help.",
                ["OB"]
            ],
            [
                "What I think is a valid repro is below, but let me know if I'm actually doing something wrong here.",
                ["SR"]
            ],
            ["Thanks!", []],
            ["import org.junit.Test;", "CODE"],
            ["import org.junit.Assert;", "CODE"],
            ["import java.math.BigDecimal;", "CODE"],
            ["import com.fasterxml.jackson.annotation.*;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.DeserializationFeature;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["public class JacksonTest {", "CODE"],
            ["enum Type { BIG_DECIMAL }", "CODE"],
            ["static class Wrapper {", "CODE"],
            ["@JsonIgnore", "CODE"],
            ["Type typeEnum;", "CODE"],
            ["@JsonIgnore", "CODE"],
            ["Object value;", "CODE"],
            ["Wrapper() { }", "CODE"],
            ["@JsonGetter(value = \"type\")", "CODE"],
            ["String getTypeString() {", "CODE"],
            ["return typeEnum.name();", "CODE"],
            ["}", "CODE"],
            ["@JsonSetter(value = \"type\")", "CODE"],
            ["void setTypeString(String type) {", "CODE"],
            ["this.typeEnum = Type.valueOf(type);", "CODE"],
            ["}", "CODE"],
            ["@JsonGetter(value = \"objectValue\")", "CODE"],
            ["Object getValue() {", "CODE"],
            ["return value;", "CODE"],
            ["}", "CODE"],
            [
                "@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = \"type\")",
                "CODE"
            ],
            [
                "@JsonSubTypes({ @JsonSubTypes.Type(name = \"BIG_DECIMAL\", value = BigDecimal.class) })",
                "CODE"
            ],
            ["@JsonSetter(value = \"objectValue\")", "CODE"],
            ["private void setValue(Object value) {", "CODE"],
            ["this.value = value;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void test() throws Exception {", "CODE"],
            ["ObjectMapper m = new ObjectMapper();", "CODE"],
            [
                "m.configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, true);",
                "CODE"
            ],
            ["Wrapper w = new Wrapper();", "CODE"],
            ["w.typeEnum = Type.BIG_DECIMAL;", "CODE"],
            ["w.value = new BigDecimal(\"-10000000000.0000000001\");", "CODE"],
            ["String json = m.writeValueAsString(w);", "CODE"],
            ["Wrapper w2 = m.readValue(json, Wrapper.class);", "CODE"],
            ["Assert.assertEquals(w.typeEnum, w2.typeEnum);", "CODE"],
            [
                "Assert.assertTrue(String.format(\"Expected %s = %s; got back %s = %s\",",
                "CODE"
            ],
            [
                "w.value.getClass().getSimpleName(), w.value.toString(), w2.value.getClass().getSimpleName(), w2.value.toString()),",
                "CODE"
            ],
            ["w.value.equals(w2.value));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Jsoup-53": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "SelectorParseException",
            "org.jsoup.select.Selector"
        ],
        "summary_text": [
            "Parse failed with org.jsoup.select.Selector$SelectorParseException when selector has unbalanced '(' or '[' or ')' or ']'"
        ],
        "desc_hints": ["div.card", "MyTitle", "MySubTitle"],
        "desc_text": [
            [
                "Selector I am having as following div.card-content2:has(a.subtitle[title= MySubTitle:)]) OR a.title[title=MyTitle :] ]",
                []
            ]
        ]
    },
    "Jsoup-90": {
        "code_elements": [
            "String url = \"https://www.colisprive.com/moncolis/pages/detailColis.aspx?numColis=P4000000037777930\";",
            ".ignoreContentType(true).timeout(20000);",
            "connection.method(Method.GET);",
            "return connection.execute().parse();",
            "} catch (Exception e) {",
            "throw new RuntimeException(e);",
            "}"
        ],
        "stack_traces": [
            "Caused by: java.lang.ArrayIndexOutOfBoundsException: 11",
            "at org.jsoup.helper.HttpConnection$Base.looksLikeUtf8(HttpConnection.java:437)",
            "at org.jsoup.helper.HttpConnection$Base.fixHeaderEncoding(HttpConnection.java:400)",
            "at org.jsoup.helper.HttpConnection$Base.addHeader(HttpConnection.java:386)",
            "at org.jsoup.helper.HttpConnection$Response.processResponseHeaders(HttpConnection.java:1075)",
            "at org.jsoup.helper.HttpConnection$Response.setupFromConnection(HttpConnection.java:1019)",
            "at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:752)",
            "at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:722)",
            "at org.jsoup.helper.HttpConnection.execute(HttpConnection.java:306)"
        ],
        "summary_hints": ["ArrayIndexOutOfBoundsException"],
        "summary_text": [
            "ArrayIndexOutOfBoundsException when parsing with some URL"
        ],
        "desc_hints": [
            "Base.addHeader",
            "connection.method",
            "AppleWebKit",
            "Response.processResponseHeaders",
            "ignoreContentType",
            "Base.looksLikeUtf8",
            "Response.setupFromConnection",
            "org.jsoup.helper.HttpConnection",
            "connection.execute",
            "java.lang.ArrayIndexOutOfBoundsException",
            "detailColis.aspx",
            "Response.execute",
            "Method.GET",
            "numColis",
            "userAgent",
            "Jsoup.connect",
            "www.colisprive.com",
            "Base.fixHeaderEncoding",
            "HttpConnection.java",
            "RuntimeException",
            "org.jsoup.helper.HttpConnection.execute"
        ],
        "desc_text": [
            ["error", ["OB"]],
            [
                "Caused by: java.lang.ArrayIndexOutOfBoundsException: 11",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Base.looksLikeUtf8(HttpConnection.java:437)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Base.fixHeaderEncoding(HttpConnection.java:400)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Base.addHeader(HttpConnection.java:386)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Response.processResponseHeaders(HttpConnection.java:1075)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Response.setupFromConnection(HttpConnection.java:1019)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:752)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:722)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.helper.HttpConnection.execute(HttpConnection.java:306)",
                "STACK_TRACE"
            ],
            ["code", []],
            ["try {", []],
            [
                "String url = \"https://www.colisprive.com/moncolis/pages/detailColis.aspx?numColis=P4000000037777930\";",
                "CODE"
            ],
            [
                "Connection connection = Jsoup.connect(url).referrer(url).",
                ["OB"]
            ],
            [
                "userAgent(\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\")",
                []
            ],
            [".ignoreContentType(true).timeout(20000);", "CODE"],
            ["connection.method(Method.GET);", "CODE"],
            ["return connection.execute().parse();", "CODE"],
            ["} catch (Exception e) {", "CODE"],
            ["throw new RuntimeException(e);", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-28": {
        "code_elements": [
            "public class Main",
            "{",
            "public static class MyValue",
            "{",
            "private final ObjectNode object;",
            "@JsonCreator",
            "public MyValue(ObjectNode object) { this.object = object; }",
            "@JsonValue",
            "public ObjectNode getObject() { return object; }",
            "}",
            "public static void main(String[] args)",
            "throws Exception",
            "{",
            "ObjectMapper om = new ObjectMapper();",
            "ObjectNode object = new ObjectNode(JsonNodeFactory.instance);",
            "String json = om.writeValueAsString(object);",
            "System.out.println(\"json: \"+json);",
            "ObjectNode de1 = om.readValue(json, ObjectNode.class);  // this works",
            "System.out.println(\"Deserialized to ObjectNode: \"+de1);",
            "MyValue de2 = om.readValue(json, MyValue.class);  // but this throws exception",
            "System.out.println(\"Deserialized to MyValue: \"+de2);",
            "}",
            "}",
            "ObjectNode object = new ObjectNode(JsonNodeFactory.instance);"
        ],
        "stack_traces": [],
        "summary_hints": ["ObjectNode"],
        "summary_text": [
            "Deserialization from \"{}\" to ObjectNode field causes \"out of END_OBJECT token\" error"
        ],
        "desc_hints": [
            "MyValue.class",
            "this.object",
            "MyValue",
            "Main.java",
            "com.fasterxml.jackson.databind.node.ObjectNode",
            "ObjectNode.class",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "ObjectNode",
            "io.digdag.cli.Main",
            "BeanDeserializer.java",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject",
            "ObjectMapper",
            "com.fasterxml.jackson.databind.DeserializationContext.mappingException",
            "_readMapAndClose",
            "JsonMappingException.java",
            "JsonNodeFactory.instance",
            "BeanDeserializerBase.java",
            "om.writeValueAsString",
            "Main.main",
            "com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "JsonValue",
            "com.fasterxml.jackson.databind.JsonMappingException.from",
            "getObject",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault",
            "DeserializationContext.java",
            "ObjectMapper.java",
            "JsonNodeDeserializer.java",
            "JsonCreator",
            "object.put",
            "om.readValue",
            "ObjectDeserializer.deserialize",
            "System.out.println"
        ],
        "desc_text": [
            [
                "I found that deserializing from an empty object ({}) to ObjectNode field in a class field fails.",
                ["OB", "SR"]
            ],
            ["Here is the minimum code to reproduce:", ["SR"]],
            ["public class Main", "CODE"],
            ["{", "CODE"],
            ["public static class MyValue", "CODE"],
            ["{", "CODE"],
            ["private final ObjectNode object;", "CODE"],
            ["@JsonCreator", "CODE"],
            [
                "public MyValue(ObjectNode object) { this.object = object; }",
                "CODE"
            ],
            ["@JsonValue", "CODE"],
            ["public ObjectNode getObject() { return object; }", "CODE"],
            ["}", "CODE"],
            ["public static void main(String[] args)", "CODE"],
            ["throws Exception", "CODE"],
            ["{", "CODE"],
            ["ObjectMapper om = new ObjectMapper();", "CODE"],
            [
                "ObjectNode object = new ObjectNode(JsonNodeFactory.instance);",
                "CODE"
            ],
            ["String json = om.writeValueAsString(object);", "CODE"],
            ["System.out.println(\"json: \"+json);", "CODE"],
            [
                "ObjectNode de1 = om.readValue(json, ObjectNode.class);  // this works",
                "CODE"
            ],
            [
                "System.out.println(\"Deserialized to ObjectNode: \"+de1);",
                "CODE"
            ],
            [
                "MyValue de2 = om.readValue(json, MyValue.class);  // but this throws exception",
                "CODE"
            ],
            ["System.out.println(\"Deserialized to MyValue: \"+de2);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Result is:", ["OB"]],
            ["json: {}", []],
            ["Deserialized to ObjectNode: {}", []],
            [
                "Exception in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of com.fasterxml.jackson.databind.node.ObjectNode out of END_OBJECT token",
                ["OB"]
            ],
            ["at [Source: {}; line: 1, column: 2]", []],
            [
                "at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:854)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:850)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ObjectDeserializer.deserialize(JsonNodeDeserializer.java:104)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ObjectDeserializer.deserialize(JsonNodeDeserializer.java:83)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1095)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:294)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:131)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3731)",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2724)",
                []
            ],
            ["at Main.main(Main.java:35)", []],
            ["If the object is not empty (e.g.", ["OB"]],
            ["{\"k\":\"v\"}), it works:", []],
            ["...", []],
            [
                "ObjectNode object = new ObjectNode(JsonNodeFactory.instance);",
                "CODE"
            ],
            ["object.put(\"k\", \"v\"); // added", []],
            ["...", []],
            ["json: {\"k\":\"v\"}", []],
            ["Deserialized to ObjectNode: {\"k\":\"v\"}", []],
            [
                "Deserialized to MyValue: io.digdag.cli.Main$MyValue@17550481",
                []
            ],
            ["Environment:", []],
            ["jackson-core 2.6.2", []],
            ["jackson-databind 2.6.2", []],
            [
                "Java 8 (Java(TM) SE Runtime Environment (build 1.8.0_20-b26))",
                []
            ]
        ]
    },
    "Math-44": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Incomplete reinitialization with some events handling"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "I get a bug with event handling: I track 2 events that occur in the same step, when the first one is accepted, it resets the state but the reinitialization is not complete and the second one becomes unable to find its way.",
                ["OB", "SR"]
            ],
            [
                "I can't give my context, which is rather large, but I tried a patch that works for me, unfortunately it breaks the unit tests.",
                ["OB"]
            ]
        ]
    },
    "Closure-78": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "division by zero wrongly throws JSC_DIVIDE_BY_0_ERROR"
        ],
        "desc_hints": ["es5.github.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["unaliased division by zero `1/0`", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "I expect minified code, but an error is thrown instead.",
                ["OB", "EB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["appspot", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Division by zero is a perfectly sane operation in ECMAScript.",
                ["OB"]
            ],
            ["See 11.5.2 [0] of the ECMAScript 5 specification.", ["OB", "EB"]],
            ["Aliased division by zero `(n=1)/0` is permitted.", ["OB"]],
            ["[0] http://es5.github.com/#x11.5.2", []]
        ]
    },
    "JacksonDatabind-36": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["StdDateFormat.setLenient"],
        "summary_text": ["Allow use\tof StdDateFormat.setLenient()"],
        "desc_hints": [
            "StdDateParser",
            "setLenient",
            "StdDateFormat",
            "DateParser",
            "ObjectMapper",
            "StdDateFomrat",
            "objectMapper.setDateFormat"
        ],
        "desc_text": [
            [
                "ObjectMapper uses the StdDateFormat for date serialization.",
                ["OB"]
            ],
            [
                "Jackson date parsing is lenient by default, so 2015-01-32 gets parsed as 2015-02-01.",
                ["OB"]
            ],
            [
                "Jackson\u2019s StdDateParser is matching default behavior of DateParser.",
                ["OB"]
            ],
            [
                "StdDateParser wasn\u2019t really designed for extension to just enable strict date parsing.",
                ["OB"]
            ],
            [
                "If it were, we could just call objectMapper.setDateFormat(new StdDateFormat().setLenient(false)).",
                []
            ],
            [
                "But StdDateFomrat doesn't support setting lenient to false.",
                ["OB"]
            ],
            ["And i.e.", []],
            [
                "the reason date like 2015-01-32 gets parsed as 2015-02-01 ad Jackson date parsing is lenient by defualt.",
                ["OB"]
            ],
            [
                "Can StdDateFormat can be enhanced to support to non lenient date parsing?",
                []
            ]
        ]
    },
    "JacksonCore-18": {
        "code_elements": [
            "ObjectMapper mapper = new ObjectMapper().enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);",
            "mapper.writeValueAsString(new java.math.BigDecimal(\"9.223372E+1010671858\"));"
        ],
        "stack_traces": [
            "at java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:68)",
            "at java.lang.StringBuilder.<init>(StringBuilder.java:101)",
            "at java.math.BigDecimal.toPlainString(BigDecimal.java:2964)",
            "at com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(WriterBasedJsonGenerator.java:690)",
            "at com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize(NumberSerializer.java:45)",
            "at com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize(NumberSerializer.java:19)",
            "at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:130)",
            "at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3612)",
            "at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:2980)"
        ],
        "summary_hints": ["BigDecimal", "OutOfMemoryError"],
        "summary_text": ["OutOfMemoryError when writing BigDecimal"],
        "desc_hints": [
            "java.math.BigDecimal.toPlainString",
            "BigDecimal.java",
            "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber",
            "_configAndWriteValue",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "WriterBasedJsonGenerator.java",
            "java.math.BigDecimal",
            "java.lang.AbstractStringBuilder",
            "ObjectMapper",
            "FasterXML",
            "java.lang.StringBuilder",
            "DefaultSerializerProvider.java",
            "StringBuilder.java",
            "com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize",
            "mapper.writeValueAsString",
            "AbstractStringBuilder.java",
            "ObjectMapper.java",
            "JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN",
            "java.lang.OutOfMemoryError",
            "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue",
            "NumberSerializer.java"
        ],
        "desc_text": [
            [
                "(note: moved from FasterXML/jackson-databind#1316 reported by @gmethvin)",
                []
            ],
            [
                "When I've enabled the WRITE_BIGDECIMAL_AS_PLAIN setting on Jackson 2.7.5, Jackson will attempt to write out the whole number, no matter how large the exponent.",
                ["OB", "SR"]
            ],
            ["For example, the following code:", ["SR"]],
            [
                "ObjectMapper mapper = new ObjectMapper().enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);",
                "CODE"
            ],
            [
                "mapper.writeValueAsString(new java.math.BigDecimal(\"9.223372E+1010671858\"));",
                "CODE"
            ],
            ["triggers the exception:", ["OB"]],
            ["java.lang.OutOfMemoryError: Java heap space", []],
            [
                "at java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:68)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.StringBuilder.<init>(StringBuilder.java:101)",
                "STACK_TRACE"
            ],
            [
                "at java.math.BigDecimal.toPlainString(BigDecimal.java:2964)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(WriterBasedJsonGenerator.java:690)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize(NumberSerializer.java:45)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize(NumberSerializer.java:19)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:130)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3612)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:2980)",
                "STACK_TRACE"
            ],
            ["...", []],
            ["23 elided", []],
            [
                "I know technically Jackson is doing what you're telling it to do (so if you don't feel this is an issue feel free to close it).",
                []
            ],
            [
                "But it would be nice if WRITE_BIGDECIMAL_AS_PLAIN set a reasonable length on the number, so as not to leave users open to denial of service vulnerabilities.",
                ["OB", "EB", "SR"]
            ],
            [
                "(Actually, I think this might technically be an issue in jackson-core; let me know if I should resubmit.)",
                ["EB"]
            ]
        ]
    },
    "Math-95": {
        "code_elements": ["(getDenominatorDegreesOfFreedom() - 2.0);"],
        "stack_traces": [],
        "summary_hints": [
            "IllegalArgumentsException",
            "denominatorDegreeOfFreedom",
            "UnivariateRealSolverUtils.bracket"
        ],
        "summary_text": [
            "denominatorDegreeOfFreedom in FDistribution leads to IllegalArgumentsException in UnivariateRealSolverUtils.bracket"
        ],
        "desc_hints": [
            "upperBound",
            "getInitialDomain",
            "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket",
            "getDenominatorDegreesOfFreedom",
            "UnivariateRealSolverUtils.bracket",
            "IllegalArgumentsException",
            "commons.math",
            "denominatorDegreeOfFreedom",
            "denominatorDegreesOfFreedom",
            "lowerBound",
            "FDistributionImpl"
        ],
        "desc_text": [
            [
                "We are using the FDistributionImpl from the commons.math project to do",
                ["SR"]
            ],
            [
                "some statistical calculations, namely receiving the upper and lower",
                ["OB"]
            ],
            ["boundaries of a confidence interval.", ["OB"]],
            ["Everything is working fine and the", ["OB"]],
            ["results are matching our reference calculations.", ["OB"]],
            ["However, the FDistribution behaves strange if a", []],
            [
                "denominatorDegreeOfFreedom of 2 is used, with an alpha-value of 0.95.",
                ["OB", "SR"]
            ],
            ["This results in an IllegalArgumentsException, stating:", ["OB"]],
            [
                "Invalid endpoint parameters: lowerBound=0.0 initial=Infinity",
                []
            ],
            ["upperBound=1.7976931348623157E308", []],
            ["coming from", []],
            [
                "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket",
                []
            ],
            [
                "The problem is the 'initial' parameter to that function, wich is",
                []
            ],
            [
                "POSITIVE_INFINITY and therefore not within the boundaries.",
                ["OB"]
            ],
            ["I already", []],
            [
                "pinned down the problem to the FDistributions getInitialDomain()-method,",
                []
            ],
            ["wich goes like:", []],
            ["return getDenominatorDegreesOfFreedom() /", ["OB"]],
            ["(getDenominatorDegreesOfFreedom() - 2.0);", "CODE"],
            [
                "Obviously, in case of denominatorDegreesOfFreedom == 2, this must lead",
                []
            ],
            [
                "to a division-by-zero, resulting in POSTIVE_INFINITY.",
                ["OB", "SR"]
            ],
            ["The result of this", ["OB"]],
            ["operation is then directly passed into the", ["OB"]],
            [
                "UnivariateRealSolverUtils.bracket() - method as second argument.",
                ["OB"]
            ]
        ]
    },
    "Compress-18": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(TarArchiveOutputStream.java:385)",
            "at java.io.OutputStream.write(Unknown Source)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveOutputStream.java:485)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveOutputStream.java:312)",
            "at net.disy.lib.io.tar.TarUtilities.addFile(TarUtilities.java:116)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:158)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
            "at net.disy.lib.io.tar.TarUtilities.tar(TarUtilities.java:77)",
            "at net.disy.lib.io.tar.TarUtilities.tar(TarUtilities.java:42)",
            "at net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.tarTreeStructure(TileCacheSetExporter.java:262)",
            "at net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.export(TileCacheSetExporter.java:111)",
            "at net.disy.gisterm.tilecacheset.desktop.controller.ExportController$1.run(ExportController.java:81)",
            "... 2 more"
        ],
        "summary_hints": [],
        "summary_text": [
            "Long directory names can not be stored in a tar archive because of error when writing PAX headers"
        ],
        "desc_hints": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write",
            "java.io.OutputStream.write",
            "PaxHeaders",
            "TarUtilities.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry",
            "TileCacheSetExporter.java",
            "putArchiveEntry",
            "net.disy.lib.io.tar.TarUtilities.addFile",
            "openstreetmap__osm.disy.net",
            "net.disy.gisterm.tilecacheset.desktop.controller.ExportController",
            "java.io.IOException",
            "net.disy.lib.io.tar.TarUtilities.addDirectory",
            "net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.tarTreeStructure",
            "ExportController.java",
            "net.disy.lib.io.tar.TarUtilities.tar",
            "net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.export",
            "TarArchiveOutputStream.java",
            "TarArchiveOutputStream",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders"
        ],
        "desc_text": [
            [
                "Trying to add a directory to the TAR Archive that has a name longer than 100 bytes generates an exception with a stack trace similar to the following:",
                ["OB", "SR"]
            ],
            [
                "java.io.IOException: request to write '114' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/layers/openstreetmap__osm.disy.net/.tiles/1.0.0/openstreetmap__osm.disy.net/default/'",
                []
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(TarArchiveOutputStream.java:385)",
                "STACK_TRACE"
            ],
            ["at java.io.OutputStream.write(Unknown Source)", "STACK_TRACE"],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveOutputStream.java:485)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveOutputStream.java:312)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addFile(TarUtilities.java:116)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:158)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.tar(TarUtilities.java:77)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.lib.io.tar.TarUtilities.tar(TarUtilities.java:42)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.tarTreeStructure(TileCacheSetExporter.java:262)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.export(TileCacheSetExporter.java:111)",
                "STACK_TRACE"
            ],
            [
                "at net.disy.gisterm.tilecacheset.desktop.controller.ExportController$1.run(ExportController.java:81)",
                "STACK_TRACE"
            ],
            ["... 2 more", "STACK_TRACE"],
            [
                "Informal source code investigation points to the problem being that for directory entries the code assumes that the length is 0 in putArchiveEntry (see TarArchiveOutputStream:321 ) but when writing the data, it actually writes some data (the filename) and the length written (filename size) is larger than the length expected (0).",
                ["OB"]
            ]
        ]
    },
    "Compress-31": {
        "code_elements": [
            "TarArchiveEntry entry = tarIn.getNextTarEntry();",
            "while (entry != null) {",
            "File path = new File(tempDirPath, entry.getName());",
            "if (entry.isDirectory()) {",
            "path.mkdirs();",
            "} else {",
            "path.createNewFile();",
            "byte[] read = new byte[2048];",
            "BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(path));",
            "int len;",
            "while ((len = tarIn.read(read)) != -1) {",
            "bout.write(read, 0, len);",
            "System.out.print(new String(read, \"UTF-8\"));",
            "}",
            "bout.close();",
            "read = null;",
            "}",
            "entry = tarIn.getNextTarEntry();",
            "}",
            "tarIn.close();"
        ],
        "stack_traces": [
            "Caused by: java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '05412{NUL}",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:138)",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(TarUtils.java:169)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:951)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:255)"
        ],
        "summary_hints": [],
        "summary_text": [
            "Illegal argument exception when extracting .tgz file"
        ],
        "desc_hints": [
            "TarArchiveEntry.java",
            "org.glassfish.jersey.servlet.WebComponent.service",
            "Thread.java",
            "org.glassfish.grizzly.filterchain.DefaultFilterChain.process",
            "HttpHandler.java",
            "org.apache.catalina.core.StandardHostValve.invoke",
            "ContainerMapper.java",
            "ExecutorResolver.java",
            "org.glassfish.jersey.message.internal.StreamingOutputProvider.writeTo",
            "org.glassfish.grizzly.http.server.HttpHandler.runService",
            "tarIn.read",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary",
            "FileInputStream",
            "MappableExceptionWrapperInterceptor.java",
            "com.sun.enterprise.web.WebPipeline.invoke",
            "AbstractIOStrategy.java",
            "StreamingOutputProvider.java",
            "java.lang.IllegalArgumentException",
            "org.glassfish.jersey.process.internal.RequestScope.runInScope",
            "org.unavco.ws.cache.ProcessDataFile.getFileData",
            "TarUtils.java",
            "WebComponent.java",
            "org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo",
            "StandardWrapper.java",
            "ProcessorExecutor.java",
            "TarArchiveInputStream.getNextTarEntry",
            "ProcessDataFile.java",
            "org.unavco.ws.cache.ProcessDataFile.getResultSet",
            "tarIn",
            "org.apache.catalina.core.StandardContextValve.invoke",
            "org.glassfish.jersey.servlet.ServletContainer.service",
            "org.glassfish.grizzly.http.server.HttpServerFilter.handleRead",
            "org.glassfish.grizzly.ProcessorExecutor.execute",
            "ApplicationHandler.java",
            "MessageBodyFactory.java",
            "TarArchiveEntry",
            "fileName",
            "TiltDsClient.java",
            "org.apache.catalina.core.StandardPipeline.doInvoke",
            "Worker.run",
            "org.glassfish.grizzly.filterchain.DefaultFilterChain.execute",
            "BufferedOutputStream",
            "Worker.doWork",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry",
            "org.unavco.ws.tilt.TiltDsClient.write",
            "org.apache.catalina.core.StandardWrapper.service",
            "TCPNIOTransport.java",
            "org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0",
            "org.glassfish.grizzly.threadpool.AbstractThreadPool",
            "AbstractThreadPool.java",
            "java.io.IOException",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader",
            "Responder.process",
            "System.out.print",
            "org.apache.catalina.core.StandardPipeline.invoke",
            "levelValue",
            "TerminalWriterInterceptor.aroundWriteTo",
            "RequestScope.java",
            "org.glassfish.grizzly.http.server.HttpHandler.doHandle",
            "tempDirPath",
            "org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart",
            "org.apache.catalina.core.ApplicationFilterChain.doFilter",
            "org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter",
            "org.glassfish.jersey.server.ServerRuntime.process",
            "Responder.processResponse",
            "org.apache.catalina.core.StandardWrapperValve.invoke",
            "ExtractTiltFile.java",
            "_ThreadName",
            "org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo",
            "org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo",
            "path.mkdirs",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
            "org.apache.catalina.connector.CoyoteAdapter.service",
            "timeMillis",
            "TarArchiveInputStream",
            "org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access",
            "java.lang.Thread.run",
            "JsonWithPaddingInterceptor.java",
            "StandardContextValve.java",
            "bout.write",
            "StandardPipeline.java",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal",
            "ApplicationFilterChain.java",
            "StandardWrapperValve.java",
            "org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent",
            "entry.getName",
            "path.createNewFile",
            "WebPipeline.java",
            "org.glassfish.jersey.internal.Errors.process",
            "BufferedInputStream",
            "_ThreadID",
            "StandardHostValve.java",
            "FileOutputStream",
            "org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed",
            "org.glassfish.jersey.server.ServerRuntime",
            "org.apache.catalina.connector.CoyoteAdapter.doService",
            "tarIn.close",
            "org.unavco.ws.tilt.ExtractTiltFile.run",
            "org.glassfish.grizzly.strategies.WorkerThreadIOStrategy",
            "ServletContainer.java",
            "org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent",
            "GZIPInputStream",
            "org.apache.catalina.core.ApplicationFilterChain.internalDoFilter",
            "org.glassfish.jersey.server.ApplicationHandler.handle",
            "TarArchiveInputStream.java",
            "WriterInterceptorExecutor.java",
            "DefaultFilterChain.java",
            "CoyoteAdapter.java",
            "org.glassfish.grizzly.filterchain.ExecutorResolver",
            "org.glassfish.jersey.message.internal.WriterInterceptorExecutor",
            "Errors.java",
            "org.glassfish.jersey.internal.Errors",
            "com.thetransactioncompany.cors.CORSFilter.doFilter",
            "entry.isDirectory",
            "tarIn.getNextTarEntry",
            "HttpServerFilter.java",
            "WorkerThreadRunnable.run",
            "Responder.writeResponse",
            "bout.close",
            "org.unavco.ws.tilt.ExtractTiltFile.extractFile",
            "com.sun.enterprise.v3.services.impl.ContainerMapper.service",
            "WorkerThreadIOStrategy.java",
            "ServerRuntime.java"
        ],
        "desc_text": [
            [
                "When attempting to unpack a .tgz file, I am receiving the illegal argument exception: java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '05412",
                ["OB", "SR"]
            ],
            ["{NUL}11' len=8.", ["OB"]],
            [
                "This is causing a java.io.IOException: Error detected parsing the header error.",
                ["OB"]
            ],
            [
                "This is being thrown when the function TarArchiveInputStream.getNextTarEntry() is called.",
                ["OB"]
            ],
            ["Here is the code I am using.", ["SR"]],
            ["TarArchiveInputStream tarIn = new TarArchiveInputStream(", []],
            ["new GZIPInputStream(", []],
            ["new BufferedInputStream(", []],
            ["new FileInputStream(", []],
            ["tempDirPath + fileName))));", []],
            ["TarArchiveEntry entry = tarIn.getNextTarEntry();", "CODE"],
            ["while (entry != null) {", "CODE"],
            ["File path = new File(tempDirPath, entry.getName());", "CODE"],
            ["if (entry.isDirectory()) {", "CODE"],
            ["path.mkdirs();", "CODE"],
            ["} else {", "CODE"],
            ["path.createNewFile();", "CODE"],
            ["byte[] read = new byte[2048];", "CODE"],
            [
                "BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(path));",
                "CODE"
            ],
            ["int len;", "CODE"],
            ["while ((len = tarIn.read(read)) != -1) {", "CODE"],
            ["bout.write(read, 0, len);", "CODE"],
            ["System.out.print(new String(read, \"UTF-8\"));", "CODE"],
            ["}", "CODE"],
            ["bout.close();", "CODE"],
            ["read = null;", "CODE"],
            ["}", "CODE"],
            ["entry = tarIn.getNextTarEntry();", "CODE"],
            ["}", "CODE"],
            ["tarIn.close();", "CODE"],
            ["Here is the full stack trace:", ["OB"]],
            [
                "[2015-02-12T23:17:31.944+0000] [glassfish 4.0] [SEVERE] [] [] [tid: _ThreadID=123 _ThreadName=Thread-4] [timeMillis: 1423783051944] [levelValue: 1000] [[",
                []
            ],
            ["java.io.IOException: Error detected parsing the header", ["OB"]],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:257)",
                []
            ],
            [
                "at org.unavco.ws.tilt.ExtractTiltFile.extractFile(ExtractTiltFile.java:125)",
                []
            ],
            [
                "at org.unavco.ws.tilt.ExtractTiltFile.run(ExtractTiltFile.java:59)",
                []
            ],
            [
                "at org.unavco.ws.cache.ProcessDataFile.getFileData(ProcessDataFile.java:100)",
                []
            ],
            [
                "at org.unavco.ws.cache.ProcessDataFile.getResultSet(ProcessDataFile.java:81)",
                []
            ],
            [
                "at org.unavco.ws.tilt.TiltDsClient.write(TiltDsClient.java:47)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.StreamingOutputProvider.writeTo(StreamingOutputProvider.java:76)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.StreamingOutputProvider.writeTo(StreamingOutputProvider.java:58)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:194)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:139)",
                []
            ],
            [
                "at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:103)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:139)",
                []
            ],
            [
                "at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:88)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:139)",
                []
            ],
            [
                "at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1005)",
                []
            ],
            [
                "at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:471)",
                []
            ],
            [
                "at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:333)",
                []
            ],
            [
                "at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:323)",
                []
            ],
            [
                "at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:227)",
                []
            ],
            [
                "at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)",
                []
            ],
            [
                "at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)",
                []
            ],
            [
                "at org.glassfish.jersey.internal.Errors.process(Errors.java:315)",
                []
            ],
            [
                "at org.glassfish.jersey.internal.Errors.process(Errors.java:297)",
                []
            ],
            [
                "at org.glassfish.jersey.internal.Errors.process(Errors.java:267)",
                []
            ],
            [
                "at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)",
                []
            ],
            [
                "at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:198)",
                []
            ],
            [
                "at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:946)",
                []
            ],
            [
                "at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:323)",
                []
            ],
            [
                "at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:372)",
                []
            ],
            [
                "at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:335)",
                []
            ],
            [
                "at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:218)",
                []
            ],
            [
                "at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)",
                []
            ],
            [
                "at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:344)",
                []
            ],
            [
                "at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214)",
                []
            ],
            [
                "at com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source)",
                []
            ],
            [
                "at com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source)",
                []
            ],
            [
                "at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:256)",
                []
            ],
            [
                "at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214)",
                []
            ],
            [
                "at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:316)",
                []
            ],
            [
                "at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)",
                []
            ],
            [
                "at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)",
                []
            ],
            [
                "at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)",
                []
            ],
            [
                "at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)",
                []
            ],
            [
                "at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)",
                []
            ],
            [
                "at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:357)",
                []
            ],
            [
                "at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:260)",
                []
            ],
            [
                "at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:188)",
                []
            ],
            [
                "at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191)",
                []
            ],
            [
                "at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168)",
                []
            ],
            [
                "at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189)",
                []
            ],
            [
                "at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)",
                []
            ],
            [
                "at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288)",
                []
            ],
            [
                "at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206)",
                []
            ],
            [
                "at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136)",
                []
            ],
            [
                "at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114)",
                []
            ],
            [
                "at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)",
                []
            ],
            [
                "at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838)",
                []
            ],
            [
                "at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113)",
                []
            ],
            [
                "at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115)",
                []
            ],
            [
                "at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55)",
                []
            ],
            [
                "at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135)",
                []
            ],
            [
                "at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564)",
                []
            ],
            [
                "at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544)",
                []
            ],
            ["at java.lang.Thread.run(Thread.java:745)", []],
            [
                "Caused by: java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '05412{NUL}",
                "STACK_TRACE"
            ],
            ["11' len=8", []],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:138)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(TarUtils.java:169)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:951)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:255)",
                "STACK_TRACE"
            ],
            ["...", []],
            ["63 more]]", []]
        ]
    },
    "Math-64": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Inconsistent result from Levenberg-Marquardt"],
        "desc_hints": ["doOptimize", "VectorialPointValuePair"],
        "desc_text": [
            [
                "Levenberg-Marquardt (its method doOptimize) returns a VectorialPointValuePair.",
                ["OB"]
            ],
            [
                "However, the class holds the optimum point, the vector of the objective function, the cost and residuals.",
                ["OB"]
            ],
            [
                "The value returns by doOptimize does not always corresponds to the point which leads to the residuals and cost",
                ["OB"]
            ]
        ]
    },
    "Lang-51": {
        "code_elements": [
            "assertEquals(false, BooleanUtils.toBoolean(\"tru\"));"
        ],
        "stack_traces": [],
        "summary_hints": [
            "BooleanUtils.toBoolean",
            "StringIndexOutOfBoundsException"
        ],
        "summary_text": [
            "BooleanUtils.toBoolean() - invalid drop-thru in case statement causes StringIndexOutOfBoundsException"
        ],
        "desc_hints": [
            "BooleanUtils.toBoolean",
            "StringIndexOutOfBoundsException",
            "assertEquals"
        ],
        "desc_text": [
            [
                "The method BooleanUtils.toBoolean() has a case statement; case 3 drops through to case 4; this can cause StringIndexOutOfBoundsException, for example with the test:",
                ["SR"]
            ],
            ["assertEquals(false, BooleanUtils.toBoolean(\"tru\"));", "CODE"],
            ["The end of case 3 should return false.", ["OB", "EB", "SR"]],
            ["Patch to follow for source and unit test.", ["OB", "SR"]]
        ]
    },
    "Lang-62": {
        "code_elements": [
            "public void testNumberOverflow() throws Exception",
            "{",
            "doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");",
            "doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");",
            "doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");",
            "doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["unescapeXml"],
        "summary_text": [
            "unescapeXml(\"&12345678;\") should be \"&12345678;\""
        ],
        "desc_hints": [
            "testNumberOverflow",
            "doTestUnescapeEntity",
            "0xFFFF",
            "EntitiesTest.java"
        ],
        "desc_text": [
            ["Following test (in EntitiesTest.java) fails:", ["OB", "SR"]],
            ["public void testNumberOverflow() throws Exception", "CODE"],
            ["{", "CODE"],
            ["doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");", "CODE"],
            [
                "doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");",
                "CODE"
            ],
            [
                "doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");",
                "CODE"
            ],
            [
                "doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "Maximim value for char is 0xFFFF, so &#12345678; is invalid entity reference, and so should be left as is.",
                ["EB"]
            ]
        ]
    },
    "Math-93": {
        "code_elements": ["for (int i = 1; i <= 20; i++) {"],
        "stack_traces": [],
        "summary_hints": ["MathUtils.factorial"],
        "summary_text": ["MathUtils.factorial(n) fails for n >= 17"],
        "desc_hints": ["MathUtilsTest.testFactorial", "MathUtils.factorial"],
        "desc_text": [
            [
                "The result of MathUtils.factorial( n ) for n = 17, 18, 19 is wrong, probably because of rounding errors in the double calculations.",
                ["OB"]
            ],
            ["Replace the first line of MathUtilsTest.testFactorial() by", []],
            ["for (int i = 1; i <= 20; i++) {", "CODE"],
            [
                "to check all valid arguments for the long result and see the failure.",
                ["OB"]
            ],
            [
                "I suggest implementing a simple loop to multiply the long result - or even using a precomputed long[] - instead of adding logarithms.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Lang-37": {
        "code_elements": [],
        "stack_traces": [
            "at java.lang.System.arraycopy(Native Method)",
            "at org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)"
        ],
        "summary_hints": ["ArrayUtils.addAll"],
        "summary_text": [
            "ArrayUtils.addAll(T[] array1, T... array2) does not handle mixed types very well"
        ],
        "desc_hints": [
            "ArrayUtils.addAll",
            "java.lang.ArrayStoreException",
            "ArrayUtils.java",
            "org.apache.commons.lang3.ArrayUtils.addAll",
            "IlegalArgumentException",
            "java.lang.System.arraycopy"
        ],
        "desc_text": [
            ["ArrayUtils.addAll(T[] array1, T...", ["OB"]],
            ["array2) does not handle mixed array types very well.", ["OB"]],
            ["The stack trace for", ["OB"]],
            ["Number[] st = ArrayUtils.addAll(new Integer[]", []],
            ["{1}", []],
            [", new Long[]", []],
            ["{2L}", []],
            [");", []],
            ["starts:", []],
            ["java.lang.ArrayStoreException", []],
            ["at java.lang.System.arraycopy(Native Method)", "STACK_TRACE"],
            [
                "at org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)",
                "STACK_TRACE"
            ],
            ["which is not all that obvious.", ["OB"]],
            [
                "It would be a lot clearer if the method threw an IlegalArgumentException or similar.",
                []
            ]
        ]
    },
    "Jsoup-26": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NullpointerException"],
        "summary_text": [
            "NullpointerException when applying Cleaner to a frameset"
        ],
        "desc_hints": [
            "copySafeNodes",
            "NullPointerException",
            "github.com",
            "nullpointerException",
            "Cleaner.java",
            "Cleaner.clean",
            "document.body"
        ],
        "desc_text": [
            ["To reproduce:", ["SR"]],
            ["Create/find a html document of a frameset.", ["OB"]],
            ["Parse the html.", ["OB"]],
            [
                "Create a Cleaner instance and call the clean method with the document from step 2.",
                ["OB", "SR"]
            ],
            ["NullPointerException", ["OB"]],
            ["Cause:", []],
            [
                "In Cleaner.clean(Document) (https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/safety/Cleaner.java#L43) the copySafeNodes is called with the document.body().",
                ["OB", "SR"]
            ],
            [
                "However, this is null when handling a frameset document.",
                ["OB"]
            ],
            ["Expected:", ["EB"]],
            ["An empty document or perhaps null returned.", ["OB"]],
            ["But not a nullpointerException.", ["OB"]]
        ]
    },
    "JacksonDatabind-66": {
        "code_elements": [
            "Object key = keyDes.deserializeKey(keyStr, ctxt);",
            "Object result = _delegate.deserialize(ctxt.getParser(), ctxt);",
            "import com.fasterxml.jackson.annotation.JsonTypeInfo;",
            "import java.util.Map;",
            "import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;",
            "public class SuperType {",
            "private Map<SuperTypeEnum, String> someMap;",
            "public Map<SuperTypeEnum, String> getSomeMap() {",
            "return someMap;",
            "}",
            "public void setSomeMap(Map<SuperTypeEnum, String> someMap) {",
            "this.someMap = someMap;",
            "}",
            "}",
            "}",
            "import com.fasterxml.jackson.core.JsonParser;",
            "import com.fasterxml.jackson.databind.DeserializationContext;",
            "import com.fasterxml.jackson.databind.JsonDeserializer;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.module.SimpleModule;",
            "import org.junit.*;",
            "import java.io.IOException;",
            "import static org.junit.Assert.assertEquals;",
            "public class TestDeserializeType {",
            "@Test",
            "public void testNoTypeShouldDeserialize() throws IOException {",
            "String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";",
            "ObjectMapper mapper = new ObjectMapper();",
            "SuperType superType = mapper.readValue(json, SuperType.class);",
            "assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));",
            "}",
            "@Test",
            "public void testNoTypeWithModuleShouldDeserialize() throws IOException {",
            "String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";",
            "ObjectMapper mapper = new ObjectMapper();",
            "SimpleModule simpleModule = new SimpleModule();",
            "simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {",
            "@Override",
            "public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)",
            "throws IOException {",
            "return SuperTypeEnum.valueOf(jsonParser.getText());",
            "}",
            "});",
            "mapper.registerModule(simpleModule);",
            "SuperType superType = mapper.readValue(json, SuperType.class);",
            "assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Failure with custom Enum key deserializer, polymorphic types"
        ],
        "desc_hints": [
            "defaultImpl",
            "assertEquals",
            "SuperTypeEnum.FOO",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "JsonTypeInfo",
            "ctxt.getParser",
            "simpleModule.addDeserializer",
            "SuperType",
            "getSomeMap",
            "org.junit",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "someMap.FOO",
            "testNoTypeShouldDeserialize",
            "keyDes.deserializeKey",
            "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME",
            "superType.getSomeMap",
            "JsonParser",
            "StdKeyDeserializer.java",
            "jsonParser.getText",
            "SuperTypeEnum.class",
            "ObjectMapper",
            "FasterXML",
            "setSomeMap",
            "com.fasterxml.jackson.core.JsonParser",
            "KeyDeserializer",
            "delegate.deserialize",
            "testNoTypeWithModuleShouldDeserialize",
            "com.fasterxml.jackson.databind.JsonDeserializer",
            "github.com",
            "simpleModule",
            "com.fasterxml.jackson.databind.module.SimpleModule",
            "mapper.registerModule",
            "org.junit.Assert.assertEquals",
            "TestDeserializeType",
            "java.io.IOException",
            "mapper.readValue",
            "jsonParser",
            "MapDeserializer",
            "deserializationContext",
            "SimpleModule",
            "SuperTypeEnum",
            "keyStr",
            "superType",
            "nextToken",
            "java.util.Map",
            "StdKeyDeserializer.DelegatingKD",
            "MapDeserializer.java",
            "DeserializationContext",
            "SuperType.class",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "JsonDeserializer",
            "this.someMap",
            "SuperTypeEnum.valueOf",
            "someMap"
        ],
        "desc_text": [
            [
                "Normally the JsonParser and the DeserializationContext is passed to a Module's JsonDeserializer.",
                ["OB"]
            ],
            [
                "However, in the MapDeserializer, when deserializing a Map with an Enum key, the KeyDeserializer doesn't accept the JsonParser as an argument:",
                ["OB"]
            ],
            [
                "https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java#L453",
                []
            ],
            ["Object key = keyDes.deserializeKey(keyStr, ctxt);", "CODE"],
            [
                "and the StdKeyDeserializer.DelegatingKD uses the context's parser",
                ["OB"]
            ],
            [
                "https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java#L315",
                []
            ],
            [
                "Object result = _delegate.deserialize(ctxt.getParser(), ctxt);",
                "CODE"
            ],
            [
                "When the type info field is missing from the json, the DeserializationContext's JsonParser's token is END_OBJECT (presumably because it nextToken'd through the object to find type and whiffed).",
                ["OB"]
            ],
            [
                "This makes the module fail since the JsonParser in the Module is wrong, i.e.",
                ["OB"]
            ],
            ["not the same as the JsonParser in the MapDeserializer.", ["OB"]],
            ["Class:", []],
            ["import com.fasterxml.jackson.annotation.JsonTypeInfo;", "CODE"],
            ["import java.util.Map;", "CODE"],
            [
                "import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;",
                "CODE"
            ],
            [
                "@JsonTypeInfo(use = NAME, property = \"@type\", defaultImpl = SuperType.class)",
                []
            ],
            ["public class SuperType {", "CODE"],
            ["private Map<SuperTypeEnum, String> someMap;", "CODE"],
            ["public Map<SuperTypeEnum, String> getSomeMap() {", "CODE"],
            ["return someMap;", "CODE"],
            ["}", "CODE"],
            [
                "public void setSomeMap(Map<SuperTypeEnum, String> someMap) {",
                "CODE"
            ],
            ["this.someMap = someMap;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Enum:", []],
            ["public enum SuperTypeEnum {", []],
            ["FOO", []],
            ["}", "CODE"],
            ["Test:", ["SR"]],
            ["import com.fasterxml.jackson.core.JsonParser;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.DeserializationContext;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.JsonDeserializer;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.module.SimpleModule;",
                "CODE"
            ],
            ["import org.junit.*;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["public class TestDeserializeType {", "CODE"],
            ["@Test", "CODE"],
            [
                "public void testNoTypeShouldDeserialize() throws IOException {",
                "CODE"
            ],
            [
                "String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "SuperType superType = mapper.readValue(json, SuperType.class);",
                "CODE"
            ],
            [
                "assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            [
                "public void testNoTypeWithModuleShouldDeserialize() throws IOException {",
                "CODE"
            ],
            [
                "String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["SimpleModule simpleModule = new SimpleModule();", "CODE"],
            [
                "simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)",
                "CODE"
            ],
            ["throws IOException {", "CODE"],
            ["return SuperTypeEnum.valueOf(jsonParser.getText());", "CODE"],
            ["}", "CODE"],
            ["});", "CODE"],
            ["mapper.registerModule(simpleModule);", "CODE"],
            [
                "SuperType superType = mapper.readValue(json, SuperType.class);",
                "CODE"
            ],
            [
                "assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-24": {
        "code_elements": [
            "public static void main(String[] args) throws JsonProcessingException {",
            "System.out.println(createObjectMapper()",
            ".writeValueAsString(new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC)));",
            "}",
            "private static ObjectMapper createObjectMapper() {",
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.registerModule(createJodaModule());",
            "mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);",
            "System.out.println(mapper.getSerializationConfig().getTimeZone());",
            "mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));",
            "System.out.println(mapper.getSerializationConfig().getTimeZone());",
            "return mapper;",
            "}",
            "private static SimpleModule createJodaModule() {",
            "SimpleModule module = new SimpleModule();",
            "module.addSerializer(DateTime.class, new DateTimeSerializer(",
            "new JacksonJodaDateFormat(DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\")",
            ".withZoneUTC())));",
            "return module;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DateFormat", "DateTime", "ObjectMapper"],
        "summary_text": [
            "Configuring an ObjectMapper's DateFormat changes time zone when serialising Joda DateTime"
        ],
        "desc_hints": [
            "endMonth",
            "mapper.configure",
            "DateFormat",
            "withZoneUTC",
            "JsonProcessingException",
            "java.util.SimpleTimeZone",
            "startTime",
            "endTimeMode",
            "DateTime",
            "mapper.getSerializationConfig",
            "useDaylight",
            "startYear",
            "lastRule",
            "startDay",
            "SerializationFeature.WRITE_DATES_AS_TIMESTAMPS",
            "createObjectMapper",
            "SimpleDateFormat",
            "endMode",
            "endTime",
            "ObjectMapper",
            "getTimeZone",
            "module.addSerializer",
            "sun.util.calendar.ZoneInfo",
            "endDayOfWeek",
            "startDayOfWeek",
            "endDay",
            "createJodaModule",
            "mapper.registerModule",
            "dstSavings",
            "startMode",
            "startMonth",
            "mapper.setDateFormat",
            "SimpleModule",
            "writeValueAsString",
            "JacksonJodaDateFormat",
            "DateTimeSerializer",
            "DateTimeFormat.forPattern",
            "startTimeMode",
            "DateTime.class",
            "System.out.println",
            "DateTimeZone.UTC"
        ],
        "desc_text": [
            [
                "The serialisation of Joda DateTime instances behaves differently in 2.6.0 vs 2.5.4 when the ObjectMapper's had its DateFormat configured.",
                ["OB"]
            ],
            [
                "The behaviour change is illustrated by the following code:",
                ["OB", "SR"]
            ],
            [
                "public static void main(String[] args) throws JsonProcessingException {",
                "CODE"
            ],
            ["System.out.println(createObjectMapper()", "CODE"],
            [
                ".writeValueAsString(new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC)));",
                "CODE"
            ],
            ["}", "CODE"],
            ["private static ObjectMapper createObjectMapper() {", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["mapper.registerModule(createJodaModule());", "CODE"],
            [
                "mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);",
                "CODE"
            ],
            [
                "System.out.println(mapper.getSerializationConfig().getTimeZone());",
                "CODE"
            ],
            [
                "mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));",
                "CODE"
            ],
            [
                "System.out.println(mapper.getSerializationConfig().getTimeZone());",
                "CODE"
            ],
            ["return mapper;", "CODE"],
            ["}", "CODE"],
            ["private static SimpleModule createJodaModule() {", "CODE"],
            ["SimpleModule module = new SimpleModule();", "CODE"],
            [
                "module.addSerializer(DateTime.class, new DateTimeSerializer(",
                "CODE"
            ],
            [
                "new JacksonJodaDateFormat(DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\")",
                "CODE"
            ],
            [".withZoneUTC())));", "CODE"],
            ["return module;", "CODE"],
            ["}", "CODE"],
            ["When run with Jackson 2.5.4 the output is:", ["OB"]],
            [
                "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]",
                []
            ],
            [
                "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]",
                []
            ],
            ["\"1988-06-25 20:30:00\"", ["OB"]],
            ["When run with Jackson 2.6.0 the output is:", ["OB"]],
            [
                "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]",
                []
            ],
            [
                "sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]]",
                ["SR"]
            ],
            ["\"1988-06-25 21:30:00\"", ["OB"]],
            ["It looks like the fix for #824 is the cause.", ["OB"]],
            [
                "In 2.6, the call to mapper.setDateFormat causes the ObjectMapper's time zone to be set to the JVM's default time zone.",
                ["OB"]
            ],
            [
                "In 2.5.x, calling mapper.setDateFormat has no effect on its time zone.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-52": {
        "code_elements": [
            "final Document doc = Jsoup.connect(\"http://...\").parser(Parser.xmlParser()).get();",
            "System.out.println(\"charset=\" + doc.charset());"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Should detect ?xml encoding charset"],
        "desc_hints": [
            "hoy.xml",
            "doc.charset",
            "java.nio.charset.CharsetICU",
            "Jsoup.connect",
            "www.elacontecer.com.uy",
            "Parser.xmlParser",
            "System.out.println"
        ],
        "desc_text": [
            ["Hi,", []],
            [
                "For example this is target URL: http://www.elacontecer.com.uy/rss/hoy.xml, its charset is ISO-8859-1.",
                ["SR"]
            ],
            ["I use Jsoup like this:", ["SR"]],
            [
                "final Document doc = Jsoup.connect(\"http://...\").parser(Parser.xmlParser()).get();",
                "CODE"
            ],
            ["System.out.println(\"charset=\" + doc.charset());", "CODE"],
            ["The result is: java.nio.charset.CharsetICU[UTF-8]", ["OB"]],
            ["Would you please check to see if it's a bug?", []],
            ["Thanks,", []]
        ]
    },
    "Math-76": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["NaN singular value from SVD"],
        "desc_hints": [
            "NaNs",
            "SingularValueDecompositionImpl",
            "decomp.getSingularValues",
            "org.apache.commons.math.linear",
            "Array2DRowRealMatrix",
            "getSolver"
        ],
        "desc_text": [
            ["The following jython code", ["OB", "SR"]],
            ["Start code", ["OB"]],
            ["from org.apache.commons.math.linear import *", []],
            ["Alist = [[1.0, 2.0, 3.0],[2.0,3.0,4.0],[3.0,5.0,7.0]]", []],
            ["A = Array2DRowRealMatrix(Alist)", []],
            ["decomp = SingularValueDecompositionImpl(A)", []],
            ["print decomp.getSingularValues()", ["OB"]],
            ["End code", []],
            ["prints", ["OB"]],
            ["array('d', [11.218599757513008, 0.3781791648535976, nan])", []],
            [
                "The last singular value should be something very close to 0 since the matrix",
                ["EB", "SR"]
            ],
            ["is rank deficient.", ["OB"]],
            [
                "When i use the result from getSolver() to solve a system, i end",
                ["OB"]
            ],
            ["up with a bunch of NaNs in the solution.", ["OB"]],
            ["I assumed i would get back a least squares solution.", ["OB"]],
            [
                "Does this SVD implementation require that the matrix be full rank?",
                []
            ],
            ["If so, then i would expect", ["EB"]],
            [
                "an exception to be thrown from the constructor or one of the methods.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-97": {
        "code_elements": [
            "Produced output from running testCase.test()",
            "{\"data\":{\"aStr\":\"The value is: Hello!\"}}",
            "import com.fasterxml.jackson.core.JsonGenerator;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.SerializerProvider;",
            "import com.fasterxml.jackson.databind.annotation.JsonSerialize;",
            "import com.fasterxml.jackson.databind.node.ObjectNode;",
            "import com.fasterxml.jackson.databind.ser.std.StdSerializer;",
            "import java.io.IOException;",
            "import java.util.HashMap;",
            "import java.util.Map;",
            "public class TestCase {",
            "public final static ObjectMapper mapper = new ObjectMapper();",
            "@JsonSerialize(using = TestCase.CustomSer.class)",
            "public static class Data {",
            "public String aStr;",
            "}",
            "public static class CustomSer extends StdSerializer<Data> {",
            "public CustomSer() {",
            "super(Data.class);",
            "}",
            "@Override",
            "public void serialize(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {",
            "String attrStr = (String) provider.getAttribute(\"myAttr\");",
            "gen.writeStartObject();",
            "gen.writeObjectField(\"aStr\", \"The value is: \" + (attrStr == null ? \"NULL\" : attrStr));",
            "gen.writeEndObject();",
            "}",
            "}",
            "public static void test() throws IOException {",
            "Data data = new Data();",
            "data.aStr = \"Hello\";",
            "Map<String, Object> mapTest = new HashMap<>();",
            "mapTest.put(\"data\", data);",
            "ObjectNode treeTest = mapper.createObjectNode();",
            "treeTest.putPOJO(\"data\", data);",
            "String mapOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(mapTest);",
            "System.out.println(mapOut);",
            "String treeOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(treeTest);",
            "System.out.println(treeOut);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Context attributes are not passed/available to custom serializer if object is in POJO"
        ],
        "desc_hints": [
            "SerializerProvider",
            "mapTest.put",
            "com.fasterxml.jackson.databind.node.ObjectNode",
            "treeTest",
            "com.fasterxml.jackson.databind.ser.std.StdSerializer",
            "provider.getAttribute",
            "withAttribute",
            "mapTest",
            "mapOut",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "testCase.test",
            "gen.writeStartObject",
            "gen.writeEndObject",
            "mapper.writer",
            "ObjectNode",
            "com.fasterxml.jackson.core.JsonGenerator",
            "gen.writeObjectField",
            "JsonSerialize",
            "data.aStr",
            "ObjectMapper",
            "java.util.HashMap",
            "com.fasterxml.jackson.databind.annotation.JsonSerialize",
            "mapper.createObjectNode",
            "CustomSer",
            "com.fasterxml.jackson.databind.SerializerProvider",
            "JsonGenerator",
            "treeOut",
            "Data.class",
            "java.io.IOException",
            "myAttr",
            "TestCase.CustomSer.class",
            "attrStr",
            "writeValueAsString",
            "treeTest.putPOJO",
            "java.util.Map",
            "TestCase",
            "HashMap",
            "System.out.println",
            "StdSerializer"
        ],
        "desc_text": [
            [
                "Below is a test case where I create a custom serializer and use it to serialize an object 1) in a HashMap and 2) in an ObjectNode.",
                ["OB", "SR"]
            ],
            [
                "In both cases I pass attribute to the serializer like this:",
                ["OB", "SR"]
            ],
            ["mapper.writer().withAttribute(\"myAttr\", \"Hello!\")", ["OB"]],
            [
                "Serializing HashMap works as expected, but during ObjectNode serialization the attribute is null .",
                ["OB", "EB"]
            ],
            [
                "It seems that in both cases the custom serializer should get access to the passed attribute and so both lines in the output should contain \"Hello!\"",
                ["OB", "EB"]
            ],
            ["Produced output from running testCase.test()", "CODE"],
            ["{\"data\":{\"aStr\":\"The value is: Hello!\"}}", "CODE"],
            ["{\"data\":{\"aStr\":\"The value is: NULL\"}}", []],
            ["Test case:", []],
            ["import com.fasterxml.jackson.core.JsonGenerator;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.SerializerProvider;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.annotation.JsonSerialize;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.node.ObjectNode;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.ser.std.StdSerializer;",
                "CODE"
            ],
            ["import java.io.IOException;", "CODE"],
            ["import java.util.HashMap;", "CODE"],
            ["import java.util.Map;", "CODE"],
            ["public class TestCase {", "CODE"],
            [
                "public final static ObjectMapper mapper = new ObjectMapper();",
                "CODE"
            ],
            ["@JsonSerialize(using = TestCase.CustomSer.class)", "CODE"],
            ["public static class Data {", "CODE"],
            ["public String aStr;", "CODE"],
            ["}", "CODE"],
            [
                "public static class CustomSer extends StdSerializer<Data> {",
                "CODE"
            ],
            ["public CustomSer() {", "CODE"],
            ["super(Data.class);", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            [
                "public void serialize(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {",
                "CODE"
            ],
            [
                "String attrStr = (String) provider.getAttribute(\"myAttr\");",
                "CODE"
            ],
            ["gen.writeStartObject();", "CODE"],
            [
                "gen.writeObjectField(\"aStr\", \"The value is: \" + (attrStr == null ? \"NULL\" : attrStr));",
                "CODE"
            ],
            ["gen.writeEndObject();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public static void test() throws IOException {", "CODE"],
            ["Data data = new Data();", "CODE"],
            ["data.aStr = \"Hello\";", "CODE"],
            ["Map<String, Object> mapTest = new HashMap<>();", "CODE"],
            ["mapTest.put(\"data\", data);", "CODE"],
            ["ObjectNode treeTest = mapper.createObjectNode();", "CODE"],
            ["treeTest.putPOJO(\"data\", data);", "CODE"],
            [
                "String mapOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(mapTest);",
                "CODE"
            ],
            ["System.out.println(mapOut);", "CODE"],
            [
                "String treeOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(treeTest);",
                "CODE"
            ],
            ["System.out.println(treeOut);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Jsoup-91": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Jsoup.parse"],
        "summary_text": [
            "Jsoup.parse method hangs for certain bogus input text"
        ],
        "desc_hints": ["ClueWeb12"],
        "desc_text": [
            [
                "We are indexing the ClueWeb12 dataset using lucene-clueweb-retrieval library.",
                ["OB", "SR"]
            ],
            ["We are using JSoup to parse Web pages.", ["OB"]],
            [
                "After a (drop-in) upgrade to JSoup version 1.11.3, our indexing processes hanged.",
                ["OB"]
            ],
            [
                "Note than this was not the issue for earlier version of JSoup.",
                ["OB"]
            ],
            [
                "Using jstack we spot document(s) that cause this problem crated a failing test case using it.",
                ["OB", "SR"]
            ],
            [
                "We understand that the input is bogus (not a html code, but a binary file), but we expect JSoup to throw an exception or return an empty string.",
                ["OB", "EB", "SR"]
            ],
            ["But the program hangs and never ends.", ["OB"]],
            [
                "We would like to report this to the community in the hope for obtaining a fix for the issue.",
                []
            ]
        ]
    },
    "Chart-2": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DatasetUtilities.iterateRangeBounds"],
        "summary_text": [
            "#959 Bugs in DatasetUtilities.iterateRangeBounds() methods"
        ],
        "desc_hints": ["phpBB2", "www.jfree.org", "viewtopic.php"],
        "desc_text": [
            ["All explained in this forum post:", []],
            ["http://www.jfree.org/phpBB2/viewtopic.php?f=3&t=29171", []]
        ]
    },
    "Cli-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "the minimum and maximum constraints on a group do not take other groups into account"
        ],
        "desc_hints": [
            "hasOption",
            "addOption",
            "CommandLine",
            "WriteableCommandLine"
        ],
        "desc_text": [
            [
                "If you have a Group A as a child of Group B and you set a minimum or maximum on Group B, the presence or not of Group A will not affect GroupB.",
                ["OB", "SR"]
            ],
            [
                "This is because Groups are never added to a CommandLine so .hasOption(A) returns false and so it isn't counted.",
                ["OB"]
            ],
            [
                "WriteableCommandLine#addOption(Option) should be used to indicate that a Group is present if any of a Groups children is present.",
                ["EB"]
            ]
        ]
    },
    "JacksonDatabind-32": {
        "code_elements": [
            "import java.io.IOException;",
            "import com.fasterxml.jackson.annotation.JsonCreator;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "public class Main {",
            "public static void main(String[] args) throws IOException {",
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.readValue(\"[]\", SomeObjectThatCanBeAggregated.class);",
            "mapper.readValue(\"[{}]\", SomeObjectThatCanBeAggregated.class);",
            "mapper.readValue(\"{\\\"key\\\":null}\", SomeObjectThatCanBeAggregated.class);",
            "mapper.readValue(\"{}\", SomeObjectThatCanBeAggregated.class);",
            "}",
            "}",
            "class SomeObjectThatCanBeAggregated {",
            "@JsonCreator",
            "public SomeObjectThatCanBeAggregated(Object obj) {",
            "System.out.println(obj + \" //\" + obj.getClass());",
            "}",
            "}",
            "[{}] //class java.util.ArrayList"
        ],
        "stack_traces": [],
        "summary_hints": ["java.lang.Object"],
        "summary_text": [
            "Deserialization from \"{}\" to java.lang.Object causes \"out of END_OBJECT token\" error"
        ],
        "desc_hints": [
            "SomeObjectThatCanBeAggregated",
            "obj.getClass",
            "SomeObjectThatCanBeAggregated.class",
            "github.com",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "java.util.LinkedHashMap",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "JsonCreator",
            "mapper.readValue",
            "FasterXML",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "UntypedObjectDeserializer.java",
            "ObjectMapper",
            "java.io.IOException",
            "java.util.ArrayList",
            "java.lang.Object",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Hi, I've faced with a problem that is too similar this one #941.",
                []
            ],
            [
                "I expect that \"{}\" will be parsed correctly to empty Map when I'm using @JsonCreator",
                ["OB", "EB"]
            ],
            [
                "I've found that this case is invalid https://github.com/FasterXML/jackson-databind/blob/jackson-databind-2.6.3/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java#L272, but why?",
                []
            ],
            ["Here is the minimum code to reproduce:", ["SR"]],
            ["import java.io.IOException;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonCreator;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["public class Main {", "CODE"],
            [
                "public static void main(String[] args) throws IOException {",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.readValue(\"[]\", SomeObjectThatCanBeAggregated.class);",
                "CODE"
            ],
            [
                "mapper.readValue(\"[{}]\", SomeObjectThatCanBeAggregated.class);",
                "CODE"
            ],
            [
                "mapper.readValue(\"{\\\"key\\\":null}\", SomeObjectThatCanBeAggregated.class);",
                "CODE"
            ],
            [
                "mapper.readValue(\"{}\", SomeObjectThatCanBeAggregated.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["class SomeObjectThatCanBeAggregated {", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public SomeObjectThatCanBeAggregated(Object obj) {", "CODE"],
            ["System.out.println(obj + \" //\" + obj.getClass());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Output:", ["OB"]],
            ["[] //class java.util.ArrayList", []],
            ["[{}] //class java.util.ArrayList", "CODE"],
            ["{key=null} //class java.util.LinkedHashMap", []],
            [
                "Exception in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.Object out of END_OBJECT token",
                ["OB"]
            ],
            ["at [Source: {}; line: 1, column: 2]", []],
            ["...", []]
        ]
    },
    "Lang-31": {
        "code_elements": [
            "private static final String CharU20000 = \"\\uD840\\uDC00\";",
            "private static final String CharU20001 = \"\\uD840\\uDC01\";",
            "assertEquals(-1, CharU20000.indexOf(CharU20001));",
            "assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));",
            "assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));",
            "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));",
            "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));",
            "assertEquals(true, StringUtils.contains(CharU20000, CharU20000));",
            "assertEquals(false, StringUtils.contains(CharU20000, CharU20001));"
        ],
        "stack_traces": [],
        "summary_hints": ["StringUtils"],
        "summary_text": [
            "StringUtils methods do not handle Unicode 2.0+ supplementary characters correctly."
        ],
        "desc_hints": [
            "StringUtils.contains",
            "CharU20000",
            "assertEquals",
            "java.sun.com",
            "CharU20000.indexOf",
            "technicalArticles",
            "CharU20001",
            "StringUtils.containsAny"
        ],
        "desc_text": [
            [
                "StringUtils.containsAny methods incorrectly matches Unicode 2.0+ supplementary characters.",
                ["OB"]
            ],
            [
                "For example, define a test fixture to be the Unicode character U+20000 where U+20000 is written in Java source as \"\\uD840\\uDC00\"",
                ["SR"]
            ],
            [
                "private static final String CharU20000 = \"\\uD840\\uDC00\";",
                "CODE"
            ],
            [
                "private static final String CharU20001 = \"\\uD840\\uDC01\";",
                "CODE"
            ],
            [
                "You can see Unicode supplementary characters correctly implemented in the JRE call:",
                ["OB"]
            ],
            ["assertEquals(-1, CharU20000.indexOf(CharU20001));", "CODE"],
            ["But this is broken:", []],
            [
                "assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));",
                "CODE"
            ],
            [
                "assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));",
                "CODE"
            ],
            ["This is fine:", []],
            [
                "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));",
                "CODE"
            ],
            [
                "assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));",
                "CODE"
            ],
            [
                "assertEquals(true, StringUtils.contains(CharU20000, CharU20000));",
                "CODE"
            ],
            [
                "assertEquals(false, StringUtils.contains(CharU20000, CharU20001));",
                "CODE"
            ],
            ["because the method calls the JRE to perform the match.", ["OB"]],
            ["More than you want to know:", []],
            [
                "http://java.sun.com/developer/technicalArticles/Intl/Supplementary/",
                []
            ]
        ]
    },
    "Compress-1": {
        "code_elements": [
            "final File input = getFile(\"cmdcreated.cpio\");",
            "final InputStream in = new FileInputStream(input);",
            "CpioArchiveInputStream cin = new CpioArchiveInputStream(in);",
            "CpioArchiveEntry entry = null;",
            "while ((entry = (CpioArchiveEntry) cin.getNextCPIOEntry()) != null)",
            "{",
            "File target = new File(dir, entry.getName());",
            "final OutputStream out = new FileOutputStream(target);",
            "IOUtils.copy(in, out);",
            "out.close();",
            "}",
            "cin.close();"
        ],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(CpioArchiveInputStream.java:293)",
            "at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(CpioArchiveInputStream.java:168)",
            "at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnpack(CpioArchiveInputStreamTest.java:26)"
        ],
        "summary_hints": [],
        "summary_text": ["CPIO reports unexpected EOF"],
        "desc_hints": [
            "IOUtils.copy",
            "CpioArchiveInputStreamTest.java",
            "OutputStream",
            "cin.getNextCPIOEntry",
            "FileInputStream",
            "cin.close",
            "cmdcreated.cpio",
            "getFile",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry",
            "CpioArchiveInputStream.java",
            "CpioArchiveInputStream",
            "CpioArchiveEntry",
            "entry.getName",
            "out.close",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnpack",
            "java.io.EOFException",
            "FileOutputStream",
            "InputStream"
        ],
        "desc_text": [
            [
                "When unpacking an CPIO archive (made with the compress classes or even made with OSX cpio comandline tool) an EOF exception is thrown.",
                ["OB", "SR"]
            ],
            ["Here is the testcode:", []],
            ["final File input = getFile(\"cmdcreated.cpio\");", "CODE"],
            ["final InputStream in = new FileInputStream(input);", "CODE"],
            [
                "CpioArchiveInputStream cin = new CpioArchiveInputStream(in);",
                "CODE"
            ],
            ["CpioArchiveEntry entry = null;", "CODE"],
            [
                "while ((entry = (CpioArchiveEntry) cin.getNextCPIOEntry()) != null)",
                "CODE"
            ],
            ["{", "CODE"],
            ["File target = new File(dir, entry.getName());", "CODE"],
            ["final OutputStream out = new FileOutputStream(target);", "CODE"],
            ["IOUtils.copy(in, out);", "CODE"],
            ["out.close();", "CODE"],
            ["}", "CODE"],
            ["cin.close();", "CODE"],
            ["Stacktrace is here:", []],
            ["java.io.EOFException", []],
            [
                "at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(CpioArchiveInputStream.java:293)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(CpioArchiveInputStream.java:168)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnpack(CpioArchiveInputStreamTest.java:26)",
                "STACK_TRACE"
            ],
            ["...", []],
            [
                "This happens with the first read access to the archive.",
                ["OB", "SR"]
            ],
            ["It occured while my try to improve the testcases.", ["OB", "SR"]]
        ]
    },
    "Closure-37": {
        "code_elements": [],
        "stack_traces": [
            "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
            "at com.google.common.base.Preconditions.checkState(Preconditions.java:135)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:544)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:493)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:501)",
            "at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:281)",
            "at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:459)",
            "at com.google.javascript.jscomp.PrepareAst.process(PrepareAst.java:70)",
            "at com.google.javascript.jscomp.Compiler.prepareAst(Compiler.java:1836)",
            "at com.google.javascript.jscomp.JsAst.parse(JsAst.java:100)",
            "at com.google.javascript.jscomp.JsAst.getAstRoot(JsAst.java:53)",
            "at com.google.javascript.jscomp.CompilerInput.getAstRoot(CompilerInput.java:120)",
            "at com.google.javascript.jscomp.Compiler.parseInputs(Compiler.java:1303)",
            "at com.google.javascript.jscomp.Compiler.parse(Compiler.java:697)"
        ],
        "summary_hints": ["ideMode"],
        "summary_text": [
            "incomplete function definition crashes the compiler when ideMode is enabled"
        ],
        "desc_hints": [
            "com.google.javascript.jscomp.CompilerInput.getAstRoot",
            "PrepareAst.java",
            "Preconditions.java",
            "com.google.javascript.jscomp.Compiler.prepareAst",
            "JsAst.java",
            "java.lang.RuntimeException",
            "com.google.javascript.jscomp.PrepareAst.process",
            "com.google.javascript.jscomp.Compiler.parseInputs",
            "com.google.javascript.jscomp.NodeTraversal.traverseFunction",
            "com.google.common.base.Preconditions.checkState",
            "NodeTraversal.java",
            "com.google.javascript.jscomp.NodeTraversal.traverse",
            "com.google.javascript.jscomp.JsAst.getAstRoot",
            "com.google.javascript.jscomp.Compiler.parse",
            "Compiler.java",
            "CompilerInput.java",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch",
            "com.google.javascript.jscomp.JsAst.parse"
        ],
        "desc_text": [
            ["The code:", ["SR"]],
            ["f f f ;", []],
            ["function t", []],
            ["The cause:", ["OB"]],
            ["Rhino is creating an incomplete FUNCTION node.", ["OB"]],
            ["We could fix this in Rhino or the IRFactory.", []],
            [
                "If it is invalid in Rhino we should fix it there, I'm not sure how to determine this so maybe we should fix it in the IRFactory and be done with it.",
                ["EB"]
            ],
            ["The stack trace:", ["OB"]],
            [
                "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                "STACK_TRACE"
            ],
            [
                "at com.google.common.base.Preconditions.checkState(Preconditions.java:135)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:544)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:493)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:501)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:281)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:459)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PrepareAst.process(PrepareAst.java:70)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.prepareAst(Compiler.java:1836)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.JsAst.parse(JsAst.java:100)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.JsAst.getAstRoot(JsAst.java:53)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CompilerInput.getAstRoot(CompilerInput.java:120)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.parseInputs(Compiler.java:1303)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.parse(Compiler.java:697)",
                "STACK_TRACE"
            ]
        ]
    },
    "Compress-35": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["TAR checksum fails when checksum is right aligned"],
        "desc_hints": [],
        "desc_text": [
            [
                "The linked TAR has a checksum with zero padding on the left instead of the expected NULL-SPACE terminator on the right.",
                ["OB", "EB"]
            ],
            [
                "As a result the last two digits of the stored checksum are lost and the otherwise valid checksum is treated as invalid.",
                ["OB"]
            ],
            [
                "Given that the code already checks for digits being in range before adding them to the stored sum, is it necessary to only look at the first 6 octal digits instead of the whole field?",
                []
            ]
        ]
    },
    "Math-27": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["percentageValue"],
        "summary_text": ["Fraction percentageValue rare overflow"],
        "desc_hints": ["percentageValue", "Integer.MAX_VALUE"],
        "desc_text": [
            [
                "The percentageValue() method of the Fraction class works by first multiplying the Fraction by 100, then converting the Fraction to a double.",
                ["OB", "SR"]
            ],
            [
                "This causes overflows when the numerator is greater than Integer.MAX_VALUE/100, even when the value of the fraction is far below this value.",
                ["OB"]
            ],
            [
                "The patch changes the method to first convert to a double value, and then multiply this value by 100 - the result should be the same, but with less overflows.",
                ["OB", "EB", "SR"]
            ],
            [
                "An addition to the test for the method that covers this bug is also included.",
                []
            ]
        ]
    },
    "Math-85": {
        "code_elements": [
            "DistributionFactory factory = app.getDistributionFactory();",
            "NormalDistribution normal = factory.createNormalDistribution(0,1);",
            "double result = normal.inverseCumulativeProbability(0.9772498680518209);"
        ],
        "stack_traces": [
            "at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:103)",
            "at org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:145)"
        ],
        "summary_hints": ["inverseCumulativeProbability"],
        "summary_text": [
            "bug in inverseCumulativeProbability() for Normal Distribution"
        ],
        "desc_hints": [
            "NormalDistributionImpl",
            "DistributionFactory",
            "NormalDistributionImpl.java",
            "factory.createNormalDistribution",
            "org.apache.commons.math.MathException",
            "AbstractContinuousDistribution.java",
            "normal.inverseCumulativeProbability",
            "AbstractContinuousDistribution",
            "app.getDistributionFactory",
            "NormalDistribution",
            "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability",
            "org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability"
        ],
        "desc_text": [
            [
                "@version $Revision: 617953 $ $Date: 2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) $",
                []
            ],
            ["*/", []],
            [
                "public class NormalDistributionImpl extends AbstractContinuousDistribution",
                []
            ],
            [
                "@version $Revision: 506600 $ $Date: 2007-02-12 12:35:59 -0700 (Mon, 12 Feb 2007) $",
                []
            ],
            ["*/", []],
            ["public abstract class AbstractContinuousDistribution", []],
            ["This code:", ["SR"]],
            [
                "DistributionFactory factory = app.getDistributionFactory();",
                "CODE"
            ],
            [
                "NormalDistribution normal = factory.createNormalDistribution(0,1);",
                "CODE"
            ],
            [
                "double result = normal.inverseCumulativeProbability(0.9772498680518209);",
                "CODE"
            ],
            ["gives the exception below.", ["OB"]],
            ["It should return (approx) 2.0000...", ["EB"]],
            [
                "normal.inverseCumulativeProbability(0.977249868051820); works fine",
                []
            ],
            ["These also give errors:", ["OB"]],
            ["0.9986501019683698 (should return 3.0000...)", ["EB"]],
            ["0.9999683287581673 (should return 4.0000...)", ["EB"]],
            [
                "org.apache.commons.math.MathException: Number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0",
                ["SR"]
            ],
            [
                "at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:103)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:145)",
                "STACK_TRACE"
            ]
        ]
    },
    "Cli-39": {
        "code_elements": [
            "Options options = new Options();",
            "options.addOption(Option.builder(\"f\").hasArg().type(FileInputStream.class).build());",
            "CommandLine cline = new DefaultParser().parse(options, args);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Option parser type EXISTING_FILE_VALUE not check file existing"
        ],
        "desc_hints": [
            "FileInputStream.class",
            "options.addOption",
            "CommandLine",
            "github.com",
            "DefaultParser",
            "FileInputStream",
            "cline.getParsedOptionValue",
            "hasArg",
            "Option.builder"
        ],
        "desc_text": [
            [
                "When the user pass option type FileInputStream.class, I think the expected behavior for the return value is the same type, which the user passed.",
                ["OB", "EB"]
            ],
            ["Options options = new Options();", "CODE"],
            [
                "options.addOption(Option.builder(\"f\").hasArg().type(FileInputStream.class).build());",
                "CODE"
            ],
            [
                "CommandLine cline = new DefaultParser().parse(options, args);",
                "CODE"
            ],
            [
                "FileInputStream file = (FileInputStream) cline.getParsedOptionValue(\"f\"); // it returns \"File\" object, without check File exist.",
                []
            ],
            ["I attach a solution for it:", []],
            [
                "https://github.com/schaumb/commons-cli/commit/abfcc8211f529ab75f3b3edd4a827e484109eb0b",
                []
            ]
        ]
    },
    "Mockito-7": {
        "code_elements": [
            "public class MockitoGenericsDeepStubTest {",
            "@Test",
            "public void discoverDeepMockingOfGenerics() {",
            "MyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);",
            "when(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");",
            "}",
            "public static interface MyClass1 <MC2 extends MyClass2> {",
            "public MC2 getNested();",
            "}",
            "public static interface MyClass2<MC3 extends MyClass3> {",
            "public MC3 getNested();",
            "}",
            "public static interface MyClass3 {",
            "public String returnSomething();",
            "}",
            "}",
            "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {",
            "MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?",
            "withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())",
            ": withSettings();",
            "return propagateSerializationSettings(mockSettings, parentMockSettings)",
            ".defaultAnswer(this);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Deep stubbing with generic responses in the call chain is not working"
        ],
        "desc_hints": [
            "returnSomething",
            "defaultAnswer",
            "returnTypeGenericMetadata.hasRawExtraInterfaces",
            "withSettingsUsing",
            "ReturnsDeepStubsSerializationFallback",
            "MyClass2",
            "MyClass1.class",
            "thenReturn",
            "ReturnsDeepStubs",
            "GenericMetadataSupport",
            "MyClass1",
            "mockSettings",
            "getNested",
            "withSettings",
            "MyClass3",
            "discoverDeepMockingOfGenerics",
            "returnTypeGenericMetadata",
            "parentMockSettings",
            "MockSettings",
            "propagateSerializationSettings",
            "myMock1.getNested",
            "MockitoGenericsDeepStubTest",
            "returnTypeGenericMetadata.rawExtraInterfaces",
            "extraInterfaces",
            "MockCreationSettings",
            "myMock1"
        ],
        "desc_text": [
            [
                "Deep stubbing will throw an Exception if multiple generics occur in the call chain.",
                ["OB"]
            ],
            [
                "For instance, consider having a mock myMock1 that provides a function that returns a generic T.",
                []
            ],
            [
                "If T also has a function that returns a generic, an Exception with the message \"Raw extraction not supported for : 'null'\" will be thrown.",
                ["OB"]
            ],
            [
                "As an example the following test will throw an Exception:",
                ["OB", "SR"]
            ],
            ["public class MockitoGenericsDeepStubTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void discoverDeepMockingOfGenerics() {", "CODE"],
            [
                "MyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);",
                "CODE"
            ],
            [
                "when(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "public static interface MyClass1 <MC2 extends MyClass2> {",
                "CODE"
            ],
            ["public MC2 getNested();", "CODE"],
            ["}", "CODE"],
            [
                "public static interface MyClass2<MC3 extends MyClass3> {",
                "CODE"
            ],
            ["public MC3 getNested();", "CODE"],
            ["}", "CODE"],
            ["public static interface MyClass3 {", "CODE"],
            ["public String returnSomething();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "You can make this test run if you step into the class ReturnsDeepStubs and change the method withSettingsUsing to return MockSettings with ReturnsDeepStubs instead of ReturnsDeepStubsSerializationFallback as default answer:",
                ["SR"]
            ],
            [
                "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {",
                "CODE"
            ],
            [
                "MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?",
                "CODE"
            ],
            [
                "withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())",
                "CODE"
            ],
            [": withSettings();", "CODE"],
            [
                "return propagateSerializationSettings(mockSettings, parentMockSettings)",
                "CODE"
            ],
            [".defaultAnswer(this);", "CODE"],
            ["}", "CODE"],
            ["However, this breaks other tests and features.", ["OB"]],
            [
                "I think, the issue is that further generics are not possible to be mocked by ReturnsDeepStubsSerializationFallback since the GenericMetadataSupport is \"closed\" at this point.",
                []
            ],
            ["Thanks and kind regards", []],
            ["Tobias", []]
        ]
    },
    "Jsoup-17": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Cleaning a fragment with just \"0\" returns an empty string (1.6.0)"
        ],
        "desc_hints": ["TreeBuilderState", "InSelect", "InBody"],
        "desc_text": [
            [
                "When using JSoup to sanitize some fragments that are inserted into another document, I noticed if a text node contains just the \"0\", it ends up cleaning it as just 0.",
                ["OB", "SR"]
            ],
            [
                "The root of this seems to come from TreeBuilderState's methods, in such places like InBody and InSelect; when it checks for type Character, it seems to cause the \"0\" token to equal the nullstring; this shouldn't be the case, as character 0 is not the same as a \"null\" character.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-132": {
        "code_elements": [
            "if( es[--esi][ es[esi+1] ] === 1)",
            "{",
            "es[esi] = 0;",
            "}",
            "else",
            "{",
            "es[esi] = 1;",
            "}",
            "es[esi] = 1 === es[--esi][es[esi + 1]] ? 0 : 1;",
            "es[--esi] = 1 === es[esi][es[esi + 1]] ? 0 : 1;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["if statement"],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["INPUT:", []],
            ["if( es[--esi][ es[esi+1] ] === 1)", "CODE"],
            ["{", "CODE"],
            ["es[esi] = 0;", "CODE"],
            ["}", "CODE"],
            ["else", "CODE"],
            ["{", "CODE"],
            ["es[esi] = 1;", "CODE"],
            ["}", "CODE"],
            ["OUTPUT:", ["OB"]],
            ["es[esi] = 1 === es[--esi][es[esi + 1]] ? 0 : 1;", "CODE"],
            ["BUT MUST BE", ["OB"]],
            ["es[--esi] = 1 === es[esi][es[esi + 1]] ? 0 : 1;", "CODE"],
            ["Im using latest version on windows", []]
        ]
    },
    "Math-43": {
        "code_elements": [
            "int[] scores = {1, 2, 3, 4};",
            "SummaryStatistics stats = new SummaryStatistics();",
            "for(int i : scores) {",
            "stats.addValue(i);",
            "}",
            "double sd = stats.getStandardDeviation();",
            "System.out.println(sd);",
            "double sd = FastMath.sqrt(stats.getSecondMoment() / stats.getN());"
        ],
        "stack_traces": [],
        "summary_hints": ["Statistics.setVarianceImpl", "getStandardDeviation"],
        "summary_text": [
            "Statistics.setVarianceImpl makes getStandardDeviation produce NaN"
        ],
        "desc_hints": [
            "SummaryStatistics.setVarianceImpl",
            "stats.getN",
            "stats.setVarianceImpl",
            "stats.getStandardDeviation",
            "SummaryStatistics",
            "stats.addValue",
            "getStandardDeviation",
            "stats.getSecondMoment",
            "FastMath.sqrt",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Invoking SummaryStatistics.setVarianceImpl(new Variance(true/false) makes getStandardDeviation produce NaN.",
                ["OB"]
            ],
            ["The code to reproduce it:", ["SR"]],
            ["int[] scores = {1, 2, 3, 4};", "CODE"],
            ["SummaryStatistics stats = new SummaryStatistics();", "CODE"],
            [
                "stats.setVarianceImpl(new Variance(false)); //use \"population variance\"",
                []
            ],
            ["for(int i : scores) {", "CODE"],
            ["stats.addValue(i);", "CODE"],
            ["}", "CODE"],
            ["double sd = stats.getStandardDeviation();", "CODE"],
            ["System.out.println(sd);", "CODE"],
            ["A workaround suggested by Mikkel is:", []],
            [
                "double sd = FastMath.sqrt(stats.getSecondMoment() / stats.getN());",
                "CODE"
            ]
        ]
    },
    "JacksonCore-7": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonGenerator.writeString", "writeFieldName"],
        "summary_text": [
            "Add a check so JsonGenerator.writeString() won't work if writeFieldName() expected."
        ],
        "desc_hints": ["writeString"],
        "desc_text": [
            [
                "Looks like calling writeString() (and perhaps other scalar write methods) results in writing invalid output, instead of throwing an exception.",
                ["OB", "EB"]
            ],
            [
                "It should instead fail; in future we may want to consider allowing this as an alias, but at any rate it should not produce invalid output.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-28": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler=="
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["constant functions not inlined aggressively enough"],
        "desc_hints": ["ClosureCompiler", "default.js"],
        "desc_text": [
            [
                "If you call a function that returns 'false' enough times under certain conditions, it doesn't get inlined.",
                ["OB"]
            ],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["function f() { return false; }", []],
            ["if (!f()) alert('hi'); // repeat this about 25 times", []]
        ]
    },
    "Closure-81": {
        "code_elements": ["function () {};", "(function(){});"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "An unnamed function statement statements should generate a parse error"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "An unnamed function statement statements should generate a parse error, but it does not, for example:",
                ["OB", "SR"]
            ],
            ["function () {};", "CODE"],
            ["Note: Unnamed function expression are legal:", []],
            ["(function(){});", "CODE"]
        ]
    },
    "JacksonDatabind-99": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Canonical string for reference type is built incorrectly"
        ],
        "desc_hints": [
            "ReferenceType",
            "PlaceholderForType",
            "Object.class",
            "constructType",
            "JavaType",
            "toCanonical",
            "TypeFactory",
            "java.lang.Object"
        ],
        "desc_text": [
            [
                "Canonical string for reference type is built incorrectly.",
                ["OB"]
            ],
            ["E.g.:", []],
            [
                "new ReferenceType(new TypeFactory(new LRUMap<Object, JavaType>(0, 10000)).constructType(Object.class), new PlaceholderForType(0)).toCanonical()",
                ["OB"]
            ],
            ["yields:", []],
            ["java.lang.Object<$1", []],
            ["while the expected value is:", ["EB"]],
            ["java.lang.Object<$1>", []]
        ]
    },
    "Codec-3": {
        "code_elements": [
            "} else if (contains(value, index + 1, 4, \"IER\")) {",
            "...this should be",
            "} else if (contains(value, index + 1, 3, \"IER\")) {",
            "2)  Bug in the handleL method",
            "The alternative encoding of \"cabrillo\" results in \"KPRL \" rather than \"KPR\"",
            "The problem is that the first thing this method does is append an \"L\" to both primary & alternative encoding. When the conditionL0() method returns true then the \"L\" should not be appended for the alternative encoding",
            "result.append('L');",
            "if (charAt(value, index + 1) == 'L') {",
            "if (conditionL0(value, index)) {",
            "result.appendAlternate(' ');",
            "}",
            "index += 2;",
            "} else {",
            "index++;",
            "}",
            "return index;",
            "Suggest refeactoring this to",
            "if (charAt(value, index + 1) == 'L') {",
            "if (conditionL0(value, index)) {",
            "result.appendPrimary('L');",
            "} else {",
            "result.append('L');",
            "}",
            "index += 2;",
            "} else {",
            "result.append('L');",
            "index++;",
            "}",
            "return index;",
            "3) Bug in the conditionL0() method for words ending in \"AS\" and \"OS\"",
            "The alternative encoding of \"gallegos\" results in \"KLKS\" rather than \"KKS\"",
            "The problem is caused by the wrong start position being used in the contains() method, which means its not checking the last two characters of the word but checks the previous & current position instead:",
            "...this should be"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Double Metaphone bugs in alternative encoding"],
        "desc_hints": [
            "value.length",
            "result.appendAlternate",
            "charAt",
            "conditionL0",
            "result.appendPrimary",
            "result.append"
        ],
        "desc_text": [
            [
                "The new test case (CODEC-83) has highlighted a number of issues with the \"alternative\" encoding in the Double Metaphone implementation",
                ["SR"]
            ],
            [
                "1) Bug in the handleG method when \"G\" is followed by \"IER\"",
                ["OB", "SR"]
            ],
            [
                "The alternative encoding of \"Angier\" results in \"ANKR\" rather than \"ANJR\"",
                ["OB"]
            ],
            [
                "The alternative encoding of \"rogier\" results in \"RKR\" rather than \"RJR\"",
                ["OB"]
            ],
            [
                "The problem is in the handleG() method and is caused by the wrong length (4 instead of 3) being used in the contains() method:",
                ["OB", "SR"]
            ],
            ["} else if (contains(value, index + 1, 4, \"IER\")) {", "CODE"],
            ["...this should be", "CODE"],
            ["} else if (contains(value, index + 1, 3, \"IER\")) {", "CODE"],
            ["2)  Bug in the handleL method", "CODE"],
            [
                "The alternative encoding of \"cabrillo\" results in \"KPRL \" rather than \"KPR\"",
                "CODE"
            ],
            [
                "The problem is that the first thing this method does is append an \"L\" to both primary & alternative encoding. When the conditionL0() method returns true then the \"L\" should not be appended for the alternative encoding",
                "CODE"
            ],
            ["result.append('L');", "CODE"],
            ["if (charAt(value, index + 1) == 'L') {", "CODE"],
            ["if (conditionL0(value, index)) {", "CODE"],
            ["result.appendAlternate(' ');", "CODE"],
            ["}", "CODE"],
            ["index += 2;", "CODE"],
            ["} else {", "CODE"],
            ["index++;", "CODE"],
            ["}", "CODE"],
            ["return index;", "CODE"],
            ["Suggest refeactoring this to", "CODE"],
            ["if (charAt(value, index + 1) == 'L') {", "CODE"],
            ["if (conditionL0(value, index)) {", "CODE"],
            ["result.appendPrimary('L');", "CODE"],
            ["} else {", "CODE"],
            ["result.append('L');", "CODE"],
            ["}", "CODE"],
            ["index += 2;", "CODE"],
            ["} else {", "CODE"],
            ["result.append('L');", "CODE"],
            ["index++;", "CODE"],
            ["}", "CODE"],
            ["return index;", "CODE"],
            [
                "3) Bug in the conditionL0() method for words ending in \"AS\" and \"OS\"",
                "CODE"
            ],
            [
                "The alternative encoding of \"gallegos\" results in \"KLKS\" rather than \"KKS\"",
                "CODE"
            ],
            [
                "The problem is caused by the wrong start position being used in the contains() method, which means its not checking the last two characters of the word but checks the previous & current position instead:",
                "CODE"
            ],
            [
                "} else if ((contains(value, index - 1, 2, \"AS\", \"OS\") ||",
                ["SR"]
            ],
            ["...this should be", "CODE"],
            [
                "} else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||",
                []
            ],
            ["I'll attach a patch for review", []]
        ]
    },
    "Closure-169": {
        "code_elements": [
            "/** @param {{func: function()}} obj */",
            "function test1(obj) {};",
            "var fnStruc1 = {};",
            "fnStruc1.func = function() {};",
            "func(fnStruc);",
            "/** @param {{func: function()}} obj */",
            "function test2(obj) {};",
            "var fnStruc2 = { func: function() {} };",
            "test2(fnStruc2);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Strange \"wrong parameter\" warning for callback function"
        ],
        "desc_hints": [
            "fnStruc",
            "fnStruc1",
            "groups.google.com",
            "JuzERhGo48I",
            "fnStruc2",
            "fnStruc1.func"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Compile the followed code:", ["OB", "SR"]],
            ["/** @param {{func: function()}} obj */", "CODE"],
            ["function test1(obj) {};", "CODE"],
            ["var fnStruc1 = {};", "CODE"],
            ["fnStruc1.func = function() {};", "CODE"],
            ["test1(fnStruc1);", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected: compiled OK", ["EB"]],
            ["I see:", ["OB"]],
            [
                "WARNING - actual parameter 1 of func does not match formal parameter",
                ["OB"]
            ],
            ["found : {func: function (): undefined}", []],
            ["required: {func: function (): ?}", []],
            ["func(fnStruc);", "CODE"],
            ["^", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["r2102, Win7 x64", []],
            ["Please provide any additional information below.", "QUERY"],
            ["The followed code compiles OK:", ["OB", "SR"]],
            ["/** @param {{func: function()}} obj */", "CODE"],
            ["function test2(obj) {};", "CODE"],
            ["var fnStruc2 = { func: function() {} };", "CODE"],
            ["test2(fnStruc2);", "CODE"],
            [
                "Discussion: https://groups.google.com/d/topic/closure-compiler-discuss/JuzERhGo48I/discussion",
                []
            ]
        ]
    },
    "Closure-150": {
        "code_elements": [
            "var ns = {};",
            "/** @param {string=} b */",
            "ns.a = function(b) {}",
            "ns.a();",
            "ns.a(123);",
            "}",
            "var ns = {};",
            "(function() {",
            "/** @param {string=} b */",
            "ns.a = function(b) {}",
            "})();",
            "ns.a();",
            "ns.a(123);",
            "}",
            "var ns = {};",
            "(function() {",
            "/** @param {string=} b */",
            "ns.a = function(b) {}",
            "})();",
            "ns.a();",
            "ns.a(123);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Type checker misses annotations on functions defined within functions"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Compile the following code under --warning_level VERBOSE",
                ["OB", "SR"]
            ],
            ["var ns = {};", "CODE"],
            ["/** @param {string=} b */", "CODE"],
            ["ns.a = function(b) {}", "CODE"],
            ["function d() {", []],
            ["ns.a();", "CODE"],
            ["ns.a(123);", "CODE"],
            ["}", "CODE"],
            ["2.", ["OB", "SR"]],
            [
                "Observe that the type checker correctly emits one warning, as 123",
                ["OB"]
            ],
            ["doesn't match the type {string}", ["OB"]],
            ["3.", ["OB", "SR"]],
            [
                "Now compile the code with ns.a defined within an anonymous function,",
                ["OB", "SR"]
            ],
            ["like so:", []],
            ["var ns = {};", "CODE"],
            ["(function() {", "CODE"],
            ["/** @param {string=} b */", "CODE"],
            ["ns.a = function(b) {}", "CODE"],
            ["})();", "CODE"],
            ["function d() {", []],
            ["ns.a();", "CODE"],
            ["ns.a(123);", "CODE"],
            ["}", "CODE"],
            ["4.", ["OB", "SR"]],
            [
                "Observe that a warning is emitted for calling ns.a with 0 parameters, and",
                ["OB"]
            ],
            [
                "not for the type error, as though the @param declaration were ignored.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["r15", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "This sort of module pattern is common enough that it strikes me as worth",
                []
            ],
            ["supporting.", ["OB"]],
            [
                "One last note to make matters stranger: if the calling code isn't itself within",
                []
            ],
            ["a function, no warnings are emitted at all:", []],
            ["var ns = {};", "CODE"],
            ["(function() {", "CODE"],
            ["/** @param {string=} b */", "CODE"],
            ["ns.a = function(b) {}", "CODE"],
            ["})();", "CODE"],
            ["ns.a();", "CODE"],
            ["ns.a(123);", "CODE"]
        ]
    },
    "JacksonDatabind-65": {
        "code_elements": [
            "import com.fasterxml.jackson.annotation.*;",
            "import com.fasterxml.jackson.core.type.TypeReference;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import org.junit.Test;",
            "import java.io.IOException;",
            "import java.util.Map;",
            "import java.util.Map.Entry;",
            "import static org.junit.Assert.assertEquals;",
            "public class KeyVsFieldTest {",
            "@Test",
            "public void deserializeAsField() throws IOException {",
            "AsField as_field = new ObjectMapper().readValue(\"{\\\"name\\\": \\\"first.last\\\"}\", AsField.class);",
            "assertEquals(as_field.getName()._firstname, \"first\");",
            "assertEquals(as_field.getName()._lastname, \"last\");",
            "}",
            "@Test",
            "public void deserializeAsKey() throws IOException {",
            "Map<FullName, Double> map =",
            "new ObjectMapper().readValue(\"{\\\"first.last\\\": 42}\", new TypeReference<Map<FullName, Double>>() {",
            "});",
            "/*",
            "Fails with: com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct Map key of type KeyVsFieldTest$FullName from String \"first.last\": not a valid representation: wrong number of arguments",
            "at [Source: java.io.StringReader@7113b13f; line: 1, column: 2]",
            "*/",
            "Entry<FullName, Double> entry = map.entrySet().iterator().next();",
            "assertEquals(entry.getKey()._firstname, \"first\");",
            "assertEquals(entry.getKey()._lastname, \"last\");",
            "assertEquals(entry.getValue().doubleValue(), 42, 0);",
            "}",
            "public static class AsField {",
            "private final FullName _name;",
            "public AsField(@JsonProperty(\"name\") FullName aName) {",
            "_name = aName;",
            "}",
            "public FullName getName() {",
            "return _name;",
            "}",
            "}",
            "public static class FullName {",
            "private final String _firstname;",
            "private final String _lastname;",
            "private FullName(String firstname, String lastname) {",
            "_firstname = firstname;",
            "_lastname = lastname;",
            "}",
            "@JsonCreator",
            "public static FullName valueOf(String value) {",
            "String[] mySplit = value.split(\"\\\\.\");",
            "return new FullName(mySplit[0], mySplit[1]);",
            "}",
            "public static FullName valueOf(String firstname, String lastname) {",
            "return new FullName(firstname, lastname);",
            "}",
            "@JsonValue",
            "@Override",
            "public String toString() {",
            "return _firstname + \".\" + _lastname;",
            "}",
            "}",
            "}",
            "@Override",
            "// So, of all single-arg static methods:",
            "for (AnnotatedMethod am : _classInfo.getStaticMethods()) {",
            "if (isFactoryMethod(am)) {",
            "// And must take one of expected arg types (or supertype)",
            "Class<?> actualArgType = am.getRawParameterType(0);",
            "for (Class<?> expArgType : expArgTypes) {",
            "// And one that matches what we would pass in",
            "if (actualArgType.isAssignableFrom(expArgType)) {",
            "return am.getAnnotated();",
            "}",
            "}",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["StdKeyDeserializer"],
        "summary_text": [
            "StdKeyDeserializer can erroneously use a static factory method with more than one argument"
        ],
        "desc_hints": [
            "JsonProperty",
            "assertEquals",
            "deserializeAsKey",
            "toString",
            "com.fasterxml.jackson.databind.exc.InvalidFormatException",
            "AsField",
            "isFactoryMethod",
            "FullName",
            "getName",
            "doubleValue",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "deserializeAsField",
            "JsonIgnore",
            "findFactoryMethod",
            "expArgType",
            "classInfo.getStaticMethods",
            "valueOf",
            "mySplit",
            "com.fasterxml.jackson.annotation",
            "java.io.StringReader",
            "map.entrySet",
            "first.last",
            "ObjectMapper",
            "AsField.class",
            "entry.getValue",
            "am.getAnnotated",
            "java.util.Map.Entry",
            "KeyVsFieldTest",
            "as_field.getName",
            "am.getRawParameterType",
            "com.fasterxml.jackson.core.type.TypeReference",
            "org.junit.Assert.assertEquals",
            "readValue",
            "TypeReference",
            "java.io.IOException",
            "actualArgType.isAssignableFrom",
            "JsonValue",
            "BasicBeanDescriptor",
            "actualArgType",
            "AnnotatedMethod",
            "entry.getKey",
            "org.junit.Test",
            "java.util.Map",
            "expArgTypes",
            "JsonCreator",
            "JsonCreators",
            "value.split"
        ],
        "desc_text": [
            [
                "While investigating an issue, I found that there was different behavior for normal deserializers and key deserializers where deserializing a value as a field works as expected, but as a map key fails with \"not a valid representation: wrong number of arguments\".",
                ["OB"]
            ],
            ["A basic example:", ["OB", "SR"]],
            ["import com.fasterxml.jackson.annotation.*;", "CODE"],
            ["import com.fasterxml.jackson.core.type.TypeReference;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import java.util.Map;", "CODE"],
            ["import java.util.Map.Entry;", "CODE"],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["public class KeyVsFieldTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void deserializeAsField() throws IOException {", "CODE"],
            [
                "AsField as_field = new ObjectMapper().readValue(\"{\\\"name\\\": \\\"first.last\\\"}\", AsField.class);",
                "CODE"
            ],
            ["assertEquals(as_field.getName()._firstname, \"first\");", "CODE"],
            ["assertEquals(as_field.getName()._lastname, \"last\");", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void deserializeAsKey() throws IOException {", "CODE"],
            ["Map<FullName, Double> map =", "CODE"],
            [
                "new ObjectMapper().readValue(\"{\\\"first.last\\\": 42}\", new TypeReference<Map<FullName, Double>>() {",
                "CODE"
            ],
            ["});", "CODE"],
            ["/*", "CODE"],
            [
                "Fails with: com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct Map key of type KeyVsFieldTest$FullName from String \"first.last\": not a valid representation: wrong number of arguments",
                "CODE"
            ],
            [
                "at [Source: java.io.StringReader@7113b13f; line: 1, column: 2]",
                "CODE"
            ],
            ["*/", "CODE"],
            [
                "Entry<FullName, Double> entry = map.entrySet().iterator().next();",
                "CODE"
            ],
            ["assertEquals(entry.getKey()._firstname, \"first\");", "CODE"],
            ["assertEquals(entry.getKey()._lastname, \"last\");", "CODE"],
            ["assertEquals(entry.getValue().doubleValue(), 42, 0);", "CODE"],
            ["}", "CODE"],
            ["public static class AsField {", "CODE"],
            ["private final FullName _name;", "CODE"],
            [
                "public AsField(@JsonProperty(\"name\") FullName aName) {",
                "CODE"
            ],
            ["_name = aName;", "CODE"],
            ["}", "CODE"],
            ["public FullName getName() {", "CODE"],
            ["return _name;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public static class FullName {", "CODE"],
            ["private final String _firstname;", "CODE"],
            ["private final String _lastname;", "CODE"],
            ["private FullName(String firstname, String lastname) {", "CODE"],
            ["_firstname = firstname;", "CODE"],
            ["_lastname = lastname;", "CODE"],
            ["}", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public static FullName valueOf(String value) {", "CODE"],
            ["String[] mySplit = value.split(\"\\\\.\");", "CODE"],
            ["return new FullName(mySplit[0], mySplit[1]);", "CODE"],
            ["}", "CODE"],
            [
                "public static FullName valueOf(String firstname, String lastname) {",
                "CODE"
            ],
            ["return new FullName(firstname, lastname);", "CODE"],
            ["}", "CODE"],
            ["@JsonValue", "CODE"],
            ["@Override", "CODE"],
            ["public String toString() {", "CODE"],
            ["return _firstname + \".\" + _lastname;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "It looks like this is because in BasicBeanDescriptor, findFactoryMethod has an incorrect assumption about the contents of _classInfo.getStaticMethods(), which will have any method named valueOf and static methods annotated with @JsonCreator:",
                ["OB"]
            ],
            ["@Override", "CODE"],
            ["public Method findFactoryMethod(Class<?>...", []],
            ["expArgTypes)", []],
            ["{", []],
            ["// So, of all single-arg static methods:", "CODE"],
            [
                "for (AnnotatedMethod am : _classInfo.getStaticMethods()) {",
                "CODE"
            ],
            ["if (isFactoryMethod(am)) {", "CODE"],
            [
                "// And must take one of expected arg types (or supertype)",
                "CODE"
            ],
            ["Class<?> actualArgType = am.getRawParameterType(0);", "CODE"],
            ["for (Class<?> expArgType : expArgTypes) {", "CODE"],
            ["// And one that matches what we would pass in", "CODE"],
            ["if (actualArgType.isAssignableFrom(expArgType)) {", "CODE"],
            ["return am.getAnnotated();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["return null;", []],
            ["}", "CODE"],
            [
                "This can be worked around by annotating static factory methods not intended to be used as @JsonCreators with @JsonIgnore, due to the resolution in _classInfo.getStaticMethods(), so is not really urgent.",
                []
            ],
            [
                "Please let me know if you have any questions about the issue!",
                []
            ],
            ["Thanks,", []],
            ["Chris", []]
        ]
    },
    "Lang-4": {
        "code_elements": [
            "CharSequence cs1 = \"1 < 2\";",
            "CharSequence cs2 = CharBuffer.wrap(\"1 < 2\".toCharArray());",
            "System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs1));",
            "System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs2));",
            "System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs2.toString()));",
            "System.out.println(StringEscapeUtils.escapeHtml4(cs2.toString()));"
        ],
        "stack_traces": [],
        "summary_hints": ["CharSequence", "LookupTranslator"],
        "summary_text": [
            "LookupTranslator accepts CharSequence as input, but fails to work with implementations other than String"
        ],
        "desc_hints": [
            "CharBuffer",
            "toCharArray",
            "hashCode",
            "org.apache.commons.lang3.text.translate",
            "StringEscapeUtils.escapeHtml4",
            "cs2.toString",
            "CharBuffer.equals",
            "String.equals",
            "CharBuffer.wrap",
            "lookupMap",
            "CharSequence",
            "StringEscapeUtils.ESCAPE_HTML4.translate",
            "HashMap",
            "System.out.println"
        ],
        "desc_text": [
            [
                "The core of org.apache.commons.lang3.text.translate is a HashMap<CharSequence, CharSequence> lookupMap.",
                ["OB"]
            ],
            ["From the Javadoc of CharSequence (emphasis mine):", []],
            [
                "This interface does not refine the general contracts of the equals and hashCode methods.",
                ["OB"]
            ],
            [
                "The result of comparing two objects that implement CharSequence is therefore, in general, undefined.",
                ["OB"]
            ],
            [
                "Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other.",
                ["OB"]
            ],
            [
                "It is therefore inappropriate to use arbitrary CharSequence instances as elements in a set or as keys in a map.",
                ["OB", "SR"]
            ],
            [
                "The current implementation causes code such as the following to not work as expected:",
                ["OB"]
            ],
            ["CharSequence cs1 = \"1 < 2\";", "CODE"],
            [
                "CharSequence cs2 = CharBuffer.wrap(\"1 < 2\".toCharArray());",
                "CODE"
            ],
            [
                "System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs1));",
                "CODE"
            ],
            [
                "System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs2));",
                "CODE"
            ],
            ["...", []],
            [
                "which gives the following results (but should be identical):",
                ["OB", "EB"]
            ],
            ["1 &lt; 2", ["SR"]],
            ["1 < 2", ["SR"]],
            [
                "The problem, at a minimum, is that CharBuffer.equals is even documented in the Javadoc that:",
                []
            ],
            ["A char buffer is not equal to any other type of object.", ["OB"]],
            ["...", []],
            [
                "so a lookup on a CharBuffer in the Map will always fail when compared against the String implementations that it contains.",
                ["OB", "SR"]
            ],
            [
                "An obvious work-around is to instead use something along the lines of either of the following:",
                ["SR"]
            ],
            [
                "System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs2.toString()));",
                "CODE"
            ],
            [
                "System.out.println(StringEscapeUtils.escapeHtml4(cs2.toString()));",
                "CODE"
            ],
            ["...", []],
            ["which forces everything back to a String.", ["OB"]],
            [
                "However, this is not practical when working with large sets of data, which would require significant heap allocations and garbage collection concerns.",
                ["OB"]
            ],
            [
                "(As such, I was actually trying to use the translate method that outputs to a Writer - but simplified the above examples to omit this.)",
                ["OB", "SR"]
            ],
            [
                "Another option that I'm considering is to use a custom CharSequence wrapper around a char[] that implements hashCode() and equals() to work with those implemented on String.",
                []
            ],
            [
                "(However, this will be interesting due to the symmetric assumption - which is further interesting that String.equals is currently implemented using instanceof - even though String is final...)",
                ["SR"]
            ]
        ]
    },
    "Lang-23": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "java.text.MessageFormat.equals",
            "text.ExtendedMessageFormat"
        ],
        "summary_text": [
            "text.ExtendedMessageFormat doesn't override java.text.MessageFormat.equals(Object)"
        ],
        "desc_hints": [
            "java.text.MessageFormat.equals",
            "super.equals",
            "org.apache.commons.lang3.text.ExtendedMessageFormat"
        ],
        "desc_text": [
            ["Findbugs:", []],
            [
                "Bug: org.apache.commons.lang3.text.ExtendedMessageFormat doesn't override java.text.MessageFormat.equals(Object)",
                ["OB"]
            ],
            [
                "Pattern id: EQ_DOESNT_OVERRIDE_EQUALS, type: Eq, category: STYLE",
                []
            ],
            [
                "This class extends a class that defines an equals method and adds fields, but doesn't define an equals method itself.",
                ["OB"]
            ],
            [
                "Thus, equality on instances of this class will ignore the identity of the subclass and the added fields.",
                ["OB", "SR"]
            ],
            [
                "Be sure this is what is intended, and that you don't need to override the equals method.",
                []
            ],
            [
                "Even if you don't need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o).",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-50": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["UTF16 streams with BOM are processed as UTF-8"],
        "desc_hints": [
            "org.jsoup.helper.DataUtil.parseByteData",
            "unicode.org",
            "utf_bom.html"
        ],
        "desc_text": [
            [
                "The handling of the character encoding in org.jsoup.helper.DataUtil.parseByteData(...) is bugged when the input is an UTF16 stream with unicode BOM.",
                ["OB"]
            ],
            [
                "This method does a check for presence of a BOM and, if it finds one, incorrectly assumes that this was a UTF-8 BOM.",
                []
            ],
            [
                "To fix this, the code would have to check the raw BOM bytes as the distinction between the various BOMs is lost after conversion to characters.",
                ["OB"]
            ],
            ["See also: http://unicode.org/faq/utf_bom.html#bom4", []]
        ]
    },
    "Closure-16": {
        "code_elements": [
            "goog.provide('a.b.c');",
            "goog.scope(function() {",
            "var b = a.b;",
            "var c = b.c;",
            "/** @typedef {string} */",
            "c.MyType;",
            "/** @param {c.MyType} x The variable. */",
            "c.myFunc = function(x) {};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["JSCompiler does not recursively resolve typedefs"],
        "desc_hints": ["goog.provide", "myFunc", "goog.scope", "MyType"],
        "desc_text": [
            ["goog.provide('a.b.c');", "CODE"],
            ["goog.scope(function() {", "CODE"],
            ["var b = a.b;", "CODE"],
            ["var c = b.c;", "CODE"],
            ["/** @typedef {string} */", "CODE"],
            ["c.MyType;", "CODE"],
            ["/** @param {c.MyType} x The variable. */", "CODE"],
            ["c.myFunc = function(x) {};", "CODE"],
            ["});", []],
            ["results in a compiler error.", ["OB"]],
            [
                "given that JSCompiler *does* recursively resolve other names, this appears to be a bug rather than an intended limitation.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-62": {
        "code_elements": [
            "import com.fasterxml.jackson.annotation.JsonCreator;",
            "import com.fasterxml.jackson.annotation.JsonTypeInfo;",
            "import java.util.Set;",
            "public abstract class UnmodifiableSetMixin {",
            "@JsonCreator",
            "public UnmodifiableSetMixin(Set<?> s) {}",
            "}",
            "public class UnmodifiableSetMixinTest {",
            "static final String EXPECTED_JSON = \"[\\\"java.util.Collections$UnmodifiableSet\\\",[]]\";",
            "ObjectMapper mapper;",
            "@Before",
            "public void setup() {",
            "mapper = new ObjectMapper();",
            "mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
            "mapper.addMixIn(Collections.unmodifiableSet(Collections.<String>emptySet()).getClass(), UnmodifiableSetMixin.class);",
            "}",
            "@Test",
            "@SuppressWarnings(\"unchecked\")",
            "public void read() throws Exception {",
            "Set<String> foo = mapper.readValue(EXPECTED_JSON, Set.class);",
            "assertThat(foo).isEmpty();",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDefault(StdValueInstantiator.java:240)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)",
            "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:110)",
            "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray(AsArrayTypeDeserializer.java:50)",
            "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserializeWithType(CollectionDeserializer.java:310)",
            "at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)",
            "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)",
            "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)",
            "at sample.UnmodifiableSetMixinTest.read(UnmodifiableSetMixinTest.java:36)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:498)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
            "at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)"
        ],
        "summary_hints": ["UnmodifiableSetMixin"],
        "summary_text": [
            "Custom UnmodifiableSetMixin Fails in Jackson 2.7+ but works in Jackson 2.6"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "ReflectiveCallable.java",
            "StdValueInstantiator.java",
            "Set.class",
            "JsonTypeInfo",
            "CollectionDeserializer.java",
            "emptySet",
            "FrameworkMethod.java",
            "NativeMethodAccessorImpl.java",
            "RunBefores.java",
            "JUnit4TestReference.java",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "java.util.Collections",
            "sample.UnmodifiableSetMixinTest.read",
            "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "TestExecution.java",
            "org.junit.internal.runners.statements.RunBefores.evaluate",
            "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize",
            "org.junit.runners.ParentRunner.runLeaf",
            "org.junit.runners.ParentRunner.access",
            "InvokeMethod.java",
            "UnmodifiableSet",
            "UnmodifiableSetMixin",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize",
            "Collections.unmodifiableSet",
            "java.util.Set",
            "ObjectMapper",
            "UnmodifiableSetMixinTest.java",
            "_readMapAndClose",
            "org.junit.runners.ParentRunner.runChildren",
            "org.junit.runners.ParentRunner",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserializeWithType",
            "UnmodifiableSetMixinTest",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "github.com",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "BlockJUnit4ClassRunner.java",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "com.fasterxml.jackson.databind.ObjectMapper.readValue",
            "SuppressWarnings",
            "assertThat",
            "RemoteTestRunner.java",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "TypeWrappedDeserializer.java",
            "mapper.readValue",
            "UnmodifiableSetMixin.class",
            "AsArrayTypeDeserializer.java",
            "java.lang.Object",
            "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDefault",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "JsonTypeInfo.As.PROPERTY",
            "JsonTypeInfo.Id.CLASS",
            "getClass",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "isEmpty",
            "mapper.addMixIn",
            "DelegatingMethodAccessorImpl.java",
            "mapper.enableDefaultTyping",
            "ObjectMapper.java",
            "java.lang.reflect.Method.invoke",
            "org.junit.runners.model.FrameworkMethod",
            "java.lang.IllegalStateException",
            "org.junit.runners.ParentRunner.run",
            "ObjectMapper.DefaultTyping.NON_FINAL",
            "Method.java",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "JsonCreator",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
            "runReflectiveCall",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "ParentRunner.java"
        ],
        "desc_text": [
            [
                "I'd like to be able to deserialize an UnmodifiableSet with default typing enabled.",
                ["EB"]
            ],
            [
                "To do this I have created an UnmodifiableSetMixin as shown below:",
                ["SR"]
            ],
            [
                "NOTE: You can find a minimal project with all the source code to reproduce this issue at https://github.com/rwinch/jackson-unmodifiableset-mixin",
                ["SR"]
            ],
            ["import com.fasterxml.jackson.annotation.JsonCreator;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonTypeInfo;", "CODE"],
            ["import java.util.Set;", "CODE"],
            [
                "@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)",
                []
            ],
            ["public abstract class UnmodifiableSetMixin {", "CODE"],
            ["@JsonCreator", "CODE"],
            ["public UnmodifiableSetMixin(Set<?> s) {}", "CODE"],
            ["}", "CODE"],
            [
                "I then try to use this to deserialize an empty set.",
                ["OB", "SR"]
            ],
            ["public class UnmodifiableSetMixinTest {", "CODE"],
            [
                "static final String EXPECTED_JSON = \"[\\\"java.util.Collections$UnmodifiableSet\\\",[]]\";",
                "CODE"
            ],
            ["ObjectMapper mapper;", "CODE"],
            ["@Before", "CODE"],
            ["public void setup() {", "CODE"],
            ["mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
                "CODE"
            ],
            [
                "mapper.addMixIn(Collections.unmodifiableSet(Collections.<String>emptySet()).getClass(), UnmodifiableSetMixin.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["@SuppressWarnings(\"unchecked\")", "CODE"],
            ["public void read() throws Exception {", "CODE"],
            [
                "Set<String> foo = mapper.readValue(EXPECTED_JSON, Set.class);",
                "CODE"
            ],
            ["assertThat(foo).isEmpty();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "The test passes with Jackson 2.6, but fails using Jackson 2.7+ (including Jackson 2.8.3) with the following stack trace:",
                ["OB", "SR"]
            ],
            [
                "java.lang.IllegalStateException: No default constructor for [collection type; class java.util.Collections$UnmodifiableSet, contains [simple type, class java.lang.Object]]",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDefault(StdValueInstantiator.java:240)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:110)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray(AsArrayTypeDeserializer.java:50)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserializeWithType(CollectionDeserializer.java:310)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)",
                "STACK_TRACE"
            ],
            [
                "at sample.UnmodifiableSetMixinTest.read(UnmodifiableSetMixinTest.java:36)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:498)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ],
            ["This seems like a passivity issue.", []],
            ["Is there a workaround for this problem?", []]
        ]
    },
    "Closure-115": {
        "code_elements": [
            "window[\"anchor\"] = function (obj, modifiesProp) {",
            "return (function (saved) {",
            "return modifiesProp(obj) + saved;",
            "})(obj[\"prop\"]);",
            "}",
            "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};",
            "window.foo=function(a,b){return b(a)+a.prop};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Erroneous optimization in ADVANCED_OPTIMIZATIONS mode"
        ],
        "desc_hints": [
            "missouristate.edu",
            "history.state",
            "window.js",
            "modifiesProp",
            "compiler.jar",
            "window.foo",
            "EcmaScript",
            "input.js",
            "output.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Create a file input.js with the following \"minimal\" test case:",
                ["OB", "SR"]
            ],
            ["window[\"anchor\"] = function (obj, modifiesProp) {", "CODE"],
            ["return (function (saved) {", "CODE"],
            ["return modifiesProp(obj) + saved;", "CODE"],
            ["})(obj[\"prop\"]);", "CODE"],
            ["}", "CODE"],
            ["2.", ["OB", "SR"]],
            ["Compile it with:", []],
            ["java -jar .../build/compiler.jar                  \\", []],
            ["--compilation_level ADVANCED_OPTIMIZATIONS    \\", ["SR"]],
            ["--warning_level VERBOSE                       \\", ["SR"]],
            ["--externs window.js                           \\", ["SR"]],
            ["--js input.js                                 \\", ["SR"]],
            ["--js_output_file output.js", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["That's all!", []],
            ["What is the expected output?", "QUERY"],
            [
                "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};",
                "CODE"
            ],
            ["What do you see instead?", "QUERY"],
            ["window.foo=function(a,b){return b(a)+a.prop};", "CODE"],
            [
                "Note how this is semantically very different if modifiesProp/b (whose",
                []
            ],
            [
                "semantics are unknown to the compiler) side-effects a.prop.",
                ["OB"]
            ],
            [
                "The evaluation order of + is well-defined in EcmaScript 5, but even",
                ["OB"]
            ],
            [
                "then, this happens even if one substitutes the , (comma) operator.",
                ["OB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Git HEAD", []],
            ["commit 4a62ee4bca02169dd77a6f26ed64a624b3f05f95", []],
            [
                "Author: Chad Killingsworth <chadkillingsworth@missouristate.edu>",
                []
            ],
            ["Date: Wed Sep 25 14:52:28 2013 -0500", []],
            ["Add history.state to html5 externs", []],
            ["on Linux.", ["OB"]]
        ]
    },
    "Compress-42": {
        "code_elements": [
            "public static void main(String[] args) throws IOException {",
            "try (ZipFile zipFile = new ZipFile(new File(\"invalid-entry.jar\"))) {",
            "printAttributes(zipFile, \"META-INF/\");",
            "printAttributes(zipFile, \"META-INF/maven/\");",
            "}",
            "}",
            "private static void printAttributes(ZipFile zipFile, String name) {",
            "ZipArchiveEntry entry = zipFile.getEntriesInPhysicalOrder(name).iterator().next();",
            "System.out.printf(\"%-17s: symlink:%-5s - unixMode:%s%n\", name, entry.isUnixSymlink(), entry.getUnixMode());",
            "}",
            "public boolean isUnixSymlink() {",
            "int unixMode = getUnixMode();",
            "return unixMode == SHORT_MASK ? false : (unixMode & UnixStat.LINK_FLAG) == UnixStat.LINK_FLAG;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["isUnixSymlink"],
        "summary_text": [
            "isUnixSymlink returns true for Zip entries with Unix permissions 177777"
        ],
        "desc_hints": [
            "UnixStat.LINK_FLAG",
            "zipFile.getEntriesInPhysicalOrder",
            "ZipFile",
            "System.out.printf",
            "unixMode",
            "entry.getUnixMode",
            "isUnixSymlink",
            "zipFile",
            "entry.isUnixSymlink",
            "getUnixMode",
            "ZipArchiveEntry",
            "entry.jar",
            "printAttributes"
        ],
        "desc_text": [
            [
                "This issue was originally reported in MASSEMBLY-842, but it seems the root cause in inside Commons Compress.",
                ["OB"]
            ],
            [
                "Consider the attached invalid-entry.jar, whose contents, as shown by the zipinfo utility, is:",
                ["OB", "SR"]
            ],
            [
                "?rwsrwsrwt 2.0 unx       0 b- stor 17-Jan-15 16:06 META-INF/maven/",
                []
            ],
            [
                "drwxr-xr-x 2.0 unx       0 b- stor 17-Jan-15 16:06 META-INF/",
                []
            ],
            [
                "There are some JAR files created by the Maven Assembly Plugin with content similar to this, and the entry META-INF/maven/ has permissions 177777 (octal).",
                ["OB", "SR"]
            ],
            [
                "Constructing a ZipFile from this file, the method isUnixSymlink incorrectly returns true for the entry META-INF/maven/ (and it correctly returns false for the entry META-INF/.",
                ["OB", "SR"]
            ],
            [
                "Here is a sample Java code that can be used to see the behaviour:",
                ["SR"]
            ],
            [
                "public static void main(String[] args) throws IOException {",
                "CODE"
            ],
            [
                "try (ZipFile zipFile = new ZipFile(new File(\"invalid-entry.jar\"))) {",
                "CODE"
            ],
            ["printAttributes(zipFile, \"META-INF/\");", "CODE"],
            ["printAttributes(zipFile, \"META-INF/maven/\");", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "private static void printAttributes(ZipFile zipFile, String name) {",
                "CODE"
            ],
            [
                "ZipArchiveEntry entry = zipFile.getEntriesInPhysicalOrder(name).iterator().next();",
                "CODE"
            ],
            [
                "System.out.printf(\"%-17s: symlink:%-5s - unixMode:%s%n\", name, entry.isUnixSymlink(), entry.getUnixMode());",
                "CODE"
            ],
            ["}", "CODE"],
            ["This code outputs:", []],
            ["META-INF/      : symlink:false - unixMode:16877", []],
            ["META-INF/maven/ : symlink:true - unixMode:65535", []],
            [
                "The ?rwsrwsrwt permissions show that the Zip entry is broken in the first place, but I think isUnixSymlink should still return false in that case, and not consider this entry to be a symlink.",
                []
            ],
            [
                "It seems the fix would be to update isUnixSymlink and check whether the unix mode is equal to SHORT_MASK, and return false in that case as it would indicate a broken entry.",
                []
            ],
            [
                "This change does not break any existing tests, but I'm not sure if this is the proper fix.",
                []
            ],
            ["public boolean isUnixSymlink() {", "CODE"],
            ["int unixMode = getUnixMode();", "CODE"],
            [
                "return unixMode == SHORT_MASK ? false : (unixMode & UnixStat.LINK_FLAG) == UnixStat.LINK_FLAG;",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-110": {
        "code_elements": [
            "public void testUnmodifiableNonRandomAccessList() throws Exception {",
            "_verifyCollection(Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\"first\", \"second\"))));",
            "}",
            "public void testUnmodifiableNonRandomAccessList() throws Exception {",
            "Collection<?> exp = Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\"first\", \"second\")));",
            "ObjectMapper mapper = new ObjectMapper();",
            "mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
            "String json = mapper.writeValueAsString(exp);",
            "Collection<?> act = mapper.readValue(json, Collection.class);",
            "assertEquals(exp, act);",
            "assertEquals(exp.getClass(), act.getClass());",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["UnmodifiableList", "UnmodifiableRandomAccessList"],
        "summary_text": [
            "Inconsistent handling of Collections$UnmodifiableList VS Collections$UnmodifiableRandomAccessList"
        ],
        "desc_hints": [
            "assertEquals",
            "UnmodifiableList",
            "testUnmodifiableNonRandomAccessList",
            "RandomAccess",
            "java.util.Collections",
            "com.fasterxml.jackson.databind.exc.InvalidDefinitionException",
            "Collections.unmodifiableList",
            "exp.getClass",
            "ObjectMapper",
            "Collection.class",
            "act.getClass",
            "_verifyCollection",
            "mapper.writeValueAsString",
            "Arrays.asList",
            "mapper.readValue",
            "JsonTypeInfo.As.PROPERTY",
            "java.util.Collections.unmodifiableList",
            "mapper.enableDefaultTyping",
            "TestDefaultForUtilCollections1868",
            "LinkedList",
            "UnmodifiableRandomAccessList",
            "DefaultTyping.NON_FINAL"
        ],
        "desc_text": [
            [
                "I'm sorry to bring that one up again, but I'm under the impression that the issue about unmodifiable collections (#1880) is still not solved completely.",
                ["OB"]
            ],
            [
                "In fact, the way the CLASS_UNMODIFIABLE_LIST is retrieved here yields Collections$UnmodifiableRandomAccessList, and therefore only this type is currently supported by Jackson 2.9.8.",
                []
            ],
            [
                "However, using Collections.unmodifiableList() on a List implementation that doesn't implement RandomAccess will yield a Collections$UnmodifiableList instead, which is not deserialized properly and fails with:",
                ["OB"]
            ],
            [
                "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `java.util.Collections$UnmodifiableList` (no Creators, like default constructor, exist): no default no-arguments constructor found",
                []
            ],
            [
                "This can be reproduced by adding the following test case in TestDefaultForUtilCollections1868:",
                ["SR"]
            ],
            [
                "public void testUnmodifiableNonRandomAccessList() throws Exception {",
                "CODE"
            ],
            [
                "_verifyCollection(Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\"first\", \"second\"))));",
                "CODE"
            ],
            ["}", "CODE"],
            ["Or more generally for outside the project:", []],
            [
                "public void testUnmodifiableNonRandomAccessList() throws Exception {",
                "CODE"
            ],
            [
                "Collection<?> exp = Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\"first\", \"second\")));",
                "CODE"
            ],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
                "CODE"
            ],
            ["String json = mapper.writeValueAsString(exp);", "CODE"],
            [
                "Collection<?> act = mapper.readValue(json, Collection.class);",
                "CODE"
            ],
            ["assertEquals(exp, act);", "CODE"],
            ["assertEquals(exp.getClass(), act.getClass());", "CODE"],
            ["}", "CODE"],
            [
                "Currently java.util.Collections.unmodifiableList() can only return these 2 types of unmodifiable lists, so I believe it is safe for now to just hardcode yet another special case for this class.",
                ["SR"]
            ],
            [
                "This can currently be solved on user side by adding a mixin, but since Collections$UnmodifiableRandomAccessList is supported, I would find it natural to also support the non-random access variant.",
                []
            ]
        ]
    },
    "Closure-70": {
        "code_elements": [
            "/*global window*/",
            "/*jslint sub: true*/",
            "/**",
            "* @constructor",
            "* @param {!Element} element",
            "*/",
            "function Example(element) {",
            "/**",
            "* @param {!string} ns",
            "* @param {!string} name",
            "* @return {undefined}",
            "*/",
            "this.appendElement = function appendElement(ns, name) {",
            "var e = element.ownerDocument.createElementNS(ns, name);",
            "element.appendChild(e);",
            "};",
            "}",
            "window[\"Example\"] = Example;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["unexpected typed coverage of less than 100%"],
        "desc_hints": [
            "element.appendChild",
            "element.ownerDocument.createElementNS",
            "this.appendElement",
            "JavaScript",
            "checkTypes",
            "compiler.jar",
            "compiled.js",
            "appendElement"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Create JavaScript file:", []],
            ["/*global window*/", "CODE"],
            ["/*jslint sub: true*/", "CODE"],
            ["/**", "CODE"],
            ["* @constructor", "CODE"],
            ["* @param {!Element} element", "CODE"],
            ["*/", "CODE"],
            ["function Example(element) {", "CODE"],
            ["/**", "CODE"],
            ["* @param {!string} ns", "CODE"],
            ["* @param {!string} name", "CODE"],
            ["* @return {undefined}", "CODE"],
            ["*/", "CODE"],
            ["this.appendElement = function appendElement(ns, name) {", "CODE"],
            [
                "var e = element.ownerDocument.createElementNS(ns, name);",
                "CODE"
            ],
            ["element.appendChild(e);", "CODE"],
            ["};", "CODE"],
            ["}", "CODE"],
            ["window[\"Example\"] = Example;", "CODE"],
            ["2.", ["OB", "SR"]],
            ["compile it:", []],
            [
                "java -jar compiler.jar --jscomp_error checkTypes --summary_detail_level 3 --js v.js --js_output_file compiled.js",
                []
            ],
            ["3.", ["OB", "SR"]],
            ["observe the outcome:", []],
            ["0 error(s), 0 warning(s), 73.7% typed", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["This was expected:", ["EB"]],
            ["0 error(s), 0 warning(s), 100% typed", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "Closure Compiler Version: 964, Built on: 2011/04/05 14:31 on GNU/Linux.",
                []
            ],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Cli-27": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Unable to select a pure long option in a group"],
        "desc_hints": ["group.setSelected", "OptionGroup"],
        "desc_text": [
            [
                "OptionGroup doesn't play nice with options with a long name and no short name.",
                ["OB", "EB"]
            ],
            [
                "If the selected option hasn't a short name, group.setSelected(option) has no effect.",
                ["OB", "EB"]
            ]
        ]
    },
    "Codec-4": {
        "code_elements": [
            "import org.apache.commons.codec.binary.*;",
            "public class B64 {",
            "public static void main(String[] args) throws Exception {",
            "Base64 b64 = new Base64();",
            "String s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";",
            "String s2 = \"aaaaaaaaaa\";",
            "String s3 = \"a\";",
            "byte[] b1 = s1.getBytes(\"UTF-8\");",
            "byte[] b2 = s2.getBytes(\"UTF-8\");",
            "byte[] b3 = s3.getBytes(\"UTF-8\");",
            "byte[] result;",
            "result = Base64.encodeBase64(b1);",
            "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
            "result = b64.encode(b1);",
            "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
            "result = Base64.encodeBase64(b2);",
            "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
            "result = b64.encode(b2);",
            "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
            "result = Base64.encodeBase64(b3);",
            "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
            "result = b64.encode(b3);",
            "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "new Base64().encode() appends a CRLF, and chunks results into 76 character lines"
        ],
        "desc_hints": [
            "b64.encode",
            "org.apache.commons.codec.binary",
            "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ",
            "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh",
            "s3.getBytes",
            "s1.getBytes",
            "Base64.encodeBase64",
            "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ",
            "YWFhYWFhYWFhYQ",
            "s2.getBytes",
            "System.out.println"
        ],
        "desc_text": [
            ["The instance encode() method (e.g.", []],
            ["new Base64().encode()) appends a CRLF.", ["OB"]],
            [
                "Actually it's fully chunking the output into 76 character lines.",
                ["OB"]
            ],
            ["Commons-Codec-1.3 did not do this.", ["OB"]],
            [
                "The static Base64.encodeBase64() method behaves the same in both 1.3 and 1.4, so this problem only affects the instance encode() method.",
                []
            ],
            ["import org.apache.commons.codec.binary.*;", "CODE"],
            ["public class B64 {", "CODE"],
            [
                "public static void main(String[] args) throws Exception {",
                "CODE"
            ],
            ["Base64 b64 = new Base64();", "CODE"],
            [
                "String s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";",
                "CODE"
            ],
            ["String s2 = \"aaaaaaaaaa\";", "CODE"],
            ["String s3 = \"a\";", "CODE"],
            ["byte[] b1 = s1.getBytes(\"UTF-8\");", "CODE"],
            ["byte[] b2 = s2.getBytes(\"UTF-8\");", "CODE"],
            ["byte[] b3 = s3.getBytes(\"UTF-8\");", "CODE"],
            ["byte[] result;", "CODE"],
            ["result = Base64.encodeBase64(b1);", "CODE"],
            [
                "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
                "CODE"
            ],
            ["result = b64.encode(b1);", "CODE"],
            [
                "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
                "CODE"
            ],
            ["result = Base64.encodeBase64(b2);", "CODE"],
            [
                "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
                "CODE"
            ],
            ["result = b64.encode(b2);", "CODE"],
            [
                "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
                "CODE"
            ],
            ["result = Base64.encodeBase64(b3);", "CODE"],
            [
                "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
                "CODE"
            ],
            ["result = b64.encode(b3);", "CODE"],
            [
                "System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Here's my output:", []],
            ["$ java -cp commons-codec-1.3.jar:.", ["OB"]],
            ["B64", []],
            [
                "[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]",
                []
            ],
            [
                "[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]",
                []
            ],
            ["[YWFhYWFhYWFhYQ==]", []],
            ["[YWFhYWFhYWFhYQ==]", []],
            ["[YQ==]", []],
            ["[YQ==]", []],
            ["$ java -cp commons-codec-1.4.jar:.", ["OB"]],
            ["B64", []],
            [
                "[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]",
                []
            ],
            [
                "[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh",
                []
            ],
            ["YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==", []],
            ["]", []],
            ["[YWFhYWFhYWFhYQ==]", []],
            ["[YWFhYWFhYWFhYQ==", []],
            ["]", []],
            ["[YQ==]", []],
            ["[YQ==", []],
            ["]", []]
        ]
    },
    "JacksonDatabind-43": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Problem with Object id handling, explicit null token"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "I'd like bit more explanation here, as well as unit test showing in what cases should this be a problem.",
                ["EB"]
            ],
            [
                "Deserializers are typically never called with null tokens, as it is caller's responsibility to handle that (for root value handling it's mapper/reader, for POJO/Collection/Map properties, deserializer for that structured type)",
                []
            ]
        ]
    },
    "Math-62": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Miscellaneous issues concerning the \"optimization\" package"
        ],
        "desc_hints": [
            "DirectSearchOptimizer",
            "PowellOptimizer",
            "FunctionEvaluationException",
            "MultiStartMultivariate",
            "DifferentiableMultivariateVectorialOptimizer",
            "AbstractScalarOptimizer",
            "ConvergenceChecker",
            "PointValuePair",
            "OptimizationException",
            "AbstractLeastSquaresOptimizer",
            "optimization.direct",
            "NonLinearConjugateGradientOptimizer",
            "optimization.general",
            "ConvergenceException",
            "MultiStartUnivariateRealOptimizer",
            "BaseAbstractVectorialOptimizer",
            "MultiStart",
            "LevenbergMarquardtOptimizer",
            "LevenbergMarquartdOptimizer",
            "BrentOptimizer"
        ],
        "desc_text": [
            [
                "Revision 990792 contains changes triggered the following issues:",
                ["OB", "SR"]
            ],
            ["MATH-394", []],
            ["MATH-397", []],
            ["MATH-404", []],
            [
                "This issue collects the currently still unsatisfactory code (not necessarily sorted in order of annoyance):",
                []
            ],
            [
                "\"BrentOptimizer\": a specific convergence checker must be used.",
                []
            ],
            [
                "\"LevenbergMarquardtOptimizer\" also has specific convergence checks.",
                []
            ],
            [
                "Trying to make convergence checking independent of the optimization algorithm creates problems (conceptual and practical):",
                ["SR"]
            ],
            [
                "See \"BrentOptimizer\" and \"LevenbergMarquardtOptimizer\", the algorithm passes \"points\" to the convergence checker, but the actual meaning of the points can very well be different in the caller (optimization algorithm) and the callee (convergence checker).",
                ["OB"]
            ],
            [
                "In \"PowellOptimizer\" the line search (\"BrentOptimizer\") tolerances depend on the tolerances within the main algorithm.",
                ["OB", "SR"]
            ],
            [
                "Since tolerances come with \"ConvergenceChecker\" and so can be changed at any time, it is awkward to adapt the values within the line search optimizer without exposing its internals (\"BrentOptimizer\" field) to the enclosing class (\"PowellOptimizer\").",
                ["OB"]
            ],
            [
                "Given the numerous changes, some Javadoc comments might be out-of-sync, although I did try to update them all.",
                ["OB", "SR"]
            ],
            [
                "Class \"DirectSearchOptimizer\" (in package \"optimization.direct\") inherits from class \"AbstractScalarOptimizer\" (in package \"optimization.general\").",
                ["OB"]
            ],
            [
                "Some interfaces are defined in package \"optimization\" but their base implementations (abstract class that contain the boiler-plate code) are in package \"optimization.general\" (e.g.",
                ["SR"]
            ],
            [
                "\"DifferentiableMultivariateVectorialOptimizer\" and \"BaseAbstractVectorialOptimizer\").",
                ["OB"]
            ],
            [
                "No check is performed to ensure the the convergence checker has been set (see e.g.",
                []
            ],
            [
                "\"BrentOptimizer\" and \"PowellOptimizer\"); if it hasn't there will be a NPE.",
                ["OB"]
            ],
            [
                "The alternative is to initialize a default checker that will never be used in case the user had intended to explicitly sets the checker.",
                ["SR"]
            ],
            [
                "\"NonLinearConjugateGradientOptimizer\": Ugly workaround for the checked \"ConvergenceException\".",
                ["OB"]
            ],
            [
                "Everywhere, we trail the checked \"FunctionEvaluationException\" although it is never used.",
                ["OB"]
            ],
            [
                "There remains some duplicate code (such as the \"multi-start loop\" in the various \"MultiStart...\" implementations).",
                ["OB"]
            ],
            [
                "The \"ConvergenceChecker\" interface is very general (the \"converged\" method can take any number of \"...PointValuePair\").",
                []
            ],
            [
                "However there remains a \"semantic\" problem: One cannot be sure that the list of points means the same thing for the caller of \"converged\" and within the implementation of the \"ConvergenceChecker\" that was independently set.",
                ["OB"]
            ],
            [
                "It is not clear whether it is wise to aggregate the counter of gradient evaluations to the function evaluation counter.",
                ["OB"]
            ],
            [
                "In \"LevenbergMarquartdOptimizer\" for example, it would be unfair to do so.",
                ["SR"]
            ],
            [
                "Currently I had to remove all tests referring to gradient and Jacobian evaluations.",
                ["OB", "SR"]
            ],
            [
                "In \"AbstractLeastSquaresOptimizer\" and \"LevenbergMarquardtOptimizer\", occurences of \"OptimizationException\" were replaced by the unchecked \"ConvergenceException\" but in some cases it might not be the most appropriate one.",
                ["OB"]
            ],
            [
                "\"MultiStartUnivariateRealOptimizer\": in the other classes (\"MultiStartMultivariate...\") similar to this one, the randomization is on the firts-guess value while in this class, it is on the search interval.",
                []
            ],
            [
                "I think that here also we should randomly choose the start value (within the user-selected interval).",
                ["EB", "SR"]
            ],
            [
                "The Javadoc utility raises warnings (see output of \"mvn site\") which I couldn't figure out how to correct.",
                ["OB"]
            ],
            [
                "Some previously existing classes and interfaces have become no more than a specialisation of new \"generics\" classes; it might be interesting to remove them in order to reduce the number of classes and thus limit the potential for confusion.",
                []
            ]
        ]
    },
    "Math-104": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Special functions not very accurate"],
        "desc_hints": ["Gamma.regularizedGammaP"],
        "desc_text": [
            [
                "The Gamma and Beta functions return values in double precision but the default epsilon is set to 10e-9.",
                ["OB", "SR"]
            ],
            [
                "I think that the default should be set to the highest possible accuracy, as this is what I'd expect to be returned by a double precision routine.",
                ["EB"]
            ],
            [
                "Note that the erf function already uses a call to Gamma.regularizedGammaP with an epsilon of 1.0e-15.",
                ["SR"]
            ]
        ]
    },
    "Closure-32": {
        "code_elements": [
            "/**",
            "* @preserve",
            "This",
            "was",
            "ASCII",
            "Art",
            "*/",
            "/*",
            "This",
            "was",
            "ASCII",
            "Art",
            "*/"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Preserve doesn't preserve whitespace at start of line"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Code such as:", []],
            ["/**", "CODE"],
            ["* @preserve", "CODE"],
            ["This", "CODE"],
            ["was", "CODE"],
            ["ASCII", "CODE"],
            ["Art", "CODE"],
            ["*/", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["The words line up on the left:", ["OB", "SR"]],
            ["/*", "CODE"],
            ["This", "CODE"],
            ["was", "CODE"],
            ["ASCII", "CODE"],
            ["Art", "CODE"],
            ["*/", "CODE"],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Live web verison.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Lang-52": {
        "code_elements": [
            "For example, document.getElementById(\"test\").value = '<script>alert(\\'aaa\\');</script>';this expression will make IE render page uncorrect, it should be document.getElementById(\"test\").value = '<script>alert(\\'aaa\\');<\\/script>';",
            "String s = \"<script>alert('aaa');</script>\";",
            "String str = org.springframework.web.util.JavaScriptUtils.javaScriptEscape(s);",
            "System.out.println(\"Spring JS Escape : \"+str);",
            "str = org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(s);",
            "System.out.println(\"Apache Common Lang JS Escape : \"+ str);"
        ],
        "stack_traces": [],
        "summary_hints": ["StringEscapeUtils.escapeJavaScript"],
        "summary_text": [
            "StringEscapeUtils.escapeJavaScript() method did not escape '/' into '\\/', it will make IE render page uncorrectly"
        ],
        "desc_hints": [
            "JavascriptEscape",
            "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript",
            "org.springframework.web.util.JavaScriptUtils.javaScriptEscape",
            "document.getElementById",
            "System.out.println"
        ],
        "desc_text": [
            [
                "If Javascripts including'/', IE will parse the scripts uncorrectly, actually '/' should be escaped to '\\/'.",
                ["OB", "EB", "SR"]
            ],
            [
                "For example, document.getElementById(\"test\").value = '<script>alert(\\'aaa\\');</script>';this expression will make IE render page uncorrect, it should be document.getElementById(\"test\").value = '<script>alert(\\'aaa\\');<\\/script>';",
                "CODE"
            ],
            ["Btw, Spring's JavascriptEscape behavor is correct.", ["OB"]],
            [
                "Try to run below codes, you will find the difference:",
                ["OB", "SR"]
            ],
            ["String s = \"<script>alert('aaa');</script>\";", "CODE"],
            [
                "String str = org.springframework.web.util.JavaScriptUtils.javaScriptEscape(s);",
                "CODE"
            ],
            ["System.out.println(\"Spring JS Escape : \"+str);", "CODE"],
            [
                "str = org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(s);",
                "CODE"
            ],
            [
                "System.out.println(\"Apache Common Lang JS Escape : \"+ str);",
                "CODE"
            ]
        ]
    },
    "Math-78": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "during ODE integration, the last event in a pair of very close event may not be detected"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "When an events follows a previous one very closely, it may be ignored.",
                ["OB", "SR"]
            ],
            [
                "The occurrence of the bug depends on the side of the bracketing interval that was selected.",
                ["OB"]
            ],
            [
                "For example consider a switching function that is increasing around first event around t = 90, reaches its maximum and is decreasing around the second event around t = 135.",
                ["OB", "SR"]
            ],
            [
                "If an integration step spans from 67.5 and 112.5, the switching function values at start and end of step will have opposite signs, so the first event will be detected.",
                ["OB", "SR"]
            ],
            [
                "The solver will find the event really occurs at 90.0 and will therefore truncate the step at 90.0.",
                []
            ],
            [
                "The next step will start from where the first step ends, i.e.",
                ["OB", "SR"]
            ],
            ["it will start at 90.0.", ["OB"]],
            ["Let's say this step spans from 90.0 to 153.0.", ["SR"]],
            [
                "The switching function switches once again in this step.",
                ["OB", "SR"]
            ],
            [
                "If the solver for the first event converged to a value slightly before 90.0 (say 89.9999999), then the switch will not be detected because g(89.9999999) and g(153.0) are both negative.",
                ["OB", "SR"]
            ],
            [
                "This bug was introduced as of r781157 (2009-06-02) when special handling of events very close to step start was added.",
                ["OB", "SR"]
            ]
        ]
    },
    "Time-3": {
        "code_elements": [
            "final MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));",
            "System.out.println(\"Start date:   \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
            "mdt.addHours(-1);",
            "System.out.println(\"addHours(-1): \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
            "mdt.addHours(0);",
            "System.out.println(\"addHours(0):  \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
            "mdt.addDays(0);",
            "System.out.println(\"addDays(0):   \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");"
        ],
        "stack_traces": [],
        "summary_hints": ["addDays", "MutableDateTime"],
        "summary_text": ["addDays(0) changes value of MutableDateTime"],
        "desc_hints": [
            "addDays",
            "addYears",
            "getMillis",
            "mdt.addHours",
            "MutableDateTime",
            "mdt.toInstant",
            "addHours",
            "addSeconds",
            "addMonths",
            "DateTimeZone.forID",
            "addMinutes",
            "mdt.addDays",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Upon DST transition from summer to winter time zone, adding the amount of zero days to a mutable date time object changes the value of the object.",
                ["OB", "SR"]
            ],
            ["The code", ["OB"]],
            [
                "final MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));",
                "CODE"
            ],
            [
                "System.out.println(\"Start date:   \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
                "CODE"
            ],
            ["mdt.addHours(-1);", "CODE"],
            [
                "System.out.println(\"addHours(-1): \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
                "CODE"
            ],
            ["mdt.addHours(0);", "CODE"],
            [
                "System.out.println(\"addHours(0):  \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
                "CODE"
            ],
            ["mdt.addDays(0);", "CODE"],
            [
                "System.out.println(\"addDays(0):   \" + mdt + \" (\" + mdt.toInstant().getMillis() + \")\");",
                "CODE"
            ],
            ["prints", ["OB"]],
            [
                "Start date: 2011-10-30T03:00:00.000+01:00 (1319940000000)    //OK",
                ["SR"]
            ],
            [
                "addHours(-1): 2011-10-30T02:00:00.000+01:00 (1319936400000)  //OK",
                []
            ],
            [
                "addHours(0): 2011-10-30T02:00:00.000+01:00 (1319936400000)   //OK, no change in time",
                []
            ],
            [
                "addDays(0): 2011-10-30T02:00:00.000+02:00 (1319932800000)    //error, time has changed by 1 hour",
                []
            ],
            [
                "The methods addMonths and addYears show the same problem; addSeconds, addMinutes and addHours are ok.",
                []
            ],
            ["I have tested with version 2.3.", []],
            [
                "However, if I repeat the test with Joda 1.5.2, the invocation of addDays(0) does not change the date's value.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-47": {
        "code_elements": [
            "public class Foo {",
            "@JsonSerialize(as = BaseAccessionIdentifier.class)",
            "@JsonDeserialize(as = BaseAccessionIdentifier.class)",
            "public AccessionIdentifier getReference() {",
            "}",
            "}",
            "}",
            "public class BaseAccessionIdentifier implements AccessionIdentifier {",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(AnnotationIntrospector.java:821)",
            "at com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.refineSerializationType(AnnotationIntrospectorPair.java:488)",
            "at com.fasterxml.jackson.databind.ser.PropertyBuilder.findSerializationType(PropertyBuilder.java:194)",
            "at com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(PropertyBuilder.java:73)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._constructWriter(BeanSerializerFactory.java:805)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties(BeanSerializerFactory.java:608)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:388)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:271)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:223)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:157)",
            "at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1215)",
            "at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1167)",
            "at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:490)",
            "at com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:688)",
            "at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:107)",
            "at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1428)",
            "at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1129)",
            "at com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(ObjectWriter.java:1001)",
            "at org.pharmgkb.jackson.JacksonTest.testModelObjects(JacksonTest.java:48)"
        ],
        "summary_hints": ["superType", "JsonSerialize"],
        "summary_text": [
            "@JsonSerialize(as=superType) behavior disallowed in 2.7.4"
        ],
        "desc_hints": [
            "AnnotationIntrospectorPair.java",
            "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer",
            "ObjectWriter.java",
            "org.pharmgkb.model.BaseAccessionIdentifier",
            "JsonDeserialize",
            "com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString",
            "org.pharmgkb.model.AccessionIdentifier",
            "_configAndWriteValue",
            "_createAndCacheUntypedSerializer",
            "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer",
            "com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter",
            "BaseAccessionIdentifier",
            "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
            "PropertyBuilder.java",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "Prefetch.serialize",
            "BaseAccessionIdentifier.class",
            "_constructWriter",
            "JsonSerialize",
            "JacksonTest.java",
            "AnnotationIntrospector.java",
            "com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer",
            "DefaultSerializerProvider.java",
            "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties",
            "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer",
            "com.fasterxml.jackson.databind.ObjectWriter",
            "_createSerializer2",
            "BeanSerializerFactory.java",
            "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer",
            "com.fasterxml.jackson.databind.SerializerProvider",
            "SerializerProvider.java",
            "_createUntypedSerializer",
            "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.refineSerializationType",
            "com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType",
            "getReference",
            "AccessionIdentifier",
            "com.fasterxml.jackson.databind.ser.PropertyBuilder.findSerializationType",
            "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue",
            "org.pharmgkb.jackson.JacksonTest.testModelObjects"
        ],
        "desc_text": [
            [
                "#1178 fixed the problem with collections, but I'm seeing a problem with individual objects.",
                ["OB"]
            ],
            ["I'm getting:", ["OB"]],
            [
                "com.fasterxml.jackson.databind.JsonMappingException: Failed to widen type [simple type, class org.pharmgkb.model.AccessionIdentifier] with annotation (value org.pharmgkb.model.BaseAccessionIdentifier), from 'getReference': Class org.pharmgkb.model.BaseAccessionIdentifier not a super-type of [simple type, class org.pharmgkb.model.AccessionIdentifier]",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(AnnotationIntrospector.java:821)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.refineSerializationType(AnnotationIntrospectorPair.java:488)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.PropertyBuilder.findSerializationType(PropertyBuilder.java:194)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(PropertyBuilder.java:73)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._constructWriter(BeanSerializerFactory.java:805)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties(BeanSerializerFactory.java:608)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:388)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:271)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:223)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:157)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1215)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1167)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:490)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:688)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:107)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1428)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1129)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(ObjectWriter.java:1001)",
                "STACK_TRACE"
            ],
            [
                "at org.pharmgkb.jackson.JacksonTest.testModelObjects(JacksonTest.java:48)",
                "STACK_TRACE"
            ],
            ["On something like:", ["SR"]],
            ["public class Foo {", "CODE"],
            ["@JsonSerialize(as = BaseAccessionIdentifier.class)", "CODE"],
            ["@JsonDeserialize(as = BaseAccessionIdentifier.class)", "CODE"],
            ["public AccessionIdentifier getReference() {", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public interface AccessionIdentifier {", []],
            ["}", "CODE"],
            [
                "public class BaseAccessionIdentifier implements AccessionIdentifier {",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-96": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["PropertyNamingStrategy"],
        "summary_text": [
            "Implicit constructor property names are not renamed properly with PropertyNamingStrategy"
        ],
        "desc_hints": ["FasterXML", "PropertyNamingStrategy"],
        "desc_text": [
            ["(note: spin-off from FasterXML/jackson-modules-java8#67)", []],
            [
                "Looks like something with linking of creator properties (constructor arguments for annotated/discovered constructor) to \"regular\" properties does not work when using PropertyNamingStrategy.",
                ["OB", "SR"]
            ],
            [
                "Apparently this was working better until 2.9.1, but broke with 2.9.2.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-40": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["IllegalArgumentException"],
        "summary_text": [
            "\"<!DOCTYPE>\" IllegalArgumentException: String must not be empty"
        ],
        "desc_hints": ["Jsoup.parse"],
        "desc_text": [
            [
                "While this may be a contrived example, Jsoup.parse(\"<!DOCTYPE>\") throws an exception, this was unexpected.",
                ["SR"]
            ],
            [
                "Possibly related, a proper document with <!DOCTYPE> (no name) is generating corrupt html e.g.",
                []
            ],
            [
                "\"<!DOCTYPE <html> ...\" (missing right angle bracket on DOCTYPE.)",
                []
            ],
            [
                "Spec says \"When a DOCTYPE token is created, its name, public identifier, and system identifier must be marked as missing (which is a distinct state from the empty string), [...]\"",
                ["OB"]
            ]
        ]
    },
    "Closure-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Compiler fails to find amd module in a subdirectory"],
        "desc_hints": ["Bar.js", "compiler.jar", "Foo.js", "out.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Create 1st AMD module in lib/Foo.js", []],
            ["2.", ["OB", "SR"]],
            ["Create 2nd AMD module in Bar.js depending on lib/Foo.js", []],
            ["3.", ["OB", "SR"]],
            ["Try to compile both files with Bar.js as main module", ["SR"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "java -jar compiler.jar --transform_amd_modules --process_common_js_modules --common_js",
                []
            ],
            [
                "_entry_module=Bar.js --compilation_level=ADVANCED_OPTIMIZATIONS --js_output_file=out.js --js=Bar.js --js=lib/Foo.js",
                []
            ],
            [
                "ERROR - required entry point \"module$lib$Foo\" never provided",
                ["OB"]
            ],
            ["1 error(s), 0 warning(s)", ["OB"]],
            ["make: *** [out.js] Error 1", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Latest version from trunk including fix for issue #804", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Find minimal not-working example attached with Makefile.",
                ["OB", "SR"]
            ],
            [
                "The same setup has been working prior to fix for #804 (although with backslashes).",
                []
            ],
            [
                "This feature does not seem to have enough unit test coverage.",
                ["OB"]
            ]
        ]
    },
    "Time-5": {
        "code_elements": [
            "Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})).normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));",
            "return p.getMonths();",
            "Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.standard()).normalizedStandard(PeriodType.standard());",
            "return p.getMonths();",
            "Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.standard().withYearsRemoved()).normalizedStandard(PeriodType.standard().withYearsRemoved());",
            "return p.getMonths();"
        ],
        "stack_traces": [],
        "summary_hints": ["PeriodType"],
        "summary_text": [
            "none standard PeriodType without year throws exception"
        ],
        "desc_hints": [
            "AndroidRuntime",
            "java.lang.UnsupportedOperationException",
            "org.joda.time.Period.normalizedStandard",
            "normalizedStandard",
            "org.joda.time.Period.withYears",
            "DurationFieldType.months",
            "Period.java",
            "DurationFieldType",
            "DurationFieldType.weeks",
            "PeriodType.java",
            "DateTime",
            "withYearsRemoved",
            "PeriodType.standard",
            "endDate.getTime",
            "getMonths",
            "startDate.getTime",
            "PeriodType.forFields",
            "org.joda.time.PeriodType.setIndexedField"
        ],
        "desc_text": [
            ["Hi.", ["OB"]],
            [
                "I tried to get a Period only for months and weeks with following code:",
                ["OB", "SR"]
            ],
            [
                "Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})).normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));",
                "CODE"
            ],
            ["return p.getMonths();", "CODE"],
            ["This throws following exception:", ["OB"]],
            [
                "10-17 14:35:50.999: E/AndroidRuntime(1350): java.lang.UnsupportedOperationException: Field is not supported",
                []
            ],
            [
                "10-17 14:35:50.999: E/AndroidRuntime(1350): at org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)",
                []
            ],
            [
                "10-17 14:35:50.999: E/AndroidRuntime(1350): at org.joda.time.Period.withYears(Period.java:896) 10-17",
                []
            ],
            [
                "14:35:50.999: E/AndroidRuntime(1350): at org.joda.time.Period.normalizedStandard(Period.java:1630)",
                []
            ],
            [
                "Even removing the year component with .withYearsRemoved() throws the same exception:",
                ["OB"]
            ],
            ["this works:", []],
            [
                "Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.standard()).normalizedStandard(PeriodType.standard());",
                "CODE"
            ],
            ["return p.getMonths();", "CODE"],
            ["this fails:", []],
            [
                "Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.standard().withYearsRemoved()).normalizedStandard(PeriodType.standard().withYearsRemoved());",
                "CODE"
            ],
            ["return p.getMonths();", "CODE"]
        ]
    },
    "Closure-130": {
        "code_elements": [
            "function () {",
            "return function () {",
            "var arg = arguments;",
            "setTimeout(function() { alert(args); }, 0);",
            "}",
            "}",
            "function () {",
            "return function () {",
            "setTimeout(function() { alert(arguments); }, 0);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["arguments is moved to another scope"],
        "desc_hints": [
            "CompilerOptions.collapsePropertiesOnExternTypes",
            "setTimeout"
        ],
        "desc_text": [
            [
                "Using ADVANCED_OPTIMIZATIONS with CompilerOptions.collapsePropertiesOnExternTypes = true a script I used broke, it was something like:",
                ["SR"]
            ],
            ["function () {", "CODE"],
            ["return function () {", "CODE"],
            ["var arg = arguments;", "CODE"],
            ["setTimeout(function() { alert(args); }, 0);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Unfortunately it was rewritten to:", []],
            ["function () {", "CODE"],
            ["return function () {", "CODE"],
            ["setTimeout(function() { alert(arguments); }, 0);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["arguments should not be collapsed.", ["OB", "EB"]]
        ]
    },
    "Jsoup-89": {
        "code_elements": [
            "public String setValue(String val) {",
            "String oldVal = parent.get(this.key);",
            "if (parent != null) {",
            "int i = parent.indexOfKey(this.key);",
            "if (i != Attributes.NotFound)",
            "parent.vals[i] = val;",
            "}",
            "this.val = val;",
            "return oldVal;",
            "}",
            "public void setKey(String key) {",
            "Validate.notNull(key);",
            "key = key.trim();",
            "Validate.notEmpty(key); // trimming could potentially make empty, so validate here",
            "if (parent != null) {",
            "int i = parent.indexOfKey(this.key);",
            "if (i != Attributes.NotFound)",
            "parent.keys[i] = key;",
            "}",
            "this.key = key;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Attribute.setValue"],
        "summary_text": [
            "NPE in Attribute.setValue() for attribute without parent"
        ],
        "desc_hints": [
            "parent.vals",
            "Validate.notEmpty",
            "Attributes.NotFound",
            "key.trim",
            "parent.indexOfKey",
            "this.val",
            "parent.keys",
            "parent.get",
            "this.key",
            "setValue",
            "setKey",
            "oldVal",
            "Validate.notNull"
        ],
        "desc_text": [
            ["public String setValue(String val) {", "CODE"],
            ["String oldVal = parent.get(this.key);", "CODE"],
            ["if (parent != null) {", "CODE"],
            ["int i = parent.indexOfKey(this.key);", "CODE"],
            ["if (i != Attributes.NotFound)", "CODE"],
            ["parent.vals[i] = val;", "CODE"],
            ["}", "CODE"],
            ["this.val = val;", "CODE"],
            ["return oldVal;", "CODE"],
            ["}", "CODE"],
            [
                "Its useless to check parent for null after it has been dereferenced.",
                ["OB"]
            ],
            ["I guess this is a copy-paste-bug:", []],
            ["public void setKey(String key) {", "CODE"],
            ["Validate.notNull(key);", "CODE"],
            ["key = key.trim();", "CODE"],
            [
                "Validate.notEmpty(key); // trimming could potentially make empty, so validate here",
                "CODE"
            ],
            ["if (parent != null) {", "CODE"],
            ["int i = parent.indexOfKey(this.key);", "CODE"],
            ["if (i != Attributes.NotFound)", "CODE"],
            ["parent.keys[i] = key;", "CODE"],
            ["}", "CODE"],
            ["this.key = key;", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Math-32": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["BSPTree class and recovery of a Euclidean 3D BRep"],
        "desc_hints": ["BSPMesh2.java", "PolyhedronsSet", "BoundaryRep"],
        "desc_text": [
            ["New to the work here.", ["OB"]],
            ["Thanks for your efforts on this code.", []],
            [
                "I create a BSPTree from a BoundaryRep (Brep) my test Brep is a cube as represented by a float array containing 8 3D points in(x,y,z) order and an array of indices (12 triplets for the 12 faces of the cube).",
                ["SR"]
            ],
            [
                "I construct a BSPMesh() as shown in the code below.",
                ["OB", "SR"]
            ],
            [
                "I can construct the PolyhedronsSet() but have problems extracting the faces from the BSPTree to reconstruct the BRep.",
                ["OB"]
            ],
            [
                "The attached code (BSPMesh2.java) shows that a small change to 1 of the vertex positions causes/corrects the problem.",
                ["OB", "SR"]
            ],
            ["Any ideas?", []]
        ]
    },
    "Closure-170": {
        "code_elements": [
            "function Test(n) {",
            "var i = 0;",
            "return typeof n !== \"undefined\" ? (i = n.length) : (n = \"foo\"), i",
            "}",
            "var dummy = \"6chars\";",
            "console && console.log( Test(dummy) );",
            "function Test(a) {",
            "return 0",
            "}",
            "var dummy = \"6chars\";",
            "console && console.log(Test(dummy));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Overly aggressive comma removal"],
        "desc_hints": ["console.log"],
        "desc_text": [
            [
                "When I compile the following code using simple optimizations,",
                ["OB", "SR"]
            ],
            ["function Test(n) {", "CODE"],
            ["var i = 0;", "CODE"],
            [
                "return typeof n !== \"undefined\" ? (i = n.length) : (n = \"foo\"), i",
                "CODE"
            ],
            ["}", "CODE"],
            ["var dummy = \"6chars\";", "CODE"],
            ["console && console.log( Test(dummy) );", "CODE"],
            ["I get this:", ["OB"]],
            ["function Test(a) {", "CODE"],
            ["return 0", "CODE"],
            ["}", "CODE"],
            ["var dummy = \"6chars\";", "CODE"],
            ["console && console.log(Test(dummy));", "CODE"],
            [
                "Which provides a different result than the original code.",
                ["OB"]
            ]
        ]
    },
    "Cli-12": {
        "code_elements": [
            ">   private static final String OPTION_TARGET = \"t\";",
            ">   private static final String OPTION_TARGET_LONG = \"target\";",
            "{",
            ">         parsedLine = parser.parse(cmdLineOpts, args);",
            ">       }",
            "catch (ParseException pe)",
            "{",
            ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
            "> \"\\n\");",
            ">         HelpFormatter hf = new HelpFormatter();",
            ">         hf.printHelp(USAGE, cmdLineOpts);",
            ">         System.exit(-1);",
            ">       }",
            ">   if (parsedLine.hasOption(OPTION_TARGET))",
            "{",
            ">     System.out.println(\"processing selected target: \" +",
            "> parsedLine.getOptionValue(OPTION_TARGET));",
            ">   }"
        ],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser interupts \"-target opt\" as \"-t arget opt\""
        ],
        "desc_hints": [
            "System.exit",
            "parsedLine.hasOption",
            "parsedLine.getOptionValue",
            "HelpFormatter",
            "pe.getMessage",
            "parser.parse",
            "posix.special.option",
            "PosixParser",
            "cmdLineOpts",
            "generateTarget",
            "Dsystem.property",
            "foobar.com",
            "hf.printHelp",
            "system.property",
            "parsedLine",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "This was posted on the Commons-Developer list and confirmed as a bug.",
                []
            ],
            ["> Is this a bug?", []],
            ["Or am I using this incorrectly?", []],
            ["> I have an option with short and long values.", ["OB", "SR"]],
            ["Given code that is", []],
            [
                "> essentially what is below, with a PosixParser I see results as",
                ["OB"]
            ],
            ["> follows:", []],
            [
                "> A command line with just \"-t\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block", ["OB"]],
            ["> (OK)", []],
            [
                "> A command line with just \"-target\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block (OK)", []],
            [
                "> A command line with just \"-t foobar.com\" prints out \"processing selected",
                ["OB", "SR"]
            ],
            ["> target: foobar.com\" (OK)", []],
            [
                "> A command line with just \"-target foobar.com\" prints out \"processing",
                ["SR"]
            ],
            ["> selected target: arget\" (ERROR?)", []],
            [
                "> ======================================================================",
                []
            ],
            ["> ==", []],
            ["> =======================", []],
            [">   private static final String OPTION_TARGET = \"t\";", "CODE"],
            [
                ">   private static final String OPTION_TARGET_LONG = \"target\";",
                "CODE"
            ],
            ["> // ...", []],
            ["> Option generateTarget = new Option(OPTION_TARGET,", []],
            [">                                    OPTION_TARGET_LONG,", []],
            [">                                    true,", []],
            [
                ">                                    \"Generate files for the specified",
                ["OB"]
            ],
            ["> target machine\");", []],
            ["> // ...", []],
            ["> try", []],
            ["{", "CODE"],
            [">         parsedLine = parser.parse(cmdLineOpts, args);", "CODE"],
            [">       }", "CODE"],
            ["catch (ParseException pe)", "CODE"],
            ["{", "CODE"],
            [
                ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
                "CODE"
            ],
            ["> \"\\n\");", "CODE"],
            [">         HelpFormatter hf = new HelpFormatter();", "CODE"],
            [">         hf.printHelp(USAGE, cmdLineOpts);", "CODE"],
            [">         System.exit(-1);", "CODE"],
            [">       }", "CODE"],
            [">   if (parsedLine.hasOption(OPTION_TARGET))", "CODE"],
            ["{", "CODE"],
            [
                ">     System.out.println(\"processing selected target: \" +",
                "CODE"
            ],
            ["> parsedLine.getOptionValue(OPTION_TARGET));", "CODE"],
            [">   }", "CODE"],
            [
                "It is a bug but it is due to well defined behaviour (so that makes me feel a",
                []
            ],
            ["little better about myself .", ["OB"]],
            ["To support special", []],
            [
                "(well I call them special anyway) like -Dsystem.property=value we need to be",
                []
            ],
            [
                "able to examine the first character of an option.",
                ["OB", "EB", "SR"]
            ],
            ["If the first character is", ["OB"]],
            [
                "itself defined as an Option then the remainder of the token is used as the",
                ["SR"]
            ],
            ["value, e.g.", ["OB"]],
            [
                "'D' is the token, it is an option so 'system.property=value' is the",
                []
            ],
            ["argument value for that option.", ["OB"]],
            ["This is the behaviour that we are seeing for", []],
            ["your example.", ["OB", "SR"]],
            [
                "'t' is the token, it is an options so 'arget' is the argument value.",
                []
            ],
            [
                "I suppose a solution to this could be to have a way to specify properties for",
                []
            ],
            ["parsers.", ["OB"]],
            ["In this case 'posix.special.option == true' for turning", []],
            ["on special options.", ["OB", "SR"]],
            ["I'll have a look into this and let you know.", []],
            [
                "Just to keep track of this and to get you used to how we operate, can you log a",
                []
            ],
            ["bug in bugzilla for this.", []],
            ["Thanks,", []],
            ["-John K", []]
        ]
    },
    "JacksonDatabind-100": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["TreeTraversingParser"],
        "summary_text": [
            "TreeTraversingParser does not take base64 variant into account"
        ],
        "desc_hints": [
            "getBinaryValue",
            "binaryValue",
            "TextNode",
            "TreeTraversingParser"
        ],
        "desc_text": [
            ["This affects at least 2.6.4 to current versions.", []],
            [
                "In TreeTraversingParser#getBinaryValue, a Base64Variant is accepted but ignored.",
                ["OB"]
            ],
            [
                "The call to n.binaryValue(), when n is a TextNode, then uses the default Base64 variant instead of what's specified.",
                ["OB", "EB", "SR"]
            ],
            [
                "It seems the correct behavior would be to call TextNode#getBinaryValue instead.",
                ["OB", "EB"]
            ]
        ]
    },
    "Mockito-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArgumentCaptor"],
        "summary_text": ["ArgumentCaptor no longer working for varargs"],
        "desc_hints": ["stackoverflow.com"],
        "desc_text": [
            [
                "I ran into the issue described here: http://stackoverflow.com/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor",
                ["SR"]
            ]
        ]
    },
    "JacksonDatabind-11": {
        "code_elements": [
            "class Something {",
            "public <T extends Ruleform> T getEntity()",
            "public <T extends Ruleform> void setEntity(T entity)",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Problem resolving locally declared generic type"],
        "desc_hints": ["setEntity", "getEntity"],
        "desc_text": [
            ["(reported by Hal H)", []],
            ["Case like:", []],
            ["class Something {", "CODE"],
            ["public <T extends Ruleform> T getEntity()", "CODE"],
            ["public <T extends Ruleform> void setEntity(T entity)", "CODE"],
            ["}", "CODE"],
            ["appears to fail on deserialization.", ["OB", "SR"]]
        ]
    },
    "Lang-56": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FastDateFormat.mRules"],
        "summary_text": [
            "FastDateFormat.mRules is not transient or serializable"
        ],
        "desc_hints": ["FindBugs"],
        "desc_text": [
            ["Reported by FindBugs.", ["OB"]],
            [
                "Either we need to make the Rule interface Serializable, or make mRules transient and add deserializing code to kick off init().",
                []
            ]
        ]
    },
    "Cli-22": {
        "code_elements": [
            ">   private static final String OPTION_TARGET = \"t\";",
            ">   private static final String OPTION_TARGET_LONG = \"target\";",
            "{",
            ">         parsedLine = parser.parse(cmdLineOpts, args);",
            ">       }",
            "catch (ParseException pe)",
            "{",
            ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
            "> \"\\n\");",
            ">         HelpFormatter hf = new HelpFormatter();",
            ">         hf.printHelp(USAGE, cmdLineOpts);",
            ">         System.exit(-1);",
            ">       }",
            ">   if (parsedLine.hasOption(OPTION_TARGET))",
            "{",
            ">     System.out.println(\"processing selected target: \" +",
            "> parsedLine.getOptionValue(OPTION_TARGET));",
            ">   }"
        ],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser interupts \"-target opt\" as \"-t arget opt\""
        ],
        "desc_hints": [
            "System.exit",
            "parsedLine.hasOption",
            "parsedLine.getOptionValue",
            "HelpFormatter",
            "pe.getMessage",
            "parser.parse",
            "posix.special.option",
            "PosixParser",
            "cmdLineOpts",
            "generateTarget",
            "Dsystem.property",
            "foobar.com",
            "hf.printHelp",
            "system.property",
            "parsedLine",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "This was posted on the Commons-Developer list and confirmed as a bug.",
                []
            ],
            ["> Is this a bug?", []],
            ["Or am I using this incorrectly?", []],
            ["> I have an option with short and long values.", ["OB", "SR"]],
            ["Given code that is", []],
            [
                "> essentially what is below, with a PosixParser I see results as",
                ["OB"]
            ],
            ["> follows:", []],
            [
                "> A command line with just \"-t\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block", ["OB"]],
            ["> (OK)", []],
            [
                "> A command line with just \"-target\" prints out the results of the catch",
                ["OB", "SR"]
            ],
            ["> block (OK)", []],
            [
                "> A command line with just \"-t foobar.com\" prints out \"processing selected",
                ["OB", "SR"]
            ],
            ["> target: foobar.com\" (OK)", []],
            [
                "> A command line with just \"-target foobar.com\" prints out \"processing",
                ["SR"]
            ],
            ["> selected target: arget\" (ERROR?)", []],
            [
                "> ======================================================================",
                []
            ],
            ["> ==", []],
            ["> =======================", []],
            [">   private static final String OPTION_TARGET = \"t\";", "CODE"],
            [
                ">   private static final String OPTION_TARGET_LONG = \"target\";",
                "CODE"
            ],
            ["> // ...", []],
            ["> Option generateTarget = new Option(OPTION_TARGET,", []],
            [">                                    OPTION_TARGET_LONG,", []],
            [">                                    true,", []],
            [
                ">                                    \"Generate files for the specified",
                ["OB"]
            ],
            ["> target machine\");", []],
            ["> // ...", []],
            ["> try", []],
            ["{", "CODE"],
            [">         parsedLine = parser.parse(cmdLineOpts, args);", "CODE"],
            [">       }", "CODE"],
            ["catch (ParseException pe)", "CODE"],
            ["{", "CODE"],
            [
                ">         System.out.println(\"Invalid command: \" + pe.getMessage() +",
                "CODE"
            ],
            ["> \"\\n\");", "CODE"],
            [">         HelpFormatter hf = new HelpFormatter();", "CODE"],
            [">         hf.printHelp(USAGE, cmdLineOpts);", "CODE"],
            [">         System.exit(-1);", "CODE"],
            [">       }", "CODE"],
            [">   if (parsedLine.hasOption(OPTION_TARGET))", "CODE"],
            ["{", "CODE"],
            [
                ">     System.out.println(\"processing selected target: \" +",
                "CODE"
            ],
            ["> parsedLine.getOptionValue(OPTION_TARGET));", "CODE"],
            [">   }", "CODE"],
            [
                "It is a bug but it is due to well defined behaviour (so that makes me feel a",
                []
            ],
            ["little better about myself .", ["OB"]],
            ["To support special", []],
            [
                "(well I call them special anyway) like -Dsystem.property=value we need to be",
                []
            ],
            [
                "able to examine the first character of an option.",
                ["OB", "EB", "SR"]
            ],
            ["If the first character is", ["OB"]],
            [
                "itself defined as an Option then the remainder of the token is used as the",
                ["SR"]
            ],
            ["value, e.g.", ["OB"]],
            [
                "'D' is the token, it is an option so 'system.property=value' is the",
                []
            ],
            ["argument value for that option.", ["OB"]],
            ["This is the behaviour that we are seeing for", []],
            ["your example.", ["OB", "SR"]],
            [
                "'t' is the token, it is an options so 'arget' is the argument value.",
                []
            ],
            [
                "I suppose a solution to this could be to have a way to specify properties for",
                []
            ],
            ["parsers.", ["OB"]],
            ["In this case 'posix.special.option == true' for turning", []],
            ["on special options.", ["OB", "SR"]],
            ["I'll have a look into this and let you know.", []],
            [
                "Just to keep track of this and to get you used to how we operate, can you log a",
                []
            ],
            ["bug in bugzilla for this.", []],
            ["Thanks,", []],
            ["-John K", []]
        ]
    },
    "Jsoup-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["outerHtml"],
        "summary_text": [
            "outerHtml method returns extra attribute when element definition has new line"
        ],
        "desc_hints": ["british_10k_2010.jpg", "element.outerHtml"],
        "desc_text": [
            ["I think this is a bug.", []],
            ["Version: jsoup-1.6.0.jar", []],
            ["Source:", []],
            ["---------BEGIN", []],
            ["<img alt=\"\"", []],
            [
                "src=\"/imagelibraries/homepagebanners/british_10k_2010.jpg\" />",
                []
            ],
            ["---------END", []],
            ["Steps to reproduce: element.outerHtml() ->", ["SR"]],
            ["Expected result: two attributes alt and src", ["OB", "EB"]],
            ["Observed result output", ["OB"]],
            ["----------BEGIN", []],
            [
                "<img alt=\"\" =\"\" src=\"/imagelibraries/homepagebanners/british_10k_2010.jpg\" />",
                []
            ],
            ["----------END", []]
        ]
    },
    "JacksonDatabind-55": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonProperty", "EnumMap"],
        "summary_text": [
            "EnumMap keys not using enum's @JsonProperty values unlike Enum values"
        ],
        "desc_hints": ["FasterXML", "JsonProperty", "EnumMap"],
        "desc_text": [
            ["Based on these issues:", []],
            ["#677", []],
            ["#1148", []],
            ["FasterXML/jackson-annotations#96", []],
            [
                "I implemented @JsonProperty for my enum constants and they show up nicely when they are property values.",
                ["OB"]
            ],
            [
                "But I also have an EnumMap which uses the enum, and it's generated JSON uses the original enum names for the keys and not the JsonProperty values.",
                ["OB"]
            ],
            ["Using 2.8.1 (in spring boot 4.3.2)", []],
            ["Thanks!", []]
        ]
    },
    "JacksonDatabind-23": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Possible problem with NON_EMPTY exclusion, ints, Strings"
        ],
        "desc_hints": ["FasterXML"],
        "desc_text": [
            ["(from FasterXML/jackson-module-afterburner#55)", []],
            [
                "It appears like default handling might not work as expected with 2.5.4, whereas Afterburner does seem to handle things better.",
                ["OB"]
            ],
            [
                "Need to investigate, and also see if 2.6.0-rc3 works better.",
                ["OB"]
            ]
        ]
    },
    "JacksonXml-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["nextTextValue", "FromXMLParser"],
        "summary_text": [
            "FromXMLParser nextTextValue() incorrect for attributes"
        ],
        "desc_hints": [
            "_currToken",
            "FromXMLParser",
            "nextTextValue",
            "JsonToken.VALUE_STRING",
            "_currText"
        ],
        "desc_text": [
            [
                "As of #129 the Method nextTextValue of FromXMLParser will no longer return a value for attributes.",
                ["OB"]
            ],
            [
                "As the _currToken is JsonToken.VALUE_STRING in this case I think it is wrong to return null and it should return _currText.",
                ["OB", "EB"]
            ]
        ]
    },
    "Compress-24": {
        "code_elements": [],
        "stack_traces": [
            "Caused by: java.lang.IllegalArgumentException: Invalid byte 52 at offset 7 in '62410554' len=8",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:130)",
            "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(TarUtils.java:175)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:953)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)",
            "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:247)",
            "... 5 more"
        ],
        "summary_hints": ["TarArchiveInputStream"],
        "summary_text": [
            "TarArchiveInputStream fails to read entry with big user-id value"
        ],
        "desc_hints": [
            "TarArchiveInputStream.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
            "TarArchiveEntry.java",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal",
            "TarUtils.java",
            "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader",
            "java.lang.IllegalArgumentException"
        ],
        "desc_text": [
            [
                "Caused by: java.lang.IllegalArgumentException: Invalid byte 52 at offset 7 in '62410554' len=8",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:130)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(TarUtils.java:175)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:953)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:247)",
                "STACK_TRACE"
            ],
            ["... 5 more", "STACK_TRACE"]
        ]
    },
    "Lang-47": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["StrBuilder", "appendFixedWidth"],
        "summary_text": ["StrBuilder appendFixedWidth does not handle nulls"],
        "desc_hints": ["getNullText"],
        "desc_text": [
            [
                "Appending a null value with fixed width causes a null pointer exception if getNullText() has not been set.",
                ["OB"]
            ]
        ]
    },
    "Lang-38": {
        "code_elements": [
            "public void testFormat_CalendarIsoMsZulu() {",
            "final String dateTime = \"2009-10-16T16:42:16.000Z\";",
            "// more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)",
            "// for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone",
            "GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));",
            "cal.clear();",
            "cal.set(2009, 9, 16, 8, 42, 16);",
            "FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));",
            "assertEquals(\"dateTime\", dateTime, format.format(cal));",
            "}",
            "public void testFormat_CalendarIsoMsZulu() {",
            "final String dateTime = \"2009-10-16T16:42:16.000Z\";",
            "GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));",
            "cal.clear();",
            "cal.set(2009, 9, 16, 8, 42, 16);",
            "cal.getTime();",
            "FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));",
            "assertEquals(\"dateTime\", dateTime, format.format(cal));",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DateFormatUtils.format", "TimeZone"],
        "summary_text": [
            "DateFormatUtils.format does not correctly change Calendar TimeZone in certain situations"
        ],
        "desc_hints": [
            "cal.getTime",
            "Calenar.getTime",
            "assertEquals",
            "cal.set",
            "DateFormatUtils",
            "FastDateFormat",
            "FastDateFormat.getInstance",
            "ss.SSS",
            "format.format",
            "TimeZone.getTimeZone",
            "cal.clear",
            "Calendar.setTimeZone",
            "testFormat_CalendarIsoMsZulu",
            "dateTime",
            "GregorianCalendar"
        ],
        "desc_text": [
            [
                "If a Calendar object is constructed in certain ways a call to Calendar.setTimeZone does not correctly change the Calendars fields.",
                ["OB", "EB"]
            ],
            ["Calling Calenar.getTime() seems to fix this problem.", []],
            [
                "While this is probably a bug in the JDK, it would be nice if DateFormatUtils was smart enough to detect/resolve this problem.",
                []
            ],
            ["For example, the following unit test fails:", ["OB", "SR"]],
            ["public void testFormat_CalendarIsoMsZulu() {", "CODE"],
            ["final String dateTime = \"2009-10-16T16:42:16.000Z\";", "CODE"],
            [
                "// more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)",
                "CODE"
            ],
            [
                "// for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone",
                "CODE"
            ],
            [
                "GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));",
                "CODE"
            ],
            ["cal.clear();", "CODE"],
            ["cal.set(2009, 9, 16, 8, 42, 16);", "CODE"],
            [
                "FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));",
                "CODE"
            ],
            [
                "assertEquals(\"dateTime\", dateTime, format.format(cal));",
                "CODE"
            ],
            ["}", "CODE"],
            ["However, this unit test passes:", []],
            ["public void testFormat_CalendarIsoMsZulu() {", "CODE"],
            ["final String dateTime = \"2009-10-16T16:42:16.000Z\";", "CODE"],
            [
                "GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));",
                "CODE"
            ],
            ["cal.clear();", "CODE"],
            ["cal.set(2009, 9, 16, 8, 42, 16);", "CODE"],
            ["cal.getTime();", "CODE"],
            [
                "FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));",
                "CODE"
            ],
            [
                "assertEquals(\"dateTime\", dateTime, format.format(cal));",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Closure-147": {
        "code_elements": [
            "//------------------",
            "// should warn \"JSC_USED_GLOBAL_THIS: dangerous use of the global this object\" in both methods",
            "// none of these warns in 0616 release",
            "// only the non-inline notation warns in 0616 release",
            "this.foo = 123;",
            "//-----------------------"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Lost a JSC_USED_GLOBAL_THIS warning in 0616 release vs 0514"
        ],
        "desc_hints": ["this.foo", "NS.write2"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["//------------------", "CODE"],
            [
                "// should warn \"JSC_USED_GLOBAL_THIS: dangerous use of the global this object\" in both methods",
                "CODE"
            ],
            ["// none of these warns in 0616 release", "CODE"],
            ["var NS = {", []],
            ["read: function()", []],
            ["{", []],
            ["return this.foo; // does not warn in 0514 release", ["OB"]],
            ["},", []],
            ["write: function()", []],
            ["{", []],
            ["this.foo = 123; // warns in 0514 release", []],
            ["}", []],
            ["};", []],
            ["// only the non-inline notation warns in 0616 release", "CODE"],
            ["NS.write2 = function()", []],
            ["{", []],
            ["this.foo = 123;", "CODE"],
            ["};", []],
            ["//-----------------------", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "Since the 0514 release warned in in the \"write\" case above I would expect the 0616 to also report this.",
                ["EB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["As said above, 20100514 and 20100616 releases.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "I understand that the status is that inline-notation isn't preferred, though I wouldn't expect a previous, correct, warning to disappear.",
                ["OB", "EB"]
            ],
            [
                "(Since I reported issue #144 I'm also aware of the previous limitation in global this).",
                []
            ]
        ]
    },
    "Jsoup-65": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Parser error on <template> inside <tr>"],
        "desc_hints": [
            "StartTag",
            "InBody",
            "InTable",
            "chart.html",
            "smoothingEnabled",
            "www.w3.org",
            "EndTag",
            "data.html",
            "TensorBoard"
        ],
        "desc_text": [
            [
                "I've been experimenting with jsoup as a validator for TensorBoard code and I encountered a bug.",
                []
            ],
            ["If I have code like this:", ["SR"]],
            ["<tr>", []],
            ["<th></th>", []],
            ["<th>Name</th>", []],
            ["<template is=\"dom-if\" if=\"{{smoothingEnabled}}\">", []],
            ["<th>Smoothed</th>", []],
            ["</template>", []],
            ["<th>Value</th>", []],
            ["<th>Step</th>", []],
            ["<th>Time</th>", []],
            ["<th>Relative</th>", []],
            ["</tr>", []],
            ["I get errors like this:", ["OB"]],
            [
                "ERROR: tensorflow/tensorboard/components/vz_line_chart/vz-line-chart.html (offset 1282): Unexpected token [StartTag] when in state [InTable]",
                ["OB"]
            ],
            [
                "ERROR: tensorflow/tensorboard/components/vz_line_chart/vz-line-chart.html (offset 1338): Unexpected token [EndTag] when in state [InTable]",
                ["OB"]
            ],
            [
                "ERROR: tensorflow/tensorboard/components/vz_line_chart/vz-line-chart.html (offset 1338): Unexpected token [EndTag] when in state [InBody]",
                ["OB"]
            ],
            [
                "Please note that those offset numbers point to the <template> tags.",
                ["OB"]
            ],
            [
                "Template tag is legal here because https://www.w3.org/TR/html5/tabular-data.html#the-tr-element says content model for tr is \"Zero or more td, th, and script-supporting elements\" and template is a script supporting element.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-26": {
        "code_elements": [
            "define(function() { return {",
            "echo: function(val) {",
            "window.console.log(val);",
            "}",
            "var echo = require('echo');",
            "echo.echo('hello world');",
            "require(['echo'], function(echo) {",
            "echo.echo('hello world');"
        ],
        "stack_traces": [],
        "summary_hints": ["ProcessCommonJSModules", "checkTypes"],
        "summary_text": [
            "ProcessCommonJSModules module$exports failures when checkTypes enabled"
        ],
        "desc_hints": [
            "goog.isDef",
            "checkTypes",
            "compiler.jar",
            "echo.js",
            "emitOptionalModuleExportsOverride",
            "ProcessCommonJSModules",
            "main.js",
            "echo.echo",
            "window.console.log"
        ],
        "desc_text": [
            ["If you define a module (echo.js) as:", []],
            ["define(function() { return {", "CODE"],
            ["echo: function(val) {", "CODE"],
            ["window.console.log(val);", "CODE"],
            ["}", "CODE"],
            ["}});", []],
            [
                "and an entry point* that does not define any new modules as:",
                []
            ],
            ["var echo = require('echo');", "CODE"],
            ["echo.echo('hello world');", "CODE"],
            ["and compile with:", ["OB"]],
            [
                "java -jar build/compiler.jar --formatting=PRETTY_PRINT --jscomp_error=checkTypes --compilation_level=SIMPLE_OPTIMIZATIONS --transform_amd_modules --process_common_js_modules --js=echo.js --js=echo-main.js --common_js_entry_module=echo-main.js",
                []
            ],
            ["You get the error:", ["OB"]],
            [
                "echo-main.js:1: ERROR - Property module$exports never defined on module$echo_main",
                ["OB", "SR"]
            ],
            [
                "which is probably happening because of ProcessCommonJSModules#emitOptionalModuleExportsOverride is testing a property that doesn't exist.",
                []
            ],
            [
                "I can try to cook up a patch but it would probably fall back to using goog.isDef and there's probably a cleaner way :)",
                []
            ],
            [
                "*p.s what is the intended definition of entry points that do not define new modules.",
                ["OB"]
            ],
            [
                "the following leaves a call to a require function:",
                ["OB", "SR"]
            ],
            ["require(['echo'], function(echo) {", "CODE"],
            ["echo.echo('hello world');", "CODE"],
            ["});", []]
        ]
    },
    "JacksonDatabind-21": {
        "code_elements": [
            "VALUE_ONE(\"value1\");",
            "private TestEnum(String valueInJson) {",
            "this.valueInJson = valueInJson;",
            "}",
            "public static TestEnum getEnumFromValue(String value) {",
            "for (TestEnum testEnum : values()) {",
            "if (testEnum.valueInJson.equals(value)) {",
            "return testEnum;",
            "}",
            "}",
            "throw new IllegalArgumentException();",
            "}",
            "}",
            "VALUE_ONE(\"value1\");",
            "private TestEnum(String valueInJson) {",
            "this.valueInJson = valueInJson;",
            "}",
            "public String toString() {",
            "return valueInJson;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonProperty"],
        "summary_text": [
            "Specifying Enum value serialization using @JsonProperty"
        ],
        "desc_hints": [
            "toString",
            "testEnum.valueInJson.equals",
            "DeserializationFeature.READ_ENUMS_USING_TO_STRING",
            "SerializedName",
            "TestEnum",
            "IllegalArgumentException",
            "JsonCreator",
            "valueInJson",
            "Enum.name",
            "testEnum",
            "getEnumFromValue",
            "this.valueInJson"
        ],
        "desc_text": [
            [
                "Currently, if I want to deserialize an enum with a value that isn't its Enum.name(), I can do either",
                ["OB", "SR"]
            ],
            ["public enum TestEnum {", []],
            ["VALUE_ONE(\"value1\");", "CODE"],
            ["private String valueInJson;", []],
            ["private TestEnum(String valueInJson) {", "CODE"],
            ["this.valueInJson = valueInJson;", "CODE"],
            ["}", "CODE"],
            ["@JsonCreator", []],
            ["public static TestEnum getEnumFromValue(String value) {", "CODE"],
            ["for (TestEnum testEnum : values()) {", "CODE"],
            ["if (testEnum.valueInJson.equals(value)) {", "CODE"],
            ["return testEnum;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["throw new IllegalArgumentException();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "or, using DeserializationFeature.READ_ENUMS_USING_TO_STRING,",
                []
            ],
            ["public enum TestEnum {", []],
            ["VALUE_ONE(\"value1\");", "CODE"],
            ["private String valueInJson;", []],
            ["private TestEnum(String valueInJson) {", "CODE"],
            ["this.valueInJson = valueInJson;", "CODE"],
            ["}", "CODE"],
            ["@Override", []],
            ["public String toString() {", "CODE"],
            ["return valueInJson;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "This seems like a lot of boilerplate - is there a simpler way to do this, similar to how Gson handles it?",
                []
            ],
            ["public enum TestEnum {", []],
            ["@SerializedName(\"value1\")", []],
            ["VALUE_ONE", []],
            ["}", "CODE"],
            [
                "It's both more concise and handles both serialization and deserialization.",
                ["OB"]
            ]
        ]
    },
    "Math-89": {
        "code_elements": ["final Object OBJ = new Object();"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Bugs in Frequency API"],
        "desc_hints": [
            "getCount",
            "getPct",
            "IllegalArgumentException",
            "getCumFreq",
            "getCumPct",
            "System.out.println",
            "addValue"
        ],
        "desc_text": [
            ["I think the existing Frequency API has some bugs in it.", []],
            [
                "The addValue(Object v) method allows one to add a plain Object, but one cannot add anything further to the instance, as the second add fails with IllegalArgumentException.",
                ["OB"]
            ],
            [
                "In fact, the problem is with the first call to addValue(Object) which should not allow a plain Object to be added - it should only allow Comparable objects.",
                ["OB", "EB"]
            ],
            [
                "This could be fixed by checking that the object is Comparable.",
                []
            ],
            [
                "Similar considerations apply to the getCumFreq(Object) and getCumPct(Object) methods - they will only work with objects that implement Comparable.",
                ["OB"]
            ],
            [
                "The getCount(Object) and getPct(Object) methods don't fail when given a non-Comparable object (because the class cast exception is caught), however they just return 0 as if the object was not present:",
                ["OB"]
            ],
            ["final Object OBJ = new Object();", "CODE"],
            [
                "f.addValue(OBJ); // This ought to fail, but doesn't, causing the unexpected behaviour below",
                ["OB"]
            ],
            ["System.out.println(f.getCount(OBJ)); // 0", []],
            ["System.out.println(f.getPct(OBJ)); // 0.0", []],
            [
                "Rather than adding extra checks for Comparable, it seems to me that the API would be much improved by using Comparable instead of Object.",
                ["OB", "EB"]
            ],
            [
                "Also, it should make it easier to implement generics.",
                ["OB", "EB"]
            ],
            [
                "However, this would cause compilation failures for some programs that pass Object rather than Comparable to the class.",
                ["OB"]
            ],
            [
                "These would need recoding, but I think they would continue to run OK against the new API.",
                ["SR"]
            ],
            [
                "It would also affect the run-time behaviour slightly, as the first attempt to add a non-Comparable object would fail, rather than the second add of a possibly valid object.",
                ["OB"]
            ],
            ["But is that a viable program?", []],
            [
                "It can only add one object, and any attempt to get statistics will either return 0 or an Exception, and applying the instanceof fix would also cause it to fail.",
                ["OB"]
            ]
        ]
    },
    "Closure-36": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// @use_closure_library true",
            "// @formatting pretty_print,print_input_delimiter",
            "// @warning_level VERBOSE",
            "// @debug true",
            "// ==/ClosureCompiler==",
            "goog.provide('foo');",
            "var foo = function() { this.values = []; };",
            "goog.addSingletonGetter(foo);",
            "foo.prototype.add = function(value) {this.values.push(value)};",
            "(function($ctor$$) {",
            "$ctor$$.$getInstance$ = function $$ctor$$$$getInstance$$() {",
            "return $ctor$$.$instance_$ || ($ctor$$.$instance_$ = new $ctor$$)",
            "}",
            "})(function() {"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.addSingletonGetter"],
        "summary_text": [
            "goog.addSingletonGetter prevents unused class removal"
        ],
        "desc_hints": [
            "goog.provide",
            "foo.prototype.add",
            "compiler.appspot.com",
            "ClosureCompiler",
            "goog.addSingletonGetter",
            "this.values.push",
            "getInstance",
            "this.values",
            "default.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @use_closure_library true", "CODE"],
            ["// @formatting pretty_print,print_input_delimiter", "CODE"],
            ["// @warning_level VERBOSE", "CODE"],
            ["// @debug true", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["goog.provide('foo');", "CODE"],
            ["var foo = function() { this.values = []; };", "CODE"],
            ["goog.addSingletonGetter(foo);", "CODE"],
            [
                "foo.prototype.add = function(value) {this.values.push(value)};",
                "CODE"
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expect: The code is completely removed.", ["OB", "EB"]],
            ["Instead:", []],
            ["(function($ctor$$) {", "CODE"],
            [
                "$ctor$$.$getInstance$ = function $$ctor$$$$getInstance$$() {",
                "CODE"
            ],
            [
                "return $ctor$$.$instance_$ || ($ctor$$.$instance_$ = new $ctor$$)",
                "CODE"
            ],
            ["}", "CODE"],
            ["})(function() {", "CODE"],
            ["});", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["http://closure-compiler.appspot.com on Feb 28, 2012", []],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Csv-8": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "CSVFormat constructor should reject a header array with duplicate entries"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "CSVFormat currently accepts whatever header String[] is provided.",
                ["OB"]
            ],
            [
                "It cannot be used if there are duplicate entries so these should be rejected.",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonDatabind-15": {
        "code_elements": [
            "public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {",
            "...",
            "@Override",
            "public Object marshal(List<Integer> list) throws Exception {",
            "return Joiner.on(\",\").join(list);",
            "}",
            "}",
            "public class IntegerListXmlAdapterTest {",
            "@Test",
            "public void testBasic() throws JsonProcessingException {",
            "ObjectMapper mapper = (new ObjectMapper()).setAnnotationIntrospector(new JaxbAnnotationIntrospector());",
            "SomeIntListHolder listHolder = new SomeIntListHolder();",
            "listHolder.setListOne(asList(1, 2, 3));",
            "System.out.println(mapper.writeValueAsString(listHolder));",
            "}",
            "public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {",
            "@Override",
            "public List<Integer> unmarshal(Object value) throws Exception {return null;}",
            "@Override",
            "public Object marshal(List<Integer> list) throws Exception {",
            "return Joiner.on(\",\").join(list);",
            "}",
            "}",
            "public static class IntegerListToStringXmlAdapter extends XmlAdapter<String, List<Integer>> {",
            "public List<Integer> unmarshal(String value) throws Exception {return null;}",
            "public String marshal(List<Integer> list) throws Exception {",
            "return Joiner.on(\",\").join(list);",
            "}",
            "}",
            "@XmlRootElement",
            "@XmlAccessorType(XmlAccessType.NONE)",
            "public static class SomeIntListHolder {",
            "@XmlAttribute",
            "@XmlJavaTypeAdapter(IntegerListXmlAdapter.class)",
            "private List<Integer> listOne;",
            "public List<Integer> getListOne() {",
            "return listOne;",
            "}",
            "public void setListOne(List<Integer> listOne) {",
            "this.listOne = listOne;",
            "}",
            "}",
            "}",
            "@Override",
            "Object delegateValue = convertValue(value);",
            "// should we accept nulls?",
            "if (delegateValue == null) {",
            "provider.defaultSerializeNull(gen);",
            "return;",
            "}",
            "//original code:",
            "//_delegateSerializer.serialize(delegateValue, gen, provider);",
            "if (_delegateSerializer instanceof UnknownSerializer) {",
            "delegateSerializer =  provider.findValueSerializer(delegateValue.getClass());",
            "} else {",
            "delegateSerializer = _delegateSerializer;",
            "}",
            "delegateSerializer.serialize(delegateValue, gen, provider);",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:59)",
            "at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:26)",
            "at com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(StdDelegatingSerializer.java:157)",
            "at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:575)",
            "at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:663)",
            "at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:156)",
            "at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:129)",
            "at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3385)",
            "at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:2779)"
        ],
        "summary_hints": ["XmlAdapter", "ValueType"],
        "summary_text": [
            "XmlAdapter result marshaling error in case of ValueType=Object"
        ],
        "desc_hints": [
            "XmlJavaTypeAdapter",
            "SerializerProvider",
            "setAnnotationIntrospector",
            "UnknownSerializer",
            "testBasic",
            "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString",
            "BeanSerializer",
            "JsonProcessingException",
            "UnknownSerializer.java",
            "_configAndWriteValue",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "IntegerListXmlAdapterTest.java",
            "com.fasterxml.jackson.databind.ser.BeanSerializer.serialize",
            "BeanPropertyWriter.java",
            "delegateValue",
            "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
            "XmlRootElement",
            "delegateSerializer",
            "JaxbAnnotationIntrospector",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "IntegerListXmlAdapterTest",
            "convertValue",
            "IntegerListToStringXmlAdapter",
            "ObjectMapper",
            "JsonSerializer",
            "XmlAdapter",
            "XmlAttribute",
            "DefaultSerializerProvider.java",
            "_delegateSerializer",
            "SerializationFeature.FAIL_ON_EMPTY_BEANS",
            "com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField",
            "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize",
            "delegateValue.getClass",
            "JsonGenerator",
            "IntegerListXmlAdapter",
            "StdDelegatingSerializer",
            "BeanSerializer.java",
            "XmlAccessorType",
            "getListOne",
            "github.com",
            "SomeIntListHolder",
            "setListOne",
            "java.lang.String",
            "mapper.writeValueAsString",
            "provider.findValueSerializer",
            "provider.defaultSerializeNull",
            "listOne",
            "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields",
            "IntegerListXmlAdapter.class",
            "listHolder.setListOne",
            "listHolder",
            "this.listOne",
            "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize",
            "ObjectMapper.java",
            "delegateSerializer.serialize",
            "Joiner.on",
            "asList",
            "StdDelegatingSerializer.java",
            "BeanSerializerBase.java",
            "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty",
            "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue",
            "XmlAccessType.NONE",
            "System.out.println"
        ],
        "desc_text": [
            ["Hi,", []],
            [
                "I have an error \"com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.lang.String and no properties discovered to create BeanSerializer\" in case of using custom XmlAdapter with such declaration:",
                ["SR"]
            ],
            [
                "public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {",
                "CODE"
            ],
            ["...", "CODE"],
            ["@Override", "CODE"],
            [
                "public Object marshal(List<Integer> list) throws Exception {",
                "CODE"
            ],
            ["return Joiner.on(\",\").join(list);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "If change declaration of this class to \"extends XmlAdapter<String, List>\" it works good.",
                []
            ],
            ["Full example:", ["OB", "SR"]],
            ["public class IntegerListXmlAdapterTest {", "CODE"],
            ["@Test", "CODE"],
            [
                "public void testBasic() throws JsonProcessingException {",
                "CODE"
            ],
            [
                "ObjectMapper mapper = (new ObjectMapper()).setAnnotationIntrospector(new JaxbAnnotationIntrospector());",
                "CODE"
            ],
            ["SomeIntListHolder listHolder = new SomeIntListHolder();", "CODE"],
            ["listHolder.setListOne(asList(1, 2, 3));", "CODE"],
            [
                "System.out.println(mapper.writeValueAsString(listHolder));",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public List<Integer> unmarshal(Object value) throws Exception {return null;}",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public Object marshal(List<Integer> list) throws Exception {",
                "CODE"
            ],
            ["return Joiner.on(\",\").join(list);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "public static class IntegerListToStringXmlAdapter extends XmlAdapter<String, List<Integer>> {",
                "CODE"
            ],
            [
                "public List<Integer> unmarshal(String value) throws Exception {return null;}",
                "CODE"
            ],
            [
                "public String marshal(List<Integer> list) throws Exception {",
                "CODE"
            ],
            ["return Joiner.on(\",\").join(list);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@XmlRootElement", "CODE"],
            ["@XmlAccessorType(XmlAccessType.NONE)", "CODE"],
            ["public static class SomeIntListHolder {", "CODE"],
            ["@XmlAttribute", "CODE"],
            ["@XmlJavaTypeAdapter(IntegerListXmlAdapter.class)", "CODE"],
            ["private List<Integer> listOne;", "CODE"],
            ["public List<Integer> getListOne() {", "CODE"],
            ["return listOne;", "CODE"],
            ["}", "CODE"],
            ["public void setListOne(List<Integer> listOne) {", "CODE"],
            ["this.listOne = listOne;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "In this state with last Jackson version we will get an error",
                ["OB"]
            ],
            [
                "com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.lang.String and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: SomeIntListHolder[\"listOne\"])",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:59)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:26)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(StdDelegatingSerializer.java:157)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:575)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:663)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:156)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:129)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3385)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:2779)",
                "STACK_TRACE"
            ],
            [
                "But if we change XmlJavaTypeAdapter to IntegerListToStringXmlAdapter error will be fixed and code will work fine.",
                ["OB"]
            ],
            [
                "This error exists only in Jackson 2, we have this code with Object generic on Jackson 1 and get an issue only during migration to new major version.",
                ["OB", "SR"]
            ],
            [
                "This concrete error can be fixed by hack in com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer:",
                []
            ],
            ["@Override", "CODE"],
            [
                "public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException",
                []
            ],
            ["{", []],
            ["Object delegateValue = convertValue(value);", "CODE"],
            ["// should we accept nulls?", "CODE"],
            ["if (delegateValue == null) {", "CODE"],
            ["provider.defaultSerializeNull(gen);", "CODE"],
            ["return;", "CODE"],
            ["}", "CODE"],
            ["//original code:", "CODE"],
            [
                "//_delegateSerializer.serialize(delegateValue, gen, provider);",
                "CODE"
            ],
            ["JsonSerializer<Object> delegateSerializer;", []],
            ["if (_delegateSerializer instanceof UnknownSerializer) {", "CODE"],
            [
                "delegateSerializer =  provider.findValueSerializer(delegateValue.getClass());",
                "CODE"
            ],
            ["} else {", "CODE"],
            ["delegateSerializer = _delegateSerializer;", "CODE"],
            ["}", "CODE"],
            [
                "delegateSerializer.serialize(delegateValue, gen, provider);",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "You can find test class here: https://github.com/Spikhalskiy/jackson_xmladapter__bug/blob/master/src/test/java/IntegerListXmlAdapterTest.java",
                []
            ],
            [
                "and hacked serializer code here: https://github.com/Spikhalskiy/jackson_xmladapter__bug/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                []
            ],
            [
                "Now test passing in this repo because of fake StdDelegatingSerializer in classpath - try to delete it to get an issue.",
                ["OB", "SR"]
            ]
        ]
    },
    "Jsoup-25": {
        "code_elements": [
            "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};"
        ],
        "stack_traces": [],
        "summary_hints": ["textArea"],
        "summary_text": [
            "JSoup is not preserving whitespace for <textArea> tags"
        ],
        "desc_hints": ["preserveWhitespaceTags", "preserveWhitespace"],
        "desc_text": [
            [
                "This tag may have been mistakenly left out of the array of preserveWhitespace tags in the Tag class:",
                []
            ],
            [
                "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "CODE"
            ],
            [
                "There is a comment next to the preserveWhitespace boolean that indicates this should have been added here.",
                ["OB", "EB", "SR"]
            ],
            [
                "private boolean preserveWhitespace = false; // for pre, textarea, script etc",
                []
            ]
        ]
    },
    "JacksonDatabind-103": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["JsonMappingExceptions"],
        "summary_text": [
            "Location information included twice for some JsonMappingExceptions"
        ],
        "desc_hints": [
            "getMessage",
            "InvalidFormatException",
            "JsonMappingException"
        ],
        "desc_text": [
            [
                "Looks like due to some double-processing, certain kinds of JsonMappingException (observed with InvalidFormatException) seem to include \" at [source]\" twice.",
                ["OB"]
            ],
            [
                "This is probably due to calls to getMessage() that add location being used to pass message property when wrapping or re-creating exceptions.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-80": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Extraneous type id mapping added for base type itself"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "Looks like type id (name) matching base type is included in type resolution list, automatically.",
                ["OB"]
            ],
            [
                "While this might be useful sometimes it seems quite odd, and probably should only be included if:",
                []
            ],
            ["Base type is concrete and", []],
            ["Base type has explicit name (not add if default name used)", []]
        ]
    },
    "JacksonCore-10": {
        "code_elements": [
            "import com.fasterxml.jackson.core.JsonFactory;",
            "import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import org.testng.annotations.Test;",
            "import java.lang.reflect.Field;",
            "import java.lang.reflect.Method;",
            "import java.nio.charset.StandardCharsets;",
            "import java.util.Map;",
            "/**",
            "* Simple test case for demonstrating bug in class {@link ByteQuadsCanonicalizer}.",
            "*",
            "* <p>In some cases, it is possible to work around this bug by disabling the",
            "* {@link JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} feature. In that case",
            "* {@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper#constructParser(int, com.fasterxml.jackson.core.ObjectCodec, ByteQuadsCanonicalizer, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int)}",
            "* creates a {@link com.fasterxml.jackson.core.json.ReaderBasedJsonParser} instead of a",
            "* {@link com.fasterxml.jackson.core.json.UTF8StreamJsonParser}.",
            "*/",
            "public class UTF8ByteStreamTest {",
            "private static final int SEED = -523743345;",
            "private static void injectReproducibleSeed(ObjectMapper objectMapper) throws Exception {",
            "JsonFactory jsonFactory = objectMapper.getFactory();",
            "// As a workaround, uncomment the following line.",
            "// jsonFactory.disable(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES);",
            "Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField(\"_byteSymbolCanonicalizer\");",
            "byteSymbolCanonicalizerField.setAccessible(true);",
            "Method factoryMethod = ByteQuadsCanonicalizer.class.getDeclaredMethod(\"createRoot\", int.class);",
            "factoryMethod.setAccessible(true);",
            "byteSymbolCanonicalizerField.set(jsonFactory, factoryMethod.invoke(null, SEED));",
            "}",
            "@Test",
            "public void testRead() throws Exception {",
            "ObjectMapper objectMapper = new ObjectMapper();",
            "injectReproducibleSeed(objectMapper);",
            "StringBuilder stringBuilder = new StringBuilder();",
            "stringBuilder.append(\"{\\n\");",
            "stringBuilder.append(\"    \\\"expectedGCperPosition\\\": null\");",
            "for (int i = 0; i < 60; ++i) {",
            "stringBuilder.append(\",\\n    \\\"\").append(i + 1).append(\"\\\": null\");",
            "}",
            "stringBuilder.append(\"\\n}\");",
            "objectMapper.readValue(stringBuilder.toString().getBytes(StandardCharsets.UTF_8), Map.class);",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "ArrayIndexOutOfBoundsException",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"
        ],
        "summary_text": [
            "ArrayIndexOutOfBoundsException in com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"
        ],
        "desc_hints": [
            "stringBuilder",
            "JsonFactory.Feature",
            "ByteQuadsCanonicalizer",
            "com.fasterxml.jackson.core.ObjectCodec",
            "org.testng.annotations.Test",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "StringBuilder",
            "jsonFactory.disable",
            "factoryMethod.invoke",
            "JsonFactory.class.getDeclaredField",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "byteSymbolCanonicalizerField",
            "com.fasterxml.jackson.core.JsonFactory",
            "objectMapper.readValue",
            "JsonFactory",
            "jsonFactory",
            "java.nio.charset.StandardCharsets",
            "ByteQuadsCanonicalizer.class.getDeclaredMethod",
            "StandardCharsets.UTF_8",
            "injectReproducibleSeed",
            "stringBuilder.append",
            "ObjectMapper",
            "stringBuilder.toString",
            "createRoot",
            "getBytes",
            "JsonFactory.Feature.CANONICALIZE_FIELD_NAMES",
            "factoryMethod.setAccessible",
            "byteSymbolCanonicalizerField.set",
            "Map.class",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer",
            "_hashArea",
            "constructParser",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper",
            "objectMapper.getFactory",
            "java.lang.reflect.Method",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer",
            "_byteSymbolCanonicalizer",
            "byteSymbolCanonicalizerField.setAccessible",
            "factoryMethod",
            "expectedGCperPosition",
            "objectMapper",
            "int.class",
            "java.lang.reflect.Field",
            "java.util.Map",
            "UTF8ByteStreamTest",
            "testRead"
        ],
        "desc_text": [
            [
                "The following code demonstrates a bug in jackson-core, version 2.6.0, in the hash table implementation of com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.",
                ["OB", "SR"]
            ],
            [
                "From a quick glance, it looks to me as if the \"primary hash information area\" _hashArea has a spillover area that is not accounted for properly in the String array _names.",
                ["OB"]
            ],
            ["import com.fasterxml.jackson.core.JsonFactory;", "CODE"],
            [
                "import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["import org.testng.annotations.Test;", "CODE"],
            ["import java.lang.reflect.Field;", "CODE"],
            ["import java.lang.reflect.Method;", "CODE"],
            ["import java.nio.charset.StandardCharsets;", "CODE"],
            ["import java.util.Map;", "CODE"],
            ["/**", "CODE"],
            [
                "* Simple test case for demonstrating bug in class {@link ByteQuadsCanonicalizer}.",
                "CODE"
            ],
            ["*", "CODE"],
            [
                "* <p>In some cases, it is possible to work around this bug by disabling the",
                "CODE"
            ],
            [
                "* {@link JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} feature. In that case",
                "CODE"
            ],
            [
                "* {@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper#constructParser(int, com.fasterxml.jackson.core.ObjectCodec, ByteQuadsCanonicalizer, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int)}",
                "CODE"
            ],
            [
                "* creates a {@link com.fasterxml.jackson.core.json.ReaderBasedJsonParser} instead of a",
                "CODE"
            ],
            [
                "* {@link com.fasterxml.jackson.core.json.UTF8StreamJsonParser}.",
                "CODE"
            ],
            ["*/", "CODE"],
            ["public class UTF8ByteStreamTest {", "CODE"],
            ["private static final int SEED = -523743345;", "CODE"],
            [
                "private static void injectReproducibleSeed(ObjectMapper objectMapper) throws Exception {",
                "CODE"
            ],
            ["JsonFactory jsonFactory = objectMapper.getFactory();", "CODE"],
            ["// As a workaround, uncomment the following line.", "CODE"],
            [
                "// jsonFactory.disable(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES);",
                "CODE"
            ],
            [
                "Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField(\"_byteSymbolCanonicalizer\");",
                "CODE"
            ],
            ["byteSymbolCanonicalizerField.setAccessible(true);", "CODE"],
            [
                "Method factoryMethod = ByteQuadsCanonicalizer.class.getDeclaredMethod(\"createRoot\", int.class);",
                "CODE"
            ],
            ["factoryMethod.setAccessible(true);", "CODE"],
            [
                "byteSymbolCanonicalizerField.set(jsonFactory, factoryMethod.invoke(null, SEED));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void testRead() throws Exception {", "CODE"],
            ["ObjectMapper objectMapper = new ObjectMapper();", "CODE"],
            ["injectReproducibleSeed(objectMapper);", "CODE"],
            ["StringBuilder stringBuilder = new StringBuilder();", "CODE"],
            ["stringBuilder.append(\"{\\n\");", "CODE"],
            [
                "stringBuilder.append(\"    \\\"expectedGCperPosition\\\": null\");",
                "CODE"
            ],
            ["for (int i = 0; i < 60; ++i) {", "CODE"],
            [
                "stringBuilder.append(\",\\n    \\\"\").append(i + 1).append(\"\\\": null\");",
                "CODE"
            ],
            ["}", "CODE"],
            ["stringBuilder.append(\"\\n}\");", "CODE"],
            [
                "objectMapper.readValue(stringBuilder.toString().getBytes(StandardCharsets.UTF_8), Map.class);",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-59": {
        "code_elements": [
            "package com.test.testjackson.testjackson;",
            "import com.fasterxml.jackson.annotation.JsonAutoDetect;",
            "import com.fasterxml.jackson.annotation.JsonCreator;",
            "import com.fasterxml.jackson.annotation.JsonProperty;",
            "import com.fasterxml.jackson.core.JsonGenerator;",
            "import com.fasterxml.jackson.core.JsonParseException;",
            "import com.fasterxml.jackson.databind.DeserializationContext;",
            "import com.fasterxml.jackson.databind.JsonMappingException;",
            "import com.fasterxml.jackson.databind.JsonSerializer;",
            "import com.fasterxml.jackson.databind.KeyDeserializer;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;",
            "import com.fasterxml.jackson.databind.SerializerProvider;",
            "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;",
            "import com.fasterxml.jackson.databind.annotation.JsonSerialize;",
            "import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;",
            "import com.fasterxml.jackson.databind.module.SimpleModule;",
            "import java.io.IOException;",
            "import java.util.Map;",
            "import org.junit.Test;",
            "import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY;",
            "import static junit.framework.Assert.assertEquals;",
            "public class TestJackson",
            "{",
            "private static String TEST_INSTANCE_SERIALIZED = \"{\\\"mapProperty\\\":[\\\"java.util.HashMap\\\",{\\\"Compound|Key\\\":\\\"Value\\\"}]}\";",
            "@Test",
            "public void testFails() throws JsonParseException, JsonMappingException, IOException",
            "{",
            "ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);",
            "TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);",
            "String testInstanceSerialized = mapper.writeValueAsString(testInstance);",
            "assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);",
            "}",
            "@Test",
            "public void testSucceeds() throws JsonParseException, JsonMappingException, IOException",
            "{",
            "ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL).registerModule(new SimpleModule() {",
            "private static final long serialVersionUID = 1L;",
            "@Override",
            "public void setupModule(SetupContext context) {",
            "context.addKeyDeserializers(new SimpleKeyDeserializers().addDeserializer(CompoundKey.class, new CompoundKeyDeserializer()));",
            "}",
            "});",
            "TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);",
            "String testInstanceSerialized = mapper.writeValueAsString(testInstance);",
            "assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);",
            "}",
            "@JsonAutoDetect(fieldVisibility = ANY)",
            "public static final class TestClass {",
            "@JsonProperty(\"mapProperty\")",
            "@JsonSerialize(keyUsing = CompoundKeySerializer.class)",
            "private final Map<CompoundKey, String> mapProperty;",
            "@JsonCreator",
            "private TestClass(@JsonDeserialize(keyUsing = CompoundKeyDeserializer.class) @JsonProperty(\"mapProperty\") Map<CompoundKey, String> mapProperty) {",
            "this.mapProperty = mapProperty;",
            "}",
            "}",
            "public static final class CompoundKey {",
            "private String part0;",
            "private String part1;",
            "public CompoundKey(String part0, String part1) {",
            "this.part0 = part0;",
            "this.part1 = part1;",
            "}",
            "public String getPart0() { return part0; }",
            "public String getPart1() { return part1; }",
            "}",
            "public static class CompoundKeyDeserializer extends KeyDeserializer {",
            "@Override",
            "public Object deserializeKey(String s, DeserializationContext deserializationContext) {",
            "String[] parts = s.split(\"\\\\|\");",
            "return new CompoundKey(parts[0], parts[1]);",
            "}",
            "}",
            "public static class CompoundKeySerializer extends JsonSerializer<CompoundKey> {",
            "@Override",
            "public void serialize(CompoundKey compoundKey, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {",
            "jsonGenerator.writeFieldName(compoundKey.getPart0() + '|' + compoundKey.getPart1());",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "keyUsing",
            "JsonDeserialize",
            "DefaultTyping.NON_FINAL"
        ],
        "summary_text": [
            "@JsonDeserialize(keyUsing = ...) does not work correctly together with DefaultTyping.NON_FINAL"
        ],
        "desc_hints": [
            "compoundKey.getPart1",
            "SerializerProvider",
            "JsonProperty",
            "serializerProvider",
            "JsonDeserialize",
            "com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY",
            "mapProperty",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.KeyDeserializer",
            "this.mapProperty",
            "registerModule",
            "CompoundKey",
            "CompoundKeyDeserializer",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "JsonSerialize",
            "KeyDeserializer",
            "testSucceeds",
            "testInstanceSerialized",
            "mapper.readValue",
            "CompoundKeySerializer.class",
            "CompoundKeySerializer",
            "assertEquals",
            "JsonMappingException",
            "com.test.testjackson.testjackson",
            "setupModule",
            "compoundKey",
            "SetupContext",
            "com.fasterxml.jackson.databind.SerializerProvider",
            "JsonGenerator",
            "jsonGenerator",
            "com.fasterxml.jackson.core.JsonParseException",
            "java.io.IOException",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "keyUsing",
            "jsonGenerator.writeFieldName",
            "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "com.fasterxml.jackson.annotation.JsonAutoDetect",
            "testFails",
            "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers",
            "com.fasterxml.jackson.core.JsonGenerator",
            "CompoundKeyDeserializer.class",
            "java.util.HashMap",
            "TestClass",
            "fieldVisibility",
            "TestClass.class",
            "CompoundKey.class",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "deserializeKey",
            "com.fasterxml.jackson.databind.module.SimpleModule",
            "junit.framework.Assert.assertEquals",
            "deserializationContext",
            "TestJackson",
            "SimpleKeyDeserializers",
            "org.junit.Test",
            "java.util.Map",
            "JsonCreator",
            "DeserializationContext",
            "compoundKey.getPart0",
            "HashMap",
            "DefaultTyping.NON_FINAL",
            "JsonParseException",
            "testInstance",
            "serialVersionUID",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize",
            "getPart0",
            "this.part1",
            "ObjectMapper",
            "addDeserializer",
            "JsonAutoDetect",
            "com.fasterxml.jackson.databind.annotation.JsonSerialize",
            "JsonSerializer",
            "context.addKeyDeserializers",
            "com.fasterxml.jackson.databind.JsonSerializer",
            "enableDefaultTyping",
            "mapper.writeValueAsString",
            "SimpleModule",
            "getPart1",
            "this.part0"
        ],
        "desc_text": [
            [
                "Version 2.8.3 seems to ignore @JsonDeserialize(keyUsing = ...) when used together with DefaultTyping.NON_FINAL setting and Map<,> argument type in constructor with concrete type (e.g.",
                ["OB", "SR"]
            ],
            ["HashMap<,>) specified in JSON.", ["OB"]],
            [
                "In the code below testFails() fails and testSucceeds() passes fine.",
                ["OB"]
            ],
            [
                "The only difference is testSucceeds() has a module with deserializer registered explicitly.",
                ["OB"]
            ],
            ["Both tests pass on version 2.6.", ["OB"]],
            ["package com.test.testjackson.testjackson;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonAutoDetect;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonCreator;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonProperty;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonGenerator;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonParseException;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.DeserializationContext;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.JsonMappingException;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.JsonSerializer;", "CODE"],
            ["import com.fasterxml.jackson.databind.KeyDeserializer;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.SerializerProvider;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.annotation.JsonSerialize;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.module.SimpleModule;",
                "CODE"
            ],
            ["import java.io.IOException;", "CODE"],
            ["import java.util.Map;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            [
                "import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY;",
                "CODE"
            ],
            ["import static junit.framework.Assert.assertEquals;", "CODE"],
            ["public class TestJackson", "CODE"],
            ["{", "CODE"],
            [
                "private static String TEST_INSTANCE_SERIALIZED = \"{\\\"mapProperty\\\":[\\\"java.util.HashMap\\\",{\\\"Compound|Key\\\":\\\"Value\\\"}]}\";",
                "CODE"
            ],
            ["@Test", "CODE"],
            [
                "public void testFails() throws JsonParseException, JsonMappingException, IOException",
                "CODE"
            ],
            ["{", "CODE"],
            [
                "ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);",
                "CODE"
            ],
            [
                "TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);",
                "CODE"
            ],
            [
                "String testInstanceSerialized = mapper.writeValueAsString(testInstance);",
                "CODE"
            ],
            [
                "assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            [
                "public void testSucceeds() throws JsonParseException, JsonMappingException, IOException",
                "CODE"
            ],
            ["{", "CODE"],
            [
                "ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL).registerModule(new SimpleModule() {",
                "CODE"
            ],
            ["private static final long serialVersionUID = 1L;", "CODE"],
            ["@Override", "CODE"],
            ["public void setupModule(SetupContext context) {", "CODE"],
            [
                "context.addKeyDeserializers(new SimpleKeyDeserializers().addDeserializer(CompoundKey.class, new CompoundKeyDeserializer()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["});", "CODE"],
            [
                "TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);",
                "CODE"
            ],
            [
                "String testInstanceSerialized = mapper.writeValueAsString(testInstance);",
                "CODE"
            ],
            [
                "assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);",
                "CODE"
            ],
            ["}", "CODE"],
            ["@JsonAutoDetect(fieldVisibility = ANY)", "CODE"],
            ["public static final class TestClass {", "CODE"],
            ["@JsonProperty(\"mapProperty\")", "CODE"],
            ["@JsonSerialize(keyUsing = CompoundKeySerializer.class)", "CODE"],
            ["private final Map<CompoundKey, String> mapProperty;", "CODE"],
            ["@JsonCreator", "CODE"],
            [
                "private TestClass(@JsonDeserialize(keyUsing = CompoundKeyDeserializer.class) @JsonProperty(\"mapProperty\") Map<CompoundKey, String> mapProperty) {",
                "CODE"
            ],
            ["this.mapProperty = mapProperty;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public static final class CompoundKey {", "CODE"],
            ["private String part0;", "CODE"],
            ["private String part1;", "CODE"],
            ["public CompoundKey(String part0, String part1) {", "CODE"],
            ["this.part0 = part0;", "CODE"],
            ["this.part1 = part1;", "CODE"],
            ["}", "CODE"],
            ["public String getPart0() { return part0; }", "CODE"],
            ["public String getPart1() { return part1; }", "CODE"],
            ["}", "CODE"],
            [
                "public static class CompoundKeyDeserializer extends KeyDeserializer {",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public Object deserializeKey(String s, DeserializationContext deserializationContext) {",
                "CODE"
            ],
            ["String[] parts = s.split(\"\\\\|\");", "CODE"],
            ["return new CompoundKey(parts[0], parts[1]);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "public static class CompoundKeySerializer extends JsonSerializer<CompoundKey> {",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public void serialize(CompoundKey compoundKey, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {",
                "CODE"
            ],
            [
                "jsonGenerator.writeFieldName(compoundKey.getPart0() + '|' + compoundKey.getPart1());",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-137": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @output_file_name default.js",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// ==/ClosureCompiler==",
            "var t = null;",
            "{",
            "if (t != null)",
            "{",
            "t = null;",
            "}",
            "t = 1;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Invalid JSC_DETERMINISTIC_TEST"],
        "desc_hints": ["window.test", "ClosureCompiler", "default.js"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile following code:", ["SR"]],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["var t = null;", "CODE"],
            ["window.test = function()", []],
            ["{", "CODE"],
            ["if (t != null)", "CODE"],
            ["{", "CODE"],
            ["t = null;", "CODE"],
            ["}", "CODE"],
            ["t = 1;", "CODE"],
            ["};", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Code should be compiled without warnings, but I see", ["EB"]],
            [
                "\"JSC_DETERMINISTIC_TEST: condition always evaluates to false\".",
                ["OB"]
            ]
        ]
    },
    "Lang-12": {
        "code_elements": [
            "ch = chars[random.nextInt(gap) + start];",
            "//ch = chars[random.nextInt(gap)%chars.length];"
        ],
        "stack_traces": [],
        "summary_hints": [
            "RandomStringUtils.random",
            "java.lang.ArrayIndexOutOfBoundsException"
        ],
        "summary_text": [
            "RandomStringUtils.random(count, 0, 0, false, false, universe, random) always throws java.lang.ArrayIndexOutOfBoundsException"
        ],
        "desc_hints": ["chars.length", "random.nextInt"],
        "desc_text": [
            ["In commons-lang 2.6 line 250 :", []],
            ["ch = chars[random.nextInt(gap) + start];", "CODE"],
            [
                "This line of code takes a random int to fetch a char in the chars array regardless of its size.",
                ["OB", "SR"]
            ],
            ["(Besides start is useless here)", []],
            ["Fixed version would be :", []],
            ["//ch = chars[random.nextInt(gap)%chars.length];", "CODE"],
            [
                "When user pass 0 as end or when the array is not null but empty this line ends up with an exception",
                ["OB"]
            ]
        ]
    },
    "Math-18": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "CMAESOptimizer with bounds fits finely near lower bound and coarsely near upper bound."
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "When fitting with bounds, the CMAESOptimizer fits finely near the lower bound and coarsely near the upper bound.",
                ["OB", "SR"]
            ],
            [
                "This is because it internally maps the fitted parameter range into the interval [0,1].",
                []
            ],
            [
                "The unit of least precision (ulp) between floating point numbers is much smaller near zero than near one.",
                ["OB"]
            ],
            [
                "Thus, fits have much better resolution near the lower bound (which is mapped to zero) than the upper bound (which is mapped to one).",
                ["OB"]
            ],
            ["I will attach a example program to demonstrate.", ["OB", "SR"]]
        ]
    },
    "JacksonDatabind-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Allow deserialization of null Object Id"],
        "desc_hints": ["FasterXML", "DeserializationFeature"],
        "desc_text": [
            ["(note: related to FasterXML/jackson-annotations#56)", []],
            [
                "For some use cases (one known case being use from ORM like Hibernate) it makes sense to allow use of null (or missing) Object Id, in cases where actual Id will be generated by something other than Jackson.",
                ["OB"]
            ],
            [
                "It may also make sense to add matching DeserializationFeature which allows such a condition to either be acceptable (default), or not (throw an exception), to allow for strict checks in cases where null/missing Object Id is not a legal use case.",
                ["OB"]
            ]
        ]
    },
    "Closure-82": {
        "code_elements": [
            "var s = new String(\"hello\");",
            "alert(s.toLowerCase.indexOf(\"l\"));",
            "var s = new String(\"hello\");",
            "alert(s.toLowerCase.substr(0, 1));"
        ],
        "stack_traces": [],
        "summary_hints": ["indexOf"],
        "summary_text": [".indexOf fails to produce missing property warning"],
        "desc_hints": [
            "toLowerCase.indexOf",
            "toLowerCase.substr",
            "missingProperties"
        ],
        "desc_text": [
            [
                "The following code compiled with VERBOSE warnings or with the missingProperties check enabled fails to produce a warning or error:",
                ["OB", "SR"]
            ],
            ["var s = new String(\"hello\");", "CODE"],
            ["alert(s.toLowerCase.indexOf(\"l\"));", "CODE"],
            [
                "However, other string functions do properly produce the warning:",
                []
            ],
            ["var s = new String(\"hello\");", "CODE"],
            ["alert(s.toLowerCase.substr(0, 1));", "CODE"]
        ]
    },
    "Math-2": {
        "code_elements": [
            "import org.apache.commons.math3.distribution.HypergeometricDistribution;",
            "public class Foo {",
            "public static void main(String[] args) {",
            "HypergeometricDistribution a = new HypergeometricDistribution(",
            "43130568, 42976365, 50);",
            "System.out.printf(\"%d %d%n\", a.getSupportLowerBound(), a.getSupportUpperBound()); // Prints \"0 50\"",
            "System.out.printf(\"%d%n\",a.sample());                                             // Prints \"-50\"",
            "}",
            "}",
            "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
            "return getSampleSize() * ((double) getNumberOfSuccesses() / (double) getPopulationSize());"
        ],
        "stack_traces": [],
        "summary_hints": ["HypergeometricDistribution.sample"],
        "summary_text": [
            "HypergeometricDistribution.sample suffers from integer overflow"
        ],
        "desc_hints": [
            "getNumberOfSuccesses",
            "HypergeometricDistribution.getNumericalMean",
            "System.out.printf",
            "getPopulationSize",
            "HypergeometricDistribution.sample",
            "getSupportLowerBound",
            "getSupportUpperBound",
            "HypergeometricDistribution",
            "org.apache.commons.math3.distribution.HypergeometricDistribution",
            "getSampleSize"
        ],
        "desc_text": [
            [
                "Hi, I have an application which broke when ported from commons math 2.2 to 3.2.",
                ["OB", "SR"]
            ],
            [
                "It looks like the HypergeometricDistribution.sample() method doesn't work as well as it used to with large integer values \u2013 the example code below should return a sample between 0 and 50, but usually returns -50.",
                ["OB", "EB", "SR"]
            ],
            [
                "import org.apache.commons.math3.distribution.HypergeometricDistribution;",
                "CODE"
            ],
            ["public class Foo {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            [
                "HypergeometricDistribution a = new HypergeometricDistribution(",
                "CODE"
            ],
            ["43130568, 42976365, 50);", "CODE"],
            [
                "System.out.printf(\"%d %d%n\", a.getSupportLowerBound(), a.getSupportUpperBound()); // Prints \"0 50\"",
                "CODE"
            ],
            [
                "System.out.printf(\"%d%n\",a.sample());                                             // Prints \"-50\"",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "In the debugger, I traced it as far as an integer overflow in HypergeometricDistribution.getNumericalMean() \u2013 instead of doing",
                ["OB"]
            ],
            [
                "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
                "CODE"
            ],
            ["it could do:", []],
            [
                "return getSampleSize() * ((double) getNumberOfSuccesses() / (double) getPopulationSize());",
                "CODE"
            ],
            ["This seemed to fix it, based on a quick test.", []]
        ]
    },
    "Jsoup-62": {
        "code_elements": [
            "String xml=\"<r><X>A</X><y>B</y></r>\";",
            "Parser parser = Parser.htmlParser();",
            "parser.settings(ParseSettings.preserveCase);",
            "org.jsoup.nodes.Document _doc = parser.parseInput(xml, \"/\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Wrong parsing of case sensitive HTML"],
        "desc_hints": [
            "parser.settings",
            "Token.java",
            "ParseSettings.preserveCase",
            "parser.parseInput",
            "Parser.htmlParser",
            "toLowerCase",
            "org.jsoup.nodes.Document",
            "normalName"
        ],
        "desc_text": [
            ["Executing :", []],
            ["String xml=\"<r><X>A</X><y>B</y></r>\";", "CODE"],
            ["Parser parser = Parser.htmlParser();", "CODE"],
            ["parser.settings(ParseSettings.preserveCase);", "CODE"],
            [
                "org.jsoup.nodes.Document _doc = parser.parseInput(xml, \"/\");",
                "CODE"
            ],
            ["Results in :", ["OB"]],
            ["<html>", []],
            ["<head></head>", []],
            ["<body>", []],
            ["<r>", []],
            ["<X>", []],
            ["A", []],
            ["<y>", []],
            ["B", []],
            ["</y>", []],
            ["</X>", []],
            ["</r>", []],
            ["</body>", []],
            ["</html>", []],
            [
                "Manual hacking : remove all .toLowerCase() invocations from Token.java (normalName=...)",
                ["OB"]
            ]
        ]
    },
    "Jsoup-64": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Incorrect handling of self-closing tags noframes, style and title cause remainder of document to be html-escaped"
        ],
        "desc_hints": [
            "r904fZxUOWJgLJO7r8",
            "BZ3uoMki",
            "try.jsoup.org",
            "handleRawText",
            "lJwWpjXYUSTBeBZhdEnS3Mt56g4",
            "3Ms6TQCrrdaA_uPgxgURYYvwFAg",
            "HtmlTreeBuilderState",
            "StartTag",
            "handleRcData"
        ],
        "desc_text": [
            ["Given the input:", ["OB"]],
            ["<html>", []],
            ["<head>", []],
            ["<style /> <!-- < - - this is the culprit -->", []],
            ["</head>", []],
            ["<body>", []],
            ["<p>Whatever</p>", []],
            ["</body>", []],
            ["</html>", []],
            [
                "JSoup 1.8.2 and also http://try.jsoup.org/~lJwWpjXYUSTBeBZhdEnS3Mt56g4 will produce:",
                ["OB"]
            ],
            ["<html>", []],
            ["<head>", []],
            ["<style></style>", []],
            ["</head>", []],
            ["<body>", []],
            [
                "&lt;/head&gt; &lt;body&gt; &lt;p&gt;Whatever&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;",
                []
            ],
            ["</body>", []],
            ["</html>", []],
            [
                "With <title/> instead of <style/>, the result is different but still wrong (http://try.jsoup.org/~BZ3uoMki-r904fZxUOWJgLJO7r8 ):",
                ["OB"]
            ],
            ["<html>", []],
            ["<head>", []],
            ["<title></title>", []],
            ["</head>", []],
            ["<body>", []],
            ["&lt;/head&gt;", []],
            ["<p>Whatever</p>", []],
            ["</body>", []],
            ["</html>", []],
            [
                "That weirdness was fixed for <script> with Issue #305: http://try.jsoup.org/~3Ms6TQCrrdaA_uPgxgURYYvwFAg",
                []
            ],
            ["<html>", []],
            ["<head>", []],
            ["<script></script>", []],
            ["</head>", []],
            ["<body>", []],
            ["<p>Whatever</p>", []],
            ["</body>", []],
            ["</html>", []],
            [
                "Looking at the source, it seems only the HtmlTreeBuilderState handling for <noframes>, <style> and <title> in the methods handleRawText and handleRcData doesn't get along with the self-closing tags.",
                ["OB"]
            ],
            [
                "Any other tagname I've checked (and I tried to cover all branches of that case StartTag switch) results in a good parse similar to the <script> case, which is what I'd expect.",
                ["OB", "EB", "SR"]
            ],
            ["Thanks for looking into this!", []]
        ]
    },
    "Mockito-27": {
        "code_elements": [
            "public void testThrowException() {",
            "Object o = Mockito.mock(Object.class);",
            "// test behavior with Runtimeexception",
            "Mockito.when(o.toString()).thenThrow(RuntimeException.class);",
            "// ...",
            "// test behavior with another exception",
            "// this throws a RuntimeException",
            "Mockito.when(o.toString()).thenThrow(IllegalArgumentException.class);",
            "// ...",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["thenThrow"],
        "summary_text": [
            "Exception when stubbing more than once with when...thenThrow"
        ],
        "desc_hints": [
            "IllegalArgumentException.class",
            "Object.class",
            "toString",
            "testThrowException",
            "RuntimeException",
            "doThrow",
            "Mockito.when",
            "RuntimeException.class",
            "thenThrow",
            "Mockito.mock"
        ],
        "desc_text": [
            [
                "If I create a mock and stub a method so it throws an exception and do that twice the first exception will be thrown upon invoking the second stub instruction.",
                ["OB", "SR"]
            ],
            ["Example:", ["OB", "SR"]],
            ["@Test", []],
            ["public void testThrowException() {", "CODE"],
            ["Object o = Mockito.mock(Object.class);", "CODE"],
            ["// test behavior with Runtimeexception", "CODE"],
            [
                "Mockito.when(o.toString()).thenThrow(RuntimeException.class);",
                "CODE"
            ],
            ["// ...", "CODE"],
            ["// test behavior with another exception", "CODE"],
            ["// this throws a RuntimeException", "CODE"],
            [
                "Mockito.when(o.toString()).thenThrow(IllegalArgumentException.class);",
                "CODE"
            ],
            ["// ...", "CODE"],
            ["}", "CODE"],
            [
                "I can work around this if I do it the other way around with doThrow...when.",
                ["OB"]
            ],
            ["But I lose type safety then.", ["OB", "SR"]],
            ["Can you fix this?", []]
        ]
    },
    "Codec-12": {
        "code_elements": [
            "public void testSkip() throws Throwable {",
            "InputStream ins =",
            "new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to",
            "{0, 0, 0, 255, 255, 255}",
            "Base64InputStream instance = new Base64InputStream(ins);",
            "assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters",
            "assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\"",
            "}",
            "public long skip(long n) throws IOException {",
            "//delegate to read()",
            "long bytesRead = 0;",
            "while ((bytesRead < n) && (read() != -1))",
            "{",
            "bytesRead++;",
            "}",
            "return bytesRead;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Base64InputStream.skip"],
        "summary_text": [
            "Base64InputStream.skip skips underlying stream, not output"
        ],
        "desc_hints": [
            "bytesRead",
            "getBytes",
            "assertEquals",
            "instance.read",
            "Base64InputStream",
            "Base64InputStream.skip",
            "instance.skip",
            "testSkip",
            "InputStream",
            "BaseNCodecInputStream",
            "ByteArrayInputStream"
        ],
        "desc_text": [
            [
                "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.",
                ["OB"]
            ],
            ["The following code will reproduce the issue:", ["OB", "SR"]],
            ["@Test", []],
            ["public void testSkip() throws Throwable {", "CODE"],
            ["InputStream ins =", "CODE"],
            [
                "new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to",
                "CODE"
            ],
            ["{0, 0, 0, 255, 255, 255}", "CODE"],
            [
                "Base64InputStream instance = new Base64InputStream(ins);",
                "CODE"
            ],
            [
                "assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters",
                "CODE"
            ],
            [
                "assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\"",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "The following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:",
                ["SR"]
            ],
            ["@Override", []],
            ["public long skip(long n) throws IOException {", "CODE"],
            ["//delegate to read()", "CODE"],
            ["long bytesRead = 0;", "CODE"],
            ["while ((bytesRead < n) && (read() != -1))", "CODE"],
            ["{", "CODE"],
            ["bytesRead++;", "CODE"],
            ["}", "CODE"],
            ["return bytesRead;", "CODE"],
            ["}", "CODE"],
            ["More efficient code may be possible.", ["OB"]]
        ]
    },
    "Time-2": {
        "code_elements": [
            "new Partial(yearOfCentury(),  1).with(weekyear(), 1);",
            "// NullPointerException",
            "// org.joda.time.Partial.with (Partial.java:447)"
        ],
        "stack_traces": [],
        "summary_hints": ["Partial.with"],
        "summary_text": ["Partial.with fails with NPE"],
        "desc_hints": [
            "org.joda.time.Partial.with",
            "Partial.java",
            "NullPointerException",
            "yearOfCentury",
            "yearOfEra"
        ],
        "desc_text": [
            ["With the latest master:", []],
            ["new Partial(yearOfCentury(),  1).with(weekyear(), 1);", "CODE"],
            ["// NullPointerException", "CODE"],
            ["// org.joda.time.Partial.with (Partial.java:447)", "CODE"],
            ["Fails with yearOfCentury, year and yearOfEra.", ["OB"]],
            ["Probably because weekyear has a null range duration type.", []]
        ]
    },
    "Closure-49": {
        "code_elements": [
            "var foo = function bar(){",
            "var bar;",
            "alert(bar)",
            "var foo = function() {",
            "alert(void 0)",
            "var foo = function bar() {",
            "alert(bar)"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Incorrect output if a function is assigned to a variable, and the function contains a variable with the same name"
        ],
        "desc_hints": ["compiler.appspot.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Enter the following into the online compiler", ["OB", "SR"]],
            ["var foo = function bar(){", "CODE"],
            ["var bar;", "CODE"],
            ["alert(bar)", "CODE"],
            ["};", []],
            ["2.", ["OB", "SR"]],
            ["Compile using simple optimization", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I'd expect to see", ["EB"]],
            ["var foo = function() {", "CODE"],
            ["alert(void 0)", "CODE"],
            ["};", []],
            ["Instead I see", ["OB"]],
            ["var foo = function bar() {", "CODE"],
            ["alert(bar)", "CODE"],
            ["};", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Using http://closure-compiler.appspot.com/home", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "The compiled output is correct if you remove the \"var foo =\" part, or if you rename the function from \"bar\" to something else.",
                []
            ]
        ]
    },
    "Gson-17": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["DefaultDateTypeAdapter"],
        "summary_text": [
            "Fixed DefaultDateTypeAdapter nullability issue and JSON primitives contract"
        ],
        "desc_hints": ["DefaultDateTypeAdapter", "TreeTypeAdapter"],
        "desc_text": [
            ["Regression in:", []],
            [
                "b8f616c - Migrate DefaultDateTypeAdapter to streaming adapter (#1070)",
                []
            ],
            ["Bug reports:", []],
            [
                "#1096 - 2.8.1 can't serialize and deserialize date null (2.8.0 works fine)",
                ["OB"]
            ],
            [
                "#1098 - Gson 2.8.1 DefaultDateTypeAdapter is not null safe.",
                ["OB"]
            ],
            [
                "#1095 - serialize date sometimes TreeTypeAdapter, sometimes DefaultDateTypeAdapter?",
                []
            ]
        ]
    },
    "Jsoup-35": {
        "code_elements": [
            "String tmp = \"<a href='www.google.com'>Link<p>Error link</a>\";",
            "Jsoup.parse(tmp);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["JSoup parsing unclosed tags"],
        "desc_hints": ["Jsoup.parse", "stackoverflow.com", "www.google.com"],
        "desc_text": [
            [
                "Using JSoup inclusive the last release 1.7.2 there is a bug parsing HTML with unclosed tags.",
                ["OB"]
            ],
            ["Example:", ["OB", "SR"]],
            [
                "String tmp = \"<a href='www.google.com'>Link<p>Error link</a>\";",
                "CODE"
            ],
            ["Jsoup.parse(tmp);", "CODE"],
            ["The Document that generate is:", ["OB"]],
            ["<html>", []],
            ["<head></head>", []],
            ["<body>", []],
            ["<a href=\"www.google.com\">Link</a>", []],
            ["<p><a>Error link</a></p>", ["OB"]],
            ["</body>", []],
            ["</html>", []],
            ["The browsers would generate something as:", []],
            ["<html>", []],
            ["<head></head>", []],
            ["<body>", []],
            ["<a href=\"www.google.com\">Link</a>", []],
            ["<p><a href=\"www.google.com\">Error link</a></p>", ["OB"]],
            ["</body>", []],
            ["</html>", []],
            ["Jsoup should works as browsers or as source code.", ["OB", "EB"]],
            ["Also there is a question on stackoverflow:", []],
            [
                "http://stackoverflow.com/questions/15813821/jsoup-parsing-unclosed-tags",
                []
            ]
        ]
    },
    "Compress-45": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "formatLongBinary",
            "TarUtils.formatLongOctalOrBinaryBytes"
        ],
        "summary_text": [
            "TarUtils.formatLongOctalOrBinaryBytes never uses result of formatLongBinary"
        ],
        "desc_hints": ["formatLongBinary", "formatBigIntegerBinary"],
        "desc_text": [
            [
                "if the length < 9, formatLongBinary is executed, then overwritten by the results of formatBigIntegerBinary.",
                ["OB"]
            ],
            ["If the results are not ignored, a unit test would fail.", ["OB"]],
            ["Also, do the binary hacks need to support negative numbers?", []]
        ]
    },
    "JacksonXml-1": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Problem with deserialization of nested non-wrapped lists, with empty inner list"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "Looks like there is a problem, wherein nested structures like say:",
                []
            ],
            ["Definition POJO, with records, unwrapped List with Record", []],
            [
                "Record POJO having property fields, another unwrapped list of Field POJOs",
                []
            ],
            [
                "and case where inner List happens to be empty/missing, cause incorrectly \"split\" parts of outermost Lists (here for property records).",
                ["OB"]
            ],
            [
                "I will come up with a full reproduction later on, but observed this in the wild, and I think it occurs with latest 2.7.0-rc code, as well as 2.6.4-1, so is not just something that has been fixed with a later version.",
                ["SR"]
            ]
        ]
    },
    "Closure-53": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @output_file_name default.js",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @code_url https://raw.github.com/scottschiller/SoundManager2/master/script/soundmanager2-nodebug.js",
            "// ==/ClosureCompiler=="
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "compiler-20110811 crashes with index(1) must be less than size(1)"
        ],
        "desc_hints": [
            "ClosureCompiler",
            "nodebug.js",
            "raw.github.com",
            "SoundManager",
            "SoundManager2",
            "default.js"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            [
                "Run compiler on https://raw.github.com/scottschiller/SoundManager2/master/script/soundmanager2-nodebug.js",
                ["SR"]
            ],
            [
                "You can copy this into the Appspot closure compiler to see the error:",
                ["OB"]
            ],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            [
                "// @code_url https://raw.github.com/scottschiller/SoundManager2/master/script/soundmanager2-nodebug.js",
                "CODE"
            ],
            ["// ==/ClosureCompiler==", "CODE"],
            ["I've attached a dump of the error from appspot.", ["OB"]],
            ["(This is the popular SoundManager library for HTML5 audio)", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Got crash...", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Latest (compiler-20110811).", ["OB"]],
            [
                "We were previously using the June build, and had no problems",
                []
            ],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Compress-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ArchiveStreamFactory"],
        "summary_text": ["Too relaxed tar detection in ArchiveStreamFactory"],
        "desc_hints": [],
        "desc_text": [
            [
                "The relaxed tar detection logic added in COMPRESS-117 unfortunately matches also some non-tar files like a test AIFF file that Apache Tika uses.",
                ["OB", "SR"]
            ],
            [
                "It would be good to improve the detection heuristics to still match files like the one in COMPRESS-117 but avoid false positives like the AIFF file in Tika.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-44": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Problem with polymorphic types, losing properties from base type(s)"
        ],
        "desc_hints": ["defaultImpl"],
        "desc_text": [
            ["(background, see: dropwizard/dropwizard#1449)", []],
            [
                "Looks like sub-type resolution may be broken for one particular case: that of using defaultImpl.",
                ["OB", "SR"]
            ],
            [
                "If so, appears like properties from super-types are not properly resolved; guessing this could be follow-up item for #1083 (even sooner than I thought...).",
                []
            ]
        ]
    },
    "Jsoup-78": {
        "code_elements": [
            "} catch (e: Exception) {",
            "if (e !is UnknownHostException)",
            "e.logFrostAnswers(\"Fetch username failed\")",
            "if (result.isBlank() && (name?.isNotBlank() == true)) {",
            "callback(name!!)",
            "return@subscribe",
            "}",
            "if (name != result) {",
            "name = result",
            "saveFbCookie(this@fetchUsername)",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Underlying input stream returned zero bytes"],
        "desc_hints": [
            "org.jsoup",
            "org.jsoup.parser.Parser.parseInput",
            "DataUtil.java",
            "HtmlTreeBuilder.java",
            "touch.facebook.com",
            "fetchUsername",
            "CharacterReader.java",
            "org.jsoup.helper.HttpConnection",
            "Parser.java",
            "org.jsoup.helper.HttpConnection.get",
            "TreeBuilder.java",
            "FbItem.PROFILE.url",
            "logFrostAnswers",
            "org.jsoup.parser.CharacterReader",
            "isNotBlank",
            "frostJsoup",
            "java.io.IOException",
            "org.jsoup.parser.CharacterReader.bufferUp",
            "org.jsoup.parser.HtmlTreeBuilder.initialiseParse",
            "org.jsoup.parser.TreeBuilder.parse",
            "HttpConnection.java",
            "saveFbCookie",
            "Response.parse",
            "result.isBlank",
            "org.jsoup.parser.TreeBuilder.defaultSettings",
            "UnknownHostException",
            "org.jsoup.helper.DataUtil.parseInputStream"
        ],
        "desc_text": [
            [
                "Caused by org.jsoup.c: java.io.IOException: Underlying input stream returned zero bytes",
                ["OB"]
            ],
            [
                "at org.jsoup.parser.CharacterReader.bufferUp(CharacterReader.java:60)",
                []
            ],
            [
                "at org.jsoup.parser.CharacterReader.(CharacterReader.java)",
                ["OB"]
            ],
            [
                "at org.jsoup.parser.CharacterReader.(CharacterReader.java)",
                ["OB"]
            ],
            [
                "at org.jsoup.parser.TreeBuilder.defaultSettings(TreeBuilder.java:35)",
                []
            ],
            [
                "at org.jsoup.parser.HtmlTreeBuilder.initialiseParse(HtmlTreeBuilder.java:66)",
                []
            ],
            ["at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:44)", []],
            ["at org.jsoup.parser.Parser.parseInput(Parser.java:39)", []],
            [
                "at org.jsoup.helper.DataUtil.parseInputStream(DataUtil.java:151)",
                []
            ],
            [
                "at org.jsoup.helper.HttpConnection$Response.parse(HttpConnection.java:832)",
                []
            ],
            [
                "at org.jsoup.helper.HttpConnection.get(HttpConnection.java:289)",
                []
            ],
            ["There isn't much information I can offer here.", ["OB"]],
            [
                "This is with JSoup 1.11.1, with an attempt of parsing for a user's name.",
                ["OB"]
            ],
            [
                "My assumption is that the call is executing the following:",
                ["SR"]
            ],
            ["var result = \"\"", ["OB"]],
            ["try {", []],
            ["result = frostJsoup(cookie, FbItem.PROFILE.url).title()", ["OB"]],
            ["L.d(\"Fetch username found\", result)", ["OB"]],
            ["} catch (e: Exception) {", "CODE"],
            ["if (e !is UnknownHostException)", "CODE"],
            ["e.logFrostAnswers(\"Fetch username failed\")", "CODE"],
            ["} finally {", []],
            ["if (result.isBlank() && (name?.isNotBlank() == true)) {", "CODE"],
            ["callback(name!!)", "CODE"],
            ["return@subscribe", "CODE"],
            ["}", "CODE"],
            ["if (name != result) {", "CODE"],
            ["name = result", "CODE"],
            ["saveFbCookie(this@fetchUsername)", "CODE"],
            ["}", "CODE"],
            ["callback(result)", ["OB"]],
            ["}", "CODE"],
            [
                "where cookie is the user's cooke, and the url is touch.facebook.com/me",
                []
            ],
            ["I'm not sure why this is a seemlingly fatal error though.", []],
            ["As usual, the full log and thread info can be found here", []]
        ]
    },
    "JacksonDatabind-2": {
        "code_elements": [
            "class X<T> {",
            "String s;",
            "List<T> items;",
            "public class ListAttributeSerializer extends JsonSerializer<ListAttribute> {",
            "@Override",
            "public void serialize(ListAttribute value, JsonGenerator jgen,",
            "SerializerProvider provider) throws IOException {",
            "jgen.writeStartObject();",
            "jgen.writeStringField(\"itemType\", value.getItemJsonKey());",
            "jgen.writeObjectField(\"items\", value.getItems());",
            "jgen.writeEndObject();",
            "}",
            "@Override",
            "public void serializeWithType(ListAttribute value, JsonGenerator",
            "jgen, SerializerProvider provider, TypeSerializer typeSer) throws",
            "IOException {",
            "typeSer.writeTypePrefixForObject(value, jgen);",
            "jgen.writeStringField(\"itemType\", value.getItemJsonKey());",
            "jgen.writeObjectField(\"items\", value.getItems());",
            "typeSer.writeTypeSuffixForObject(value, jgen);",
            "}",
            "}",
            "byte[] json = mapper.writeValueAsBytes(referenceText);",
            "JsonNode tree = mapper.readTree(json);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Unwanted POJO's embedded in tree via serialization to tree"
        ],
        "desc_hints": [
            "SerializerProvider",
            "serializeWithType",
            "typeSer",
            "TypeSerializer",
            "itemType",
            "jgen.writeObjectField",
            "jgen.writeEndObject",
            "value.getItems",
            "mapper.writeValueAsBytes",
            "referenceText",
            "ArrayList",
            "valueToTree",
            "JsonSerializer",
            "typeSer.writeTypeSuffixForObject",
            "JsonNodes",
            "jgen.writeStringField",
            "JsonGenerator",
            "writeObjectField",
            "JsonNode",
            "value.getItemJsonKey",
            "ListAttributeSerializer",
            "jgen.writeStartObject",
            "typeSer.writeTypePrefixForObject",
            "TokenBuffer",
            "ListAttribute",
            "mapper.readTree"
        ],
        "desc_text": [
            ["I have a class, more or less:", []],
            ["class X<T> {", "CODE"],
            ["String s;", "CODE"],
            ["List<T> items;", "CODE"],
            ["};", []],
            ["It has a custom serializer.", ["OB"]],
            [
                "When I serialize to a tree, the entire list ends up as a",
                ["OB", "SR"]
            ],
            ["VALUE_EMBEDDED_OBJECT: the ArrayList itself.", ["OB"]],
            [
                "Here's the serializer class, note the use of writeObjectField.",
                []
            ],
            [
                "public class ListAttributeSerializer extends JsonSerializer<ListAttribute> {",
                "CODE"
            ],
            ["@Override", "CODE"],
            [
                "public void serialize(ListAttribute value, JsonGenerator jgen,",
                "CODE"
            ],
            ["SerializerProvider provider) throws IOException {", "CODE"],
            ["jgen.writeStartObject();", "CODE"],
            [
                "jgen.writeStringField(\"itemType\", value.getItemJsonKey());",
                "CODE"
            ],
            ["jgen.writeObjectField(\"items\", value.getItems());", "CODE"],
            ["jgen.writeEndObject();", "CODE"],
            ["}", "CODE"],
            ["@Override", "CODE"],
            [
                "public void serializeWithType(ListAttribute value, JsonGenerator",
                "CODE"
            ],
            [
                "jgen, SerializerProvider provider, TypeSerializer typeSer) throws",
                "CODE"
            ],
            ["IOException {", "CODE"],
            ["typeSer.writeTypePrefixForObject(value, jgen);", "CODE"],
            [
                "jgen.writeStringField(\"itemType\", value.getItemJsonKey());",
                "CODE"
            ],
            ["jgen.writeObjectField(\"items\", value.getItems());", "CODE"],
            ["typeSer.writeTypeSuffixForObject(value, jgen);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["And Tatu wrote me:", []],
            ["Ok.", ["OB"]],
            [
                "valueToTree() uses TokenBuffer as target, so it probably then simply retains Object passed as-is, to defer conversion/serialization, for common use case of buffering.",
                ["SR"]
            ],
            [
                "But in your case you would rather get actual serialization into JsonNodes.",
                ["OB"]
            ],
            [
                "You will probably want to write conversion out then, something like:",
                ["SR"]
            ],
            ["byte[] json = mapper.writeValueAsBytes(referenceText);", "CODE"],
            ["JsonNode tree = mapper.readTree(json);", "CODE"],
            ["This is just the work-around on short term.", ["OB"]],
            [
                "But this is one thing where configurability might be needed; or possibly different methods.",
                []
            ],
            [
                "One that forces full serialization into JSON with no POJONodes, other that leaves things as is.",
                ["OB"]
            ]
        ]
    },
    "Lang-1": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NumberUtils"],
        "summary_text": ["NumberUtils does not handle Long Hex numbers"],
        "desc_hints": [
            "createNumber",
            "NumberUtils.createNumber",
            "createLong",
            "valueOf",
            "Long.decode",
            "NumberUtils.createLong",
            "createInteger"
        ],
        "desc_text": [
            [
                "NumberUtils.createLong() does not handle hex numbers, but createInteger() handles hex and octal.",
                ["OB"]
            ],
            ["This seems odd.", ["OB"]],
            [
                "NumberUtils.createNumber() assumes that hex numbers can only be Integer.",
                ["OB"]
            ],
            ["Again, why not handle bigger Hex numbers?", []],
            ["==", []],
            [
                "It is trivial to fix createLong() - just use Long.decode() instead of valueOf().",
                []
            ],
            [
                "It's not clear why this was not done originally - the decode() method was added to both Integer and Long in Java 1.2.",
                ["OB"]
            ],
            [
                "Fixing createNumber() is also fairly easy - if the hex string has more than 8 digits, use Long.",
                []
            ],
            ["Should we allow for leading zeros in an Integer?", ["EB"]],
            ["If not, the length check is trivial.", ["OB"]]
        ]
    },
    "Lang-45": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["WordUtils.abbreviate", "str.length"],
        "summary_text": [
            "WordUtils.abbreviate bug when lower is greater than str.length"
        ],
        "desc_hints": [
            "WordUtils.abbreviate",
            "str.lengt",
            "str.substring",
            "StringIndexOutOfBoundsException"
        ],
        "desc_text": [
            [
                "In WordUtils.abbreviate, upper is adjusted to the length of the string, then to lower.",
                ["OB"]
            ],
            [
                "But lower is never adjusted to the length of the string, so if lower is greater than str.lengt(), upper will be too...",
                ["OB"]
            ],
            [
                "Then, str.substring(0, upper) throw a StringIndexOutOfBoundsException",
                []
            ],
            ["The fix is to adjust lower to the length of the string", []]
        ]
    },
    "Closure-20": {
        "code_elements": ["valueOf: function() { return undefined; }"],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["String conversion optimization is incorrect"],
        "desc_hints": ["valueOf", "compiler.appspot.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["var f = {", []],
            ["valueOf: function() { return undefined; }", "CODE"],
            ["}", []],
            ["String(f)", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Expected output: \"[object Object]\"", ["EB"]],
            ["Actual output: \"undefined\"", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "All versions (http://closure-compiler.appspot.com/ as well).",
                ["OB"]
            ],
            ["Please provide any additional information below.", "QUERY"],
            [
                "The compiler optimizes String(x) calls by replacing them with x + ''.",
                ["OB", "SR"]
            ],
            [
                "This is correct in most cases, but incorrect in corner cases like the one mentioned above.",
                ["OB"]
            ]
        ]
    },
    "Lang-58": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NumberFormatException", "NumberUtils.createNumber"],
        "summary_text": [
            "NumberUtils.createNumber throws NumberFormatException for one digit long"
        ],
        "desc_hints": [
            "numeric.substring",
            "isDigits",
            "NumberFormatException",
            "NumberUtils.createNumber"
        ],
        "desc_text": [
            [
                "NumberUtils.createNumber throws a NumberFormatException when parsing \"1l\", \"2l\" ..",
                ["OB"]
            ],
            ["etc...", ["OB"]],
            [
                "It works fine if you try to parse \"01l\" or \"02l\".",
                ["OB", "SR"]
            ],
            [
                "The condition isDigits(numeric.substring(1)), line 455 return false as numeric.substring(1) is an empty string for \"1l\"",
                ["OB"]
            ]
        ]
    },
    "Lang-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NumberUtils", "createNumber"],
        "summary_text": [
            "Method createNumber from NumberUtils doesn't work for floating point numbers other than Float"
        ],
        "desc_hints": ["NumberUtils", "createNumber", "BigDecimal"],
        "desc_text": [
            [
                "Method createNumber from NumberUtils is trying to parse a string with a floating point number always first as a Float, that will cause that if we send a string with a number that will need a Double or even a BigDecimal the number will be truncate to accommodate into the Float without an exception to be thrown, so in fact we will no be returning ever neither a Double nor a BigDecimal.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-120": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// ==/ClosureCompiler==",
            "function reset() {",
            "uid = Math.random();",
            "}",
            "function doStuff() {",
            "reset();",
            "var _uid = uid;",
            "if (uid < 0.5) {",
            "doStuff();",
            "}",
            "if (_uid !== uid) {",
            "throw 'reset() was called';",
            "}",
            "}",
            "doStuff();",
            "var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw\"reset() was called\";}b();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Overzealous optimization confuses variables"],
        "desc_hints": ["doStuff", "ClosureCompiler", "Math.random"],
        "desc_text": [
            ["The following code:", ["OB", "SR"]],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["var uid;", []],
            ["function reset() {", "CODE"],
            ["uid = Math.random();", "CODE"],
            ["}", "CODE"],
            ["function doStuff() {", "CODE"],
            ["reset();", "CODE"],
            ["var _uid = uid;", "CODE"],
            ["if (uid < 0.5) {", "CODE"],
            ["doStuff();", "CODE"],
            ["}", "CODE"],
            ["if (_uid !== uid) {", "CODE"],
            ["throw 'reset() was called';", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["doStuff();", "CODE"],
            ["...gets optimized to:", []],
            [
                "var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw\"reset() was called\";}b();",
                "CODE"
            ],
            [
                "Notice how _uid gets optimized away and (uid!==_uid) becomes (a!==a) even though doStuff() might have been called and uid's value may have changed and become different from _uid.",
                []
            ],
            [
                "As an aside, replacing the declaration with \"var _uid = +uid;\" fixes it, as does adding an extra \"uid = _uid\" after \"var _uid = uid\".",
                []
            ]
        ]
    },
    "Lang-28": {
        "code_elements": [
            "public void escape(Writer writer, String str) throws IOException {",
            "int len = str.length();",
            "for (int i = 0; i < len; i++) {",
            "int code = str.codePointAt;",
            "String entityName = this.entityName(code);",
            "if (entityName != null)",
            "{",
            "writer.write('&');",
            "writer.write(entityName);",
            "writer.write(';');",
            "}",
            "else if (code > 0x7F)",
            "{",
            "writer.write(\"&#\");",
            "writer.write(code);",
            "writer.write(';');",
            "}",
            "else",
            "{",
            "writer.write((char) code);",
            "}",
            "if (code > 0xffff)",
            "{",
            "i++;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["StringEscapeUtils.escapeXML"],
        "summary_text": [
            "StringEscapeUtils.escapeXML() can't process UTF-16 supplementary characters"
        ],
        "desc_hints": [
            "java.sun.com",
            "writer.write",
            "StringEscapeUtils.escapeXML",
            "entityName",
            "str.codePointAt",
            "str.length",
            "escapeXML",
            "technicalArticles",
            "this.entityName"
        ],
        "desc_text": [
            [
                "Supplementary characters in UTF-16 are those whose code points are above 0xffff, that is, require more than 1 Java char to be encoded, as explained here: http://java.sun.com/developer/technicalArticles/Intl/Supplementary/",
                ["SR"]
            ],
            [
                "Currently, StringEscapeUtils.escapeXML() isn't aware of this coding scheme and treats each char as one character, which is not always right.",
                ["OB"]
            ],
            ["A possible solution in class Entities would be:", []],
            [
                "public void escape(Writer writer, String str) throws IOException {",
                "CODE"
            ],
            ["int len = str.length();", "CODE"],
            ["for (int i = 0; i < len; i++) {", "CODE"],
            ["int code = str.codePointAt;", "CODE"],
            ["String entityName = this.entityName(code);", "CODE"],
            ["if (entityName != null)", "CODE"],
            ["{", "CODE"],
            ["writer.write('&');", "CODE"],
            ["writer.write(entityName);", "CODE"],
            ["writer.write(';');", "CODE"],
            ["}", "CODE"],
            ["else if (code > 0x7F)", "CODE"],
            ["{", "CODE"],
            ["writer.write(\"&#\");", "CODE"],
            ["writer.write(code);", "CODE"],
            ["writer.write(';');", "CODE"],
            ["}", "CODE"],
            ["else", "CODE"],
            ["{", "CODE"],
            ["writer.write((char) code);", "CODE"],
            ["}", "CODE"],
            ["if (code > 0xffff)", "CODE"],
            ["{", "CODE"],
            ["i++;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "Besides fixing escapeXML(), this will also affect HTML escaping functions.",
                []
            ],
            [
                "I guess that's a good thing, but please remember I have only tested escapeXML().",
                []
            ]
        ]
    },
    "Jsoup-10": {
        "code_elements": [
            "Document doc = Jsoup.parse(new URL(\"http://www.oschina.net/bbs/thread/12975\"), 5*1000);",
            "Elements es = doc.select(\"a[href]\");",
            "for(Iterator it = es.iterator();it.hasNext();){",
            "Element e = it.next();",
            "System.out.println(e.absUrl(\"href\"));",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["absUrl"],
        "summary_text": ["attr(\"abs:href\") , absUrl(\"href\")"],
        "desc_hints": [
            "doc.select",
            "it.hasNext",
            "Jsoup.parse",
            "absUrl",
            "www.oschina.net",
            "it.next",
            "es.iterator",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Document doc = Jsoup.parse(new URL(\"http://www.oschina.net/bbs/thread/12975\"), 5*1000);",
                "CODE"
            ],
            ["Elements es = doc.select(\"a[href]\");", "CODE"],
            ["for(Iterator it = es.iterator();it.hasNext();){", "CODE"],
            ["Element e = it.next();", "CODE"],
            ["System.out.println(e.absUrl(\"href\"));", "CODE"],
            ["}", "CODE"],
            ["attr(\"abs:href\") ------  <a href=\"?p=1\">1</a>", []],
            [
                "result: ------------------- http://www.oschina.net/bbs/thread/?p=1",
                ["OB"]
            ],
            ["I think it's a wrong result~.", ["OB"]],
            [
                "The correct results should be \"http://www.oschina.net/bbs/thread/12975?p=1\"",
                ["OB", "EB"]
            ]
        ]
    },
    "Gson-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ConcurrentNavigableMap"],
        "summary_text": ["Error desirialization of ConcurrentNavigableMap"],
        "desc_hints": [
            "code.google.com",
            "gmail.com",
            "IllegalArgumentException",
            "gsonErrLog.TXT",
            "ConcurrentNavigableMap",
            "ConcurrentSkipListMap",
            "JsonUtilsTest.java"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Create POJO with filled ConcurrentNavigableMap field",
                ["OB", "SR"]
            ],
            ["2.", ["OB", "SR"]],
            ["Sirialize to json string", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["Desirialize from json string", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Original state is expected.", ["OB", "EB"]],
            ["IllegalArgumentException is thrown", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Gson 2.3.1, java 8, windows 7", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Gson works only with class type field such as ConcurrentSkipListMap.",
                ["OB"]
            ],
            [
                "Good programming style is using interface type such as ConcurrentNavigableMap.",
                ["OB"]
            ],
            ["See attach for log and unit-test", ["OB"]],
            [
                "Original issue reported on code.google.com by dkhomya...@gmail.com on 29 Jan 2015 at 8:34",
                []
            ],
            ["Attachments:", []],
            ["gsonErrLog.TXT", []],
            ["JsonUtilsTest.java", []]
        ]
    },
    "JacksonDatabind-101": {
        "code_elements": [
            "static class Bean {",
            "int x;",
            "int y;",
            "@JsonUnwrapped",
            "UnwrappedBean w;",
            "public Bean(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {",
            "this.x = x;",
            "this.y = y;",
            "}",
            "public void setW(UnwrappedBean w) {",
            "this.w = w;",
            "}",
            "}",
            "static class UnwrappedBean {",
            "int a;",
            "int b;",
            "public UnwrappedBean(@JsonProperty(\"a\") int a, @JsonProperty(\"b\") int b) {",
            "this.a = a;",
            "this.b = b;",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonUnwrapped", "PropertyBasedCreator"],
        "summary_text": [
            "@JsonUnwrapped fields are skipped when using PropertyBasedCreator if they appear after the last creator property"
        ],
        "desc_hints": ["JsonUnwrapped", "UnwrappedBean", "JsonProperty"],
        "desc_text": [
            ["Example:", ["OB", "SR"]],
            ["static class Bean {", "CODE"],
            ["int x;", "CODE"],
            ["int y;", "CODE"],
            ["@JsonUnwrapped", "CODE"],
            ["UnwrappedBean w;", "CODE"],
            [
                "public Bean(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {",
                "CODE"
            ],
            ["this.x = x;", "CODE"],
            ["this.y = y;", "CODE"],
            ["}", "CODE"],
            ["public void setW(UnwrappedBean w) {", "CODE"],
            ["this.w = w;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["static class UnwrappedBean {", "CODE"],
            ["int a;", "CODE"],
            ["int b;", "CODE"],
            [
                "public UnwrappedBean(@JsonProperty(\"a\") int a, @JsonProperty(\"b\") int b) {",
                "CODE"
            ],
            ["this.a = a;", "CODE"],
            ["this.b = b;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["{\"x\": 1, \"a\": 2, \"y\": 3, \"b\": 4}", ["SR"]],
            ["x, y, and a are deserialized as expected.", ["OB", "EB"]],
            ["b is skipped entirely.", ["OB"]],
            [
                "I think I've found the root cause and the fix doesn't appear to break any tests; opening a PR for further review.",
                ["OB"]
            ]
        ]
    },
    "Codec-7": {
        "code_elements": [
            "public static String encodeBase64String(byte[] binaryData) {",
            "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
            "}",
            "public static String encodeBase64String(byte[] binaryData) {",
            "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
            "}",
            "//assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));",
            "//assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));",
            "//assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));",
            "//assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));",
            "//assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));",
            "//assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));"
        ],
        "stack_traces": [],
        "summary_hints": ["Base64.encodeBase64String"],
        "summary_text": ["Base64.encodeBase64String() shouldn't chunk"],
        "desc_hints": [
            "Zm9vYmE",
            "assertEquals",
            "Zm9vYg",
            "encodeBase64String",
            "StringUtils.getBytesUtf8",
            "Base64.encodeBase64String",
            "encodeBase64",
            "StringUtils.newStringUtf8",
            "Zm9vYmFy",
            "binaryData"
        ],
        "desc_text": [
            ["Base64.encodeBase64String() shouldn't chunk.", ["OB", "EB"]],
            ["Change this:", []],
            [
                "public static String encodeBase64String(byte[] binaryData) {",
                "CODE"
            ],
            [
                "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
                "CODE"
            ],
            ["}", "CODE"],
            ["To this:", []],
            [
                "public static String encodeBase64String(byte[] binaryData) {",
                "CODE"
            ],
            [
                "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "This will fix the following tests ggregory added a few minutes ago:",
                ["SR"]
            ],
            [
                "//assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));",
                "CODE"
            ],
            [
                "//assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));",
                "CODE"
            ],
            [
                "//assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));",
                "CODE"
            ],
            [
                "//assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));",
                "CODE"
            ],
            [
                "//assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));",
                "CODE"
            ],
            [
                "//assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));",
                "CODE"
            ]
        ]
    },
    "Math-15": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FastMath.pow", "Math.pow"],
        "summary_text": [
            "FastMath.pow deviates from Math.pow for negative, finite base values with an exponent 2^52 < y < 2^53"
        ],
        "desc_hints": ["Math.pow", "FastMath.pow"],
        "desc_text": [
            ["As reported by Jeff Hain:", []],
            ["pow(double,double):", []],
            ["Math.pow(-1.0,5.000000000000001E15) = -1.0", []],
            ["FastMath.pow(-1.0,5.000000000000001E15) = 1.0", []],
            ["===> This is due to considering that power is an even", []],
            ["integer if it is >= 2^52, while you need to test", ["SR"]],
            ["that it is >= 2^53 for it.", []],
            ["===> replace", []],
            ["\"if (y >= TWO_POWER_52 || y <= -TWO_POWER_52)\"", []],
            ["with", ["OB"]],
            ["\"if (y >= 2*TWO_POWER_52 || y <= -2*TWO_POWER_52)\"", []],
            ["and that solves it.", ["OB"]]
        ]
    },
    "JacksonXml-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["withRootName", "XmlSerializerProvider"],
        "summary_text": [
            "XmlSerializerProvider does not use withRootName config for null"
        ],
        "desc_hints": [
            "_rootNameFromConfig",
            "XmlSerializerProvider.java",
            "withRootName",
            "ToXmlGenerator",
            "_initWithRootName"
        ],
        "desc_text": [
            [
                "In jackson-dataformat-xml/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
                ["OB"]
            ],
            [
                "Line 203, I think _rootNameFromConfig() should be used if available instead of ROOT_NAME_FOR_NULL, so that withRootName() config can be used.",
                ["EB"]
            ],
            ["I don't know whether/how deser would be affected", []],
            [
                "jackson-dataformat-xml/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
                []
            ],
            ["Line 203", []],
            ["in", ["OB"]],
            ["ca1c671", []],
            [
                "_initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);",
                []
            ]
        ]
    },
    "Chart-5": {
        "code_elements": [
            "< if (index >= 0) {",
            "> if (index >= 0 && !allowDuplicateXValues) {",
            "545a546,559",
            "> } else if (index >= 0){",
            "> XYDataItem item = new XYDataItem(x, y);",
            "> int size = this.data.size();",
            "> && item.compareTo(this.data.get(index)) == 0) {",
            "> index++;",
            "> }",
            "> if (index < this.data.size()) {",
            "> this.data.add(index, item);",
            "> }",
            "> else {",
            "> this.data.add(item);",
            "> }",
            "< if (getItemCount() > this.maximumItemCount) {",
            "< this.data.remove(0);",
            "< }",
            "> if (getItemCount() > this.maximumItemCount) {",
            "> this.data.remove(0);",
            "> }"
        ],
        "stack_traces": [],
        "summary_hints": ["XYSeries.addOrUpdate"],
        "summary_text": [
            "#862 XYSeries.addOrUpdate() should add if duplicates are allowed"
        ],
        "desc_hints": [
            "phpBB2",
            "this.data.size",
            "this.maximumItemCount",
            "viewtopic.php",
            "addOrUpdate",
            "this.data.add",
            "XYSeries.java",
            "this.data.remove",
            "org.jfree.data.xy.XYSeries",
            "allowDuplicateXValues",
            "XYDataItem",
            "getItemCount",
            "this.data.get",
            "www.jfree.org",
            "item.compareTo"
        ],
        "desc_text": [
            ["Copied from this post (by Ted Schwartz) in the forum:", []],
            ["http://www.jfree.org/phpBB2/viewtopic.php?t=24523", []],
            [
                "I've found a bug in jfreechart-1.0.9 code for org.jfree.data.xy.XYSeries.",
                []
            ],
            [
                "There was a change some time ago which introduced the notion of allowing duplicate X values in XYSeries data.",
                ["OB", "EB"]
            ],
            [
                "The method addOrUpdate(Number x, Number y) was never modified to support this, and therefore duplicate data were overwriting existing data.",
                []
            ],
            [
                "This is the fix I've made, but I don't know how to submit a patch...",
                []
            ],
            [
                "$ diff original/jfreechart-1.0.9/source/org/jfree/data/xy/XYSeries.java fixed/org/jfree/data/xy/XYSeries.java",
                []
            ],
            ["537c537", []],
            ["< if (index >= 0) {", "CODE"],
            ["---", []],
            ["> if (index >= 0 && !allowDuplicateXValues) {", "CODE"],
            ["545a546,559", "CODE"],
            ["> } else if (index >= 0){", "CODE"],
            ["> XYDataItem item = new XYDataItem(x, y);", "CODE"],
            ["> // need to make sure we are adding *after* any duplicates", []],
            ["> int size = this.data.size();", "CODE"],
            ["> while (index < size", []],
            ["> && item.compareTo(this.data.get(index)) == 0) {", "CODE"],
            ["> index++;", "CODE"],
            ["> }", "CODE"],
            ["> if (index < this.data.size()) {", "CODE"],
            ["> this.data.add(index, item);", "CODE"],
            ["> }", "CODE"],
            ["> else {", "CODE"],
            ["> this.data.add(item);", "CODE"],
            ["> }", "CODE"],
            ["558,561d571", []],
            [
                "< // check if this addition will exceed the maximum item count...",
                []
            ],
            ["< if (getItemCount() > this.maximumItemCount) {", "CODE"],
            ["< this.data.remove(0);", "CODE"],
            ["< }", "CODE"],
            ["562a573,576", []],
            [
                "> // check if this addition will exceed the maximum item count...",
                []
            ],
            ["> if (getItemCount() > this.maximumItemCount) {", "CODE"],
            ["> this.data.remove(0);", "CODE"],
            ["> }", "CODE"]
        ]
    },
    "Closure-6": {
        "code_elements": [
            "/** @constructor */",
            "F.prototype.bar = function() { this.baz(); };",
            "F.prototype.baz = function() { };",
            "/** @constructor */",
            "G.prototype.bar = F.prototype.bar;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["better 'this' type checking"],
        "desc_hints": ["this.baz", "prototype.baz", "prototype.bar"],
        "desc_text": [
            ["/** @constructor */", "CODE"],
            ["function F() {}", []],
            ["F.prototype.bar = function() { this.baz(); };", "CODE"],
            ["F.prototype.baz = function() { };", "CODE"],
            ["/** @constructor */", "CODE"],
            ["function G() {}", []],
            ["G.prototype.bar = F.prototype.bar;", "CODE"],
            [
                "We should notice that \"F.prototype.bar\" and \"G.prototype.bar\" have different \"this\" types, and emit a warning.",
                ["EB"]
            ]
        ]
    },
    "Lang-25": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Some Entitys like &Ouml; are not matched properly against its ISO8859-1 representation"
        ],
        "desc_hints": [
            "stackoverflow.com",
            "list.htm",
            "EntityArrays",
            "www.fileformat.info"
        ],
        "desc_text": [
            ["In EntityArrays", ["OB"]],
            ["In", ["OB"]],
            ["private static final String[][] ISO8859_1_ESCAPE", []],
            ["some matching is wrong, for example", ["OB"]],
            ["{\"\\u00D7\", \"&Ouml;\"}, // \u00d6 - uppercase O, umlaut", []],
            ["{\"\\u00D8\", \"&times;\"}, // multiplication sign", []],
            ["but this must be", []],
            ["{\"\\u00D6\", \"&Ouml;\"}, // \u00d6 - uppercase O, umlaut", []],
            ["{\"\\u00D7\", \"&times;\"}, // multiplication sign", []],
            [
                "according to http://www.fileformat.info/info/unicode/block/latin_supplement/list.htm",
                []
            ],
            ["First look:", []],
            [
                "u00CA is missing in the array and all following entries are matched wrong by an offset of 1.",
                ["OB", "SR"]
            ],
            [
                "Found on http://stackoverflow.com/questions/4172784/bug-in-apache-commons-stringescapeutil/4172915#4172915",
                ["OB"]
            ]
        ]
    },
    "Closure-65": {
        "code_elements": [
            "var x = \"\\u00003\"; if (x.length < 2) { alert(\"fail\"); } else { alert(\"win\"); }",
            "for (int i = 0; i < s.length(); i++) {",
            "char c = s.charAt(i);",
            "switch (c) {",
            "-        case '\\0': sb.append(\"\\\\0\"); break;",
            "+        case '\\0': sb.append(\"\\\\000\"); break;",
            "case '\\n': sb.append(\"\\\\n\"); break;",
            "case '\\r': sb.append(\"\\\\r\"); break;",
            "case '\\t': sb.append(\"\\\\t\"); break;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["String escaping mishandles null byte"],
        "desc_hints": [
            "sb.append",
            "CodeGenerator.java",
            "code.google.com",
            "charAt"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Run:", []],
            [
                "var x = \"\\u00003\"; if (x.length < 2) { alert(\"fail\"); } else { alert(\"win\"); }",
                "CODE"
            ],
            ["2.", ["OB", "SR"]],
            ["Compile and run", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["\"win\" is expected.", ["OB", "EB"]],
            ["\"fail\" is observed", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["r1167 on OS x 10.6", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "The problem is here: http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CodeGenerator.java#1015",
                []
            ],
            ["Here's a patch that fixes it:", []],
            ["$ svn diff", []],
            ["Index: src/com/google/javascript/jscomp/CodeGenerator.java", []],
            [
                "===================================================================",
                []
            ],
            [
                "--- src/com/google/javascript/jscomp/CodeGenerator.java\t(revision 1167)",
                []
            ],
            [
                "+++ src/com/google/javascript/jscomp/CodeGenerator.java\t(working copy)",
                []
            ],
            ["@@ -1012,7 +1012,7 @@", []],
            ["for (int i = 0; i < s.length(); i++) {", "CODE"],
            ["char c = s.charAt(i);", "CODE"],
            ["switch (c) {", "CODE"],
            ["-        case '\\0': sb.append(\"\\\\0\"); break;", "CODE"],
            ["+        case '\\0': sb.append(\"\\\\000\"); break;", "CODE"],
            ["case '\\n': sb.append(\"\\\\n\"); break;", "CODE"],
            ["case '\\r': sb.append(\"\\\\r\"); break;", "CODE"],
            ["case '\\t': sb.append(\"\\\\t\"); break;", "CODE"],
            [
                "You could also lookahead and output \"\\\\000\" only if the following char is 0-7 (octal valid) and otherwise output \"\\\\0\".",
                ["OB"]
            ],
            ["Is 2 bytes worth the complexity?", []]
        ]
    },
    "Math-77": {
        "code_elements": [
            "public double getLInfNorm() {",
            "double max = 0;",
            "for (double a : data) {",
            "max += Math.max(max, Math.abs(a));",
            "}",
            "return max;",
            "}",
            "public double getLInfNorm() {",
            "double max = 0;",
            "Iterator iter = entries.iterator();",
            "while (iter.hasNext()) {",
            "iter.advance();",
            "max += iter.value();",
            "}",
            "return max;",
            "}",
            "public double getLInfNorm() {",
            "double norm = 0;",
            "Iterator<Entry> it = sparseIterator();",
            "Entry e;",
            "while(it.hasNext() && (e = it.next()) != null) {",
            "norm = Math.max(norm, Math.abs(e.getValue()));",
            "}",
            "return norm;",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "getLInfNorm",
            "OpenMapRealVector",
            "ArrayRealVector"
        ],
        "summary_text": [
            "getLInfNorm() uses wrong formula in both ArrayRealVector and OpenMapRealVector (in different ways)"
        ],
        "desc_hints": [
            "getLInfNorm",
            "entries.iterator",
            "getValue",
            "OpenMapRealVector",
            "iter.advance",
            "it.hasNext",
            "AbstractRealVector",
            "sparseIterator",
            "iter.value",
            "it.next",
            "ArrayRealVector",
            "iter.hasNext",
            "Math.abs",
            "Math.max"
        ],
        "desc_text": [
            [
                "the L_infinity norm of a finite dimensional vector is just the max of the absolute value of its entries.",
                ["OB"]
            ],
            [
                "The current implementation in ArrayRealVector has a typo:",
                ["OB"]
            ],
            ["public double getLInfNorm() {", "CODE"],
            ["double max = 0;", "CODE"],
            ["for (double a : data) {", "CODE"],
            ["max += Math.max(max, Math.abs(a));", "CODE"],
            ["}", "CODE"],
            ["return max;", "CODE"],
            ["}", "CODE"],
            ["the += should just be an =.", ["EB"]],
            [
                "There is sadly a unit test assuring us that this is the correct behavior (effectively a regression-only test, not a test for correctness).",
                []
            ],
            [
                "Worse, the implementation in OpenMapRealVector is not even positive semi-definite:",
                ["OB"]
            ],
            ["public double getLInfNorm() {", "CODE"],
            ["double max = 0;", "CODE"],
            ["Iterator iter = entries.iterator();", "CODE"],
            ["while (iter.hasNext()) {", "CODE"],
            ["iter.advance();", "CODE"],
            ["max += iter.value();", "CODE"],
            ["}", "CODE"],
            ["return max;", "CODE"],
            ["}", "CODE"],
            [
                "I would suggest that this method be moved up to the AbstractRealVector superclass and implemented using the sparseIterator():",
                []
            ],
            ["public double getLInfNorm() {", "CODE"],
            ["double norm = 0;", "CODE"],
            ["Iterator<Entry> it = sparseIterator();", "CODE"],
            ["Entry e;", "CODE"],
            ["while(it.hasNext() && (e = it.next()) != null) {", "CODE"],
            ["norm = Math.max(norm, Math.abs(e.getValue()));", "CODE"],
            ["}", "CODE"],
            ["return norm;", "CODE"],
            ["}", "CODE"],
            [
                "Unit tests with negative valued vectors would be helpful to check for this kind of thing in the future.",
                []
            ]
        ]
    },
    "JacksonDatabind-106": {
        "code_elements": [
            "public static class IntClass {",
            "public int x;",
            "@Override",
            "public String toString() {",
            "return String.valueOf(x);",
            "}",
            "}",
            "ObjectMapper mapper  = new ObjectMapper();",
            "void readAndPrint(String _example) {",
            "String fromTree;",
            "try {",
            "JsonNode tree = mapper.readTree(_example);",
            "fromTree = mapper.readerFor(IntClass.class).readValue(tree).toString();",
            "} catch (IOException _e) {",
            "fromTree = _e.getClass().getSimpleName();",
            "}",
            "String fromString;",
            "try {",
            "fromString = mapper.readerFor(IntClass.class).readValue(_example).toString();",
            "} catch (IOException _e) {",
            "fromString = _e.getClass().getSimpleName();",
            "}",
            "System.out.printf(\"|%30s | %30s | %-30s|\\n\", _example, fromTree, fromString);",
            "}",
            "public void compareFromTree() {",
            "System.out.printf(\"|%30s | %30s | %-30s|\\n\", \"json input\", \"read from tree\", \"read from string\");",
            "System.out.println(\"|-------------------------------|--------------------------------|-------------------------------|\");",
            "readAndPrint(\"{\\\"x\\\": 0}\");",
            "// etc.",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["TreeTraversingParser"],
        "summary_text": ["TreeTraversingParser does not check int bounds"],
        "desc_hints": [
            "IntClass",
            "toString",
            "System.out.printf",
            "readAndPrint",
            "JsonMappingException",
            "TreeTraversingParser",
            "InvalidFormatException",
            "fromString",
            "ObjectMapper",
            "fromTree",
            "String.valueOf",
            "JsonNode",
            "compareFromTree",
            "readValue",
            "getSimpleName",
            "mapper.readerFor",
            "IntClass.class",
            "getClass",
            "mapper.readTree",
            "MismatchedInputException",
            "MismatchedInput",
            "System.out.println"
        ],
        "desc_text": [
            [
                "Similar to #1729, TreeTraversingParser does not perform bounds checks on some JSON values bound to ints.",
                ["OB"]
            ],
            [
                "Using Jackson version 2.9.7, here are several comparisons generated with the following code:",
                ["OB", "SR"]
            ],
            ["public static class IntClass {", "CODE"],
            ["public int x;", "CODE"],
            ["@Override", "CODE"],
            ["public String toString() {", "CODE"],
            ["return String.valueOf(x);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["ObjectMapper mapper  = new ObjectMapper();", "CODE"],
            ["void readAndPrint(String _example) {", "CODE"],
            ["String fromTree;", "CODE"],
            ["try {", "CODE"],
            ["JsonNode tree = mapper.readTree(_example);", "CODE"],
            [
                "fromTree = mapper.readerFor(IntClass.class).readValue(tree).toString();",
                "CODE"
            ],
            ["} catch (IOException _e) {", "CODE"],
            ["fromTree = _e.getClass().getSimpleName();", "CODE"],
            ["}", "CODE"],
            ["String fromString;", "CODE"],
            ["try {", "CODE"],
            [
                "fromString = mapper.readerFor(IntClass.class).readValue(_example).toString();",
                "CODE"
            ],
            ["} catch (IOException _e) {", "CODE"],
            ["fromString = _e.getClass().getSimpleName();", "CODE"],
            ["}", "CODE"],
            [
                "System.out.printf(\"|%30s | %30s | %-30s|\\n\", _example, fromTree, fromString);",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", []],
            ["public void compareFromTree() {", "CODE"],
            [
                "System.out.printf(\"|%30s | %30s | %-30s|\\n\", \"json input\", \"read from tree\", \"read from string\");",
                "CODE"
            ],
            [
                "System.out.println(\"|-------------------------------|--------------------------------|-------------------------------|\");",
                "CODE"
            ],
            ["readAndPrint(\"{\\\"x\\\": 0}\");", "CODE"],
            ["// etc.", "CODE"],
            ["}", "CODE"],
            ["json input", []],
            ["read from tree", []],
            ["read from string", []],
            ["{\"x\": 0}", []],
            ["0", []],
            ["0", []],
            ["{\"x\": 10}", []],
            ["10", []],
            ["10", []],
            ["{\"x\": 1e4}", []],
            ["10000", []],
            ["10000", []],
            ["{\"x\": 1e10}", []],
            ["2147483647", []],
            ["JsonMappingException", []],
            ["{\"x\": 1e-1}", []],
            ["0", []],
            ["0", []],
            ["{\"x\": 2147483648}", []],
            ["-2147483648", []],
            ["JsonMappingException", []],
            ["{\"x\": 2147483649}", []],
            ["-2147483647", []],
            ["JsonMappingException", []],
            ["{\"x\": -2147483649}", []],
            ["2147483647", []],
            ["JsonMappingException", []],
            ["{\"x\": -4294967295}", []],
            ["1", ["SR"]],
            ["JsonMappingException", []],
            ["{\"x\": 0.1}", []],
            ["0", []],
            ["0", []],
            ["{\"x\": 1.9}", []],
            ["1", ["SR"]],
            ["1", ["SR"]],
            ["{\"x\": 1.9999999999999999}", []],
            ["2", ["SR"]],
            ["2", ["SR"]],
            ["{\"x\": true}", []],
            ["MismatchedInputException", []],
            ["MismatchedInputException", []],
            ["{\"x\": {}}", []],
            ["MismatchedInputException", []],
            ["MismatchedInputException", []],
            ["{\"x\": []}", []],
            ["MismatchedInputException", []],
            ["MismatchedInputException", []],
            ["{\"x\": [0]}", []],
            ["MismatchedInputException", []],
            ["MismatchedInputException", []],
            ["{\"x\": \"0\"}", []],
            ["0", []],
            ["0", []],
            ["{\"x\": \"10\"}", []],
            ["10", []],
            ["10", []],
            ["{\"x\": \"1e4\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"1e10\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"1e-1\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"2147483648\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"2147483649\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"-2147483649\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"-4294967295\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"0.1\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"1.9\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"1.9999999999999999\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"true\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"{}\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"[]\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            ["{\"x\": \"[0]\"}", []],
            ["InvalidFormatException", []],
            ["InvalidFormatException", []],
            [
                "Without digging further into the code, it appears if the JSON value is numeric, TreeTraversingParser silently overflows.",
                ["OB", "SR"]
            ],
            [
                "Maybe this is expected behavior, but to me the inconsistency between reading from a non-tree (reader/string/file, etc) versus directly from a tree seems like a bug.",
                ["EB"]
            ],
            [
                "At the very least, it makes it less convenient to do manipulations on a JSON document before binding.",
                ["OB", "SR"]
            ],
            [
                "I would expect an exception thrown for the all but the first three examples above, but I do understand there are use-cases for coercing values.",
                ["OB", "EB", "SR"]
            ],
            ["Even so, I would expect the coercion logic to be", ["EB"]],
            [
                "consistent between the parsers (or clearly documented otherwise)",
                ["OB"]
            ],
            ["consistent between quoted and unquoted values", ["OB"]],
            [
                "I'm also curious about the expected behavior when converting non-integral values.",
                ["OB"]
            ],
            ["Why is true MismatchedInput, but 0.1 is converted?", []],
            [
                "Similarly, why are 0.1, 1e4, and 1e-1 acceptable, but not when in quotes, even though \"10\" and other quote integers are acceptable?",
                ["OB"]
            ],
            ["Thanks for all your hard work on this.", []],
            ["I hope this issue doesn't come off as condescending.", []],
            [
                "For our specific use case, we read the value as a tree, validating it against a schema, then using Jackson to bind the tree to an object.",
                ["OB", "SR"]
            ],
            [
                "While it's true that we can specify type, minimum, and maximum values in the schema, it is prone to mistakes, and there's not necessarily a reason to tie the schema to the language implementation, provided things like overflow consistently result in an exception.",
                ["OB"]
            ],
            [
                "Thus, I'm trying to better understand the expectations and limits Jackson has when using the tree parser.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-103": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// ==/ClosureCompiler==",
            "function instanceOf(value, type) {",
            "try {",
            "// first try built-in test -- if it succeeds, we're golden.",
            "if (value instanceof type) {",
            "return true;",
            "}",
            "} catch (exception) {",
            "if (exception instanceof TypeError) {",
            "throw exception; // indicates that \"type\" is not a type",
            "}",
            "// Otherwise, assume the exception was caused by",
            "// the Firefox 1.0.3 bug.  Work around it.",
            "return (type === Object);",
            "}",
            "}",
            "} catch (exception) {"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Compiler gives false error with respect to unreachable code"
        ],
        "desc_hints": [
            "instanceOf",
            "TypeError",
            "ClosureCompiler",
            "default.js"
        ],
        "desc_text": [
            [
                "Try compiling the following in the Closure Compiler UI:",
                ["OB", "SR"]
            ],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["function instanceOf(value, type) {", "CODE"],
            ["try {", "CODE"],
            [
                "// first try built-in test -- if it succeeds, we're golden.",
                "CODE"
            ],
            ["if (value instanceof type) {", "CODE"],
            ["return true;", "CODE"],
            ["}", "CODE"],
            ["} catch (exception) {", "CODE"],
            ["if (exception instanceof TypeError) {", "CODE"],
            [
                "throw exception; // indicates that \"type\" is not a type",
                "CODE"
            ],
            ["}", "CODE"],
            ["// Otherwise, assume the exception was caused by", "CODE"],
            ["// the Firefox 1.0.3 bug.  Work around it.", "CODE"],
            ["return (type === Object);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["The Compiler issues the following warning:", ["OB", "SR"]],
            [
                "JSC_UNREACHABLE_CODE: unreachable code at line 7 character 0",
                []
            ],
            ["} catch (exception) {", "CODE"],
            [
                "This code is from a Firefox extension (Chickenfoot) where (at least",
                []
            ],
            [
                "historically) calling instanceof in this manner could throw a security",
                []
            ],
            [
                "exception (or something else, I forget what -- Chickenfoot has been around",
                []
            ],
            [
                "since Firefox 1.0) which is why the catch blocks is there and is indeed",
                ["OB"]
            ],
            ["reachable.", ["OB"]]
        ]
    },
    "Cli-23": {
        "code_elements": [
            "Options options = new Options();",
            "options.addOption(\"h\", \"help\", false, \"This is a looooong description\");",
            "HelpFormatter formatter = new HelpFormatter();",
            "formatter.setWidth(20);"
        ],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter"],
        "summary_text": ["infinite loop in the wrapping code of HelpFormatter"],
        "desc_hints": [
            "HelpFormatter",
            "OutOfMemoryError",
            "formatter.setWidth",
            "formatter.printHelp",
            "options.addOption"
        ],
        "desc_text": [
            [
                "If there is not enough space to display a word on a single line, HelpFormatter goes into a infinite loops until the JVM crashes with an OutOfMemoryError.",
                ["OB", "EB", "SR"]
            ],
            ["Test case:", []],
            ["Options options = new Options();", "CODE"],
            [
                "options.addOption(\"h\", \"help\", false, \"This is a looooong description\");",
                "CODE"
            ],
            ["HelpFormatter formatter = new HelpFormatter();", "CODE"],
            ["formatter.setWidth(20);", "CODE"],
            ["formatter.printHelp(\"app\", options); // hang & crash", ["OB"]],
            [
                "An helpful exception indicating the insufficient width would be more appropriate than an OutOfMemoryError.",
                ["OB"]
            ]
        ]
    },
    "Math-103": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ConvergenceException"],
        "summary_text": ["ConvergenceException in normal CDF"],
        "desc_hints": [
            "NormalDistributionImpl",
            "ConvergenceException",
            "cumulativeProbability"
        ],
        "desc_text": [
            [
                "NormalDistributionImpl::cumulativeProbability(double x) throws ConvergenceException",
                []
            ],
            ["if x deviates too much from the mean.", ["OB"]],
            ["For example, when x=+/-100, mean=0, sd=1.", ["OB", "SR"]],
            [
                "Of course the value of the CDF is hard to evaluate in these cases,",
                []
            ],
            ["but effectively it should be either zero or one.", ["OB", "EB"]]
        ]
    },
    "Compress-30": {
        "code_elements": [
            "public void testApacheCommonsBZipUncompression () throws Exception {",
            "// Create a big random piece of data",
            "byte[] rawData = new byte[1048576];",
            "for (int i=0; i<rawData.length; ++i) {",
            "rawData[i] = (byte) Math.floor(Math.random()*256);",
            "}",
            "// Compress it",
            "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
            "BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);",
            "bzipOut.write(rawData);",
            "bzipOut.flush();",
            "bzipOut.close();",
            "baos.flush();",
            "baos.close();",
            "// Try to read it back in",
            "ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());",
            "BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);",
            "byte[] buffer = new byte[1024];",
            "// Works fine",
            "Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));",
            "// Fails, returns -1 (indicating the stream is complete rather than that the buffer",
            "// was full)",
            "Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));",
            "// But if you change the above expected value to -1, the following line still works",
            "Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));",
            "bzipIn.close();",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["BZip2CompressorInputStream"],
        "summary_text": [
            "BZip2CompressorInputStream return value wrong when told to read to a full buffer."
        ],
        "desc_hints": [
            "rawData",
            "Assert.assertEquals",
            "bzipOut.flush",
            "ByteArrayOutputStream",
            "bzipIn.close",
            "bzipIn.read",
            "Math.random",
            "bzipOut.write",
            "bzipIn",
            "baos.close",
            "ByteArrayInputStream",
            "baos.flush",
            "testApacheCommonsBZipUncompression",
            "bzipOut.close",
            "bzipOut",
            "baos.toByteArray",
            "BZip2CompressorOutputStream",
            "BZip2CompressorInputStream.read",
            "rawData.length",
            "Math.floor",
            "BZip2CompressorInputStream"
        ],
        "desc_text": [
            [
                "BZip2CompressorInputStream.read(buffer, offset, length) returns -1 when given an offset equal to the length of the buffer.",
                ["OB", "EB", "SR"]
            ],
            [
                "This indicates, not that the buffer was full, but that the stream was finished.",
                ["OB"]
            ],
            [
                "It seems like a pretty stupid thing to do - but I'm getting this when trying to use Kryo serialization (which is probably a bug on their part, too), so it does occur and has negative affects.",
                ["OB"]
            ],
            [
                "Here's a JUnit test that shows the problem specifically:",
                ["SR"]
            ],
            ["@Test", []],
            [
                "public void testApacheCommonsBZipUncompression () throws Exception {",
                "CODE"
            ],
            ["// Create a big random piece of data", "CODE"],
            ["byte[] rawData = new byte[1048576];", "CODE"],
            ["for (int i=0; i<rawData.length; ++i) {", "CODE"],
            ["rawData[i] = (byte) Math.floor(Math.random()*256);", "CODE"],
            ["}", "CODE"],
            ["// Compress it", "CODE"],
            [
                "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "CODE"
            ],
            [
                "BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);",
                "CODE"
            ],
            ["bzipOut.write(rawData);", "CODE"],
            ["bzipOut.flush();", "CODE"],
            ["bzipOut.close();", "CODE"],
            ["baos.flush();", "CODE"],
            ["baos.close();", "CODE"],
            ["// Try to read it back in", "CODE"],
            [
                "ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());",
                "CODE"
            ],
            [
                "BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);",
                "CODE"
            ],
            ["byte[] buffer = new byte[1024];", "CODE"],
            ["// Works fine", "CODE"],
            [
                "Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));",
                "CODE"
            ],
            [
                "// Fails, returns -1 (indicating the stream is complete rather than that the buffer",
                "CODE"
            ],
            ["// was full)", "CODE"],
            ["Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));", "CODE"],
            [
                "// But if you change the above expected value to -1, the following line still works",
                "CODE"
            ],
            [
                "Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));",
                "CODE"
            ],
            ["bzipIn.close();", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-33": {
        "code_elements": [
            "package com.bakins_bits;",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import org.testng.annotations.Test;",
            "import com.fasterxml.jackson.annotation.JsonUnwrapped;",
            "import com.fasterxml.jackson.core.JsonProcessingException;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "public class TestJsonUnwrappedShouldMakePrivateFieldsSerializable",
            "{",
            "public static class Inner",
            "{",
            "public String animal;",
            "}",
            "public static class Outer",
            "{",
            "// @JsonProperty",
            "@JsonUnwrapped",
            "private Inner inner;",
            "}",
            "@Test",
            "public void jsonUnwrapped_should_make_private_fields_serializable() throws JsonProcessingException {",
            "// ARRANGE",
            "Inner inner = new Inner();",
            "inner.animal = \"Zebra\";",
            "Outer outer = new Outer();",
            "outer.inner = inner;",
            "ObjectMapper sut = new ObjectMapper();",
            "// ACT",
            "String actual = sut.writeValueAsString(outer);",
            "// ASSERT",
            "assertThat(actual).contains(\"animal\");",
            "assertThat(actual).contains(\"Zebra\");",
            "assertThat(actual).doesNotContain(\"inner\");",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonUnwrapped", "JsonProperty"],
        "summary_text": [
            "@JsonUnwrapped is not treated as assuming @JsonProperty(\"\")"
        ],
        "desc_hints": [
            "com.fasterxml.jackson.annotation.JsonUnwrapped",
            "com.fasterxml.jackson.core.JsonProcessingException",
            "JsonProperty",
            "TestNG",
            "JsonUnwrapped",
            "TestJsonUnwrappedShouldMakePrivateFieldsSerializable",
            "doesNotContain",
            "org.testng.annotations.Test",
            "JsonProcessingException",
            "assertThat",
            "jsonUnwrapped_should_make_private_fields_serializable",
            "ObjectMapper",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "inner.animal",
            "com.bakins_bits",
            "sut.writeValueAsString",
            "outer.inner",
            "org.assertj.core.api.Assertions.assertThat"
        ],
        "desc_text": [
            [
                "See discussion here but basically @JsonUnwrapped on a private field by itself does not cause that field to be serialized, currently, You need to add an explicit @JsonProperty.",
                ["OB"]
            ],
            ["You shouldn't have to do that.", ["OB", "EB"]],
            [
                "(Following test fails currently, should pass, though you can make it pass by commenting out the line with @JsonProperty.",
                ["OB", "SR"]
            ],
            ["Uses TestNG and AssertJ.)", ["OB", "EB"]],
            ["package com.bakins_bits;", "CODE"],
            [
                "import static org.assertj.core.api.Assertions.assertThat;",
                "CODE"
            ],
            ["import org.testng.annotations.Test;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonUnwrapped;", "CODE"],
            [
                "import com.fasterxml.jackson.core.JsonProcessingException;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "public class TestJsonUnwrappedShouldMakePrivateFieldsSerializable",
                "CODE"
            ],
            ["{", "CODE"],
            ["public static class Inner", "CODE"],
            ["{", "CODE"],
            ["public String animal;", "CODE"],
            ["}", "CODE"],
            ["public static class Outer", "CODE"],
            ["{", "CODE"],
            ["// @JsonProperty", "CODE"],
            ["@JsonUnwrapped", "CODE"],
            ["private Inner inner;", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            [
                "public void jsonUnwrapped_should_make_private_fields_serializable() throws JsonProcessingException {",
                "CODE"
            ],
            ["// ARRANGE", "CODE"],
            ["Inner inner = new Inner();", "CODE"],
            ["inner.animal = \"Zebra\";", "CODE"],
            ["Outer outer = new Outer();", "CODE"],
            ["outer.inner = inner;", "CODE"],
            ["ObjectMapper sut = new ObjectMapper();", "CODE"],
            ["// ACT", "CODE"],
            ["String actual = sut.writeValueAsString(outer);", "CODE"],
            ["// ASSERT", "CODE"],
            ["assertThat(actual).contains(\"animal\");", "CODE"],
            ["assertThat(actual).contains(\"Zebra\");", "CODE"],
            ["assertThat(actual).doesNotContain(\"inner\");", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Lang-43": {
        "code_elements": [
            "formatRegistry.put(DummyFormatFactory.DUMMY_FORMAT, new DummyFormatFactory());",
            "}",
            "public static void main(String[] args) {",
            "ExtendedMessageFormat mf = new ExtendedMessageFormat(\"it''s a {dummy} 'test'!\", formatRegistry);",
            "String formattedPattern = mf.format(new String[] {\"great\"});",
            "System.out.println(formattedPattern);",
            "}",
            "}",
            "if (escapingOn && c[start] == QUOTE) {",
            "return appendTo == null ? null : appendTo.append(QUOTE);",
            "}",
            "if (escapingOn && c[start] == QUOTE) {",
            "next(pos);",
            "return appendTo == null ? null : appendTo.append(QUOTE);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["ExtendedMessageFormat", "OutOfMemory"],
        "summary_text": [
            "ExtendedMessageFormat: OutOfMemory with custom format registry and a pattern containing single quotes"
        ],
        "desc_hints": [
            "formatRegistry.put",
            "DummyFormatFactory",
            "OutOfMemoryError",
            "appendTo",
            "formattedPattern",
            "escapingOn",
            "appendTo.append",
            "ExtendedMessageFormat",
            "formatRegistry",
            "ExtendedMessageFormat.java",
            "HashMap",
            "DummyFormatFactory.DUMMY_FORMAT",
            "mf.format",
            "System.out.println",
            "ExtendedMessageFormatTest.java"
        ],
        "desc_text": [
            [
                "When using ExtendedMessageFormat with a custom format registry and a pattern conatining single quotes, an OutOfMemoryError will occur.",
                ["OB", "SR"]
            ],
            ["Example that will cause error:", ["OB", "SR"]],
            ["ExtendedMessageFormatTest.java", []],
            [
                "private static Map<String, Object> formatRegistry = new HashMap<String, Object>();",
                []
            ],
            ["static {", []],
            [
                "formatRegistry.put(DummyFormatFactory.DUMMY_FORMAT, new DummyFormatFactory());",
                "CODE"
            ],
            ["}", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            [
                "ExtendedMessageFormat mf = new ExtendedMessageFormat(\"it''s a {dummy} 'test'!\", formatRegistry);",
                "CODE"
            ],
            [
                "String formattedPattern = mf.format(new String[] {\"great\"});",
                "CODE"
            ],
            ["System.out.println(formattedPattern);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "The following change starting at line 421 on the 2.4 release seems to fix the problem:",
                []
            ],
            ["ExtendedMessageFormat.java", []],
            ["CURRENT (Broken):", []],
            ["if (escapingOn && c[start] == QUOTE) {", "CODE"],
            [
                "return appendTo == null ? null : appendTo.append(QUOTE);",
                "CODE"
            ],
            ["}", "CODE"],
            ["WORKING:", []],
            ["if (escapingOn && c[start] == QUOTE) {", "CODE"],
            ["next(pos);", "CODE"],
            [
                "return appendTo == null ? null : appendTo.append(QUOTE);",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Cli-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["[cli] argument defaults prevent commandline usage."],
        "desc_hints": ["WritableCommandLine", "CommandLine", "ArgumentImpl"],
        "desc_text": [
            ["I have found a bug in the following scenario:", ["SR"]],
            [
                "You have an option which can take a single argument which in turn has a default",
                ["OB"]
            ],
            ["value.", ["OB"]],
            [
                "You supply a value on the command line which is intended to override",
                ["OB", "SR"]
            ],
            [
                "this default however as the CommandLine already has a value for this Option,",
                []
            ],
            [
                "this second value is not allowed and the command line cannot be parsed.",
                ["OB"]
            ],
            [
                "I have created a patch which adds a method to WritableCommandLine and its Impl",
                ["SR"]
            ],
            [
                "which allows you to retrieve the undefaulted values for an Option.",
                ["OB", "SR"]
            ],
            ["I have then", []],
            [
                "changed ArgumentImpl to use this method to determine the argument count",
                []
            ]
        ]
    },
    "Closure-17": {
        "code_elements": [
            "/**",
            "* Class defining an interface with two numbers.",
            "* @interface",
            "*/",
            "function TwoNumbers() {}",
            "/** @type number */",
            "/** @type number */",
            "/** @type {TwoNumbers} */ ({first: 1, second: 2});",
            "/**",
            "* Class with a two number member.",
            "* @constructor",
            "*/",
            "function HasTwoNumbers() {",
            "/** @type {TwoNumbers} */",
            "this.twoNumbers = this.getTwoNumbers();",
            "}",
            "/**",
            "* Get the default two numbers.",
            "* @return {TwoNumbers}",
            "*/",
            "HasTwoNumbers.prototype.getTwoNumbers = function() {",
            "return SOME_DEFAULT;",
            "/** @type {TwoNumbers} */ ({first: 1, second: 2});"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["@const dumps type cast information"],
        "desc_hints": [
            "this.getTwoNumbers",
            "compiler.appspot.com",
            "TwoNumbers.prototype.second",
            "this.twoNumbers",
            "TwoNumbers",
            "TwoNumbers.prototype.first",
            "HasTwoNumbers",
            "HasTwoNumbers.prototype.getTwoNumbers"
        ],
        "desc_text": [
            ["The following code compiles fine:", ["OB", "SR"]],
            ["/**", "CODE"],
            ["* Class defining an interface with two numbers.", "CODE"],
            ["* @interface", "CODE"],
            ["*/", "CODE"],
            ["function TwoNumbers() {}", "CODE"],
            ["/** @type number */", "CODE"],
            ["TwoNumbers.prototype.first;", []],
            ["/** @type number */", "CODE"],
            ["TwoNumbers.prototype.second;", []],
            ["var SOME_DEFAULT =", []],
            ["/** @type {TwoNumbers} */ ({first: 1, second: 2});", "CODE"],
            ["/**", "CODE"],
            ["* Class with a two number member.", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["function HasTwoNumbers() {", "CODE"],
            ["/** @type {TwoNumbers} */", "CODE"],
            ["this.twoNumbers = this.getTwoNumbers();", "CODE"],
            ["}", "CODE"],
            ["/**", "CODE"],
            ["* Get the default two numbers.", "CODE"],
            ["* @return {TwoNumbers}", "CODE"],
            ["*/", "CODE"],
            ["HasTwoNumbers.prototype.getTwoNumbers = function() {", "CODE"],
            ["return SOME_DEFAULT;", "CODE"],
            ["};", []],
            [
                "Now realizing that SOME_DEFAULTS is actually a preset constant which should not change I would like to say for that line (just adding an @const)",
                ["EB", "SR"]
            ],
            ["/** @const */ var SOME_DEFAULT =", []],
            ["/** @type {TwoNumbers} */ ({first: 1, second: 2});", "CODE"],
            [
                "However that starts throwing warnings as adding the @const makes the compiler dump the type.",
                ["OB"]
            ],
            ["(Does the value get inlined without the typecast?)", ["OB"]],
            ["Expected:", ["EB"]],
            ["Compiles fine.", ["OB"]],
            ["Error can be reproduced on:", ["OB", "SR"]],
            ["http://closure-compiler.appspot.com/home", []],
            [
                "copy-past the attached file in there, it throws a warning and does not compile.",
                ["OB"]
            ]
        ]
    },
    "Math-58": {
        "code_elements": [
            "new GaussianFitter(new LevenbergMarquardtOptimizer());",
            "g.addObservedPoint(index, observations[index]);",
            "g.fit();"
        ],
        "stack_traces": [
            "at org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(Gaussian.java:184)",
            "at org.apache.commons.math.analysis.function.Gaussian$Parametric.value(Gaussian.java:129)"
        ],
        "summary_hints": ["NotStrictlyPositiveException", "GaussianFitter"],
        "summary_text": [
            "GaussianFitter Unexpectedly Throws NotStrictlyPositiveException"
        ],
        "desc_hints": [
            "org.apache.commons.math.analysis.function.Gaussian",
            "Parametric.value",
            "LevenbergMarquardtOptimizer",
            "addObservedPoint",
            "org.apache.commons.math.exception.NotStrictlyPositiveException",
            "GaussianFitter",
            "Gaussian.java",
            "Parametric.validateParameters"
        ],
        "desc_text": [
            ["Running the following:", ["OB", "SR"]],
            ["double[] observations =", []],
            ["{", []],
            ["1.1143831578403364E-29,", []],
            ["4.95281403484594E-28,", []],
            ["1.1171347211930288E-26,", []],
            ["1.7044813962636277E-25,", []],
            ["1.9784716574832164E-24,", []],
            ["1.8630236407866774E-23,", []],
            ["1.4820532905097742E-22,", []],
            ["1.0241963854632831E-21,", []],
            ["6.275077366673128E-21,", []],
            ["3.461808994532493E-20,", []],
            ["1.7407124684715706E-19,", []],
            ["8.056687953553974E-19,", []],
            ["3.460193945992071E-18,", []],
            ["1.3883326374011525E-17,", []],
            ["5.233894983671116E-17,", []],
            ["1.8630791465263745E-16,", []],
            ["6.288759227922111E-16,", []],
            ["2.0204433920597856E-15,", []],
            ["6.198768938576155E-15,", []],
            ["1.821419346860626E-14,", []],
            ["5.139176445538471E-14,", []],
            ["1.3956427429045787E-13,", []],
            ["3.655705706448139E-13,", []],
            ["9.253753324779779E-13,", []],
            ["2.267636001476696E-12,", []],
            ["5.3880460095836855E-12,", []],
            ["1.2431632654852931E-11", []],
            ["}", []],
            [";", []],
            ["GaussianFitter g =", []],
            ["new GaussianFitter(new LevenbergMarquardtOptimizer());", "CODE"],
            ["for (int index = 0; index < 27; index++)", []],
            ["{", []],
            ["g.addObservedPoint(index, observations[index]);", "CODE"],
            ["}", []],
            ["g.fit();", "CODE"],
            ["Results in:", ["OB"]],
            [
                "org.apache.commons.math.exception.NotStrictlyPositiveException: -1.277 is smaller than, or equal to, the minimum (0)",
                []
            ],
            [
                "at org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(Gaussian.java:184)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.math.analysis.function.Gaussian$Parametric.value(Gaussian.java:129)",
                "STACK_TRACE"
            ],
            ["I'm guessing the initial guess for sigma is off.", ["OB"]]
        ]
    },
    "Codec-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Base32.HEX_DECODE_TABLE"],
        "summary_text": ["Base32.HEX_DECODE_TABLE contains the wrong value 32"],
        "desc_hints": [],
        "desc_text": [
            ["At line 99:", []],
            [
                "25, 26, 27, 28, 29, 30, 31, 32,                               // 50-57 O-V",
                []
            ],
            ["the value 32 should not be included.", ["OB", "EB"]],
            [
                "That disallows to use 'W' as padding with hex table.",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-51": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["-0.0 becomes 0 even in whitespace mode"],
        "desc_hints": ["code.google.com"],
        "desc_text": [
            [
                "Affects dart: http://code.google.com/p/dart/issues/detail?id=146",
                []
            ]
        ]
    },
    "Csv-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CsvFormat.nullString"],
        "summary_text": ["CsvFormat.nullString should not be escaped"],
        "desc_hints": [
            "nullString",
            "into.html",
            "CsvPrinter",
            "dev.mysql.com",
            "MySQL",
            "CsvPrinter.printAndEscape"
        ],
        "desc_text": [
            ["Hello,", []],
            [
                "Use case: I'm generating MySQL dump files (text format) - for more details check this - http://dev.mysql.com/doc/refman/5.7/en/select-into.html.",
                ["OB", "SR"]
            ],
            ["Issue: The value null is represented as \"\\N\".", ["OB"]],
            ["Also by default the escape char is '\\N'.", ["OB"]],
            [
                "The CsvPrinter.printAndEscape method will convert this value into",
                ["OB"]
            ],
            ["\"\\\\N\"", []],
            [
                "I suggest to modify the CsvPrinter in order to not escape the nullString value - it should be written as it is.",
                ["OB", "EB"]
            ],
            ["I can create a pull request if you want.", ["OB"]],
            [
                "I consider it a minor issue because it can be mitigated by making sure that the escape character is not a part of the nullString - however in my case it means that the LOAD commands should be modified accordingly.",
                ["EB"]
            ]
        ]
    },
    "Gson-14": {
        "code_elements": [
            "private static class Foo1<A> {",
            "Foo2<? extends A> foo2;",
            "}",
            "private static class Foo2<B> {",
            "Foo1<? super B> foo1;",
            "}",
            "public void testRecursiveResolveSimple() {",
            "new Gson().getAdapter(Foo1.class);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["StackOverflowError", "Types.resolve"],
        "summary_text": [
            "$Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowError"
        ],
        "desc_hints": [
            "java.lang.StackOverflowError",
            "Types.resolveTypeVariable",
            "getAdapter",
            "supertypeOf",
            "Object.class",
            "StackOverflowError",
            "Foo1.class",
            "com.google.gson.internal",
            "testRecursiveResolveSimple",
            "Types.java",
            "subtypeOf",
            "Types.resolve"
        ],
        "desc_text": [
            [
                "While resolving recursive generic types, $Gson$Types.resolve() sometimes starts to generate chains of type bounds like \"super ?",
                []
            ],
            ["extends ?", []],
            ["....", []],
            ["?", []],
            [
                "extends A\" , causing infinite recursion and thus StackOverflowError's like",
                ["OB"]
            ],
            [
                "java.lang.StackOverflowError at com.google.gson.internal.$Gson$Types.resolveTypeVariable($Gson$Types.java:407) at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:330) at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384) at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:379) at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384) at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:379) at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384) ...",
                ["OB"]
            ],
            ["This can be reproduced on the following simple ccde:", ["SR"]],
            ["private static class Foo1<A> {", "CODE"],
            ["Foo2<? extends A> foo2;", "CODE"],
            ["}", "CODE"],
            ["private static class Foo2<B> {", "CODE"],
            ["Foo1<? super B> foo1;", "CODE"],
            ["}", "CODE"],
            ["public void testRecursiveResolveSimple() {", "CODE"],
            ["new Gson().getAdapter(Foo1.class);", "CODE"],
            ["}", "CODE"],
            [
                "This is the root cause of StackOverflowError's described in Issue #440 and Issue #603.",
                []
            ],
            [
                "In order to fix them, such chains need to be collapsed using the following rules:",
                []
            ],
            ["supertypeOf(supertypeOf(X)) == supertypeOf(X)", []],
            ["subtypeOf(subtypeOf(X)) == subtypeOf(X)", []],
            ["supertypeOf(subtypeOf(X)) == subtypeOf(Object.class)", []],
            ["subtypeOf(supertypeOf(X)) == subtypeOf(Object.class)", []]
        ]
    },
    "Jsoup-87": {
        "code_elements": [
            "public class TestJsoupParser {",
            "public static void main(String[] args) {",
            "Parser parser = Parser.htmlParser();",
            "parser.settings(ParseSettings.preserveCase); // this line",
            "String html = \"<div class=\\\"bdsharebuttonbox\\\">\"",
            "+ \"<A class=bds_more href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"more\\\">\u5206\u4eab\u5230\uff1a</A>\"",
            "+ \"<A title=\u5206\u4eab\u5230QQ\u7a7a\u95f4 class=bds_qzone href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"qzone\\\">\"",
            "+ \"</A><A title=\u5206\u4eab\u5230\u65b0\u6d6a\u5fae\u535a class=bds_tsina href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"tsina\\\"></A>\"",
            "+ \"<A title=\u5206\u4eab\u5230\u817e\u8baf\u5fae\u535a class=bds_tqq href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"tqq\\\"></A>\"",
            "+ \"<A title=\u5206\u4eab\u5230\u4eba\u4eba\u7f51 class=bds_renren href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"renren\\\"></A>\"",
            "+ \"<A title=\u5206\u4eab\u5230\u5fae\u4fe1 class=bds_weixin href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"weixin\\\"></A>\"",
            "+ \"</div>\\r\\n\";",
            "Document doc = Jsoup.parse(html, \"\", parser);",
            "System.out.println(doc.html());",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["ParseSettings.preserveCase"],
        "summary_text": ["wrong parsing with ParseSettings.preserveCase"],
        "desc_hints": [
            "parser.settings",
            "ParseSettings.preserveCase",
            "Jsoup.parse",
            "TestJsoupParser",
            "doc.html",
            "Parser.htmlParser",
            "preserveCase",
            "System.out.println",
            "share.baidu.com"
        ],
        "desc_text": [
            ["jsoup version:1.11.3", []],
            ["when using case sensitive settings, parse wrong", ["OB", "SR"]],
            ["public class TestJsoupParser {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["Parser parser = Parser.htmlParser();", "CODE"],
            [
                "parser.settings(ParseSettings.preserveCase); // this line",
                "CODE"
            ],
            ["String html = \"<div class=\\\"bdsharebuttonbox\\\">\"", "CODE"],
            [
                "+ \"<A class=bds_more href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"more\\\">\u5206\u4eab\u5230\uff1a</A>\"",
                "CODE"
            ],
            [
                "+ \"<A title=\u5206\u4eab\u5230QQ\u7a7a\u95f4 class=bds_qzone href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"qzone\\\">\"",
                "CODE"
            ],
            [
                "+ \"</A><A title=\u5206\u4eab\u5230\u65b0\u6d6a\u5fae\u535a class=bds_tsina href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"tsina\\\"></A>\"",
                "CODE"
            ],
            [
                "+ \"<A title=\u5206\u4eab\u5230\u817e\u8baf\u5fae\u535a class=bds_tqq href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"tqq\\\"></A>\"",
                "CODE"
            ],
            [
                "+ \"<A title=\u5206\u4eab\u5230\u4eba\u4eba\u7f51 class=bds_renren href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"renren\\\"></A>\"",
                "CODE"
            ],
            [
                "+ \"<A title=\u5206\u4eab\u5230\u5fae\u4fe1 class=bds_weixin href=\\\"http://share.baidu.com/code#\\\" data-cmd=\\\"weixin\\\"></A>\"",
                "CODE"
            ],
            ["+ \"</div>\\r\\n\";", "CODE"],
            ["Document doc = Jsoup.parse(html, \"\", parser);", "CODE"],
            ["System.out.println(doc.html());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["the result is:", ["OB"]],
            ["<html>", []],
            ["<head></head>", []],
            ["<body>", []],
            ["<div class=\"bdsharebuttonbox\">", []],
            [
                "<A class=\"bds_more\" href=\"http://share.baidu.com/code#\" data-cmd=\"more\">",
                []
            ],
            ["\u5206\u4eab\u5230\uff1a", []],
            ["</A>", []],
            [
                "<A class=\"bds_more\" href=\"http://share.baidu.com/code#\" data-cmd=\"more\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230QQ\u7a7a\u95f4\" class=\"bds_qzone\" href=\"http://share.baidu.com/code#\" data-cmd=\"qzone\"></A>",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230QQ\u7a7a\u95f4\" class=\"bds_qzone\" href=\"http://share.baidu.com/code#\" data-cmd=\"qzone\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u65b0\u6d6a\u5fae\u535a\" class=\"bds_tsina\" href=\"http://share.baidu.com/code#\" data-cmd=\"tsina\"></A>",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u65b0\u6d6a\u5fae\u535a\" class=\"bds_tsina\" href=\"http://share.baidu.com/code#\" data-cmd=\"tsina\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u817e\u8baf\u5fae\u535a\" class=\"bds_tqq\" href=\"http://share.baidu.com/code#\" data-cmd=\"tqq\"></A>",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u817e\u8baf\u5fae\u535a\" class=\"bds_tqq\" href=\"http://share.baidu.com/code#\" data-cmd=\"tqq\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u4eba\u4eba\u7f51\" class=\"bds_renren\" href=\"http://share.baidu.com/code#\" data-cmd=\"renren\"></A>",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u4eba\u4eba\u7f51\" class=\"bds_renren\" href=\"http://share.baidu.com/code#\" data-cmd=\"renren\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u5fae\u4fe1\" class=\"bds_weixin\" href=\"http://share.baidu.com/code#\" data-cmd=\"weixin\"></A>",
                []
            ],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</div>", []],
            [
                "<A class=\"bds_more\" href=\"http://share.baidu.com/code#\" data-cmd=\"more\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230QQ\u7a7a\u95f4\" class=\"bds_qzone\" href=\"http://share.baidu.com/code#\" data-cmd=\"qzone\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u65b0\u6d6a\u5fae\u535a\" class=\"bds_tsina\" href=\"http://share.baidu.com/code#\" data-cmd=\"tsina\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u817e\u8baf\u5fae\u535a\" class=\"bds_tqq\" href=\"http://share.baidu.com/code#\" data-cmd=\"tqq\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u4eba\u4eba\u7f51\" class=\"bds_renren\" href=\"http://share.baidu.com/code#\" data-cmd=\"renren\">",
                []
            ],
            [
                "<A title=\"\u5206\u4eab\u5230\u5fae\u4fe1\" class=\"bds_weixin\" href=\"http://share.baidu.com/code#\" data-cmd=\"weixin\">",
                []
            ],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</A>", []],
            ["</body>", []],
            ["</html>", []],
            ["however, when not use preserveCase , result is right", ["OB"]],
            ["<html>", []],
            ["<head></head>", []],
            ["<body>", []],
            ["<div class=\"bdsharebuttonbox\">", []],
            [
                "<a class=\"bds_more\" href=\"http://share.baidu.com/code#\" data-cmd=\"more\">\u5206\u4eab\u5230\uff1a</a>",
                []
            ],
            [
                "<a title=\"\u5206\u4eab\u5230QQ\u7a7a\u95f4\" class=\"bds_qzone\" href=\"http://share.baidu.com/code#\" data-cmd=\"qzone\"></a>",
                []
            ],
            [
                "<a title=\"\u5206\u4eab\u5230\u65b0\u6d6a\u5fae\u535a\" class=\"bds_tsina\" href=\"http://share.baidu.com/code#\" data-cmd=\"tsina\"></a>",
                []
            ],
            [
                "<a title=\"\u5206\u4eab\u5230\u817e\u8baf\u5fae\u535a\" class=\"bds_tqq\" href=\"http://share.baidu.com/code#\" data-cmd=\"tqq\"></a>",
                []
            ],
            [
                "<a title=\"\u5206\u4eab\u5230\u4eba\u4eba\u7f51\" class=\"bds_renren\" href=\"http://share.baidu.com/code#\" data-cmd=\"renren\"></a>",
                []
            ],
            [
                "<a title=\"\u5206\u4eab\u5230\u5fae\u4fe1\" class=\"bds_weixin\" href=\"http://share.baidu.com/code#\" data-cmd=\"weixin\"></a>",
                []
            ],
            ["</div>", []],
            ["</body>", []],
            ["</html>", []]
        ]
    },
    "JacksonDatabind-42": {
        "code_elements": [
            "public void testLocaleDeserialization() throws IOException {",
            "ObjectMapper objectMapper = new ObjectMapper();",
            "Locale root = Locale.ROOT;",
            "String json = objectMapper.writeValueAsString(root);",
            "System.out.printf(\"Root Locale: '%s'\", json);",
            "Locale actual = objectMapper.readValue(json, Locale.class);",
            "Assert.assertEquals(root, actual);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["Locale.ROOT"],
        "summary_text": ["Serializing and Deserializing Locale.ROOT"],
        "desc_hints": [
            "objectMapper.readValue",
            "Locale.class",
            "objectMapper.writeValueAsString",
            "Locale.ROOT",
            "Assert.assertEquals",
            "objectMapper",
            "System.out.printf",
            "java.lang.AssertionError",
            "ObjectMapper",
            "testLocaleDeserialization"
        ],
        "desc_text": [
            [
                "Serializing and Deserializing Locale objects seems to work just fine, until you try on the Root Locale.",
                ["OB", "SR"]
            ],
            [
                "It writes it out as an empty string and when it reads it in, the value is null",
                ["OB"]
            ],
            ["@Test", []],
            [
                "public void testLocaleDeserialization() throws IOException {",
                "CODE"
            ],
            ["ObjectMapper objectMapper = new ObjectMapper();", "CODE"],
            ["Locale root = Locale.ROOT;", "CODE"],
            ["String json = objectMapper.writeValueAsString(root);", "CODE"],
            ["System.out.printf(\"Root Locale: '%s'\", json);", "CODE"],
            [
                "Locale actual = objectMapper.readValue(json, Locale.class);",
                "CODE"
            ],
            ["Assert.assertEquals(root, actual);", "CODE"],
            ["}", "CODE"],
            ["Here is the output:", []],
            ["Root Locale: '\"\"'", []],
            ["java.lang.AssertionError:", []],
            ["Expected :", ["EB"]],
            ["Actual :null", []]
        ]
    },
    "Csv-12": {
        "code_elements": [],
        "stack_traces": [
            "at org.apache.commons.csv.CSVParser.initializeHeader(CSVParser.java:368)",
            "at org.apache.commons.csv.CSVParser.<init>(CSVParser.java:248)",
            "at org.apache.commons.csv.CSVParser.parse(CSVParser.java:206)"
        ],
        "summary_hints": ["CSVFormat.EXCEL"],
        "summary_text": ["CSVFormat.EXCEL should ignore empty header names"],
        "desc_hints": [
            "org.apache.commons.csv.CSVParser",
            "org.apache.commons.csv.CSVParser.initializeHeader",
            "org.apache.commons.csv.CSVParser.parse",
            "CSVParser.java",
            "java.lang.IllegalArgumentException"
        ],
        "desc_text": [
            [
                "I have an Excel file with a first row with N column names",
                ["SR"]
            ],
            [
                "If there are additional columns that are not labeled, Excel exports empty columns.",
                ["OB"]
            ],
            ["For example:", ["OB", "SR"]],
            ["A,B,C,,", []],
            ["a,b,c,d,e", []],
            ["This causes an IAE like:", ["OB"]],
            [
                "java.lang.IllegalArgumentException: The header contains a duplicate name: \"\" in [A, B, C, , ]",
                []
            ],
            [
                "at org.apache.commons.csv.CSVParser.initializeHeader(CSVParser.java:368)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.csv.CSVParser.<init>(CSVParser.java:248)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.csv.CSVParser.parse(CSVParser.java:206)",
                "STACK_TRACE"
            ],
            [
                "It seems like the simplest solution is to ignore empty column names, such that they cannot be addressable and not attempt to index them.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Add Support for Parsing All Compliant ISO-8601 Date Formats"
        ],
        "desc_hints": ["www.w3.org"],
        "desc_text": [
            [
                "Some providers create JSON date stamps in ISO-8601 formats that cannot be parsed by the jackson-databind library.",
                ["OB", "SR"]
            ],
            [
                "Here is a sampling of some valid formats that do not parse correctly:",
                ["OB"]
            ],
            ["2014-10-03T18:00:00.6-05:00", []],
            ["2014-10-03T18:00:00.61-05:00", []],
            ["1997-07-16T19:20+01:00", ["SR"]],
            ["1997-07-16T19:20:30.45+01:00", []],
            [
                "The last two actually come from the ISO-8601 notes on http://www.w3.org/TR/NOTE-datetime.",
                ["OB", "SR"]
            ]
        ]
    },
    "Jsoup-85": {
        "code_elements": [
            "Validate.notEmpty(this.key);",
            "Validate.notEmpty(key);"
        ],
        "stack_traces": [],
        "summary_hints": ["Attribute.java", "this.key"],
        "summary_text": [
            "Attribute.java line 45 variable key scope error, it seems should be \"this.key\""
        ],
        "desc_hints": ["Attribute.java", "Validate.notEmpty", "this.key"],
        "desc_text": [
            ["Attribute.java Line 45, it should be:", ["EB"]],
            ["Validate.notEmpty(this.key);", "CODE"],
            ["rather than", ["OB"]],
            ["Validate.notEmpty(key);", "CODE"],
            [
                "This issue only happens when key is blank or empty, in reality this would rarely happen, but in the syntax context it is still an issue, so better fix this.",
                []
            ]
        ]
    },
    "Lang-61": {
        "code_elements": [
            "sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");",
            "sb.deleteAll(\"\\n%BLAH%\");",
            "assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());",
            "sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");",
            "sb.replaceAll(\"\\n%BLAH%\", \"\");",
            "assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());"
        ],
        "stack_traces": [
            "at java.lang.System.arraycopy(Native Method)",
            "at org.apache.commons.lang.text.StrBuilder.deleteImpl(StrBuilder.java:1114)",
            "at org.apache.commons.lang.text.StrBuilder.deleteAll(StrBuilder.java:1188)",
            "at org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String(StrBuilderTest.java:606)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
            "at java.lang.reflect.Method.invoke(Method.java:585)",
            "at junit.framework.TestCase.runTest(TestCase.java:154)",
            "at junit.framework.TestCase.runBare(TestCase.java:127)",
            "at junit.framework.TestResult$1.protect(TestResult.java:106)",
            "at junit.framework.TestResult.runProtected(TestResult.java:124)",
            "at junit.framework.TestResult.run(TestResult.java:109)",
            "at junit.framework.TestCase.run(TestCase.java:118)",
            "at junit.framework.TestSuite.runTest(TestSuite.java:208)",
            "at junit.framework.TestSuite.run(TestSuite.java:203)",
            "at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
            "at java.lang.System.arraycopy(Native Method)",
            "at org.apache.commons.lang.text.StrBuilder.replaceImpl(StrBuilder.java:1256)",
            "at org.apache.commons.lang.text.StrBuilder.replaceAll(StrBuilder.java:1339)",
            "at org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String(StrBuilderTest.java:763)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
            "at java.lang.reflect.Method.invoke(Method.java:585)",
            "at junit.framework.TestCase.runTest(TestCase.java:154)",
            "at junit.framework.TestCase.runBare(TestCase.java:127)",
            "at junit.framework.TestResult$1.protect(TestResult.java:106)",
            "at junit.framework.TestResult.runProtected(TestResult.java:124)",
            "at junit.framework.TestResult.run(TestResult.java:109)",
            "at junit.framework.TestCase.run(TestCase.java:118)",
            "at junit.framework.TestSuite.runTest(TestSuite.java:208)",
            "at junit.framework.TestSuite.run(TestSuite.java:203)",
            "at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
        ],
        "summary_hints": [
            "StrBuilder.deleteAll",
            "ArrayIndexOutOfBoundsException",
            "StrBuilder.replaceAll"
        ],
        "summary_text": [
            "StrBuilder.replaceAll and StrBuilder.deleteAll can throw ArrayIndexOutOfBoundsException."
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "assertEquals",
            "TestSuite.java",
            "NativeMethodAccessorImpl.java",
            "TestResult.java",
            "junit.framework.TestResult.run",
            "junit.framework.TestResult",
            "org.apache.commons.lang.text.StrBuilder.replaceAll",
            "junit.framework.TestCase.run",
            "org.apache.commons.lang.text.StrBuilder.deleteAll",
            "testReplaceAll_String_String",
            "TestExecution.java",
            "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String",
            "junit.framework.TestCase.runTest",
            "java.lang.ArrayIndexOutOfBoundsException",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "junit.framework.TestResult.runProtected",
            "StrBuilderTest.java",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "StrBuilder",
            "StrBuilderTest",
            "org.apache.commons.lang.text.StrBuilder.deleteImpl",
            "sb.deleteAll",
            "junit.framework.TestSuite.runTest",
            "StrBuilder.deleteAll",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String",
            "JUnit3TestReference.java",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "sb.replaceAll",
            "java.lang.reflect.Method.invoke",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "StrBuilder.java",
            "org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run",
            "TestCase.java",
            "sb.toString",
            "ArrayIndexOutOfBoundsException",
            "Method.java",
            "testDeleteAll_String",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "StrBuilder.replaceAll",
            "junit.framework.TestCase.runBare",
            "junit.framework.TestSuite.run",
            "java.lang.System.arraycopy",
            "org.apache.commons.lang.text.StrBuilder.replaceImpl"
        ],
        "desc_text": [
            [
                "StrBuilder.replaceAll and StrBuilder.deleteAll can thrown ArrayIndexOutOfBoundsException's.",
                ["OB"]
            ],
            [
                "Here are a couple of additions to the StrBuilderTest class that demonstrate this problem:",
                ["SR"]
            ],
            ["StrBuilder.deleteAll() - added to testDeleteAll_String():", []],
            [
                "sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");",
                "CODE"
            ],
            ["sb.deleteAll(\"\\n%BLAH%\");", "CODE"],
            [
                "assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());",
                "CODE"
            ],
            ["this causes the following error:", ["OB"]],
            ["java.lang.ArrayIndexOutOfBoundsException", []],
            ["at java.lang.System.arraycopy(Native Method)", "STACK_TRACE"],
            [
                "at org.apache.commons.lang.text.StrBuilder.deleteImpl(StrBuilder.java:1114)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang.text.StrBuilder.deleteAll(StrBuilder.java:1188)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String(StrBuilderTest.java:606)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:585)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestCase.runTest(TestCase.java:154)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestCase.runBare(TestCase.java:127)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestResult$1.protect(TestResult.java:106)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestResult.runProtected(TestResult.java:124)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestResult.run(TestResult.java:109)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestCase.run(TestCase.java:118)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestSuite.runTest(TestSuite.java:208)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestSuite.run(TestSuite.java:203)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
                "STACK_TRACE"
            ],
            [
                "StrBuilder.replaceAll() - added to testReplaceAll_String_String():",
                []
            ],
            [
                "sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");",
                "CODE"
            ],
            ["sb.replaceAll(\"\\n%BLAH%\", \"\");", "CODE"],
            [
                "assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());",
                "CODE"
            ],
            ["this causes the exception:", ["OB"]],
            ["java.lang.ArrayIndexOutOfBoundsException", []],
            ["at java.lang.System.arraycopy(Native Method)", "STACK_TRACE"],
            [
                "at org.apache.commons.lang.text.StrBuilder.replaceImpl(StrBuilder.java:1256)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang.text.StrBuilder.replaceAll(StrBuilder.java:1339)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String(StrBuilderTest.java:763)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:585)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestCase.runTest(TestCase.java:154)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestCase.runBare(TestCase.java:127)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestResult$1.protect(TestResult.java:106)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestResult.runProtected(TestResult.java:124)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestResult.run(TestResult.java:109)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestCase.run(TestCase.java:118)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestSuite.runTest(TestSuite.java:208)",
                "STACK_TRACE"
            ],
            [
                "at junit.framework.TestSuite.run(TestSuite.java:203)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
                "STACK_TRACE"
            ]
        ]
    },
    "Math-105": {
        "code_elements": [
            "public void testSimpleRegression() {",
            "double[] y =",
            "{  8915.102, 8919.302, 8923.502}",
            ";",
            "double[] x =",
            "{ 1.107178495, 1.107264895, 1.107351295}",
            ";",
            "double[] x2 =",
            "{ 1.107178495E2, 1.107264895E2, 1.107351295E2}",
            ";",
            "SimpleRegression reg = new SimpleRegression();",
            "for (int i = 0; i < x.length; i++)",
            "{",
            "reg.addData(x[i],y[i]);",
            "}",
            "assertTrue(reg.getSumSquaredErrors() >= 0.0); // OK",
            "reg.clear();",
            "for (int i = 0; i < x.length; i++)",
            "{",
            "reg.addData(x2[i],y[i]);",
            "}",
            "assertTrue(reg.getSumSquaredErrors() >= 0.0); // FAIL",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["getSumSquaredErrors", "SimpleRegression"],
        "summary_text": ["[math]  SimpleRegression getSumSquaredErrors"],
        "desc_hints": [
            "getSumSquaredErrors",
            "reg.addData",
            "SimpleRegression",
            "assertTrue",
            "reg.clear",
            "reg.getSumSquaredErrors",
            "testSimpleRegression"
        ],
        "desc_text": [
            ["getSumSquaredErrors returns -ve value.", ["OB"]],
            ["See test below:", []],
            ["public void testSimpleRegression() {", "CODE"],
            ["double[] y =", "CODE"],
            ["{  8915.102, 8919.302, 8923.502}", "CODE"],
            [";", "CODE"],
            ["double[] x =", "CODE"],
            ["{ 1.107178495, 1.107264895, 1.107351295}", "CODE"],
            [";", "CODE"],
            ["double[] x2 =", "CODE"],
            ["{ 1.107178495E2, 1.107264895E2, 1.107351295E2}", "CODE"],
            [";", "CODE"],
            ["SimpleRegression reg = new SimpleRegression();", "CODE"],
            ["for (int i = 0; i < x.length; i++)", "CODE"],
            ["{", "CODE"],
            ["reg.addData(x[i],y[i]);", "CODE"],
            ["}", "CODE"],
            ["assertTrue(reg.getSumSquaredErrors() >= 0.0); // OK", "CODE"],
            ["reg.clear();", "CODE"],
            ["for (int i = 0; i < x.length; i++)", "CODE"],
            ["{", "CODE"],
            ["reg.addData(x2[i],y[i]);", "CODE"],
            ["}", "CODE"],
            ["assertTrue(reg.getSumSquaredErrors() >= 0.0); // FAIL", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Math-94": {
        "code_elements": [
            "assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));",
            "if (u * v == 0) {",
            "if (u == 0 || v == 0) {"
        ],
        "stack_traces": [],
        "summary_hints": ["MathUtils.gcd"],
        "summary_text": [
            "MathUtils.gcd(u, v) fails when u and v both contain a high power of 2"
        ],
        "desc_hints": ["MathUtils.gcd", "assertEquals"],
        "desc_text": [
            [
                "The test at the beginning of MathUtils.gcd(u, v) for arguments equal to zero fails when u and v contain high enough powers of 2 so that their product overflows to zero.",
                ["OB", "SR"]
            ],
            [
                "assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));",
                "CODE"
            ],
            ["Fix: Replace the test at the start of MathUtils.gcd()", []],
            ["if (u * v == 0) {", "CODE"],
            ["by", []],
            ["if (u == 0 || v == 0) {", "CODE"]
        ]
    },
    "Closure-76": {
        "code_elements": [
            "a = b;",
            "a = null;",
            "}",
            "function reduction() {",
            "var a;",
            "return echo(true) || echo(a = false) ? a: null",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Assignments within conditions are sometimes incorrectly removed"
        ],
        "desc_hints": ["code.google.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["See attachment.", ["OB"]],
            ["2.", ["OB", "SR"]],
            ["Run original.", ["OB"]],
            ["3.", ["OB", "SR"]],
            ["Run compiled.", ["OB"]],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["* Both should return \"true\"", ["EB"]],
            ["* Original does return \"true\"", []],
            ["* Compiled returns \"undefined\"", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: 706", []],
            ["Built on: 2011/01/19 19:53", []],
            ["Mac OS X 10.6", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "In the attached reduction if the \"echo\" functions aren't used then the entire body of the function is compiled away, they are there to demonstrate that the first assignment in the condition is removed.",
                ["OB", "SR"]
            ],
            ["Original:", []],
            ["function reduction()", []],
            ["{", []],
            ["var a, b;", []],
            ["if (echo(b = true) || echo(b = false))", []],
            ["a = b;", "CODE"],
            ["else", []],
            ["a = null;", "CODE"],
            ["return a;", []],
            ["}", "CODE"],
            ["Compiled:", []],
            ["function reduction() {", "CODE"],
            ["var a;", "CODE"],
            ["return echo(true) || echo(a = false) ? a: null", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-4": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["InvalidFormatException.Reference"],
        "summary_text": [
            "Index is never set for Collection and Array in InvalidFormatException.Reference"
        ],
        "desc_hints": [
            "StringCollectionDeserializer",
            "CollectionDeserializer",
            "InvalidFormatException",
            "JsonMappingException"
        ],
        "desc_text": [
            [
                "When a InvalidFormatException is created, index values is always '-1'.",
                ["OB", "SR"]
            ],
            [
                "Indeed, in StringCollectionDeserializer, and CollectionDeserializer the exception is not caught.",
                ["OB"]
            ],
            [
                "The JsonMappingException shoud be caught and the index should be added and based on the \"result\" size.",
                ["OB", "EB"]
            ],
            [
                "Without this information, there is no way to get the index of the item involved in the mapping error.",
                ["OB"]
            ]
        ]
    },
    "JxPath-14": {
        "code_elements": [
            "assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));",
            "assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));",
            "assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));",
            "assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));",
            "assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));",
            "assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));",
            "assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));",
            "assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));",
            "assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Core rounding functions don't handle NaN or infinite values correctly"
        ],
        "desc_hints": [
            "Double.NEGATIVE_INFINITY",
            "Double.POSITIVE_INFINITY",
            "assertXPathValue",
            "Double.NaN"
        ],
        "desc_text": [
            [
                "assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));",
                "CODE"
            ],
            [
                "assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));",
                "CODE"
            ]
        ]
    },
    "JacksonDatabind-38": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["SimpleType.construct"],
        "summary_text": [
            "(2.7-regress) Handling of deprecated SimpleType.construct() too minimalistic"
        ],
        "desc_hints": [
            "JavaType",
            "JavaTypes",
            "github.com",
            "TypeFactory",
            "FasterXML",
            "SimpleType.construct"
        ],
        "desc_text": [
            [
                "(note: spun from https://github.com/FasterXML/jackson/issues/48)",
                []
            ],
            [
                "Due to changes in type resolution, most direct construction methods in JavaType sub-classes can not be fully supported.",
                ["OB"]
            ],
            [
                "Failure modes are typically with complex cases (and expected to be rare), with one exception: use of SimpleType.construct(Class), because:",
                ["OB", "EB"]
            ],
            [
                "This is mostly used for complex types, and not just \"well-known\" interfaces like List, Map; so actual access to at least immediate fields is necessary (and similarly lack of super-type info is problematic), and",
                []
            ],
            [
                "Its usage is likely to be wide-spread, despite existence of preferable methods (TypeFactory)",
                []
            ],
            [
                "Since refactoring of type resolution was not anticipated early enough in advance, deprecation of methods we want to move users away from could not be done in 2.6, as it should have been (in perfect case)",
                ["EB"]
            ],
            [
                "Exact reasoning behind problems is quite complicated: but the fundamental reason is that TypeFactory has all the logic to do the generic resolution; JavaType has (and should have) very little if any.",
                ["OB", "EB"]
            ],
            [
                "Since no reference to the factory is passed via constructors/factory methods, they can not properly delegate resolution tasks.",
                ["OB"]
            ],
            [
                "This is why direct calls should only be made with all necessary, pre-resolved information; passing JavaTypes for elements, not Class.",
                ["EB"]
            ],
            [
                "Inability to resolve things means that super-types can not be properly resolved, for example.",
                ["OB"]
            ],
            [
                "Handling of fields, methods will also be inexact wrt generic types.",
                ["OB"]
            ],
            [
                "The first immediate problem is something that should be addressable: introspection by POJO deserializer builder does not find any fields or methods.",
                ["OB", "EB"]
            ],
            [
                "It should be possible to at least find them, even if type resolution for generic types will not work well.",
                ["OB", "EB"]
            ],
            [
                "This should be acceptable for the common (and reported) case of constructing element types for Collections and Maps: generic parameterization will not be accessible anyway.",
                ["OB", "EB"]
            ],
            [
                "There are other potential issues to address as best we can, but first things first.",
                []
            ]
        ]
    },
    "Csv-11": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NullPointerException"],
        "summary_text": [
            "NullPointerException when empty header string and and null string of \"\""
        ],
        "desc_hints": ["nullPointerException", "nullString"],
        "desc_text": [
            [
                "When setting the format to have a nullString of \"\" and having an empty header value, a nullPointerException is thrown.",
                ["OB", "SR"]
            ]
        ]
    },
    "Time-14": {
        "code_elements": [
            "final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());",
            "System.out.println(isoLeap);",
            "System.out.println(isoLeap.plusDays(2));",
            "isoLeap.plusMonths(1);",
            "isoLeap.plusMonths(-1);",
            "isoLeap.minusMonths(1);",
            "isoLeap.minusMonths(-1);",
            "isoLeap.minusDays(-1);",
            "isoLeap.minusDays(1);",
            "isoLeap.plusDays(-1);",
            "System.out.println(isoLeap.minusDays(1).plusDays(2));"
        ],
        "stack_traces": [],
        "summary_hints": ["MonthDay"],
        "summary_text": [
            "#151 Unable to add days to a MonthDay set to the ISO leap date"
        ],
        "desc_hints": [
            "ISOChronology.getInstanceUTC",
            "ext.site.time.chrono.Main.main",
            "isoLeap.plusMonths",
            "org.joda.time.MonthDay.minusDays",
            "Main.java",
            "dayOfMonth",
            "plusDays",
            "ext.site.time.chrono.Main.m7",
            "System.out.println",
            "DateTimeConstants.FEBRUARY",
            "PreciseDurationDateTimeField.java",
            "BaseDateTimeField.java",
            "isoLeap.plusDays",
            "FieldUtils.java",
            "org.joda.time.IllegalFieldValueException",
            "MonthDay",
            "MonthDay.java",
            "BasicMonthOfYearDateTimeField.java",
            "org.joda.time.field.BaseDateTimeField.add",
            "isoLeap",
            "org.joda.time.field.PreciseDurationDateTimeField.set",
            "org.joda.time.MonthDay.withFieldAdded",
            "org.joda.time.chrono.BasicMonthOfYearDateTimeField.add",
            "isoLeap.minusDays",
            "org.joda.time.field.FieldUtils.verifyValueBounds",
            "isoLeap.minusMonths"
        ],
        "desc_text": [
            [
                "It's not possible to add days to a MonthDay set to the ISO leap date (February 29th).",
                ["OB"]
            ],
            [
                "This is even more bizarre given the exact error message thrown.",
                ["OB"]
            ],
            ["Sample snippet:", ["SR"]],
            [
                "final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());",
                "CODE"
            ],
            ["System.out.println(isoLeap);", "CODE"],
            ["System.out.println(isoLeap.plusDays(2));", "CODE"],
            [
                "Which generates the following combined console output and stack trace:",
                ["OB"]
            ],
            ["--02-29", []],
            [
                "Exception in thread \"main\" org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
                []
            ],
            [
                "at org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:215)",
                []
            ],
            [
                "at org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)",
                []
            ],
            [
                "at org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:212)",
                []
            ],
            [
                "at org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)",
                []
            ],
            ["at org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)", []],
            ["at org.joda.time.MonthDay.minusDays(MonthDay.java:672)", []],
            ["at ext.site.time.chrono.Main.m7(Main.java:191)", []],
            ["at ext.site.time.chrono.Main.main(Main.java:27)", []],
            [
                "The follwing method calls and parameters also generate the same or related error:",
                ["OB"]
            ],
            ["isoLeap.plusMonths(1);", "CODE"],
            ["isoLeap.plusMonths(-1);", "CODE"],
            ["isoLeap.minusMonths(1);", "CODE"],
            ["isoLeap.minusMonths(-1);", "CODE"],
            ["isoLeap.minusDays(-1);", "CODE"],
            ["However, the following methods work:", []],
            ["isoLeap.minusDays(1);", "CODE"],
            ["isoLeap.plusDays(-1);", "CODE"],
            [
                "Performing operations on dates around the ISO leap date react as if it exists, ie:",
                ["SR"]
            ],
            ["System.out.println(isoLeap.minusDays(1).plusDays(2));", "CODE"],
            ["Prints out '--03-01' as expected.", ["OB", "EB"]]
        ]
    },
    "Compress-6": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Creating zip files with many entries will ocassionally produce corrupted output"
        ],
        "desc_hints": [
            "hashCode",
            "ZipArchiveEntries",
            "ZipOutputStream",
            "setName",
            "ZipArchiveEntry"
        ],
        "desc_text": [
            [
                "Our application produces large numbers of zip files, often with 1000's of similarly named files contained within the zip.",
                ["OB", "SR"]
            ],
            [
                "When we switched from the standard JDK zip classes to those in commons compress, we would ocassionally produce a zip file that had corrupted index entries and would fail to unzip successfully using 7-zip, winzip, etc.",
                ["OB", "SR"]
            ],
            [
                "Debugging the zip creation showed that the the wrong offsets were being returned from the hashmap in ZipOutputStream for the entries that were being corrupted.",
                ["OB", "EB"]
            ],
            [
                "Further analysis revealed that this occurred when the filenames being added had a hash collision with another entry in the same output zip (which appears to happen quite frequently for us).",
                ["OB"]
            ],
            [
                "The issue appears to stem from the fact that ZipArchiveEntry can store the entry name either in its superclass if passed in on the ctor or in its own member attribute if set later via setName().",
                ["OB", "SR"]
            ],
            ["Not sure whether this functionality is really required?", []],
            [
                "Regardless, the root cause of the bug is that the equals() and hashCode() methods in ZipArchiveEntry do not always use the same filename value in their comparisons.",
                ["OB"]
            ],
            [
                "In fact if the filename of the entry is set in the ctor it will always treat two ZipArchiveEntries as equal.",
                ["OB"]
            ],
            [
                "This will break the offset hashmap whenever there is a hash collision as it will overwrite the previous entry, believeing it to be equal.",
                ["OB"]
            ],
            ["Patch to follow.", ["OB", "SR"]]
        ]
    },
    "Closure-172": {
        "code_elements": [
            "/** @param {Object} a */",
            "a.prototype = '__proto';",
            "/** @param {Object} a */",
            "a.prototype = function(){};",
            "a.prototype = function(){};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Type of prototype property incorrectly inferred to string"
        ],
        "desc_hints": [],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile the following code:", ["OB", "SR"]],
            ["/** @param {Object} a */", "CODE"],
            ["function f(a) {", []],
            ["a.prototype = '__proto';", "CODE"],
            ["}", []],
            ["/** @param {Object} a */", "CODE"],
            ["function g(a) {", []],
            ["a.prototype = function(){};", "CODE"],
            ["}", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["Should type check.", ["OB", "EB"]],
            ["Instead, gives error:", ["OB"]],
            ["WARNING - assignment to property prototype of Object", ["OB"]],
            ["found : function (): undefined", []],
            ["required: string", []],
            ["a.prototype = function(){};", "CODE"],
            ["^", []]
        ]
    },
    "Math-102": {
        "code_elements": [
            "for (int i = 0; i < observed.length; i++)",
            "{",
            "dev = ((double) observed[i] - expected[i]);",
            "sumSq += dev * dev / expected[i];",
            "}",
            "assertEquals( \"chi-square test statistic\", 16.4131070362, testStatistic.chiSquare(expected1, observed1), 1E-10);",
            "assertEquals(\"chi-square p-value\", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);"
        ],
        "stack_traces": [],
        "summary_hints": ["chiSquare"],
        "summary_text": [
            "chiSquare(double[] expected, long[] observed) is returning incorrect test statistic"
        ],
        "desc_hints": [
            "ChiSquareTestImpl",
            "assertEquals",
            "chiSquare",
            "testStatistic.chiSquare",
            "project.org",
            "ChiSquareTestTest",
            "observed.length",
            "chisq.test",
            "sumSq",
            "testStatistic.chiSquareTest"
        ],
        "desc_text": [
            [
                "ChiSquareTestImpl is returning incorrect chi-squared value.",
                ["OB"]
            ],
            [
                "An implicit assumption of public double chiSquare(double[] expected, long[] observed) is that the sum of expected and observed are equal.",
                ["OB", "EB"]
            ],
            ["That is, in the code:", ["SR"]],
            ["for (int i = 0; i < observed.length; i++)", "CODE"],
            ["{", "CODE"],
            ["dev = ((double) observed[i] - expected[i]);", "CODE"],
            ["sumSq += dev * dev / expected[i];", "CODE"],
            ["}", "CODE"],
            [
                "this calculation is only correct if sum(observed)==sum(expected).",
                ["OB", "EB"]
            ],
            [
                "When they are not equal then one must rescale the expected value by sum(observed) / sum(expected) so that they are.",
                ["OB", "EB"]
            ],
            [
                "Ironically, it is an example in the unit test ChiSquareTestTest that highlights the error:",
                ["OB", "SR"]
            ],
            ["long[] observed1 =", []],
            ["{ 500, 623, 72, 70, 31 }", []],
            [";", []],
            ["double[] expected1 =", []],
            ["{ 485, 541, 82, 61, 37 }", []],
            [";", []],
            [
                "assertEquals( \"chi-square test statistic\", 16.4131070362, testStatistic.chiSquare(expected1, observed1), 1E-10);",
                "CODE"
            ],
            [
                "assertEquals(\"chi-square p-value\", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);",
                "CODE"
            ],
            [
                "16.413 is not correct because the expected values do not make sense, they should be: 521.19403 581.37313 88.11940 65.55224  39.76119 so that the sum of expected equals 1296 which is the sum of observed.",
                ["EB"]
            ],
            ["Here is some R code (r-project.org) which proves it:", []],
            ["> o1", []],
            ["[1] 500 623 72 70  31", ["OB"]],
            ["> e1", []],
            ["[1] 485 541 82 61  37", []],
            ["> chisq.test(o1,p=e1,rescale.p=TRUE)", []],
            ["Chi-squared test for given probabilities", ["OB"]],
            ["data: o1", []],
            ["X-squared = 9.0233, df = 4, p-value = 0.06052", ["SR"]],
            ["> chisq.test(o1,p=e1,rescale.p=TRUE)$observed", []],
            ["[1] 500 623 72 70  31", ["OB"]],
            ["> chisq.test(o1,p=e1,rescale.p=TRUE)$expected", ["EB"]],
            ["[1] 521.19403 581.37313 88.11940 65.55224  39.76119", []]
        ]
    },
    "Mockito-35": {
        "code_elements": [],
        "stack_traces": [
            "at org.mockito.internal.creation.jmock.ClassImposterizer.imposterise(ClassImposterizer.java:65)",
            "at org.powermock.api.mockito.internal.mockcreation.MockCreator.createMethodInvocationControl(MockCreator.java:111)",
            "at org.powermock.api.mockito.internal.mockcreation.MockCreator.mock(MockCreator.java:60)",
            "at org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:143)",
            "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.executeOsgiRequest(JCicsOsgiTestCase.java:167)",
            "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.executeOsgiRequest(JCicsOsgiTestCase.java:122)",
            "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.checkFunctionReturnString(JCicsOsgiTestCase.java:99)",
            "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.testJcicsOsgiRoundtrip(JCicsOsgiTestCase.java:230)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:606)",
            "at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:310)",
            "at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:88)",
            "at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:294)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:127)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:282)",
            "at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)",
            "at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:207)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:146)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:120)",
            "at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)",
            "at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)",
            "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:122)",
            "at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:104)",
            "at org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:53)",
            "at org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:53)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)"
        ],
        "summary_hints": ["PowerMockito"],
        "summary_text": [
            "possible NPE exception when class cannot be mocked via PowerMockito"
        ],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "PowerMockJUnit47MethodRunner.executeTest",
            "TestMethod.java",
            "ClassRoadie.java",
            "MockCreator.java",
            "NativeMethodAccessorImpl.java",
            "PowerMockJUnit47RunnerDelegateImpl.java",
            "PowerMockRunner.java",
            "JUnit4TestReference.java",
            "MethodRoadie.java",
            "PowerMockJUnit44RunnerDelegateImpl.java",
            "PowerMockJUnit47MethodRunner.executeTestInSuper",
            "org.junit.internal.runners.ClassRoadie.runUnprotected",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "org.junit.internal.runners.TestMethod.invoke",
            "TestExecution.java",
            "org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod",
            "PowerMockJUnit44MethodRunner.runTestMethod",
            "ClassImposterizer.java",
            "org.junit.internal.runners.MethodRoadie",
            "org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl",
            "org.junit.internal.runners.MethodRoadie.run",
            "PowerMockJUnit44MethodRunner.executeTest",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "JCicsOsgiTestCase.java",
            "com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.checkFunctionReturnString",
            "org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run",
            "AbstractCommonPowerMockRunner.java",
            "org.powermock.modules.junit4.PowerMockRunner.run",
            "org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters",
            "org.junit.internal.runners.ClassRoadie.runProtected",
            "JUnit4TestSuiteChunkerImpl.java",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "proxyInstance",
            "com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.testJcicsOsgiRoundtrip",
            "org.junit.internal.runners.MethodRoadie.runTest",
            "org.powermock.api.mockito.internal.mockcreation.MockCreator.mock",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "PowerMockito.java",
            "java.lang.reflect.Method.invoke",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl",
            "org.mockito.internal.creation.jmock.ClassImposterizer.imposterise",
            "java.lang.NullPointerException",
            "Method.java",
            "org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run",
            "com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.executeOsgiRequest",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "org.powermock.api.mockito.PowerMockito.mock",
            "org.powermock.api.mockito.internal.mockcreation.MockCreator.createMethodInvocationControl",
            "PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters"
        ],
        "desc_text": [
            [
                "In version 1.10.5, the catch block needs to guard against a null proxyInstance:",
                []
            ],
            ["java.lang.NullPointerException", []],
            [
                "at org.mockito.internal.creation.jmock.ClassImposterizer.imposterise(ClassImposterizer.java:65)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.api.mockito.internal.mockcreation.MockCreator.createMethodInvocationControl(MockCreator.java:111)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.api.mockito.internal.mockcreation.MockCreator.mock(MockCreator.java:60)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:143)",
                "STACK_TRACE"
            ],
            [
                "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.executeOsgiRequest(JCicsOsgiTestCase.java:167)",
                "STACK_TRACE"
            ],
            [
                "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.executeOsgiRequest(JCicsOsgiTestCase.java:122)",
                "STACK_TRACE"
            ],
            [
                "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.checkFunctionReturnString(JCicsOsgiTestCase.java:99)",
                "STACK_TRACE"
            ],
            [
                "at com.seagullsw.appinterface.server.osgi.JCicsOsgiTestCase.testJcicsOsgiRoundtrip(JCicsOsgiTestCase.java:230)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:606)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:310)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:88)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:96)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:294)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:127)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:282)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:207)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:146)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:120)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:122)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:104)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:53)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:53)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ]
        ]
    },
    "Math-79": {
        "code_elements": [
            "package org.fao.fisheries.chronicles.calcuation.cluster;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertTrue;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.Random;",
            "import org.apache.commons.math.stat.clustering.Cluster;",
            "import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;",
            "import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;",
            "import org.fao.fisheries.chronicles.input.CsvImportProcess;",
            "import org.fao.fisheries.chronicles.input.Top200Csv;",
            "import org.junit.Test;",
            "public class ClusterAnalysisTest {",
            "@Test",
            "public void testPerformClusterAnalysis2() {",
            "KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(",
            "new Random(1746432956321l));",
            "EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {",
            "new EuclideanIntegerPoint(new int[]",
            "{ 1959, 325100 }",
            "),",
            "new EuclideanIntegerPoint(new int[]",
            "{ 1960, 373200 }",
            "), };",
            "List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);",
            "assertEquals(1, clusters.size());",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(KMeansPlusPlusClusterer.java:91)"
        ],
        "summary_hints": ["KMeansPlusPlusClusterer"],
        "summary_text": ["NPE in  KMeansPlusPlusClusterer unittest"],
        "desc_hints": [
            "clusters.size",
            "assertEquals",
            "KMeansPlusPlusClusterer.java",
            "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
            "org.apache.commons.math.stat.clustering.Cluster",
            "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters",
            "java.util.Random",
            "java.util.List",
            "ClusterAnalysisTest",
            "KMeansPlusPlusClusterer",
            "org.fao.fisheries.chronicles.calcuation.cluster",
            "org.junit.Assert.assertTrue",
            "org.junit.Assert.assertEquals",
            "java.util.Arrays",
            "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
            "transformer.cluster",
            "org.fao.fisheries.chronicles.input.Top200Csv",
            "org.fao.fisheries.chronicles.input.CsvImportProcess",
            "testPerformClusterAnalysis2",
            "EuclideanIntegerPoint",
            "org.junit.Test",
            "java.lang.NullPointerException",
            "Arrays.asList"
        ],
        "desc_text": [
            ["When running this unittest, I am facing this NPE:", ["OB", "SR"]],
            ["java.lang.NullPointerException", []],
            [
                "at org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(KMeansPlusPlusClusterer.java:91)",
                "STACK_TRACE"
            ],
            ["This is the unittest:", []],
            [
                "package org.fao.fisheries.chronicles.calcuation.cluster;",
                "CODE"
            ],
            ["import static org.junit.Assert.assertEquals;", "CODE"],
            ["import static org.junit.Assert.assertTrue;", "CODE"],
            ["import java.util.Arrays;", "CODE"],
            ["import java.util.List;", "CODE"],
            ["import java.util.Random;", "CODE"],
            ["import org.apache.commons.math.stat.clustering.Cluster;", "CODE"],
            [
                "import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;",
                "CODE"
            ],
            [
                "import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;",
                "CODE"
            ],
            [
                "import org.fao.fisheries.chronicles.input.CsvImportProcess;",
                "CODE"
            ],
            ["import org.fao.fisheries.chronicles.input.Top200Csv;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["public class ClusterAnalysisTest {", "CODE"],
            ["@Test", "CODE"],
            ["public void testPerformClusterAnalysis2() {", "CODE"],
            [
                "KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(",
                "CODE"
            ],
            ["new Random(1746432956321l));", "CODE"],
            [
                "EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {",
                "CODE"
            ],
            ["new EuclideanIntegerPoint(new int[]", "CODE"],
            ["{ 1959, 325100 }", "CODE"],
            ["),", "CODE"],
            ["new EuclideanIntegerPoint(new int[]", "CODE"],
            ["{ 1960, 373200 }", "CODE"],
            ["), };", "CODE"],
            [
                "List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);",
                "CODE"
            ],
            ["assertEquals(1, clusters.size());", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Time-7": {
        "code_elements": [
            "public void testParseInto_monthDay_feb29_startOfYear() {",
            "DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);",
            "MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, NEWYORK);",
            "assertEquals(4, f.parseInto(result, \"2 29\", 0));",
            "assertEquals(new MutableDateTime(2000, 2, 29, 0, 0, 0, 0, NEWYORK), result);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DateTimeFormat.parseInto"],
        "summary_text": [
            "DateTimeFormat.parseInto sometimes miscalculates year (2.2)"
        ],
        "desc_hints": [
            "sourceforge.net",
            "assertEquals",
            "parseInto",
            "DateTimeFormat.forPattern",
            "Locale.UK",
            "DateTimeFormatter",
            "testParseInto_monthDay_feb29_startOfYear",
            "withLocale",
            "MutableDateTime",
            "org.joda.time.format.TestDateTimeFormatter"
        ],
        "desc_text": [
            [
                "There appears to be a bug in the fix to http://sourceforge.net/p/joda-time/bugs/148 (which I also reported).",
                []
            ],
            [
                "The following code (which can be added to org.joda.time.format.TestDateTimeFormatter) breaks, because the input mutable date time's millis appear to be mishandled and the year for the parse is changed to 1999:",
                ["OB", "SR"]
            ],
            [
                "public void testParseInto_monthDay_feb29_startOfYear() {",
                "CODE"
            ],
            [
                "DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);",
                "CODE"
            ],
            [
                "MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, NEWYORK);",
                "CODE"
            ],
            ["assertEquals(4, f.parseInto(result, \"2 29\", 0));", "CODE"],
            [
                "assertEquals(new MutableDateTime(2000, 2, 29, 0, 0, 0, 0, NEWYORK), result);",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-53": {
        "code_elements": [
            "private void setSomething(Map<UUID, Foo> incomingValue) {"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonDeserialize"],
        "summary_text": [
            "Problem with type specialization for Maps with @JsonDeserialize(as=subtype)"
        ],
        "desc_hints": [
            "AbstractDeserializer",
            "JsonDeserialize",
            "MyHashMap",
            "BeanDeserializer",
            "MyHashMap.class",
            "MyCustomIdInterface",
            "MyHashMap.java",
            "Foo.java",
            "MyCustomIdInterface.java",
            "incomingValue",
            "setSomething"
        ],
        "desc_text": [
            ["If I have json that looks like", []],
            ["{", []],
            ["\"something\": [", []],
            ["{", []],
            ["\"id\": \"a uuid\",", []],
            ["\"property\": \"value\"", []],
            ["}", []],
            ["]", []],
            ["}", []],
            ["And I have a java pojo with an annotation like this:", ["SR"]],
            ["@JsonDeserialize(as = MyHashMap.class)", []],
            [
                "private void setSomething(Map<UUID, Foo> incomingValue) {",
                "CODE"
            ],
            [
                "Where MyHashMap.java has some custom logic using generics that allow us to map the array json above into a Map where \"id\" is the key and everything else serializes into the value.",
                ["SR"]
            ],
            [
                "We use generics on MyHashMap to enforce that every value implements a certain interface that respects the contract of returning an \"id\" property.",
                ["OB", "SR"]
            ],
            [
                "In this example Foo.java implements this interface MyCustomIdInterface.java.",
                ["OB", "SR"]
            ],
            [
                "When using 2.6.6 this worked fine, but if I switch to 2.7.x then it breaks with the error:",
                ["OB", "SR"]
            ],
            [
                "Can not construct instance of MyCustomIdInterface, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information",
                []
            ],
            [
                "in 2.7.x, it looks like jackson resolves to using AbstractDeserializer based on MyCustomIdInterface but in 2.6.6 it resolves to using BeanDeserializer based on Foo.java.",
                ["OB", "SR"]
            ],
            [
                "Is this a bug or is there some default/feature flag that changed here?",
                []
            ]
        ]
    },
    "Closure-66": {
        "code_elements": [
            "/**",
            "@type {Object}",
            "*/",
            "var NS = {};",
            "/**",
            "@enum {number}",
            "*/",
            "/**",
            "@enum",
            "*/",
            "window['gKEYS'] = NS.keys;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["@enum does not type correctly"],
        "desc_hints": ["NS.keys"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["create an enum with any syntax", ["SR"]],
            ["my example:", ["SR"]],
            ["/**", "CODE"],
            ["@type {Object}", "CODE"],
            ["*/", "CODE"],
            ["var NS = {};", "CODE"],
            ["/**", "CODE"],
            ["@enum {number}", "CODE"],
            ["*/", "CODE"],
            ["NS.keys = {", []],
            ["a: 1,", []],
            ["b: 2,", []],
            ["c: 3", ["SR"]],
            ["};", []],
            ["/**", "CODE"],
            ["@enum", "CODE"],
            ["*/", "CODE"],
            ["window['gKEYS'] = NS.keys;", "CODE"],
            ["2.", ["OB", "SR"]],
            [
                "complie with --compilation_level ADVANCED_OPTIMIZATIONS --summary_detail_level 3 --warning_level VERBOSE",
                ["OB", "SR"]
            ],
            ["3.", ["OB", "SR"]],
            ["look at the % typed", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["it shouldn't count the enum as un-typed; it does...", ["EB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Version: 1043", []],
            ["Built on: 2011/05/02 19:47", []],
            ["Please provide any additional information below.", "QUERY"],
            ["i also tried to tersely coerce the type, eg:", ["SR"]],
            ["/** @type {number} */ a: (/** @type {number} */(1)),", []],
            ["which has no effect.", ["OB"]]
        ]
    },
    "Cli-2": {
        "code_elements": [
            "Options options = buildCommandLineOptions();",
            "CommandLineParser parser = new PosixParser();",
            "CommandLine commandLine = null;",
            "commandLine = parser.parse(options, args);",
            "}",
            "catch (ParseException e) {",
            "System.out.println(\"Invalid parameters. \" + e.getMessage() + NEW_LINE);",
            "System.exit(EXIT_CODE_ERROR);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "[cli] Parameter value \"-something\" misinterpreted as a parameter"
        ],
        "desc_hints": [
            "System.exit",
            "parser.parse",
            "PosixParser",
            "CommandLineParser",
            "buildCommandLineOptions",
            "CommandLine",
            "commandLine",
            "getMessage",
            "System.out.println",
            "ParseException"
        ],
        "desc_text": [
            [
                "If a parameter value is passed that contains a hyphen as the (delimited) first",
                ["OB", "SR"]
            ],
            ["character, CLI parses this a parameter.", ["OB"]],
            ["For example using the call", ["SR"]],
            ["java myclass -t \"-something\"", []],
            [
                "Results in the parser creating the invalid parameter -o (noting that it is",
                ["OB"]
            ],
            ["skipping the 's')", []],
            ["My code is using the Posix parser as follows", ["SR"]],
            ["Options options = buildCommandLineOptions();", "CODE"],
            ["CommandLineParser parser = new PosixParser();", "CODE"],
            ["CommandLine commandLine = null;", "CODE"],
            ["try {", []],
            ["commandLine = parser.parse(options, args);", "CODE"],
            ["}", "CODE"],
            ["catch (ParseException e) {", "CODE"],
            [
                "System.out.println(\"Invalid parameters. \" + e.getMessage() + NEW_LINE);",
                "CODE"
            ],
            ["System.exit(EXIT_CODE_ERROR);", "CODE"],
            ["}", "CODE"],
            [
                "This has been tested against the nightly build dated 20050503.",
                []
            ]
        ]
    },
    "Jsoup-3": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Issue with <tr>"],
        "desc_hints": [],
        "desc_text": [
            [
                "When calling append to add a table row the resulting tr gets wrapped in a table even though I appended to an existing table.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-85": {
        "code_elements": [
            "DateFormat df = ctxt.getConfig().getDateFormat();",
            "// one shortcut: with our custom format, can simplify handling a bit",
            "if (df.getClass() == StdDateFormat.class) {",
            "...",
            "StdDateFormat std = (StdDateFormat) df;",
            "std = std.withTimeZone(tz);",
            "...",
            "} else {",
            "// otherwise need to clone, re-set timezone:",
            "df = (DateFormat) df.clone();",
            "df.setTimeZone(tz);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["DateTimeSerializerBase"],
        "summary_text": [
            "DateTimeSerializerBase ignores configured date format when creating contextual"
        ],
        "desc_hints": [
            "format.hasPattern",
            "StdDateFormat.class",
            "df.setTimeZone",
            "df.getClass",
            "format.getPattern",
            "df.clone",
            "createContextual",
            "JsonFormat",
            "DateFormat",
            "ctxt.getConfig",
            "StdDateFormat",
            "getDateFormat",
            "DateBasedDeserializer",
            "StdDateFormat.DATE_FORMAT_STR_ISO8601",
            "DateTimeSerializerBase",
            "std.withTimeZone"
        ],
        "desc_text": [
            [
                "DateTimeSerializerBase#createContextual creates a new serializer with StdDateFormat.DATE_FORMAT_STR_ISO8601 format instead of re-using the actual format that may have been specified on the configuration.",
                ["OB", "EB", "SR"]
            ],
            ["See the following code:", ["OB", "SR"]],
            ["final String pattern = format.hasPattern()", []],
            ["?", []],
            ["format.getPattern()", []],
            [": StdDateFormat.DATE_FORMAT_STR_ISO8601;", []],
            [
                "Using the @JsonFormat annotation on a field will therefore reset the format to Jackson's default even if the annotation doesn't specify any custom format.",
                ["OB", "SR"]
            ],
            [
                "DateBasedDeserializer#createContextual behaves differently and tries to re-use the configured format:",
                ["OB", "SR"]
            ],
            ["DateFormat df = ctxt.getConfig().getDateFormat();", "CODE"],
            [
                "// one shortcut: with our custom format, can simplify handling a bit",
                "CODE"
            ],
            ["if (df.getClass() == StdDateFormat.class) {", "CODE"],
            ["...", "CODE"],
            ["StdDateFormat std = (StdDateFormat) df;", "CODE"],
            ["std = std.withTimeZone(tz);", "CODE"],
            ["...", "CODE"],
            ["} else {", "CODE"],
            ["// otherwise need to clone, re-set timezone:", "CODE"],
            ["df = (DateFormat) df.clone();", "CODE"],
            ["df.setTimeZone(tz);", "CODE"],
            ["}", "CODE"],
            ["Shouldn't the serializer follow the same approach ?", ["EB"]]
        ]
    },
    "Jsoup-63": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Error: \"Self closing flag not acknowledged\" for self closing break"
        ],
        "desc_hints": ["Jsoup.isValid"],
        "desc_text": [
            [
                "This code snippet returns invalid html with the message: \"Self closing flag not acknowledged\"",
                ["OB"]
            ],
            ["Jsoup.isValid(\"<p>test<br/>test</p>\")", []],
            ["Why breaks could not be self closing?", []]
        ]
    },
    "JacksonDatabind-79": {
        "code_elements": [
            "ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);",
            "if (objectIdInfo == null) {",
            "// no ObjectId override, but maybe ObjectIdRef?",
            "if (oiw != null) {",
            "new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));",
            "oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());",
            "public ReallyAlwaysAsId() { this(0); }",
            "public ReallyAlwaysAsId(int v) {",
            "value = v;",
            "}",
            "}",
            "public AlwaysAsId a = new AlwaysAsId(13);",
            "public ReallyAlwaysAsId b = new ReallyAlwaysAsId(13);",
            "}",
            "String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());",
            "assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2}\", json);",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonIdentityReference"],
        "summary_text": [
            "@JsonIdentityReference not used when setup on class only"
        ],
        "desc_hints": [
            "assertEquals",
            "intr.findObjectReferenceInfo",
            "ReallyAlwaysContainer",
            "BeanSerializerBase",
            "TestObjectIdSerialization",
            "objectIdInfo.getAlwaysAsId",
            "ObjectIdRef",
            "ObjectIdResolver",
            "AlwaysAsId",
            "MAPPER.writeValueAsString",
            "alwaysAsId",
            "objectIdInfo",
            "testReallyAlwaysAsId",
            "JsonIdentityReference",
            "intr.findObjectIdInfo",
            "objectIdWriter.withAlwaysAsId",
            "ObjectId",
            "ReallyAlwaysAsId",
            "JsonPropertyOrder",
            "JsonIdentityInfo",
            "ObjectIdInfo",
            "ObjectIdGenerators.IntSequenceGenerator.class"
        ],
        "desc_text": [
            [
                "I am trying to setup @JsonIdentityInfo/@JsonIdentityReference in order to serialize all references to a given class as Object Id (and deserialize them later using a custom ObjectIdResolver to retrieve the proper referenced instance)",
                ["SR"]
            ],
            [
                "I use @JsonIdentityReference(alwaysAsId=true) in order to enforce exporting the object id in all cases.",
                ["OB", "SR"]
            ],
            [
                "It does not work as expected when I define the annotation only on the class (but it works fine when I set it directly on the property).",
                ["OB"]
            ],
            [
                "I would rather not have to define it on every property as I will probably miss some...",
                []
            ],
            [
                "From what I see in BeanSerializerBase, the alwaysAsId is reset when not ObjectIdInfo is found on the accessor:",
                ["OB"]
            ],
            [
                "ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);",
                "CODE"
            ],
            ["if (objectIdInfo == null) {", "CODE"],
            ["// no ObjectId override, but maybe ObjectIdRef?", "CODE"],
            ["if (oiw != null) {", "CODE"],
            ["objectIdInfo = intr.findObjectReferenceInfo(accessor,", []],
            [
                "new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));",
                "CODE"
            ],
            [
                "oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());",
                "CODE"
            ],
            [
                "Shouldn't it be kept to the current value when no override is found ?",
                ["OB", "EB"]
            ],
            [
                "I tried to set it back in the default ObjectIdInfo created with NAME_FOR_OBJECT_REF but I am not sure if this is the right way to fix this.",
                ["SR"]
            ],
            [
                "Here is test I added in TestObjectIdSerialization for this case:",
                ["SR"]
            ],
            [
                "@JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")",
                []
            ],
            ["@JsonIdentityReference(alwaysAsId=true)", []],
            ["static class ReallyAlwaysAsId", []],
            ["{", []],
            ["public int value;", []],
            ["public ReallyAlwaysAsId() { this(0); }", "CODE"],
            ["public ReallyAlwaysAsId(int v) {", "CODE"],
            ["value = v;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@JsonPropertyOrder(alphabetic=true)", []],
            ["static class ReallyAlwaysContainer", []],
            ["{", []],
            ["@JsonIdentityReference(alwaysAsId=true)", []],
            ["public AlwaysAsId a = new AlwaysAsId(13);", "CODE"],
            ["public ReallyAlwaysAsId b = new ReallyAlwaysAsId(13);", "CODE"],
            ["}", "CODE"],
            ["public void testReallyAlwaysAsId() throws Exception", []],
            ["{", []],
            [
                "String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());",
                "CODE"
            ],
            ["assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2}\", json);", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Time-20": {
        "code_elements": [
            "import org.joda.time.DateTime;",
            "import org.joda.time.DateTimeZone;",
            "import org.joda.time.format.DateTimeFormat;",
            "import org.joda.time.format.DateTimeFormatter;",
            "import java.util.Set;",
            "public class JodaDateTimeZoneTester {",
            "private static DateTimeFormatter formatter = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss.SSS ZZZ\");",
            "private static int numTimeZonesTested = 0;",
            "private static int numTimeZonesPassed = 0;",
            "private static int numTimeZonesFailed = 0;",
            "private static int numTimeZonesException = 0;",
            "private static String convertDateTimeToFormattedString(DateTime dateTime) {",
            "return formatter.print(dateTime);",
            "}",
            "private static DateTime parseStringToDateTime(String formattedDateTime) {",
            "return formatter.parseDateTime(formattedDateTime);",
            "}",
            "private static void testDateTimeFormatter(DateTime dateTime, String timeZone) {",
            "numTimeZonesTested++;",
            "final String dateTimeZoneId = dateTime.getZone().getID();",
            "if (!timeZone.equals(dateTimeZoneId)) {",
            "numTimeZonesFailed++;",
            "System.out.println(timeZone + \" failed to construct into the proper date time zone - constructed time zone = \" + dateTimeZoneId);",
            "return;",
            "}",
            "try {",
            "DateTime convertedDateTime = parseStringToDateTime(convertDateTimeToFormattedString(dateTime));",
            "if (dateTime.equals(convertedDateTime)) {",
            "numTimeZonesPassed++;",
            "//System.out.println(dateTime.getZone().getID() + \" passed.\");",
            "} else {",
            "numTimeZonesFailed++;",
            "System.out.println(\"Formatter failed for time zone ID: \" + dateTimeZoneId + \"    converted it to: \" + convertedDateTime.getZone().getID());",
            "}",
            "} catch (IllegalArgumentException iae) {",
            "numTimeZonesException++;",
            "System.out.println(\"Formatter threw exception for time zone id: \" + dateTimeZoneId);",
            "}",
            "}",
            "public static void main(String[] args) {",
            "Set<String> timeZones = DateTimeZone.getAvailableIDs();",
            "for (String timeZone : timeZones) {",
            "testDateTimeFormatter(DateTime.now().withZone(DateTimeZone.forID(timeZone)), timeZone);",
            "}",
            "System.out.println();",
            "System.out.println(\"Number of Time Zones tested: \" + numTimeZonesTested);",
            "System.out.println(\"Number passed:     \" + numTimeZonesPassed);",
            "System.out.println(\"Number failed:     \" + numTimeZonesFailed);",
            "System.out.println(\"Number exceptions: \" + numTimeZonesException);",
            "System.out.println();",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "#126 Errors creating/parsing dates with specific time zones."
        ],
        "desc_hints": [
            "org.joda.time.DateTime",
            "parseStringToDateTime",
            "formattedDateTime",
            "getID",
            "formatter.print",
            "dateTimeZoneId",
            "JodaDateTimeZoneTester",
            "DateTime",
            "DateTime.now",
            "testDateTimeFormatter",
            "timeZone",
            "org.joda.time.format.DateTimeFormatter",
            "org.joda.time.format.DateTimeFormat",
            "IllegalArgumentException",
            "dateTime.equals",
            "ss.SSS",
            "java.util.Set",
            "dateTime",
            "timeZone.equals",
            "numTimeZonesException",
            "convertedDateTime.getZone",
            "DateTimeFormatter",
            "DateTimeZone",
            "convertedDateTime",
            "formatter.parseDateTime",
            "numTimeZonesTested",
            "org.joda.time.DateTimeZone",
            "timeZones",
            "convertDateTimeToFormattedString",
            "DateTimeFormat.forPattern",
            "numTimeZonesPassed",
            "DateTimeZone.getAvailableIDs",
            "withZone",
            "DateTimeZone.forID",
            "numTimeZonesFailed",
            "dateTime.getZone",
            "System.out.println"
        ],
        "desc_text": [
            ["Consider the following test code using Joda 2.0", ["OB", "SR"]],
            ["import org.joda.time.DateTime;", "CODE"],
            ["import org.joda.time.DateTimeZone;", "CODE"],
            ["import org.joda.time.format.DateTimeFormat;", "CODE"],
            ["import org.joda.time.format.DateTimeFormatter;", "CODE"],
            ["import java.util.Set;", "CODE"],
            ["public class JodaDateTimeZoneTester {", "CODE"],
            [
                "private static DateTimeFormatter formatter = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss.SSS ZZZ\");",
                "CODE"
            ],
            ["private static int numTimeZonesTested = 0;", "CODE"],
            ["private static int numTimeZonesPassed = 0;", "CODE"],
            ["private static int numTimeZonesFailed = 0;", "CODE"],
            ["private static int numTimeZonesException = 0;", "CODE"],
            [
                "private static String convertDateTimeToFormattedString(DateTime dateTime) {",
                "CODE"
            ],
            ["return formatter.print(dateTime);", "CODE"],
            ["}", "CODE"],
            [
                "private static DateTime parseStringToDateTime(String formattedDateTime) {",
                "CODE"
            ],
            ["return formatter.parseDateTime(formattedDateTime);", "CODE"],
            ["}", "CODE"],
            [
                "private static void testDateTimeFormatter(DateTime dateTime, String timeZone) {",
                "CODE"
            ],
            ["numTimeZonesTested++;", "CODE"],
            [
                "final String dateTimeZoneId = dateTime.getZone().getID();",
                "CODE"
            ],
            ["if (!timeZone.equals(dateTimeZoneId)) {", "CODE"],
            ["numTimeZonesFailed++;", "CODE"],
            [
                "System.out.println(timeZone + \" failed to construct into the proper date time zone - constructed time zone = \" + dateTimeZoneId);",
                "CODE"
            ],
            ["return;", "CODE"],
            ["}", "CODE"],
            ["try {", "CODE"],
            [
                "DateTime convertedDateTime = parseStringToDateTime(convertDateTimeToFormattedString(dateTime));",
                "CODE"
            ],
            ["if (dateTime.equals(convertedDateTime)) {", "CODE"],
            ["numTimeZonesPassed++;", "CODE"],
            [
                "//System.out.println(dateTime.getZone().getID() + \" passed.\");",
                "CODE"
            ],
            ["} else {", "CODE"],
            ["numTimeZonesFailed++;", "CODE"],
            [
                "System.out.println(\"Formatter failed for time zone ID: \" + dateTimeZoneId + \"    converted it to: \" + convertedDateTime.getZone().getID());",
                "CODE"
            ],
            ["}", "CODE"],
            ["} catch (IllegalArgumentException iae) {", "CODE"],
            ["numTimeZonesException++;", "CODE"],
            [
                "System.out.println(\"Formatter threw exception for time zone id: \" + dateTimeZoneId);",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["Set<String> timeZones = DateTimeZone.getAvailableIDs();", "CODE"],
            ["for (String timeZone : timeZones) {", "CODE"],
            [
                "testDateTimeFormatter(DateTime.now().withZone(DateTimeZone.forID(timeZone)), timeZone);",
                "CODE"
            ],
            ["}", "CODE"],
            ["System.out.println();", "CODE"],
            [
                "System.out.println(\"Number of Time Zones tested: \" + numTimeZonesTested);",
                "CODE"
            ],
            [
                "System.out.println(\"Number passed:     \" + numTimeZonesPassed);",
                "CODE"
            ],
            [
                "System.out.println(\"Number failed:     \" + numTimeZonesFailed);",
                "CODE"
            ],
            [
                "System.out.println(\"Number exceptions: \" + numTimeZonesException);",
                "CODE"
            ],
            ["System.out.println();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "The results are out of 572 time zones 130 fail and 30 throw exceptions.",
                ["OB"]
            ],
            ["The failures are the most interesting.", ["OB"]],
            [
                "When I query DateTimeZone to get its time zone ids I will get a time zone like America/Atka.",
                ["OB", "SR"]
            ],
            [
                "When I take that id and create a date time with it its time zone id is America/Adak.",
                ["OB", "SR"]
            ],
            [
                "It is like there are multiple list of time zones in Joda time and they are out of sync.",
                ["OB"]
            ],
            ["Source code is attached.", []]
        ]
    },
    "Math-101": {
        "code_elements": [
            "// parse imaginary character",
            "int n = getImaginaryCharacter().length();",
            "startIndex = pos.getIndex();",
            "int endIndex = startIndex + n;",
            "getImaginaryCharacter()) != 0) {",
            "int n = 0;",
            "n = getImaginaryCharacter().length();"
        ],
        "stack_traces": [],
        "summary_hints": [
            "ComplexFormat.parse",
            "java.lang.StringIndexOutOfBoundsException",
            "ParsePosition"
        ],
        "summary_text": [
            "java.lang.StringIndexOutOfBoundsException in ComplexFormat.parse(String source, ParsePosition pos)"
        ],
        "desc_hints": [
            "getImaginaryCharacter",
            "pos.getIndex",
            "source.contains",
            "compareTo",
            "ComplexFormat",
            "endIndex",
            "source.substring",
            "ParsePosition",
            "AbstractFormatter",
            "StringIndexOutOfBoundsException",
            "JTextFied",
            "startIndex"
        ],
        "desc_text": [
            [
                "The parse(String source, ParsePosition pos) method in the ComplexFormat class does not check whether the imaginary character is set or not which produces StringIndexOutOfBoundsException in the substring method :",
                ["OB"]
            ],
            ["(line 375 of ComplexFormat)", []],
            ["...", []],
            ["// parse imaginary character", "CODE"],
            ["int n = getImaginaryCharacter().length();", "CODE"],
            ["startIndex = pos.getIndex();", "CODE"],
            ["int endIndex = startIndex + n;", "CODE"],
            ["if (source.substring(startIndex, endIndex).compareTo(", ["OB"]],
            ["getImaginaryCharacter()) != 0) {", "CODE"],
            ["...", []],
            [
                "I encoutered this exception typing in a JTextFied with ComplexFormat set to look up an AbstractFormatter.",
                ["OB", "SR"]
            ],
            [
                "If only the user types the imaginary part of the complex number first, he gets this exception.",
                ["OB"]
            ],
            [
                "Solution: Before setting to n length of the imaginary character, check if the source contains it.",
                ["SR"]
            ],
            ["My proposal:", []],
            ["...", []],
            ["int n = 0;", "CODE"],
            ["if (source.contains(getImaginaryCharacter()))", []],
            ["n = getImaginaryCharacter().length();", "CODE"],
            ["...", []],
            ["F.S.", []]
        ]
    },
    "Mockito-26": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["InjectMocks"],
        "summary_text": ["use @InjectMocks for final fields"],
        "desc_hints": [],
        "desc_text": [
            [
                "I'm trying to upgrade the mockito version that we're using (1.8.5) to a newer version but there is a problem with @Injectmocks which since 1.9.0 doesn't inject into final field anymore.",
                ["OB", "SR"]
            ],
            ["Were there any reasons for that feature to be removed?", []],
            [
                "Is there another way to achieve this without polutting our class with useless (outside testing context) constructors / accessors?",
                []
            ],
            ["Is there a possibility to get that feature back?", []]
        ]
    },
    "Mockito-13": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["fix proposal for #114"],
        "desc_hints": [],
        "desc_text": [
            ["@bric3, can you take a look at this one?", []],
            ["If you don't have time I'll just merge it.", ["OB"]],
            ["All existing tests are passing.", ["OB"]],
            ["Thanks for the fix!!!", []]
        ]
    },
    "Closure-4": {
        "code_elements": [
            "// Options: --externs externs/es3.js --property_renaming OFF --variable_renaming OFF --jscomp_warning=checkTypes --js=t.js",
            "// File: t.js",
            "/**",
            "* @interface",
            "*/",
            "var OtherType = function() {}",
            "/**",
            "* @implements {MyType}",
            "* @constructor",
            "*/",
            "var MyType = function() {}",
            "/**",
            "* @type {MyType}",
            "*/",
            "var x = /** @type {!OtherType} */ (new Object());"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Converting from an interface type to a constructor which @implements itself causes stack overflow."
        ],
        "desc_hints": [
            "PrototypeObjectType.isSubtype",
            "OtherType",
            "es3.js",
            "checkTypes",
            "MyType"
        ],
        "desc_text": [
            [
                "// Options: --externs externs/es3.js --property_renaming OFF --variable_renaming OFF --jscomp_warning=checkTypes --js=t.js",
                "CODE"
            ],
            ["// File: t.js", "CODE"],
            ["/**", "CODE"],
            ["* @interface", "CODE"],
            ["*/", "CODE"],
            ["var OtherType = function() {}", "CODE"],
            ["/**", "CODE"],
            ["* @implements {MyType}", "CODE"],
            ["* @constructor", "CODE"],
            ["*/", "CODE"],
            ["var MyType = function() {}", "CODE"],
            ["/**", "CODE"],
            ["* @type {MyType}", "CODE"],
            ["*/", "CODE"],
            ["var x = /** @type {!OtherType} */ (new Object());", "CODE"],
            ["Get Infinite recursion in:", ["OB"]],
            ["PrototypeObjectType.isSubtype @ 350", []],
            ["Options:", []],
            ["- prevent cycles in the inheritance/implements graph", []],
            [
                "- detect cycles after they are created and exit compilation before any subsequent passes run",
                []
            ],
            [
                "- detect and remove cycles after they are created but before any subsequent passes run",
                ["OB"]
            ],
            [
                "- make every subsequent pass robust against cycles in that graph",
                ["OB"]
            ]
        ]
    },
    "Closure-148": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["writingMode"],
        "summary_text": ["CSS3 'writingMode' not recognised in advanced mode"],
        "desc_hints": ["element.style", "element.style.writingMode"],
        "desc_text": [
            [
                "element.style.writingMode was defined in CSS3 but later dropped.",
                ["OB"]
            ],
            ["However it is supported by IE7 (possibly earlier).", ["OB"]],
            ["It's a useful way to achieve vertical text in IE.", ["OB"]],
            [
                "Closure Compiler will change references of element.style.writingMode to element.style.a, breaking implementation.",
                ["OB"]
            ],
            ["I've attached a patch adding this to the IE css properties.", []],
            ["Cheers,", []],
            ["Jake.", ["OB"]]
        ]
    },
    "JacksonDatabind-14": {
        "code_elements": [
            "import java.io.IOException;",
            "import org.junit.Assert;",
            "import org.junit.Test;",
            "import com.fasterxml.jackson.core.JsonParser;",
            "import com.fasterxml.jackson.core.JsonProcessingException;",
            "import com.fasterxml.jackson.core.JsonToken;",
            "import com.fasterxml.jackson.databind.DeserializationContext;",
            "import com.fasterxml.jackson.databind.JsonNode;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;",
            "import com.fasterxml.jackson.databind.module.SimpleModule;",
            "public class TestDeserTest {",
            "static class DataA {",
            "public int i = 1;",
            "public int j = 2;",
            "}",
            "static class DataB {",
            "public DataA da = new DataA();",
            "public int k = 3;",
            "}",
            "static class DataADeserializer extends StdDeserializer<DataA> {",
            "private static final long serialVersionUID = 1L;",
            "DataADeserializer() {",
            "super(DataA.class);",
            "}",
            "public DataA deserialize(JsonParser jp, DeserializationContext ctxt)",
            "throws JsonProcessingException, IOException {",
            "assert (jp.getCurrentToken() == JsonToken.START_OBJECT);",
            "JsonNode node = jp.getCodec().readTree(jp);",
            "DataA da = new DataA();",
            "da.i = 5;",
            "return da;",
            "}",
            "}",
            "@Test",
            "public void test() throws IOException {",
            "ObjectMapper mapper = new ObjectMapper();",
            "SimpleModule module = new SimpleModule();",
            "module.addDeserializer(DataA.class, new DataADeserializer());",
            "mapper.registerModule(module);",
            "DataB db = new DataB();",
            "db.da.i = 11;",
            "db.k = 13;",
            "String jsonBString = mapper.writeValueAsString(db);",
            "JsonNode jsonBNode = mapper.valueToTree(db);",
            "// create parent",
            "DataB dbNewViaString = mapper.readValue(jsonBString, DataB.class);",
            "Assert.assertEquals(5, dbNewViaString.da.i);",
            "Assert.assertEquals(13, dbNewViaString.k);",
            "DataB dbNewViaNode = mapper.treeToValue(jsonBNode, DataB.class);",
            "Assert.assertEquals(5, dbNewViaNode.da.i);",
            "Assert.assertEquals(13, dbNewViaNode.k);",
            "// update parent",
            "DataB dbUpdViaString = new DataB();",
            "DataB dbUpdViaNode = new DataB();",
            "Assert.assertEquals(1, dbUpdViaString.da.i);",
            "Assert.assertEquals(3, dbUpdViaString.k);",
            "mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);",
            "Assert.assertEquals(5, dbUpdViaString.da.i);",
            "Assert.assertEquals(13, dbUpdViaString.k);",
            "Assert.assertEquals(1, dbUpdViaNode.da.i);",
            "Assert.assertEquals(3, dbUpdViaNode.k);",
            "// FAILS HERE:",
            "mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);",
            "Assert.assertEquals(5, dbUpdViaNode.da.i);",
            "Assert.assertEquals(13, dbUpdViaNode.k);",
            "}",
            "}"
        ],
        "stack_traces": [
            "at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:51)",
            "at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:817)",
            "at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:954)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1324)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1302)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:249)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:136)",
            "at com.fasterxml.jackson.databind.ObjectReader._bindAsTree(ObjectReader.java:1478)",
            "at com.fasterxml.jackson.databind.ObjectReader.readTree(ObjectReader.java:1020)",
            "at myorg.TestDeserTest$DataADeserializer.deserialize(TestDeserTest.java:39)",
            "at myorg.TestDeserTest$DataADeserializer.deserialize(TestDeserTest.java:1)",
            "at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:523)",
            "at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)",
            "at com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(BeanPropertyMap.java:285)",
            "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:220)",
            "at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1443)",
            "at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1154)",
            "at myorg.TestDeserTest.test(TestDeserTest.java:81)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
            "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "at java.lang.reflect.Method.invoke(Method.java:606)",
            "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
            "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
            "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
            "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
            "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
            "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
            "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
            "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
            "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
            "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
            "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
            "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
            "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
            "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
            "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)"
        ],
        "summary_hints": [],
        "summary_text": ["Custom deserializer with parent object update"],
        "desc_hints": [
            "sun.reflect.NativeMethodAccessorImpl.invoke0",
            "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from",
            "JsonProcessingException",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "_bindAsTree",
            "TestExecution.java",
            "BeanDeserializer.java",
            "JsonParser",
            "ObjectReader.java",
            "InvokeMethod.java",
            "org.junit.runners.ParentRunner.runChildren",
            "com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty",
            "org.junit.runners.ParentRunner",
            "JsonToken.START_OBJECT",
            "DataA.class",
            "dbNewViaString.da",
            "myorg.TestDeserTest",
            "com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty",
            "mapper.readValue",
            "dbNewViaNode.da",
            "org.eclipse.jdt.internal.junit.runner.TestExecution.run",
            "myorg.DataB",
            "DelegatingMethodAccessorImpl.java",
            "RemoteTestRunner.java",
            "org.junit.runners.model.FrameworkMethod",
            "org.junit.runners.ParentRunner.run",
            "sun.reflect.DelegatingMethodAccessorImpl.invoke",
            "org.junit.runners.model.FrameworkMethod.invokeExplosively",
            "ParentRunner.java",
            "dbUpdViaNode.da",
            "FrameworkMethod.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize",
            "TestDeserTest.java",
            "SettableBeanProperty.java",
            "org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run",
            "com.fasterxml.jackson.databind.ObjectReader.readValue",
            "org.junit.runners.ParentRunner.access",
            "com.fasterxml.jackson.core.JsonParser",
            "BeanDeserializerBase.java",
            "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
            "StdDeserializer",
            "readValue",
            "java.io.IOException",
            "TestDeserTest",
            "jp.getCurrentToken",
            "jsonBString",
            "DeserializationContext.java",
            "Method.java",
            "com.fasterxml.jackson.databind.ObjectReader",
            "org.junit.internal.runners.model.ReflectiveCallable.run",
            "ReflectiveCallable.java",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "dbUpdViaString.da",
            "JUnit4TestReference.java",
            "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet",
            "jp.getCodec",
            "module.addDeserializer",
            "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main",
            "mapper.treeToValue",
            "org.junit.internal.runners.statements.InvokeMethod.evaluate",
            "com.fasterxml.jackson.databind.module.SimpleModule",
            "DataB.class",
            "org.junit.runners.BlockJUnit4ClassRunner.runChild",
            "StdDeserializer.java",
            "com.fasterxml.jackson.core.JsonProcessingException",
            "com.fasterxml.jackson.databind.JsonNode",
            "java.lang.reflect.Method.invoke",
            "org.junit.Test",
            "DeserializationContext",
            "runReflectiveCall",
            "FieldProperty.java",
            "Assert.assertEquals",
            "dbNewViaNode",
            "NativeMethodAccessorImpl.java",
            "com.fasterxml.jackson.core.JsonToken",
            "serialVersionUID",
            "BeanPropertyMap.java",
            "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException",
            "com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet",
            "org.junit.runners.ParentRunner.runLeaf",
            "mapper.valueToTree",
            "ObjectMapper",
            "UnrecognizedPropertyException.java",
            "sun.reflect.NativeMethodAccessorImpl.invoke",
            "readTree",
            "jsonBNode",
            "com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests",
            "dbNewViaString",
            "BlockJUnit4ClassRunner.java",
            "JsonNode",
            "com.fasterxml.jackson.databind.ObjectReader.readTree",
            "mapper.registerModule",
            "mapper.writeValueAsString",
            "SimpleModule",
            "org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run",
            "mapper.readerForUpdating",
            "_bindAndClose",
            "myorg.TestDeserTest.test",
            "DataADeserializer",
            "dbUpdViaNode",
            "DataADeserializer.deserialize",
            "org.junit.Assert",
            "dbUpdViaString"
        ],
        "desc_text": [
            ["Hi, I have custom deserializer for DataA.", []],
            [
                "An instance of DataA is contained in DataB, when updating an existing instance of DataB (as opposed to creating a new one) I get an exception when deserializing via a JsonNode object (deserializing via a String object works).",
                ["OB", "SR"]
            ],
            ["import java.io.IOException;", "CODE"],
            ["import org.junit.Assert;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["import com.fasterxml.jackson.core.JsonParser;", "CODE"],
            [
                "import com.fasterxml.jackson.core.JsonProcessingException;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.core.JsonToken;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.DeserializationContext;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.JsonNode;", "CODE"],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;",
                "CODE"
            ],
            [
                "import com.fasterxml.jackson.databind.module.SimpleModule;",
                "CODE"
            ],
            ["public class TestDeserTest {", "CODE"],
            ["static class DataA {", "CODE"],
            ["public int i = 1;", "CODE"],
            ["public int j = 2;", "CODE"],
            ["}", "CODE"],
            ["static class DataB {", "CODE"],
            ["public DataA da = new DataA();", "CODE"],
            ["public int k = 3;", "CODE"],
            ["}", "CODE"],
            [
                "static class DataADeserializer extends StdDeserializer<DataA> {",
                "CODE"
            ],
            ["private static final long serialVersionUID = 1L;", "CODE"],
            ["DataADeserializer() {", "CODE"],
            ["super(DataA.class);", "CODE"],
            ["}", "CODE"],
            [
                "public DataA deserialize(JsonParser jp, DeserializationContext ctxt)",
                "CODE"
            ],
            ["throws JsonProcessingException, IOException {", "CODE"],
            [
                "assert (jp.getCurrentToken() == JsonToken.START_OBJECT);",
                "CODE"
            ],
            ["JsonNode node = jp.getCodec().readTree(jp);", "CODE"],
            ["DataA da = new DataA();", "CODE"],
            ["da.i = 5;", "CODE"],
            ["return da;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void test() throws IOException {", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            ["SimpleModule module = new SimpleModule();", "CODE"],
            [
                "module.addDeserializer(DataA.class, new DataADeserializer());",
                "CODE"
            ],
            ["mapper.registerModule(module);", "CODE"],
            ["DataB db = new DataB();", "CODE"],
            ["db.da.i = 11;", "CODE"],
            ["db.k = 13;", "CODE"],
            ["String jsonBString = mapper.writeValueAsString(db);", "CODE"],
            ["JsonNode jsonBNode = mapper.valueToTree(db);", "CODE"],
            ["// create parent", "CODE"],
            [
                "DataB dbNewViaString = mapper.readValue(jsonBString, DataB.class);",
                "CODE"
            ],
            ["Assert.assertEquals(5, dbNewViaString.da.i);", "CODE"],
            ["Assert.assertEquals(13, dbNewViaString.k);", "CODE"],
            [
                "DataB dbNewViaNode = mapper.treeToValue(jsonBNode, DataB.class);",
                "CODE"
            ],
            ["Assert.assertEquals(5, dbNewViaNode.da.i);", "CODE"],
            ["Assert.assertEquals(13, dbNewViaNode.k);", "CODE"],
            ["// update parent", "CODE"],
            ["DataB dbUpdViaString = new DataB();", "CODE"],
            ["DataB dbUpdViaNode = new DataB();", "CODE"],
            ["Assert.assertEquals(1, dbUpdViaString.da.i);", "CODE"],
            ["Assert.assertEquals(3, dbUpdViaString.k);", "CODE"],
            [
                "mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);",
                "CODE"
            ],
            ["Assert.assertEquals(5, dbUpdViaString.da.i);", "CODE"],
            ["Assert.assertEquals(13, dbUpdViaString.k);", "CODE"],
            ["Assert.assertEquals(1, dbUpdViaNode.da.i);", "CODE"],
            ["Assert.assertEquals(3, dbUpdViaNode.k);", "CODE"],
            ["// FAILS HERE:", "CODE"],
            [
                "mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);",
                "CODE"
            ],
            ["Assert.assertEquals(5, dbUpdViaNode.da.i);", "CODE"],
            ["Assert.assertEquals(13, dbUpdViaNode.k);", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["The trace:", ["OB"]],
            [
                "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"i\" (class myorg.TestDeserTest$DataB), not marked as ignorable (2 known properties: \"da\", \"k\"])",
                []
            ],
            [
                "at [Source: N/A; line: -1, column: -1] (through reference chain: myorg.DataB[\"da\"]->myorg.DataB[\"i\"])",
                []
            ],
            [
                "at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:51)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:817)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:954)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1324)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1302)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:249)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:136)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectReader._bindAsTree(ObjectReader.java:1478)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectReader.readTree(ObjectReader.java:1020)",
                "STACK_TRACE"
            ],
            [
                "at myorg.TestDeserTest$DataADeserializer.deserialize(TestDeserTest.java:39)",
                "STACK_TRACE"
            ],
            [
                "at myorg.TestDeserTest$DataADeserializer.deserialize(TestDeserTest.java:1)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:523)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(BeanPropertyMap.java:285)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:220)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1443)",
                "STACK_TRACE"
            ],
            [
                "at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1154)",
                "STACK_TRACE"
            ],
            [
                "at myorg.TestDeserTest.test(TestDeserTest.java:81)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                "STACK_TRACE"
            ],
            [
                "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                "STACK_TRACE"
            ],
            [
                "at java.lang.reflect.Method.invoke(Method.java:606)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
                "STACK_TRACE"
            ],
            [
                "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)",
                "STACK_TRACE"
            ],
            [
                "at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)",
                "STACK_TRACE"
            ]
        ]
    },
    "Lang-16": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["NumberUtils"],
        "summary_text": [
            "NumberUtils does not handle upper-case hex: 0X and -0X"
        ],
        "desc_hints": [
            "NumberFormatException",
            "NumberUtils.createNumber",
            "Integer.decode"
        ],
        "desc_text": [
            [
                "NumberUtils.createNumber() should work equally for 0x1234 and 0X1234; currently 0X1234 generates a NumberFormatException",
                ["EB"]
            ],
            ["Integer.decode() handles both upper and lower case hex.", ["OB"]]
        ]
    },
    "Time-17": {
        "code_elements": [
            "TimeZone.setDefault(TimeZone.getTimeZone(\"America/Sao_Paulo\"));",
            "DateTimeZone.setDefault( DateTimeZone.forID(\"America/Sao_Paulo\") );",
            "dtch = new DateTime(2012,2,25,5,5,5,5).millisOfDay().withMaximumValue();",
            "//At this point dtch have the -03:00 offset",
            "dtch = dtch.plus(60001);",
            "//At this point dtch have the -03:00 offset",
            "dtch = dtch.withEarlierOffsetAtOverlap();",
            "//At this point dtch have the -02:00 offset ( because we called withEarlierOffsetAtOverlap() ) // This method is working perfectly",
            "dtch = dtch.withLaterOffsetAtOverlap();",
            "// Here is the problem we should have a -03:00 offset here since we called withLaterOffsetAtOverlap() expecting to change to the second 23:** of the day"
        ],
        "stack_traces": [],
        "summary_hints": ["withLaterOffsetAtOverlap"],
        "summary_text": ["#141 Bug on withLaterOffsetAtOverlap method"],
        "desc_hints": [
            "DateTimeZone.setDefault",
            "withMaximumValue",
            "dtch.withLaterOffsetAtOverlap",
            "TimeZone.setDefault",
            "withLaterOffsetAtOverlap",
            "withEarlierOffsetAtOverlap",
            "DateTime",
            "TimeZone.getTimeZone",
            "dtch.withEarlierOffsetAtOverlap",
            "millisOfDay",
            "DateTimeZone.forID",
            "System.out.println",
            "dtch.plus"
        ],
        "desc_text": [
            [
                "The method withLaterOffsetAtOverlap created to workaround the issue 3192457 seems to not be working at all.",
                ["OB"]
            ],
            [
                "I won\u00b4t write many info about the problem to solve because the issue 3192457 have this info indeed.",
                []
            ],
            [
                "But If something is unclear I can answer on the comments.",
                ["OB", "SR"]
            ],
            ["Problem demonstration:", []],
            [
                "TimeZone.setDefault(TimeZone.getTimeZone(\"America/Sao_Paulo\"));",
                "CODE"
            ],
            [
                "DateTimeZone.setDefault( DateTimeZone.forID(\"America/Sao_Paulo\") );",
                "CODE"
            ],
            ["DateTime dtch;", []],
            ["{", []],
            [
                "dtch = new DateTime(2012,2,25,5,5,5,5).millisOfDay().withMaximumValue();",
                "CODE"
            ],
            [
                "System.out.println( dtch ); // prints: 2012-02-25T23:59:59.999-02:00 //Were are at the first 23:** of the day.",
                ["OB"]
            ],
            ["//At this point dtch have the -03:00 offset", "CODE"],
            ["}", []],
            ["{", []],
            ["dtch = dtch.plus(60001);", "CODE"],
            [
                "System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-03:00 //Were are at the first minute of the second 23:** of the day.",
                ["OB"]
            ],
            ["Ok its correct", []],
            ["//At this point dtch have the -03:00 offset", "CODE"],
            ["}", []],
            ["{", []],
            ["dtch = dtch.withEarlierOffsetAtOverlap();", "CODE"],
            [
                "System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-02:00 //Were are at the first minute of the first 23:** of the day.",
                ["OB"]
            ],
            ["Ok its correct", []],
            [
                "//At this point dtch have the -02:00 offset ( because we called withEarlierOffsetAtOverlap() ) // This method is working perfectly",
                "CODE"
            ],
            ["}", []],
            ["{", []],
            ["dtch = dtch.withLaterOffsetAtOverlap();", "CODE"],
            [
                "System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-02:00 //Were are at the first minute of the first 23:** of the day.",
                ["OB"]
            ],
            [
                "// Here is the problem we should have a -03:00 offset here since we called withLaterOffsetAtOverlap() expecting to change to the second 23:** of the day",
                "CODE"
            ],
            ["}", []],
            [
                "On the last two brackets we can see that withLaterOffsetAtOverlap is not undoing withEarlierOffsetAtOverlap as it should ( and not even working at all )",
                ["OB", "EB"]
            ]
        ]
    },
    "Jsoup-58": {
        "code_elements": [
            "package jsoup;",
            "import junit.framework.Assert;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.parser.Parser;",
            "import org.jsoup.safety.Cleaner;",
            "import org.jsoup.safety.Whitelist;",
            "import org.junit.Test;",
            "import org.junit.runner.RunWith;",
            "import org.junit.runners.Parameterized;",
            "import java.util.Arrays;",
            "import java.util.Collection;",
            "public class JsoupTest",
            "{",
            "private String htmlFragment;",
            "public JsoupTest(String htmlFragment)",
            "{",
            "this.htmlFragment = htmlFragment;",
            "}",
            "@Parameterized.Parameters",
            "public static Collection<String[]> dirtyHtml()",
            "{",
            "String[][] htmlFragments = new String[][] { {\"<html></html>\"},",
            "{\"<head></head>\"},",
            "{\"<body></body>\"}",
            "};",
            "return Arrays.asList(htmlFragments);",
            "}",
            "@Test",
            "public void emptyWhitelistReturnsFalseForAllTags()",
            "{",
            "Assert.assertEquals(false, Jsoup.isValid(htmlFragment, new Whitelist()));",
            "}",
            "@Test",
            "public void whitelistNoneReturnsFalseForAllTags()",
            "{",
            "Assert.assertEquals(false, Jsoup.isValid(htmlFragment, Whitelist.none()));",
            "}",
            "@Test",
            "public void typicalWhitelistReturnsFalseForNonIncludedTags()",
            "{",
            "Whitelist whitelist = new Whitelist();",
            "whitelist.addTags(\"p\");",
            "Assert.assertEquals(false, Jsoup.isValid(htmlFragment, whitelist));",
            "}",
            "@Test",
            "public void codeFromSource()",
            "{",
            "Document dirty = Parser.parseBodyFragment(htmlFragment, \"\");",
            "Cleaner cleaner = new Cleaner(Whitelist.none());",
            "Assert.assertEquals(false, cleaner.isValid(dirty));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["htmlFragment", "Jsoup.isValid"],
        "summary_text": [
            "Jsoup.isValid returns true even when htmlFragment includes tags not on whitelist"
        ],
        "desc_hints": [
            "Assert.assertEquals",
            "junit.framework.Assert",
            "emptyWhitelistReturnsFalseForAllTags",
            "Parameterized.class",
            "Parameterized.Parameters",
            "whitelistNoneReturnsFalseForAllTags",
            "parseBodyFragment",
            "org.jsoup.safety.Cleaner",
            "org.junit.runners.Parameterized",
            "Parser.parseBodyFragment",
            "org.junit.runner.RunWith",
            "Jsoup.isValid",
            "JsoupTest",
            "org.jsoup.parser.Parser",
            "dirtyHtml",
            "org.jsoup.Jsoup",
            "RunWith",
            "codeFromSource",
            "this.htmlFragment",
            "whitelist.addTags",
            "htmlFragments",
            "java.util.Collection",
            "Whitelist.none",
            "typicalWhitelistReturnsFalseForNonIncludedTags",
            "java.util.Arrays",
            "cleaner.isValid",
            "org.junit.Test",
            "org.jsoup.safety.Whitelist",
            "htmlFragment",
            "Arrays.asList",
            "org.jsoup.nodes.Document"
        ],
        "desc_text": [
            [
                "Caused by Jsoup.isValid performing a destructive parse before testing for validity.",
                ["OB"]
            ],
            [
                "The html returned from parseBodyFragment is not what was passed in.",
                ["OB"]
            ],
            ["According to documentation, html, head tags etc.", ["OB"]],
            [
                "should be specifically added to whitelist if they should be allowed.",
                ["OB", "EB"]
            ],
            ["Test cases below.", ["OB", "SR"]],
            ["package jsoup;", "CODE"],
            ["import junit.framework.Assert;", "CODE"],
            ["import org.jsoup.Jsoup;", "CODE"],
            ["import org.jsoup.nodes.Document;", "CODE"],
            ["import org.jsoup.parser.Parser;", "CODE"],
            ["import org.jsoup.safety.Cleaner;", "CODE"],
            ["import org.jsoup.safety.Whitelist;", "CODE"],
            ["import org.junit.Test;", "CODE"],
            ["import org.junit.runner.RunWith;", "CODE"],
            ["import org.junit.runners.Parameterized;", "CODE"],
            ["import java.util.Arrays;", "CODE"],
            ["import java.util.Collection;", "CODE"],
            ["@RunWith(Parameterized.class)", []],
            ["public class JsoupTest", "CODE"],
            ["{", "CODE"],
            ["private String htmlFragment;", "CODE"],
            ["public JsoupTest(String htmlFragment)", "CODE"],
            ["{", "CODE"],
            ["this.htmlFragment = htmlFragment;", "CODE"],
            ["}", "CODE"],
            ["@Parameterized.Parameters", "CODE"],
            ["public static Collection<String[]> dirtyHtml()", "CODE"],
            ["{", "CODE"],
            [
                "String[][] htmlFragments = new String[][] { {\"<html></html>\"},",
                "CODE"
            ],
            ["{\"<head></head>\"},", "CODE"],
            ["{\"<body></body>\"}", "CODE"],
            ["};", "CODE"],
            ["return Arrays.asList(htmlFragments);", "CODE"],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void emptyWhitelistReturnsFalseForAllTags()", "CODE"],
            ["{", "CODE"],
            [
                "Assert.assertEquals(false, Jsoup.isValid(htmlFragment, new Whitelist()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void whitelistNoneReturnsFalseForAllTags()", "CODE"],
            ["{", "CODE"],
            [
                "Assert.assertEquals(false, Jsoup.isValid(htmlFragment, Whitelist.none()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            [
                "public void typicalWhitelistReturnsFalseForNonIncludedTags()",
                "CODE"
            ],
            ["{", "CODE"],
            ["Whitelist whitelist = new Whitelist();", "CODE"],
            ["whitelist.addTags(\"p\");", "CODE"],
            [
                "Assert.assertEquals(false, Jsoup.isValid(htmlFragment, whitelist));",
                "CODE"
            ],
            ["}", "CODE"],
            ["@Test", "CODE"],
            ["public void codeFromSource()", "CODE"],
            ["{", "CODE"],
            [
                "Document dirty = Parser.parseBodyFragment(htmlFragment, \"\");",
                "CODE"
            ],
            ["Cleaner cleaner = new Cleaner(Whitelist.none());", "CODE"],
            ["Assert.assertEquals(false, cleaner.isValid(dirty));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Lang-19": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["StringIndexOutOfBoundsException", "unescapeHtml4"],
        "summary_text": [
            "StringIndexOutOfBoundsException when calling unescapeHtml4(\"&#03\")"
        ],
        "desc_hints": [
            "org.apache.commons.lang3.text.translate.AggregateTranslator.translate",
            "java.lang.StringIndexOutOfBoundsException",
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate",
            "CharSequenceTranslator.java",
            "unescapeHtml4",
            "java.lang.String.charAt",
            "StringEscapeUtils.java",
            "org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4",
            "AggregateTranslator.java",
            "String.java",
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate",
            "NumericEntityUnescaper.java"
        ],
        "desc_text": [
            [
                "When calling unescapeHtml4() on the String \"&#03\" (or any String that contains these characters) an Exception is thrown:",
                ["OB", "SR"]
            ],
            [
                "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 4",
                []
            ],
            ["at java.lang.String.charAt(String.java:686)", []],
            [
                "at org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(NumericEntityUnescaper.java:49)",
                []
            ],
            [
                "at org.apache.commons.lang3.text.translate.AggregateTranslator.translate(AggregateTranslator.java:53)",
                []
            ],
            [
                "at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:88)",
                []
            ],
            [
                "at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:60)",
                []
            ],
            [
                "at org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(StringEscapeUtils.java:351)",
                []
            ]
        ]
    },
    "Closure-114": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @output_file_name default.js",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// ==/ClosureCompiler==",
            "var g=function(m){return m*Math.random()|0},d=document,h=d.getElementById('h'),c=d.getElementById('c'),l;",
            "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();",
            "// Store function in l var and call",
            "(l = function(){ ... })       ();",
            "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();",
            "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();"
        ],
        "stack_traces": [
            "Caused by: java.lang.IllegalStateException: Unexpected variable l",
            "... 58 more"
        ],
        "summary_hints": [],
        "summary_text": ["Crash on the web closure compiler"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "WebAppContext.java",
            "com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable",
            "com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter",
            "TraceContext.java",
            "Thread.java",
            "com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile",
            "org.mortbay.jetty.servlet.ServletHandler",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "compiler.appspot.com",
            "ServletHolder.java",
            "NodeTraversal.java",
            "com.google.tracing.CurrentContext.runInContext",
            "Bc.style.marginTop",
            "requestAnimationFrame",
            "Server.java",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "org.mortbay.jetty.HttpConnection",
            "RequestRunnable.run",
            "com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost",
            "TransactionCleanupFilter.java",
            "JavaRuntime.java",
            "java.lang.IllegalStateException",
            "org.mortbay.jetty.servlet.SessionHandler.handle",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch",
            "CompilationRequestHandler.java",
            "com.google.apphosting.utils.servlet.JdbcMySqlConnectionCleanupFilter.doFilter",
            "PhaseOptimizer.java",
            "SaveSessionFilter.java",
            "AbstractTraceContextCallback.runInInheritedContext",
            "com.google.javascript.jscomp.VarCheck.visit",
            "com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service",
            "NamedPass.process",
            "ContextHandler.java",
            "com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle",
            "com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest",
            "Bh.style.textShadow",
            "HttpConnection.java",
            "com.google.javascript.jscomp.NodeTraversal.traverseRoots",
            "HttpServlet.java",
            "AppVersionHandlerMap.java",
            "getElementById",
            "TraceContextRunnable",
            "default.js",
            "Math.random",
            "JdbcMySqlConnectionCleanupFilter.java",
            "JettyServletEngineAdapter.java",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest",
            "style.textShadow",
            "org.mortbay.jetty.security.SecurityHandler.handle",
            "7BrequestAnimationFrame",
            "addEventListener",
            "com.google.apphosting.runtime.JavaRuntime",
            "RequestHandler.headerComplete",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "TraceContextRunnable.run",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "SessionHandler.java",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "org.mortbay.jetty.webapp.WebAppContext.handle",
            "Compiler.java",
            "VarCheck.java",
            "ThreadGroupPool.java",
            "com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter",
            "org.mortbay.jetty.handler.HandlerWrapper.handle",
            "org.mortbay.jetty.HttpConnection.handle",
            "CachedChain.doFilter",
            "CompilationServlet.java",
            "org.mortbay.jetty.servlet.ServletHolder.handle",
            "HandlerWrapper.java",
            "SecurityHandler.java",
            "TraceContextRunnable.runInContext",
            "javax.servlet.http.HttpServlet.service",
            "com.google.tracing.TraceContext",
            "org.mortbay.jetty.HttpConnection.handleRequest",
            "com.google.javascript.jscomp.Compiler",
            "CurrentContext.java",
            "org.mortbay.jetty.Server.handle",
            "com.google.javascript.jscomp.VarCheck.process",
            "RpcRequestParser.java",
            "ClosureCompiler",
            "style.marginTop",
            "org.mortbay.jetty.servlet.ServletHandler.handle",
            "ServerController.java",
            "com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest",
            "com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter",
            "AbstractTraceContextCallback.runInInheritedContextNoUnref",
            "com.google.javascript.jscomp.Compiler.optimize",
            "ParseBlobUploadFilter.java",
            "org.mortbay.jetty.handler.ContextHandler.handle",
            "com.google.apphosting.runtime.ThreadGroupPool",
            "PoolEntry.run",
            "Dd.getElementById",
            "Ad.addEventListener",
            "CompilerInvokerImpl.java",
            "ServletHandler.java"
        ],
        "desc_text": [
            [
                "With the web application (http://closure-compiler.appspot.com/home)",
                []
            ],
            ["Config:", []],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["Code:", ["SR"]],
            [
                "var g=function(m){return m*Math.random()|0},d=document,h=d.getElementById('h'),c=d.getElementById('c'),l;",
                "CODE"
            ],
            [
                "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();",
                "CODE"
            ],
            [
                "d.addEventListener('mousemove',function(v){c.style.marginTop=(v.pageY/10+15|0)+'px'})",
                []
            ],
            ["Cause:", []],
            ["var l; // D\u00e9clare l variable", []],
            ["// Store function in l var and call", "CODE"],
            ["(l = function(){ ... })       ();", "CODE"],
            ["Crash repport: (long)", ["OB"]],
            [
                "23: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["Unexpected variable l", ["OB"]],
            ["Node(NAME l): Input_0:2:36", []],
            [
                "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();",
                "CODE"
            ],
            ["Parent(CALL): Input_0:2:14", []],
            [
                "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();",
                "CODE"
            ],
            [
                "at com.google.javascript.jscomp.VarCheck.visit(VarCheck.java:159)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:544)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:318)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:507)",
                []
            ],
            [
                "at com.google.javascript.jscomp.VarCheck.process(VarCheck.java:102)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:271)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:215)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1918)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:751)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:85)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:652)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:649)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:709)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:649)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Compiler.java:605)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile(CompilerInvokerImpl.java:47)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest(ServerController.java:174)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest(CompilationRequestHandler.java:180)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service(CompilationRequestHandler.java:162)",
                []
            ],
            [
                "at com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost(CompilationServlet.java:83)",
                []
            ],
            [
                "at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)",
                []
            ],
            [
                "at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)",
                []
            ],
            [
                "at com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter(ParseBlobUploadFilter.java:125)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter(SaveSessionFilter.java:35)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at com.google.apphosting.utils.servlet.JdbcMySqlConnectionCleanupFilter.doFilter(JdbcMySqlConnectionCleanupFilter.java:60)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)",
                []
            ],
            [
                "at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)",
                []
            ],
            [
                "at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)",
                []
            ],
            [
                "at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)",
                []
            ],
            [
                "at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle(AppVersionHandlerMap.java:266)",
                []
            ],
            [
                "at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)",
                []
            ],
            ["at org.mortbay.jetty.Server.handle(Server.java:326)", []],
            [
                "at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)",
                []
            ],
            [
                "at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable(RpcRequestParser.java:76)",
                []
            ],
            [
                "at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)",
                []
            ],
            [
                "at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:146)",
                []
            ],
            [
                "at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:439)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:435)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:442)",
                []
            ],
            [
                "at com.google.tracing.CurrentContext.runInContext(CurrentContext.java:186)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:306)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:298)",
                []
            ],
            [
                "at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:439)",
                []
            ],
            [
                "at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251)",
                []
            ],
            ["at java.lang.Thread.run(Thread.java:722)", []],
            [
                "Caused by: java.lang.IllegalStateException: Unexpected variable l",
                "STACK_TRACE"
            ],
            ["... 58 more", "STACK_TRACE"],
            ["Original Post Data:", []],
            [
                "output_format=json&output_info=compiled_code&output_info=warnings&output_info=errors&output_info=statistics&compilation_level=ADVANCED_OPTIMIZATIONS&warning_level=verbose&output_file_name=default.js&js_code=var%20g%3Dfunction(m)%7Breturn%20m*Math.random()%7C0%7D%2Cd%3Ddocument%2Ch%3Dd.getElementById('h')%2Cc%3Dd.getElementById('c')%2Cl%3B%0A(l%3Dfunction()%7BrequestAnimationFrame(l)%3Bh.style.textShadow%3D%220%200%201px%20%23000%2C%22%2B(g(10)-5)%2B%22px%20%22%2B(g(10)-5)%2B%22px%200%20%23888%2C0%200%20180px%20rgb(%22%2Bg(255)%2B%22%2C%22%2Bg(255)%2B%22%2C%22%2Bg(255)%2B%22)%22%7D)()%3B%0Ad.addEventListener('mousemove'%2Cfunction(v)%7Bc.style.marginTop%3D(v.pageY%2F10%2B15%7C0)%2B'px'%7D)",
                ["OB"]
            ]
        ]
    },
    "Cli-24": {
        "code_elements": [
            "Options options = new Options();",
            "options.addOption(\"h\", \"help\", false, \"This is a looooong description\");",
            "HelpFormatter formatter = new HelpFormatter();",
            "formatter.setWidth(20);"
        ],
        "stack_traces": [],
        "summary_hints": ["HelpFormatter"],
        "summary_text": ["infinite loop in the wrapping code of HelpFormatter"],
        "desc_hints": [
            "HelpFormatter",
            "OutOfMemoryError",
            "formatter.setWidth",
            "formatter.printHelp",
            "options.addOption"
        ],
        "desc_text": [
            [
                "If there is not enough space to display a word on a single line, HelpFormatter goes into a infinite loops until the JVM crashes with an OutOfMemoryError.",
                ["OB", "EB", "SR"]
            ],
            ["Test case:", []],
            ["Options options = new Options();", "CODE"],
            [
                "options.addOption(\"h\", \"help\", false, \"This is a looooong description\");",
                "CODE"
            ],
            ["HelpFormatter formatter = new HelpFormatter();", "CODE"],
            ["formatter.setWidth(20);", "CODE"],
            ["formatter.printHelp(\"app\", options); // hang & crash", ["OB"]],
            [
                "An helpful exception indicating the insufficient width would be more appropriate than an OutOfMemoryError.",
                ["OB"]
            ]
        ]
    },
    "Closure-95": {
        "code_elements": [
            "Glow = {};",
            "/** @public */ Glow.versions = [1,2,3];",
            "Glow.showVersions = function() { alert(Glow.versions); }",
            "// exports",
            "window['Glow'] = Glow;",
            "Glow['versions'] = Glow.versions;",
            "Glow['showVersions'] = Glow.showVersions;",
            "Glow = {};",
            "Glow.a = [1, 2, 3];",
            "Glow.b = function() { alert(Glow.a) };",
            "window.Glow = Glow;",
            "Glow.versions = Glow.a;",
            "Glow.versions = [4,5,6];",
            "Glow.showVersions();",
            "Glow = {};",
            "Glow.versions = [1, 2, 3];",
            "Glow.b = function() { alert(Glow.versions) };",
            "window.Glow = Glow;"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Use @public tag to prevent compression of symbol names"
        ],
        "desc_hints": [
            "JsDoc",
            "Glow.versions",
            "showVersions",
            "window.Glow",
            "Glow.showVersions"
        ],
        "desc_text": [
            ["Given this input code:", ["SR"]],
            ["Glow = {};", "CODE"],
            ["/** @public */ Glow.versions = [1,2,3];", "CODE"],
            [
                "Glow.showVersions = function() { alert(Glow.versions); }",
                "CODE"
            ],
            ["// exports", "CODE"],
            ["window['Glow'] = Glow;", "CODE"],
            ["Glow['versions'] = Glow.versions;", "CODE"],
            ["Glow['showVersions'] = Glow.showVersions;", "CODE"],
            [
                "The compiler (with ADVANCED_OPTIMIZATIONS on) will produce the following",
                ["OB", "SR"]
            ],
            ["output code:", []],
            ["Glow = {};", "CODE"],
            ["Glow.a = [1, 2, 3];", "CODE"],
            ["Glow.b = function() { alert(Glow.a) };", "CODE"],
            ["window.Glow = Glow;", "CODE"],
            ["Glow.versions = Glow.a;", "CODE"],
            ["Glow.showVersions = Glow.b", []],
            [
                "From outside the Glow library, a user may do the following (in their own,",
                []
            ],
            ["uncompressed code):", []],
            ["Glow.versions = [4,5,6];", "CODE"],
            ["Glow.showVersions();", "CODE"],
            [
                "Only in the compiled code will the user-code produces \"1,2,3\" instead of",
                ["OB"]
            ],
            ["the expected \"4,5,6\".", ["OB", "EB"]],
            ["This is because the compiler renamed the reference to", []],
            [
                "[1,2,3] in `showVersions()` to \"Glow.a\", whilst the user assigned a new",
                []
            ],
            [
                "array to \"Glow.versions\", and therefore the two different names now refer",
                ["OB", "SR"]
            ],
            ["to two different arrays.", ["OB"]],
            [
                "I can avoid this by using the stringy-name to refer to Glow[\"versions\"],",
                []
            ],
            [
                "but I would then have to do that everywhere in my code which is a annoying",
                ["SR"]
            ],
            [
                "and bug-prone (if I or someone else should ever forget).",
                ["EB"]
            ],
            ["I'd prefer to tell", []],
            [
                "the compiler once about my wish to have a property name left uncompresed,",
                []
            ],
            [
                "rather than relying on a side effect (the fact that the compiler won't",
                ["OB"]
            ],
            [
                "compress stringy-named properties) and then having to invoke that",
                ["SR"]
            ],
            ["side-effect consistently everywhere.", ["OB"]],
            [
                "Instead I'm requesting that when the compiler sees a property is marked by",
                ["OB"]
            ],
            [
                "the author as @public it should then leave that name uncompressed everywhere.",
                ["OB", "EB", "SR"]
            ],
            [
                "So, given the input code above, the desired output would be:",
                []
            ],
            ["Glow = {};", "CODE"],
            ["Glow.versions = [1, 2, 3];", "CODE"],
            ["Glow.b = function() { alert(Glow.versions) };", "CODE"],
            ["window.Glow = Glow;", "CODE"],
            ["Glow.versions = Glow.versions; // not needed now", []],
            ["Glow.showVersions = Glow.b", []],
            [
                "I'm not fixed on a particular tag, but @public seems an obvious choice, and",
                ["OB"]
            ],
            ["I'd prefer to use tags that already exist in JsDoc Toolkit.", []],
            [
                "Note that my proposed feature is different than the `@export Glow.versions`",
                []
            ],
            [
                "tag proposal, as that tag would merely be a shortcut for \"Glow['versions']",
                []
            ],
            [
                "= Glow.versions;\", which, as I've shown above, doesn't solve this problem.",
                []
            ]
        ]
    },
    "Closure-42": {
        "code_elements": [
            "contactcenter.screenpop.updatePopStatus = function(stamp, status) {",
            "for each ( var curTiming in this.timeLog.timings ) {",
            "if ( curTiming.callId == stamp ) {",
            "curTiming.flag = status;",
            "break;",
            "}",
            "}",
            "contactcenter.screenpop.updatePopStatus=function(stamp,status){for(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Simple \"Whitespace only\" compression removing \"each\" keyword from \"for each (var x in arr)\" loop"
        ],
        "desc_hints": [
            "this.timeLog.timings",
            "contactcenter.screenpop.updatePopStatus",
            "curTiming.flag",
            "curTiming",
            "curTiming.callId"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["See below code snippet before after compression", ["OB"]],
            ["---Before---", []],
            [
                "contactcenter.screenpop.updatePopStatus = function(stamp, status) {",
                "CODE"
            ],
            ["for each ( var curTiming in this.timeLog.timings ) {", "CODE"],
            ["if ( curTiming.callId == stamp ) {", "CODE"],
            ["curTiming.flag = status;", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["};", []],
            ["---After---", ["OB"]],
            [
                "contactcenter.screenpop.updatePopStatus=function(stamp,status){for(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};",
                "CODE"
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["---each keyword should be preserved", ["EB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Please provide any additional information below.", "QUERY"],
            ["for each (** in **) ---> returns object value", ["OB"]],
            ["for (** in **) --> returns index", ["OB"]]
        ]
    },
    "Lang-10": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["FastDateParser"],
        "summary_text": ["FastDateParser does not handle white-space properly"],
        "desc_hints": ["SimpleDateFormat", "FastDateParser"],
        "desc_text": [
            [
                "The SimpleDateFormat Javadoc does not treat white-space specially, however FastDateParser treats a single white-space as being any number of white-space characters.",
                ["OB"]
            ],
            [
                "This means that FDP will parse dates that fail when parsed by SDP.",
                ["OB"]
            ]
        ]
    },
    "Gson-10": {
        "code_elements": [
            "@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {",
            "this.part = part;",
            "}",
            "}",
            "+",
            "+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {",
            "+    Gson gson = new Gson();",
            "+    String json = gson.toJson(new GadgetWithPrimitivePart(42));",
            "+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);",
            "+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);",
            "+    assertEquals(42, gadget.part);",
            "+  }",
            "+",
            "+  private static final class GadgetWithPrimitivePart {",
            "+    @JsonAdapter(LongToStringTypeAdapterFactory.class)",
            "+    final long part;",
            "+",
            "+    private GadgetWithPrimitivePart(long part) {",
            "+      this.part = part;",
            "+    }",
            "+  }",
            "+",
            "+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {",
            "+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {",
            "+      @Override public void write(JsonWriter out, Long value) throws IOException {",
            "+        out.value(value.toString());",
            "+      }",
            "+      @SuppressWarnings(\"unchecked\")",
            "+      @Override public Long read(JsonReader in) throws IOException {",
            "+        return in.nextLong();",
            "+      }",
            "+    };",
            "+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {",
            "+      Class<?> cls = type.getRawType();",
            "+      if (Long.class.isAssignableFrom(cls)) {",
            "+        return (TypeAdapter<T>) ADAPTER;",
            "+      } else if (long.class.isAssignableFrom(cls)) {",
            "+        return (TypeAdapter<T>) ADAPTER;",
            "+      }",
            "+      throw new IllegalStateException(\"Non-long field of type \" + type",
            "+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");",
            "+    }",
            "+  }",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["JsonAdapter"],
        "summary_text": ["JsonAdapter annotation ignored for primitive fields"],
        "desc_hints": [
            "assertEquals",
            "gson.fromJson",
            "type.getRawType",
            "GadgetWithPrimitivePart.class",
            "LongToStringTypeAdapterFactory",
            "ReflectiveTypeAdapterFactory",
            "TypeToken",
            "JsonAdapterAnnotationOnFieldsTest.java",
            "this.part",
            "JsonWriter",
            "long.class.isAssignableFrom",
            "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
            "testPrimitiveFieldAnnotationTakesPrecedenceOverDefault",
            "SuppressWarnings",
            "LongToStringTypeAdapterFactory.class",
            "JsonAdapter",
            "gson.toJson",
            "TypeAdapter",
            "TypeAdapterFactory",
            "IllegalStateException",
            "gadget.part",
            "out.value",
            "JsonAdapterAnnotationOnFieldsTest",
            "JsonReader",
            "TestCase",
            "GadgetWithPrimitivePart",
            "in.nextLong",
            "TypeAdapterRuntimeTypeWrapper",
            "Long.class.isAssignableFrom",
            "value.toString"
        ],
        "desc_text": [
            [
                "ReflectiveTypeAdapterFactory correctly detects the @JsonAdapter annotation and registers the custom adapter (source), but its write method wraps that type adapter in a TypeAdapterRuntimeTypeWrapper (source), which overrides the adapter with the default Gson adapter (source).",
                ["OB", "SR"]
            ],
            ["Here's a test that demonstrates the behavior:", ["SR"]],
            [
                "diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest",
                []
            ],
            ["index 4c745ec..8cae980 100644", ["OB"]],
            [
                "--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
                []
            ],
            [
                "+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
                []
            ],
            [
                "@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {",
                "CODE"
            ],
            ["this.part = part;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["+", "CODE"],
            [
                "+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {",
                "CODE"
            ],
            ["+    Gson gson = new Gson();", "CODE"],
            [
                "+    String json = gson.toJson(new GadgetWithPrimitivePart(42));",
                "CODE"
            ],
            ["+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);", "CODE"],
            [
                "+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);",
                "CODE"
            ],
            ["+    assertEquals(42, gadget.part);", "CODE"],
            ["+  }", "CODE"],
            ["+", "CODE"],
            ["+  private static final class GadgetWithPrimitivePart {", "CODE"],
            ["+    @JsonAdapter(LongToStringTypeAdapterFactory.class)", "CODE"],
            ["+    final long part;", "CODE"],
            ["+", "CODE"],
            ["+    private GadgetWithPrimitivePart(long part) {", "CODE"],
            ["+      this.part = part;", "CODE"],
            ["+    }", "CODE"],
            ["+  }", "CODE"],
            ["+", "CODE"],
            [
                "+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {",
                "CODE"
            ],
            [
                "+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {",
                "CODE"
            ],
            [
                "+      @Override public void write(JsonWriter out, Long value) throws IOException {",
                "CODE"
            ],
            ["+        out.value(value.toString());", "CODE"],
            ["+      }", "CODE"],
            ["+      @SuppressWarnings(\"unchecked\")", "CODE"],
            [
                "+      @Override public Long read(JsonReader in) throws IOException {",
                "CODE"
            ],
            ["+        return in.nextLong();", "CODE"],
            ["+      }", "CODE"],
            ["+    };", "CODE"],
            [
                "+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {",
                "CODE"
            ],
            ["+      Class<?> cls = type.getRawType();", "CODE"],
            ["+      if (Long.class.isAssignableFrom(cls)) {", "CODE"],
            ["+        return (TypeAdapter<T>) ADAPTER;", "CODE"],
            ["+      } else if (long.class.isAssignableFrom(cls)) {", "CODE"],
            ["+        return (TypeAdapter<T>) ADAPTER;", "CODE"],
            ["+      }", "CODE"],
            [
                "+      throw new IllegalStateException(\"Non-long field of type \" + type",
                "CODE"
            ],
            [
                "+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");",
                "CODE"
            ],
            ["+    }", "CODE"],
            ["+  }", "CODE"],
            ["}", "CODE"],
            ["And here's the result of running it:", ["OB", "SR"]],
            ["[snip]", []],
            [
                "Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
                []
            ],
            [
                "Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!",
                []
            ],
            ["[snip]", []],
            ["Results :", ["OB"]],
            [
                "Failed tests: testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:<{\"part\":[\"42\"]}> but was:<{\"part\":[42]}>",
                []
            ],
            ["Tests run: 990, Failures: 1, Errors: 0, Skipped: 0", ["OB"]],
            ["Is this the intended behavior?", []],
            ["If so, JsonAdapter's documentation is a bit misleading.", []],
            ["If it's not, I unfortunately do not have a suggested fix.", []],
            [
                "I was actually a bit surprised to see that a new TypeAdapterRuntimeTypeWrapper object is constructed for each field that is serialized, on every serialization.",
                ["OB", "SR"]
            ],
            [
                "In case you would like to incorporate my test into Gson, I hereby assign copyright of that test to Google.",
                ["OB", "SR"]
            ],
            ["Thanks!", []]
        ]
    },
    "JacksonDatabind-9": {
        "code_elements": [
            "public void testMapWithClassAsKey() throws Exception {",
            "Map<Class<? extends Object>, String> map = new HashMap<>();",
            "map.put(ArrayList.class, \"ArrayList\");",
            "map.put(HashMap.class, \"HashMap\");",
            "ObjectMapper mapper = new ObjectMapper();",
            "String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);",
            "System.out.println(json);",
            "mapper.readValue(json, new TypeReference<Map<Class<? extends Object>, String>>(){});",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Deserializing Map<Class<? extends Object>, String>"],
        "desc_hints": [
            "HashMap.class",
            "KeyDeserializer",
            "writeValueAsString",
            "com.fasterxml.jackson.databind.exc.InvalidFormatException",
            "ArrayList.class",
            "ArrayList",
            "java.lang.Class",
            "mapper.readValue",
            "HashMap",
            "ObjectMapper",
            "java.util.HashMap",
            "TypeReference",
            "mapper.writerWithDefaultPrettyPrinter",
            "java.util.ArrayList",
            "testMapWithClassAsKey",
            "System.out.println",
            "map.put"
        ],
        "desc_text": [
            ["I am having problems deserializing my Map<Class<?", []],
            ["extends Object>, String>.", ["OB"]],
            ["Simple test case demonstrates it:", ["SR"]],
            ["@Test", []],
            ["public void testMapWithClassAsKey() throws Exception {", "CODE"],
            [
                "Map<Class<? extends Object>, String> map = new HashMap<>();",
                "CODE"
            ],
            ["map.put(ArrayList.class, \"ArrayList\");", "CODE"],
            ["map.put(HashMap.class, \"HashMap\");", "CODE"],
            ["ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);",
                "CODE"
            ],
            ["System.out.println(json);", "CODE"],
            [
                "mapper.readValue(json, new TypeReference<Map<Class<? extends Object>, String>>(){});",
                "CODE"
            ],
            ["}", "CODE"],
            ["This test serializes the map as:", []],
            ["{", []],
            ["\"class java.util.ArrayList\" : \"ArrayList\",", []],
            ["\"class java.util.HashMap\" : \"HashMap\"", []],
            ["}", "CODE"],
            ["mapper.readValue(json, new TypeReference<Map<Class<?", []],
            [
                "extends Object>, String>>(){}); then throws a Exception:",
                ["OB"]
            ],
            [
                "com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct   Map key of type java.lang.Class from String \"class java.util.ArrayList\": not a valid representation: Can not construct Map key of type java.lang.Class from String \"class java.util.ArrayList\": unable to parse key as Class",
                ["OB"]
            ],
            ["at [Source: ...", []],
            [
                "As i understood from #630 the KeyDeserializer for Class should be part of Jackson.",
                ["OB", "EB"]
            ],
            ["Am I missing something?", []]
        ]
    },
    "Closure-149": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Add option to turn off string escaping"],
        "desc_hints": ["code.google.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "I'm having large files with strings (patterns for hyphenation, see http://code.google.com/p/hyphenator/) and no-ASCII-characters.",
                ["OB", "SR"]
            ],
            ["2.", ["OB", "SR"]],
            ["Minifying with closure compiler makes them bigger", []],
            ["ru.js (orig): 41'216 Bytes", []],
            ["ru.js (orig, gzip): 17'124 Bytes", []],
            ["ru.js (mini): 110'770 Bytes", []],
            ["ru.js (mini, gzip): 18'860 Bytes", []],
            ["What is the expected output?", "QUERY"],
            [
                "I'd like to be able to turn OFF the string escaping mechanism.",
                ["OB", "EB"]
            ],
            ["Thanks", []]
        ]
    },
    "Lang-36": {
        "code_elements": [
            "if (chars[i] == '.') {",
            "if (hasDecPoint || hasExp)",
            "{",
            "// two decimal points or dec in exponent",
            "return false;",
            "}",
            "return foundDigit; // single trailing decimal point after non-exponent is ok",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["NumberUtils.isNumber"],
        "summary_text": [
            "NumberUtils.isNumber() Should Return True for Valid Number with a Trailing Decimal Place"
        ],
        "desc_hints": [
            "hasExp",
            "NumberUtils.isNumber",
            "foundDigit",
            "hasDecPoint",
            "BigDecimal"
        ],
        "desc_text": [
            [
                "NumberUtils.isNumber() should return true for a valid number ending in a trailing decimal place; e.g., \"2.\" should be considered a number because new BigDecimal(\"2.\") works fine.",
                ["OB", "EB", "SR"]
            ],
            [
                "This could be done by adding the code below after line 1444, which is the if (chars[i] == 'e' || chars[i] == 'E') block.",
                []
            ],
            ["if (chars[i] == '.') {", "CODE"],
            ["if (hasDecPoint || hasExp)", "CODE"],
            ["{", "CODE"],
            ["// two decimal points or dec in exponent", "CODE"],
            ["return false;", "CODE"],
            ["}", "CODE"],
            [
                "return foundDigit; // single trailing decimal point after non-exponent is ok",
                "CODE"
            ],
            ["}", "CODE"]
        ]
    },
    "Jsoup-30": {
        "code_elements": [
            "private int num = 1;",
            "/**",
            "* Iterates the input and copies trusted nodes (tags, attributes, text) into",
            "* the destination.",
            "*",
            "* @param source",
            "*            source of HTML",
            "* @param dest",
            "*            destination element to copy into",
            "* @return number of discarded elements (that were considered unsafe)",
            "*/",
            "private int copySafeNodes(Element source, Element dest) {",
            "List<Node> sourceChildren = source.childNodes();",
            "int numDiscarded = 0;",
            "for (Node sourceChild : sourceChildren) {",
            "num++;",
            "logger.info(num);",
            "if (num > 2000) {",
            "//break this tag.",
            "break;",
            "}",
            "if (sourceChild instanceof Element) {",
            "Element sourceEl = (Element) sourceChild;",
            "if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone",
            "// and copy safe",
            "// attrs",
            "ElementMeta meta = createSafeElement(sourceEl);",
            "Element destChild = meta.el;",
            "dest.appendChild(destChild);",
            "numDiscarded += meta.numAttribsDiscarded;",
            "numDiscarded += copySafeNodes(sourceEl, destChild); // recurs",
            "} else { // not a safe tag, but it may have children (els or",
            "// text) that are, so recurse",
            "numDiscarded++;",
            "numDiscarded += copySafeNodes(sourceEl, dest);",
            "}",
            "} else if (sourceChild instanceof TextNode) {",
            "TextNode sourceText = (TextNode) sourceChild;",
            "TextNode destText = new TextNode(sourceText.getWholeText(),",
            "sourceChild.baseUri());",
            "dest.appendChild(destText);",
            "} // else, we don't care about comments, xml proc instructions, etc",
            "}",
            "return numDiscarded;",
            "}"
        ],
        "stack_traces": [
            "Caused by: java.lang.StackOverflowError",
            "at org.jsoup.safety.Whitelist.isSafeTag(Whitelist.java:323)",
            "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:115)",
            "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
            "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
            "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
            "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)"
        ],
        "summary_hints": ["java.lang.StackOverflowError", "Jsoup.clean"],
        "summary_text": [
            "Jsoup.clean sometimes will throw execution exception:java.lang.StackOverflowError"
        ],
        "desc_hints": [
            "blog.sina.com.cn",
            "Whitelist.java",
            "meta.el",
            "source.childNodes",
            "sourceText.getWholeText",
            "meta.numAttribsDiscarded",
            "Cleaner.java",
            "java.util.concurrent.ExecutionException",
            "sourceChildren",
            "java.lang.StackOverflowError",
            "sourceChild.baseUri",
            "org.jsoup.safety.Cleaner",
            "numDiscarded",
            "sourceEl.tagName",
            "org.jsoup.safety.Cleaner.copySafeNodes",
            "destChild",
            "dest.appendChild",
            "sourceText",
            "createSafeElement",
            "sourceEl",
            "ElementMeta",
            "blog_501a5b1f0102dx6z.html",
            "whitelist.isSafeTag",
            "org.jsoup.safety.Whitelist.isSafeTag",
            "TextNode",
            "logger.info",
            "copySafeNodes",
            "sourceChild",
            "destText"
        ],
        "desc_text": [
            [
                "[ ERROR ] throw execution exception:java.lang.StackOverflowError",
                ["OB"]
            ],
            [
                "java.util.concurrent.ExecutionException: java.lang.StackOverflowError",
                []
            ],
            ["Caused by: java.lang.StackOverflowError", "STACK_TRACE"],
            [
                "at org.jsoup.safety.Whitelist.isSafeTag(Whitelist.java:323)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:115)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
                "STACK_TRACE"
            ],
            [
                "at org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)",
                "STACK_TRACE"
            ],
            [
                "clean the url:http://blog.sina.com.cn/s/blog_501a5b1f0102dx6z.html",
                []
            ],
            [
                "It's have to much wbr tags,when i search the page source ,found 24205.",
                ["OB"]
            ],
            [
                "i look at org.jsoup.safety.Cleaner source code and add code like this",
                []
            ],
            ["private int num = 1;", "CODE"],
            ["/**", "CODE"],
            [
                "* Iterates the input and copies trusted nodes (tags, attributes, text) into",
                "CODE"
            ],
            ["* the destination.", "CODE"],
            ["*", "CODE"],
            ["* @param source", "CODE"],
            ["*            source of HTML", "CODE"],
            ["* @param dest", "CODE"],
            ["*            destination element to copy into", "CODE"],
            [
                "* @return number of discarded elements (that were considered unsafe)",
                "CODE"
            ],
            ["*/", "CODE"],
            [
                "private int copySafeNodes(Element source, Element dest) {",
                "CODE"
            ],
            ["List<Node> sourceChildren = source.childNodes();", "CODE"],
            ["int numDiscarded = 0;", "CODE"],
            ["for (Node sourceChild : sourceChildren) {", "CODE"],
            ["num++;", "CODE"],
            ["logger.info(num);", "CODE"],
            ["if (num > 2000) {", "CODE"],
            ["//break this tag.", "CODE"],
            ["break;", "CODE"],
            ["}", "CODE"],
            ["if (sourceChild instanceof Element) {", "CODE"],
            ["Element sourceEl = (Element) sourceChild;", "CODE"],
            [
                "if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone",
                "CODE"
            ],
            ["// and copy safe", "CODE"],
            ["// attrs", "CODE"],
            ["ElementMeta meta = createSafeElement(sourceEl);", "CODE"],
            ["Element destChild = meta.el;", "CODE"],
            ["dest.appendChild(destChild);", "CODE"],
            ["numDiscarded += meta.numAttribsDiscarded;", "CODE"],
            [
                "numDiscarded += copySafeNodes(sourceEl, destChild); // recurs",
                "CODE"
            ],
            [
                "} else { // not a safe tag, but it may have children (els or",
                "CODE"
            ],
            ["// text) that are, so recurse", "CODE"],
            ["numDiscarded++;", "CODE"],
            ["numDiscarded += copySafeNodes(sourceEl, dest);", "CODE"],
            ["}", "CODE"],
            ["} else if (sourceChild instanceof TextNode) {", "CODE"],
            ["TextNode sourceText = (TextNode) sourceChild;", "CODE"],
            [
                "TextNode destText = new TextNode(sourceText.getWholeText(),",
                "CODE"
            ],
            ["sourceChild.baseUri());", "CODE"],
            ["dest.appendChild(destText);", "CODE"],
            [
                "} // else, we don't care about comments, xml proc instructions, etc",
                "CODE"
            ],
            ["}", "CODE"],
            ["return numDiscarded;", "CODE"],
            ["}", "CODE"],
            [
                "but the clean result will be wrong and The layout will be chaos.",
                ["OB"]
            ],
            ["How can I solve this problem?", []]
        ]
    },
    "Math-60": {
        "code_elements": [
            "public void testCumulative() {",
            "final NormalDistribution nd = new NormalDistributionImpl();",
            "for (int i = 0; i < 500; i++) {",
            "final double val = Math.exp;",
            "try",
            "{",
            "System.out.println(\"val = \" + val + \" cumulative = \" + nd.cumulativeProbability(val));",
            "}",
            "catch (MathException e)",
            "{",
            "e.printStackTrace();",
            "fail();",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [
            "ConvergenceException",
            "NormalDistributionImpl.cumulativeProbability"
        ],
        "summary_text": [
            "ConvergenceException in NormalDistributionImpl.cumulativeProbability()"
        ],
        "desc_hints": [
            "Math.exp",
            "NormalDistributionImpl",
            "MaxIterationsExceededException",
            "NormalDistributionImpl.cumulativeProbability",
            "testCumulative",
            "MathException",
            "ConvergenceException",
            "NormalDistribution",
            "nd.cumulativeProbability",
            "printStackTrace",
            "System.out.println",
            "cumulativeProbability"
        ],
        "desc_text": [
            [
                "I get a ConvergenceException in NormalDistributionImpl.cumulativeProbability() for very large/small parameters including Infinity, -Infinity.",
                ["OB"]
            ],
            ["For instance in the following code:", ["OB", "SR"]],
            ["@Test", []],
            ["public void testCumulative() {", "CODE"],
            [
                "final NormalDistribution nd = new NormalDistributionImpl();",
                "CODE"
            ],
            ["for (int i = 0; i < 500; i++) {", "CODE"],
            ["final double val = Math.exp;", "CODE"],
            ["try", "CODE"],
            ["{", "CODE"],
            [
                "System.out.println(\"val = \" + val + \" cumulative = \" + nd.cumulativeProbability(val));",
                "CODE"
            ],
            ["}", "CODE"],
            ["catch (MathException e)", "CODE"],
            ["{", "CODE"],
            ["e.printStackTrace();", "CODE"],
            ["fail();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["In version 2.0, I get no exception.", ["OB"]],
            [
                "My suggestion is to change in the implementation of cumulativeProbability(double) to catch all ConvergenceException (and return for very large and very small values), not just MaxIterationsExceededException.",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonDatabind-81": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Add support for handling primitive/discrepancy problem with type refinements"
        ],
        "desc_hints": ["java.lang.Integer", "FasterXML"],
        "desc_text": [
            [
                "(note: derived from FasterXML/jackson-module-jaxb-annotations#64)",
                []
            ],
            [
                "The problem is that although int and java.lang.Integer are related, logically, they are not related by inheritance (or implementation).",
                ["OB"]
            ],
            [
                "Since some legacy code may try refinements in this axis it'd be nice to handle this somehow.",
                []
            ],
            ["Two basic approaches would be:", []],
            [
                "Just ignore primitive/wrapper override, return original type as is",
                ["OB"]
            ],
            ["Allow wrapper to \"refine\" primitive, return wrapper.", ["OB"]],
            [
                "There is also related question of whether to allow \"int to long\" and similar refinements, but start with basics.",
                ["OB"]
            ]
        ]
    },
    "Closure-96": {
        "code_elements": [
            "//-------------------------------------",
            "// ==ClosureCompiler==",
            "// @compilation_level SIMPLE_OPTIMIZATIONS",
            "// @warning_level VERBOSE",
            "// @output_file_name default.js",
            "// @formatting pretty_print",
            "// ==/ClosureCompiler==",
            "/**",
            "* @param {...string} var_args",
            "*/",
            "function foo(var_args) {",
            "return arguments.length;",
            "}",
            "//-------------------------------------"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Missing type-checks for var_args notation"],
        "desc_hints": ["ClosureCompiler", "default.js", "arguments.length"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile this:", []],
            ["//-------------------------------------", "CODE"],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level SIMPLE_OPTIMIZATIONS", "CODE"],
            ["// @warning_level VERBOSE", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @formatting pretty_print", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["/**", "CODE"],
            ["* @param {...string} var_args", "CODE"],
            ["*/", "CODE"],
            ["function foo(var_args) {", "CODE"],
            ["return arguments.length;", "CODE"],
            ["}", "CODE"],
            ["foo('hello'); // no warning - ok", []],
            ["foo(123); // warning - ok", []],
            ["foo('hello', 123); // no warning!", []],
            ["error.", ["OB"]],
            ["//-------------------------------------", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            [
                "Should get a type-mismatch warning for the second parameter in the third foo() call.",
                ["OB", "EB"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Both online compiler and the 20100616 release.", ["OB"]],
            ["Please provide any additional information below.", "QUERY"],
            [
                "Seems like the type-checker treats 'var_args' as a single param and thus fails to type check the subsequent parameters.",
                ["OB", "SR"]
            ],
            ["// Fredrik", []]
        ]
    },
    "Time-10": {
        "code_elements": [
            "final LocalDate january12012 = new LocalDate(2012, 1,1);",
            "final LocalDate february292012 = new LocalDate(2012, 2, 29);",
            "// OK",
            "assertEquals(59, Days.daysBetween(january12012, february292012).getDays());",
            "final MonthDay january1 = new MonthDay(1,1);",
            "final MonthDay february29 = new MonthDay(2, 29);",
            "// FAIL",
            "assertEquals(59, Days.daysBetween(january1, february29).getDays());"
        ],
        "stack_traces": [
            "at org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:217)",
            "at org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)",
            "at org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)",
            "at org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:103)",
            "at org.joda.time.Days.daysBetween(Days.java:141)"
        ],
        "summary_hints": ["MonthDay", "daysBetween"],
        "summary_text": [
            "Days#daysBetween throw exception for MonthDay with 29 February"
        ],
        "desc_hints": [
            "PreciseDurationDateTimeField.java",
            "assertEquals",
            "FieldUtils.java",
            "org.joda.time.IllegalFieldValueException",
            "Days.java",
            "LocalDate",
            "getDays",
            "MonthDay",
            "org.joda.time.Days.daysBetween",
            "BaseChronology.java",
            "dayOfMonth",
            "BaseSingleFieldPeriod.java",
            "org.joda.time.base.BaseSingleFieldPeriod.between",
            "org.joda.time.field.PreciseDurationDateTimeField.set",
            "org.joda.time.chrono.BaseChronology.set",
            "Days.daysBetween",
            "org.joda.time.field.FieldUtils.verifyValueBounds"
        ],
        "desc_text": [
            [
                "final LocalDate january12012 = new LocalDate(2012, 1,1);",
                "CODE"
            ],
            [
                "final LocalDate february292012 = new LocalDate(2012, 2, 29);",
                "CODE"
            ],
            ["// OK", "CODE"],
            [
                "assertEquals(59, Days.daysBetween(january12012, february292012).getDays());",
                "CODE"
            ],
            ["final MonthDay january1 = new MonthDay(1,1);", "CODE"],
            ["final MonthDay february29 = new MonthDay(2, 29);", "CODE"],
            ["// FAIL", "CODE"],
            [
                "assertEquals(59, Days.daysBetween(january1, february29).getDays());",
                "CODE"
            ],
            [
                "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
                []
            ],
            [
                "at org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:217)",
                "STACK_TRACE"
            ],
            [
                "at org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)",
                "STACK_TRACE"
            ],
            [
                "at org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)",
                "STACK_TRACE"
            ],
            [
                "at org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:103)",
                "STACK_TRACE"
            ],
            ["at org.joda.time.Days.daysBetween(Days.java:141)", "STACK_TRACE"],
            ["Is there a way to avoid this happening?", []],
            [
                "I understand fiddling around with the leap year, you're bound to get issues.",
                ["OB"]
            ],
            ["Thanks!", []]
        ]
    },
    "Math-1": {
        "code_elements": [
            "double d = 0.5000000001;",
            "Fraction f = new Fraction(d, 10);"
        ],
        "stack_traces": [],
        "summary_hints": ["maxDenominator"],
        "summary_text": [
            "Fraction specified with maxDenominator and a value very close to a simple fraction should not throw an overflow exception"
        ],
        "desc_hints": ["maxDenominator"],
        "desc_text": [
            [
                "An overflow exception is thrown when a Fraction is initialized with a maxDenominator from a double that is very close to a simple",
                ["OB", "SR"]
            ],
            ["fraction.", ["OB"]],
            ["For example:", ["OB", "SR"]],
            ["double d = 0.5000000001;", "CODE"],
            ["Fraction f = new Fraction(d, 10);", "CODE"],
            ["Patch with unit test on way.", ["OB", "SR"]]
        ]
    },
    "JacksonDatabind-63": {
        "code_elements": [
            "import com.fasterxml.jackson.annotation.JsonCreator;",
            "import com.fasterxml.jackson.annotation.JsonProperty;",
            "import com.fasterxml.jackson.databind.JsonMappingException;",
            "import com.fasterxml.jackson.databind.ObjectMapper;",
            "import org.junit.jupiter.api.Test;",
            "import java.io.IOException;",
            "import static com.google.common.truth.Truth.assertThat;",
            "import static org.junit.jupiter.api.Assertions.expectThrows;",
            "public class ReferenceChainTest {",
            "// illustrates that jackson's \"reference chain\" help-text uses incorrect class-names for inner classes",
            "@Test public void incorrectReferenceChain() throws IOException {",
            "JsonMappingException jsonMappingException = expectThrows(JsonMappingException.class, () -> {",
            "ObjectMapper objectMapper = new ObjectMapper();",
            "objectMapper.readValue(objectMapper.writeValueAsBytes(new Outer()), Outer.class);",
            "});",
            "JsonMappingException.Reference reference = jsonMappingException.getPath().get(0);",
            "assertThat(reference.toString()).isEqualTo(\"ReferenceChainTest$Outer[\\\"inner\\\"]\");",
            "}",
            "static class Outer {",
            "public Inner inner = new Inner();",
            "}",
            "static class Inner {",
            "public int x;",
            "@JsonCreator public static Inner create(@JsonProperty(\"x\") int x) {",
            "throw new RuntimeException(\"test-exception\");",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Reference-chain hints use incorrect class-name for inner classes"
        ],
        "desc_hints": [
            "JsonProperty",
            "org.junit.jupiter.api.Test",
            "JsonMappingException",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "JsonMappingException.Reference",
            "objectMapper.readValue",
            "reference.toString",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "ReferenceChainTest",
            "JsonMappingException.class",
            "ObjectMapper",
            "Outer.class",
            "jsonMappingException.getPath",
            "com.google.common.truth.Truth.assertThat",
            "org.junit.jupiter.api.Assertions.expectThrows",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "assertThat",
            "isEqualTo",
            "java.io.IOException",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "expectThrows",
            "jsonMappingException",
            "incorrectReferenceChain",
            "objectMapper",
            "RuntimeException",
            "JsonCreator",
            "objectMapper.writeValueAsBytes"
        ],
        "desc_text": [
            ["import com.fasterxml.jackson.annotation.JsonCreator;", "CODE"],
            ["import com.fasterxml.jackson.annotation.JsonProperty;", "CODE"],
            [
                "import com.fasterxml.jackson.databind.JsonMappingException;",
                "CODE"
            ],
            ["import com.fasterxml.jackson.databind.ObjectMapper;", "CODE"],
            ["import org.junit.jupiter.api.Test;", "CODE"],
            ["import java.io.IOException;", "CODE"],
            ["import static com.google.common.truth.Truth.assertThat;", "CODE"],
            [
                "import static org.junit.jupiter.api.Assertions.expectThrows;",
                "CODE"
            ],
            ["public class ReferenceChainTest {", "CODE"],
            [
                "// illustrates that jackson's \"reference chain\" help-text uses incorrect class-names for inner classes",
                "CODE"
            ],
            [
                "@Test public void incorrectReferenceChain() throws IOException {",
                "CODE"
            ],
            [
                "JsonMappingException jsonMappingException = expectThrows(JsonMappingException.class, () -> {",
                "CODE"
            ],
            ["ObjectMapper objectMapper = new ObjectMapper();", "CODE"],
            [
                "objectMapper.readValue(objectMapper.writeValueAsBytes(new Outer()), Outer.class);",
                "CODE"
            ],
            ["});", "CODE"],
            [
                "JsonMappingException.Reference reference = jsonMappingException.getPath().get(0);",
                "CODE"
            ],
            [
                "assertThat(reference.toString()).isEqualTo(\"ReferenceChainTest$Outer[\\\"inner\\\"]\");",
                "CODE"
            ],
            ["}", "CODE"],
            ["static class Outer {", "CODE"],
            ["public Inner inner = new Inner();", "CODE"],
            ["}", "CODE"],
            ["static class Inner {", "CODE"],
            ["public int x;", "CODE"],
            [
                "@JsonCreator public static Inner create(@JsonProperty(\"x\") int x) {",
                "CODE"
            ],
            ["throw new RuntimeException(\"test-exception\");", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "JacksonDatabind-108": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ObjectMapper.readTree"],
        "summary_text": [
            "Change of behavior (2.8 -> 2.9) with ObjectMapper.readTree(input) with no content"
        ],
        "desc_hints": [
            "DeserializationFeature.FAIL_ON_TRAILING_TOKENS",
            "JsonParser",
            "NullNode",
            "ObjectReader",
            "MissingNode",
            "ObjectMapper",
            "readTree"
        ],
        "desc_text": [
            [
                "So, it looks like readTree() methods in ObjectMapper, ObjectReader that take input OTHER than JsonParser, and are given \"empty input\" (only white-space available before end), will",
                ["OB"]
            ],
            ["Return NullNode (Jackson 2.x up to and including 2.8)", []],
            ["Return null (Jackson 2.9)", ["OB"]],
            [
                "Latter behavior is what readTree(JsonParser) has and will do; but this accidentally changed other methods due to refactoring that unified underlying call handling (and add checking for new DeserializationFeature.FAIL_ON_TRAILING_TOKENS).",
                []
            ],
            [
                "Behavior for this edge case was not being tested, apparently.",
                ["OB"]
            ],
            [
                "Now: since behavior has been changed for all 2.9.x patch versions, I am not sure it should be changed for 2.9 branch.",
                ["EB"]
            ],
            [
                "But it seems sub-optimal as behavior, and something to definitely change for 3.0...",
                ["OB"]
            ],
            ["but probably also for 2.10.", ["OB"]],
            ["There are multiple things we could do.", []],
            ["Change it back to 2.8, to return NullNode", ["OB"]],
            ["Change to throw exception, as \"not valid\" use case", ["OB"]],
            ["Change it to return MissingNode", ["OB"]],
            ["Leave as-is, for rest of 2.x.", ["OB"]],
            [
                "Although it might seem best to revert it to (1), that seems somewhat wrong, problematic, as it would now not be possible to distinguish between JSON null value and missing content.",
                ["OB"]
            ],
            [
                "And although (2) would probably make sense, if designing API from scratch, it is probably too intrusive.",
                []
            ],
            [
                "So I think (3) is the best way: it avoids returning null or throwing Exception (both being likely to break 2.9 code), but still allows distinguishing between all possible input cases.",
                ["OB", "SR"]
            ]
        ]
    },
    "Math-53": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Complex Add and Subtract handle NaN arguments differently, but javadoc contracts are the same"
        ],
        "desc_hints": ["java.lang.Double", "Complex.NaN", "isNaN"],
        "desc_text": [
            [
                "For both Complex add and subtract, the javadoc states that",
                ["OB"]
            ],
            [
                "* If either this or <code>rhs</code> has a NaN value in either part,",
                []
            ],
            [
                "* {@link #NaN} is returned; otherwise Inifinite and NaN values are",
                []
            ],
            [
                "* returned in the parts of the result according to the rules for",
                ["OB"]
            ],
            ["* {@link java.lang.Double} arithmetic", []],
            [
                "Subtract includes an isNaN test and returns Complex.NaN if either complex argument isNaN; but add omits this test.",
                ["OB"]
            ],
            [
                "The test should be added to the add implementation (actually restored, since this looks like a code merge problem going back to 1.1).",
                ["SR"]
            ]
        ]
    },
    "Jsoup-9": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Html entities containing digits are not unescaped correctly"
        ],
        "desc_hints": ["Entities.unescapePattern", "Entities.unescape"],
        "desc_text": [
            [
                "Some html entities (such as sup1, sup2) are not unescaped correctly by Entities.unescape because they contain digits.",
                ["OB"]
            ],
            ["The problem is the pattern Entities.unescapePattern.", []],
            [
                "I changed it to '&(#(x|X)?([0-9a-fA-F]+)|[0-9a-zA-Z]+);?', and it worked fine for me.",
                []
            ],
            ["But there might be side effects ...", []],
            ["You can see my changes here : clementdenis@d65387c", ["OB"]]
        ]
    },
    "JacksonDatabind-46": {
        "code_elements": [
            "()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;;",
            "()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;"
        ],
        "stack_traces": [],
        "summary_hints": ["JavaType.getGenericSignature"],
        "summary_text": [
            "Incorrect signature for generic type via `JavaType.getGenericSignature"
        ],
        "desc_hints": ["FasterXML", "AtomicReference"],
        "desc_text": [
            ["(see FasterXML/jackson-modules-base#8 for background)", ["OB"]],
            [
                "It looks like generic signature generation is missing one closing > character to produce:",
                ["OB", "SR"]
            ],
            [
                "()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;;",
                "CODE"
            ],
            ["instead of expected", ["OB", "EB"]],
            [
                "()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;",
                "CODE"
            ],
            ["that is, closing '>' is missing.", ["OB"]]
        ]
    },
    "JacksonDatabind-86": {
        "code_elements": [
            "class Base implements IFace<Sub> { @JsonProperty int base = 1 }",
            "class Sub { @JsonProperty int sub = 2 }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Missing properties from base class when recursive types are involved."
        ],
        "desc_hints": ["JsonProperty", "TypeFactory", "github.com"],
        "desc_text": [
            [
                "When a type hierarchy as follows is constructed and the base class' type is constructed first by the TypeFactory then serializing the sub class fails due to missing properties from the base class.",
                ["OB", "SR"]
            ],
            [
                "class Base implements IFace<Sub> { @JsonProperty int base = 1 }",
                "CODE"
            ],
            ["class Sub { @JsonProperty int sub = 2 }", "CODE"],
            ["interface IFace<T> {}", []],
            [
                "Serializes sub as {\"sub\":2} where {\"base\":1,\"sub\":2} is expected.",
                ["EB", "SR"]
            ],
            [
                "I've created a minimal scenario of this bug here: https://github.com/slobo-showbie/jackson-recursive-type-bug",
                []
            ],
            ["I've experienced this bug in 2.7.8, 2.8.8, and 2.8.8.1", []]
        ]
    },
    "Lang-48": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["BigDecimals", "EqualsBuilder"],
        "summary_text": ["EqualsBuilder don't compare BigDecimals correctly"],
        "desc_hints": ["BigDecimal", "compareTo"],
        "desc_text": [
            [
                "When comparing a BigDecimal, the comparing is made using equals, not compareTo, which is more appropriate in the case of BigDecimal.",
                ["OB"]
            ]
        ]
    },
    "Math-42": {
        "code_elements": [
            "SimplexSolver.optimize(function, constraints, GoalType.MINIMIZE, true);",
            "x = 1; y = -1;"
        ],
        "stack_traces": [],
        "summary_hints": ["restrictNonNegative"],
        "summary_text": ["Negative value with restrictNonNegative"],
        "desc_hints": [
            "SimplexSolver.optimize",
            "restrictToNonnegative",
            "GoalType.MINIMIZE",
            "SimplexSolver"
        ],
        "desc_text": [
            ["Problem: commons-math-2.2 SimplexSolver.", ["OB"]],
            [
                "A variable with 0 coefficient may be assigned a negative value nevertheless restrictToNonnegative flag in call:",
                ["OB"]
            ],
            [
                "SimplexSolver.optimize(function, constraints, GoalType.MINIMIZE, true);",
                "CODE"
            ],
            ["Function", []],
            ["1 * x + 1 * y + 0", ["SR"]],
            ["Constraints:", []],
            ["1 * x + 0 * y = 1", ["SR"]],
            ["Result:", ["OB"]],
            ["x = 1; y = -1;", "CODE"],
            [
                "Probably variables with 0 coefficients are omitted at some point of computation and because of that the restrictions do not affect their values.",
                []
            ]
        ]
    },
    "Closure-72": {
        "code_elements": [
            "$for_body$5: while(1) {",
            "if (__label__ == 0) {",
            "$for_body$5: while(1) {",
            "if (__label__ == 0) {"
        ],
        "stack_traces": [
            "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
            "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
            "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
            "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
            "at com.google.common.base.Preconditions.checkState(Preconditions.java:129)",
            "at com.google.javascript.jscomp.RenameLabels$ProcessLabels.shouldTraverse(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
            "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
            "at com.google.javascript.jscomp.RenameLabels.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
            "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
            "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
            "at java.lang.Thread.run(Thread.java:662)",
            "Caused by: java.lang.IllegalStateException",
            "... 40 more"
        ],
        "summary_hints": [],
        "summary_text": ["Internal Compiler Error on Bullet"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "Thread.java",
            "com.google.javascript.jscomp.NodeTraversal.traverse",
            "apr5compiler.jar",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "com.google.javascript.jscomp.RenameLabels",
            "ProcessLabels.shouldTraverse",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.NodeTraversal.traverseFunction",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.RenameLabels.process",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "com.google.javascript.jscomp.Compiler",
            "NamedPass.process",
            "Preconditions.java",
            "PassFactoryDelegate.processInternal",
            "js.vars",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "bullet_1_1_q1.js",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.Compiler.optimize",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "bullet_1_1_q1.cc.js",
            "java.lang.IllegalStateException",
            "com.google.common.base.Preconditions.checkState",
            "com.google.javascript.jscomp.Compiler.runCallable",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "The attachment is the Bullet physics library, compiled from C++ to JS using Emscripten.",
                []
            ],
            ["2.", ["OB", "SR"]],
            [
                "I tried to compile it using the Closure Compiler, latest downloadable version (Apr 5 2011), with",
                ["SR"]
            ],
            [
                "java -jar apr5compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --variable_map_output_file js.vars --js bullet_1_1_q1.js --js_output_file bullet_1_1_q1.cc.js",
                ["OB"]
            ],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I would expect it to compile successfully.", ["OB", "EB"]],
            ["Instead it halts (after a few hours) with", ["OB"]],
            ["==================", []],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["null", []],
            ["Node(LABEL): bullet_1_1_q1.js:60150:8", ["OB"]],
            ["$for_body$5: while(1) {", "CODE"],
            ["Parent(BLOCK): bullet_1_1_q1.js:60043:26", ["OB"]],
            ["if (__label__ == 0) {", "CODE"],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                "STACK_TRACE"
            ],
            ["Please report this problem.", []],
            ["null", []],
            ["Node(LABEL): bullet_1_1_q1.js:60150:8", ["OB"]],
            ["$for_body$5: while(1) {", "CODE"],
            ["Parent(BLOCK): bullet_1_1_q1.js:60043:26", ["OB"]],
            ["if (__label__ == 0) {", "CODE"],
            [
                "at com.google.common.base.Preconditions.checkState(Preconditions.java:129)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.RenameLabels$ProcessLabels.shouldTraverse(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseFunction(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.RenameLabels.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                "STACK_TRACE"
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
                "STACK_TRACE"
            ],
            ["at java.lang.Thread.run(Thread.java:662)", "STACK_TRACE"],
            ["Caused by: java.lang.IllegalStateException", "STACK_TRACE"],
            ["... 40 more", "STACK_TRACE"],
            ["==================", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "The Closure Compiler download from Apr 5 2011, on Ubuntu 10.04 32 bit.",
                ["OB", "EB", "SR"]
            ]
        ]
    },
    "Gson-13": {
        "code_elements": [
            "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
            "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!=0 || false==negative) && (value != Long.MIN_VALUE || negative)) {"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Negative zero"],
        "desc_hints": [
            "msg03668.html",
            "toString",
            "msg01525.html",
            "msg01523.html",
            "msg01520.html",
            "java.lang.Number",
            "JsonReader",
            "fitsInLong",
            "Long.MIN_VALUE",
            "Number.toString",
            "www.ietf.org",
            "LazilyParsedNumber"
        ],
        "desc_text": [
            ["Hi,", []],
            [
                "I have been cross testing various json parsers looking for those that expose the lexical of json numbers and not only their bound java.lang.Number.",
                ["OB"]
            ],
            [
                "Because of the lazy parsing done by gson with LazilyParsedNumber, that keeps the lexical, all my roundtrip tests pass apart one: the lexical -0 that is treated as it were 0",
                []
            ],
            ["I read some threads about negative zero:", []],
            [
                "https://www.ietf.org/mail-archive/web/json/current/msg03668.html",
                []
            ],
            [
                "https://www.ietf.org/mail-archive/web/json/current/msg01520.html",
                []
            ],
            [
                "https://www.ietf.org/mail-archive/web/json/current/msg01523.html",
                []
            ],
            [
                "https://www.ietf.org/mail-archive/web/json/current/msg01525.html",
                []
            ],
            [
                "I created this issue thinking that -0 is a float, the same as -0.0, since a signed zero makes sense only in floating point numbers and also because in Java only Double/Float preserve sign of zero.",
                []
            ],
            [
                "This would have the implication that -0 could not be validated by jsonschema type integer , and that a jsonschema implementation would have the need to know if a -0 is present in json data, but probably this is not the case.",
                []
            ],
            [
                "After I started to (re)consider that -0 could be an integer, only that seems that in no programming language there is an integer that preserves sign for zero.",
                ["OB"]
            ],
            [
                "In any case, differentiating between 0 and -0 at lexical level would allow a client of gson to be able to refuse the value -0.",
                ["OB", "EB"]
            ],
            [
                "Gson could easily support differentiating between 0 and -0: in code -0 is treated as an integer (PEEKED_LONG) in JsonReader so its value is stored in a Java long that cannot represent negative zero.",
                ["OB"]
            ],
            [
                "I noted that -0.0 roundtrips correctly because is treated as a PEEKED_NUMBER that is kept as a Java String.",
                ["OB"]
            ],
            [
                "So the case of -0 could be trapped and treated as -0.0, as a PEEKED_NUMBER, in this way the toString() method of LazilyParsedNumber will return -0 and gson will be able to roundtrip any valid number value found in source, only clients using Number.toString() will notice any difference.",
                ["OB"]
            ],
            ["My proposal is to change this code from", []],
            [
                "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
                "CODE"
            ],
            ["to", []],
            [
                "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!=0 || false==negative) && (value != Long.MIN_VALUE || negative)) {",
                "CODE"
            ],
            ["Thanks,", []],
            ["Michele", []]
        ]
    },
    "Gson-16": {
        "code_elements": [
            "private static class TestType {",
            "TestType<? super X> superType;",
            "}",
            "new Gson().getAdapter(TestType.class);"
        ],
        "stack_traces": [],
        "summary_hints": ["TypeVariable", "StackOverflowError"],
        "summary_text": [
            "Fix StackOverflowError on resolving types with TypeVariable recursion"
        ],
        "desc_hints": ["TestType", "superType", "getAdapter", "TestType.class"],
        "desc_text": [
            ["Sample failing code:", ["OB", "SR"]],
            ["private static class TestType {", "CODE"],
            ["TestType<? super X> superType;", "CODE"],
            ["}", "CODE"],
            ["...", []],
            ["new Gson().getAdapter(TestType.class);", "CODE"]
        ]
    },
    "JacksonDatabind-84": {
        "code_elements": [
            "class Base implements IFace<Sub> { @JsonProperty int base = 1 }",
            "class Sub { @JsonProperty int sub = 2 }"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Missing properties from base class when recursive types are involved."
        ],
        "desc_hints": ["JsonProperty", "TypeFactory", "github.com"],
        "desc_text": [
            [
                "When a type hierarchy as follows is constructed and the base class' type is constructed first by the TypeFactory then serializing the sub class fails due to missing properties from the base class.",
                ["OB", "SR"]
            ],
            [
                "class Base implements IFace<Sub> { @JsonProperty int base = 1 }",
                "CODE"
            ],
            ["class Sub { @JsonProperty int sub = 2 }", "CODE"],
            ["interface IFace<T> {}", []],
            [
                "Serializes sub as {\"sub\":2} where {\"base\":1,\"sub\":2} is expected.",
                ["EB", "SR"]
            ],
            [
                "I've created a minimal scenario of this bug here: https://github.com/slobo-showbie/jackson-recursive-type-bug",
                []
            ],
            ["I've experienced this bug in 2.7.8, 2.8.8, and 2.8.8.1", []]
        ]
    },
    "Closure-69": {
        "code_elements": [
            "goog.require('goog.graphics.Path');",
            "function demo() {",
            "var path = new goog.graphics.Path();",
            "var points = [[1,1], [2,2]];",
            "for (var i = 0; i < points.length; i++) {",
            "(i == 0 ? path.moveTo : path.lineTo)(points[i][0], points[i][1]);",
            "}",
            "}",
            "goog.exportSymbol('demo', demo);"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Compiler should warn/error when instance methods are operated on"
        ],
        "desc_hints": [
            "goog.require",
            "points.length",
            "path.moveTo",
            "goog.graphics.Path",
            "moveTo",
            "goog.exportSymbol",
            "path.lineTo"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Compile and run the following code:", ["OB", "SR"]],
            ["goog.require('goog.graphics.Path');", "CODE"],
            ["function demo() {", "CODE"],
            ["var path = new goog.graphics.Path();", "CODE"],
            ["var points = [[1,1], [2,2]];", "CODE"],
            ["for (var i = 0; i < points.length; i++) {", "CODE"],
            [
                "(i == 0 ? path.moveTo : path.lineTo)(points[i][0], points[i][1]);",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["goog.exportSymbol('demo', demo);", "CODE"],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["I expect it to either work or produce a warning.", ["OB", "EB"]],
            [
                "In this case, the latter since there's an error in the javascript - when calling path.moveTo(x, y), \"this\" is set correctly to the path element in the moveTo function.",
                ["OB"]
            ],
            ["But when the function is operated on, as in (i == 0 ?", ["OB"]],
            [
                "path.moveTo : path.lineTo)(x, y), it's no longer an instance method invocation, so \"this\" reverts to the window object.",
                ["OB"]
            ],
            [
                "In this case, an error results because moveTo references a field in Path that is now \"undefined\".",
                ["OB"]
            ],
            [
                "Better would be to issue a warning/error that an instance method is being converted to a normal function (perhaps only if it references this).",
                []
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            [
                "Unknown (it's built into my build tools) - I presume this issue is present in all builds.",
                []
            ],
            ["Running on ubuntu.", ["OB", "SR"]],
            ["Please provide any additional information below.", "QUERY"]
        ]
    },
    "Closure-139": {
        "code_elements": [
            "function assert(b) {if (!b) throw \"error\"}",
            "var f = function() {return 2;}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Redefinition of a function in third party code can be miscompiled"
        ],
        "desc_hints": ["impressed.html", "webreflection.blogspot.com"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            [
                "Run this code snippet and observe that it doesn't raise an error:",
                ["OB"]
            ],
            ["function assert(b) {if (!b) throw \"error\"}", "CODE"],
            ["assert(f() === 1)", ["OB"]],
            ["var f = function() {return 2;}", "CODE"],
            ["assert(f() === 2)", ["OB"]],
            ["function f() {return 1;}", []],
            ["2.", ["OB", "SR"]],
            ["Compile it as third_party:", []],
            ["3.", ["OB", "SR"]],
            [
                "Observe that the first definition of f has been changed from an assignment to a declaration, and that the code now raises an error.",
                ["OB", "SR"]
            ],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["r8", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "This bug is originally from a blog comment[1], I don't know if it has hit anyone in the wild yet.",
                ["SR"]
            ],
            [
                "1) http://webreflection.blogspot.com/2009/11/google-closure-im-not-impressed.html#1604178721861066706",
                ["SR"]
            ]
        ]
    },
    "JacksonDatabind-45": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Fix for #1154"],
        "desc_hints": [],
        "desc_text": [
            [
                "Looks pretty good, but would it be possible to have a unit test that would fail before fix, pass after?",
                []
            ],
            [
                "Would be great to have something to guard against regression.",
                []
            ],
            [
                "I may want to change the logic a little bit, however; if shape is explicitly defined as NUMBER, textual representation should not be enabled even if Locale (etc) happen to be specified: explicit shape value should have precedence.",
                ["EB"]
            ],
            [
                "I can make that change, or you can do it, either way is fine.",
                []
            ],
            [
                "I'll also need to merge this again 2.7 branch instead of master, to get in 2.7.3.",
                []
            ]
        ]
    },
    "JacksonDatabind-16": {
        "code_elements": [
            "public class Fun {",
            "@Test",
            "public void test() throws JsonProcessingException {",
            "ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);",
            "String result = mapper.writeValueAsString(new Foo(\"result\"));",
            "Assert.assertEquals(\"{\\\"bar\\\":\\\"result\\\"}\", result);",
            "}",
            "@Target(value={ ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD })",
            "@Retention(value=RetentionPolicy.RUNTIME)",
            "@JacksonAnnotationsInside",
            "@JsonProperty(\"bar\")",
            "public @interface ExposeStuff {",
            "}",
            "public abstract class FooMixin {",
            "@ExposeStuff",
            "public abstract String getStuff();",
            "}",
            "public class Foo {",
            "private String stuff;",
            "Foo(String stuff) {",
            "this.stuff = stuff;",
            "}",
            "public String getStuff() {",
            "return stuff;",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Annotation bundles ignored when added to Mixin"],
        "desc_hints": [
            "Foo.class",
            "ElementType.METHOD",
            "JsonProperty",
            "JacksonAnnotationsInside",
            "Assert.assertEquals",
            "this.stuff",
            "ElementType.FIELD",
            "RetentionPolicy.RUNTIME",
            "JsonProcessingException",
            "ElementType.CONSTRUCTOR",
            "FooMixin.class",
            "addMixIn",
            "ExposeStuff",
            "ObjectMapper",
            "FooMixin",
            "mapper.writeValueAsString",
            "getStuff"
        ],
        "desc_text": [
            [
                "When updating from v 2.4.4 to 2.5.* it appears as though annotation bundles created with @JacksonAnnotationsInside are ignored when placed on a mixin.",
                ["OB"]
            ],
            [
                "Moving the annotation bundel to the actual class seems to resolve the issue.",
                ["OB"]
            ],
            [
                "Below is a simple test that attempts to rename a property.",
                ["OB", "SR"]
            ],
            [
                "I have more complicated test cases that are also failing but this should provide some context.",
                []
            ],
            ["public class Fun {", "CODE"],
            ["@Test", "CODE"],
            ["public void test() throws JsonProcessingException {", "CODE"],
            [
                "ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);",
                "CODE"
            ],
            [
                "String result = mapper.writeValueAsString(new Foo(\"result\"));",
                "CODE"
            ],
            [
                "Assert.assertEquals(\"{\\\"bar\\\":\\\"result\\\"}\", result);",
                "CODE"
            ],
            ["}", "CODE"],
            [
                "@Target(value={ ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD })",
                "CODE"
            ],
            ["@Retention(value=RetentionPolicy.RUNTIME)", "CODE"],
            ["@JacksonAnnotationsInside", "CODE"],
            ["@JsonProperty(\"bar\")", "CODE"],
            ["public @interface ExposeStuff {", "CODE"],
            ["}", "CODE"],
            ["public abstract class FooMixin {", "CODE"],
            ["@ExposeStuff", "CODE"],
            ["public abstract String getStuff();", "CODE"],
            ["}", "CODE"],
            ["public class Foo {", "CODE"],
            ["private String stuff;", "CODE"],
            ["Foo(String stuff) {", "CODE"],
            ["this.stuff = stuff;", "CODE"],
            ["}", "CODE"],
            ["public String getStuff() {", "CODE"],
            ["return stuff;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "I'm expecting the \"stuff\" property to be serialized as \"bar\".",
                ["OB", "EB"]
            ],
            [
                "I apologize I haven't been able to identify the culprit (and perhaps it's in my usage).",
                ["OB"]
            ],
            ["Let me know your thoughts.", []],
            ["I'm always happy to provide more details!", []]
        ]
    },
    "Closure-7": {
        "code_elements": [
            "var i = object.length;",
            "/**",
            "* @param {*} object Any object.",
            "* @return {boolean}",
            "*/",
            "test.isMatched = function(object) {",
            "if (goog.isDef(object)) {",
            "if (goog.isFunction(object)) {",
            "// return object();",
            "} else if (goog.isBoolean(object)) {",
            "// return object;",
            "} else if (goog.isString(object)) {",
            "// return test.isDef(object);",
            "} else if (goog.isArray(object)) {",
            "var i = object.length;",
            "}",
            "}",
            "return false;"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.isFunction"],
        "summary_text": ["Bad type inference with goog.isFunction and friends"],
        "desc_hints": [
            "goog.isDef",
            "test.isDef",
            "test.isMatched",
            "goog.isArray",
            "goog.isString",
            "goog.isFunction",
            "object.length",
            "test.js",
            "goog.isBoolean"
        ],
        "desc_text": [
            [
                "experimental/johnlenz/typeerror/test.js:16: WARNING - Property length",
                []
            ],
            ["never defined on Number", ["OB"]],
            ["var i = object.length;", "CODE"],
            ["This is the reduced test case:", ["SR"]],
            ["/**", "CODE"],
            ["* @param {*} object Any object.", "CODE"],
            ["* @return {boolean}", "CODE"],
            ["*/", "CODE"],
            ["test.isMatched = function(object) {", "CODE"],
            ["if (goog.isDef(object)) {", "CODE"],
            ["if (goog.isFunction(object)) {", "CODE"],
            ["// return object();", "CODE"],
            ["} else if (goog.isBoolean(object)) {", "CODE"],
            ["// return object;", "CODE"],
            ["} else if (goog.isString(object)) {", "CODE"],
            ["// return test.isDef(object);", "CODE"],
            ["} else if (goog.isArray(object)) {", "CODE"],
            ["var i = object.length;", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["return false;", "CODE"],
            ["};", []]
        ]
    },
    "Jsoup-42": {
        "code_elements": [
            "final Document document = Jsoup.parse(html);",
            "final FormElement formElement = (FormElement) document.select(\"form[name=myForm]\").first();",
            "System.out.println(keyVal.key() + \"=\" + keyVal.value());",
            "}",
            "}",
            "else if (\"input\".equals(el.tagName())) {",
            "// Not disabled? Ignore disabled inputs.",
            "if(!el.hasAttr(\"disabled\")) {",
            "// Deal with checkbox and radio (not checked should not be added to avoid sending to server)",
            "if(\"checkbox\".equals(el.attr(\"type\")) || \"radio\".equals(el.attr(\"type\"))) {",
            "// Checked, but no value? Default should be \"on\".",
            "if(el.hasAttr(\"checked\") && !el.hasAttr(\"value\")) {",
            "data.add(HttpConnection.KeyVal.create(name, \"on\"));",
            "}",
            "// Checked? Add it's value",
            "else if(el.hasAttr(\"checked\")) {",
            "data.add(HttpConnection.KeyVal.create(name, el.val()));",
            "}",
            "}",
            "// Buttons should be ignored.",
            "else if(!\"button\".equals(el.attr(\"type\"))){",
            "data.add(HttpConnection.KeyVal.create(name, el.val()));",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["formData", "FormElement"],
        "summary_text": [
            "FormElement's formData ignores input checkbox checked without value."
        ],
        "desc_hints": [
            "HttpConnection.KeyVal.create",
            "keyVal.key",
            "formElement.formData",
            "keyVal",
            "testCheckBox",
            "formElement",
            "testVal",
            "el.attr",
            "FormElement",
            "Jsoup.parse",
            "document.select",
            "el.hasAttr",
            "formData",
            "myForm",
            "textCheckBox2",
            "el.tagName",
            "el.val",
            "Connection.KeyVal",
            "data.add",
            "keyVal.value",
            "System.out.println"
        ],
        "desc_text": [
            ["When there is input:", ["OB"]],
            [
                "<input type=\"checkbox\" name=\"testCheckBox\" checked=\"checked\" />",
                []
            ],
            [
                "The \"formData()\" of FormElement's ignores that default value which should be \"on\" as submitted by browsers.",
                ["OB", "EB"]
            ],
            ["HTML fragment:", []],
            ["<html>", []],
            ["<head>", []],
            ["<title>Test</title>", []],
            ["</head>", []],
            ["<body>", []],
            ["<form name=\"myForm\" method=\"POST\">", []],
            [
                "<input type=\"checkbox\" name=\"testCheckBox\" checked=\"checked\" /> Something<br/>",
                []
            ],
            ["<input type=\"submit\" value=\"Submit\" />", []],
            ["</form>", []],
            ["</body>", []],
            ["</html>", []],
            [
                "When submiting from Firefox it sends to sever: testCheckBox=on",
                ["OB", "SR"]
            ],
            ["Java code:", ["SR"]],
            ["public static void main(String[] args)", []],
            ["{", []],
            ["final String html = \"<html>\\n\"", []],
            ["+ \"  <head>\\n\"", []],
            ["+ \"      <title>Test</title>\\n\"", []],
            ["+ \"  </head>\\n\"", []],
            ["+ \"  \\n\"", []],
            ["+ \"  <body>\\n\"", []],
            ["+ \"\\n\"", []],
            ["+ \"  <form name=\\\"myForm\\\" method=\\\"POST\\\">\\n\"", []],
            [
                "+ \"      <input type=\\\"checkbox\\\" name=\\\"testCheckBox\\\" checked=\\\"checked\\\" /> Something<br/>\\n\"",
                []
            ],
            ["+ \"\\n\"", []],
            [
                "+ \"      <input type=\\\"submit\\\" value=\\\"Submit\\\" />\\n\"",
                []
            ],
            ["+ \"  </form>\\n\"", []],
            ["+ \"\\n\"", []],
            ["+ \"  </body>\\n\"", []],
            ["+ \"</html>\";", []],
            ["final Document document = Jsoup.parse(html);", "CODE"],
            [
                "final FormElement formElement = (FormElement) document.select(\"form[name=myForm]\").first();",
                "CODE"
            ],
            ["for (Connection.KeyVal keyVal : formElement.formData())", []],
            ["{", []],
            [
                "System.out.println(keyVal.key() + \"=\" + keyVal.value());",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Output: testCheckBox=", []],
            ["Expected output: testCheckBox=on", ["EB"]],
            [
                "Seems like Jsoup doesn't add default value which is sent by browsers.",
                ["OB"]
            ],
            [
                "The \"submit()\" method from FormElement also uses \"formData()\" method to get form's submission parameters.",
                ["OB"]
            ],
            [
                "By sending the empty String for checkbox the server acts as it's not checked when in fact it was checked.",
                ["OB", "EB"]
            ],
            [
                "Also while testing noticed that it doesn't check the checkbox'es at all.",
                ["OB"]
            ],
            [
                "If there is checkbox with value, but not checked, it will get the value no matter what, for example:",
                ["OB", "SR"]
            ],
            [
                "<input type=\"checkbox\" name=\"textCheckBox2\" value=\"testVal\" />",
                []
            ],
            ["This affects radio buttons as well.", ["OB"]],
            [
                "Not selected radion buttons should not be sent to server, but formData() add their values anyway.",
                ["OB", "EB"]
            ],
            [
                "I'm not sure if that's done on purpose, but submit() method will get wrong parameters for submission since not checked input value is not sent to server at all.",
                ["OB"]
            ],
            [
                "Moreover type button value and \"disabled\" inputs are not sent to server as well (by browsers).",
                ["OB", "SR"]
            ],
            [
                "Looked at the source, one extra else if before the final else in \"formData()\" method could solve this:",
                []
            ],
            ["else if (\"input\".equals(el.tagName())) {", "CODE"],
            ["// Not disabled? Ignore disabled inputs.", "CODE"],
            ["if(!el.hasAttr(\"disabled\")) {", "CODE"],
            [
                "// Deal with checkbox and radio (not checked should not be added to avoid sending to server)",
                "CODE"
            ],
            [
                "if(\"checkbox\".equals(el.attr(\"type\")) || \"radio\".equals(el.attr(\"type\"))) {",
                "CODE"
            ],
            ["// Checked, but no value? Default should be \"on\".", "CODE"],
            ["if(el.hasAttr(\"checked\") && !el.hasAttr(\"value\")) {", "CODE"],
            ["data.add(HttpConnection.KeyVal.create(name, \"on\"));", "CODE"],
            ["}", "CODE"],
            ["// Checked? Add it's value", "CODE"],
            ["else if(el.hasAttr(\"checked\")) {", "CODE"],
            ["data.add(HttpConnection.KeyVal.create(name, el.val()));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["// Buttons should be ignored.", "CODE"],
            ["else if(!\"button\".equals(el.attr(\"type\"))){", "CODE"],
            ["data.add(HttpConnection.KeyVal.create(name, el.val()));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["One more thing.", ["OB"]],
            [
                "If form has multiple type submit inputs, only the clicked input's value should be sent to server, but I have no idea how this could be implemented.",
                ["EB", "SR"]
            ],
            [
                "Sending all submit input's values can change the server's logic and be bad (result not as expected).",
                ["OB", "EB"]
            ]
        ]
    },
    "JacksonCore-8": {
        "code_elements": [
            "TextBuffer buffer = new TextBuffer(new BufferRecycler());",
            "buffer.resetWithEmpty();"
        ],
        "stack_traces": [],
        "summary_hints": ["TextBuffer", "getTextBuffer"],
        "summary_text": ["Inconsistent TextBuffer#getTextBuffer behavior"],
        "desc_hints": [
            "buffer.getTextBuffer",
            "getTextBuffer",
            "buffer.resetWithEmpty",
            "buffer.contentsAsString",
            "BufferRecycler",
            "getTextCharacters",
            "TextBuffer"
        ],
        "desc_text": [
            ["Hi, I'm using 2.4.2.", []],
            [
                "While I'm working on CBORParser, I noticed that CBORParser#getTextCharacters() returns sometimes null sometimes [] (empty array) when it's parsing empty string \"\".",
                ["OB"]
            ],
            [
                "While debugging, I noticed that TextBuffer#getTextBuffer behaves inconsistently.",
                ["OB"]
            ],
            [
                "TextBuffer buffer = new TextBuffer(new BufferRecycler());",
                "CODE"
            ],
            ["buffer.resetWithEmpty();", "CODE"],
            ["buffer.getTextBuffer(); // returns null", []],
            ["buffer.contentsAsString(); // returns empty string \"\"", ["OB"]],
            ["buffer.getTextBuffer(); // returns empty array []", []],
            [
                "I think getTextBuffer should return the same value.",
                ["OB", "EB"]
            ],
            ["Not sure which (null or []) is expected though.", ["OB", "EB"]]
        ]
    },
    "Mockito-25": {
        "code_elements": [
            "Getting below exceptions when trying to invoke Whitebox.invokeMethod(erxProviderManager, \"setCommand\", Provider, null,retait, mail);"
        ],
        "stack_traces": [
            "at java.lang.Class.isAssignableFrom(Native Method)",
            "at org.powermock.reflect.internal.WhiteboxImpl.checkIfParameterTypesAreSame(WhiteboxImpl.java:2257)",
            "at org.powermock.reflect.internal.WhiteboxImpl.getMethods(WhiteboxImpl.java:1800)",
            "at org.powermock.reflect.internal.WhiteboxImpl.getBestMethodCandidate(WhiteboxImpl.java:955)",
            "at org.powermock.reflect.internal.WhiteboxImpl.findMethodOrThrowException(WhiteboxImpl.java:832)",
            "at org.powermock.reflect.internal.WhiteboxImpl.doInvokeMethod(WhiteboxImpl.java:770)",
            "at org.powermock.reflect.internal.WhiteboxImpl.invokeMethod(WhiteboxImpl.java:638)",
            "at org.powermock.reflect.Whitebox.invokeMethod(Whitebox.java:401)"
        ],
        "summary_hints": ["Whitebox.invokeMethod"],
        "summary_text": [
            "Null Pointer when invoking Whitebox.invokeMethod() with null one of the params null"
        ],
        "desc_hints": [
            "testSetEnrollmentCommandWithUnEnrollmentWithNull",
            "java.lang.Class.isAssignableFrom",
            "setCommand",
            "org.powermock.reflect.internal.WhiteboxImpl.invokeMethod",
            "WhiteboxImpl.java",
            "org.powermock.reflect.Whitebox.invokeMethod",
            "java.lang.NullPointerException",
            "org.powermock.reflect.internal.WhiteboxImpl.getMethods",
            "org.powermock.reflect.internal.WhiteboxImpl.doInvokeMethod",
            "Whitebox.invokeMethod",
            "Whitebox.java",
            "org.powermock.reflect.internal.WhiteboxImpl.findMethodOrThrowException",
            "erxProviderManager",
            "org.powermock.reflect.internal.WhiteboxImpl.getBestMethodCandidate",
            "org.powermock.reflect.internal.WhiteboxImpl.checkIfParameterTypesAreSame"
        ],
        "desc_text": [
            [
                "Getting below exceptions when trying to invoke Whitebox.invokeMethod(erxProviderManager, \"setCommand\", Provider, null,retait, mail);",
                "CODE"
            ],
            ["Version used 1.6.2", []],
            [
                "FAILED: testSetEnrollmentCommandWithUnEnrollmentWithNull",
                ["OB"]
            ],
            ["java.lang.NullPointerException", []],
            [
                "at java.lang.Class.isAssignableFrom(Native Method)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.internal.WhiteboxImpl.checkIfParameterTypesAreSame(WhiteboxImpl.java:2257)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.internal.WhiteboxImpl.getMethods(WhiteboxImpl.java:1800)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.internal.WhiteboxImpl.getBestMethodCandidate(WhiteboxImpl.java:955)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.internal.WhiteboxImpl.findMethodOrThrowException(WhiteboxImpl.java:832)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.internal.WhiteboxImpl.doInvokeMethod(WhiteboxImpl.java:770)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.internal.WhiteboxImpl.invokeMethod(WhiteboxImpl.java:638)",
                "STACK_TRACE"
            ],
            [
                "at org.powermock.reflect.Whitebox.invokeMethod(Whitebox.java:401)",
                "STACK_TRACE"
            ]
        ]
    },
    "Jsoup-79": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [
            "LeafNode.childNodes",
            "UnsupportedOperationException"
        ],
        "summary_text": [
            "LeafNode.childNodes() throws UnsupportedOperationException."
        ],
        "desc_hints": [
            "UnsupportedOperationException",
            "ensureChildNodes",
            "childNodes",
            "Node.childNodes",
            "LeafNode",
            "LeafNode.childNodes"
        ],
        "desc_text": [
            [
                "LeafNode.childNodes() throws UnsupportedOperationException since this commit:",
                []
            ],
            ["f71712b#diff-605d28890f72a0f43298f842d0a3414f", []],
            ["The javadoc of Node.childNodes() says this:", []],
            ["@return list of children.", ["OB"]],
            ["If no children, returns an empty list.", ["OB"]],
            [
                "But in the case of a LeafNode, which has no children, it throws UnsupportedOperationException.",
                ["OB"]
            ],
            [
                "This is because childNodes() calls ensureChildNodes(), which throws an exception when called on a LeafNode.",
                ["OB"]
            ],
            [
                "The result is that the calling application needs to guard against this case.",
                ["OB", "EB"]
            ],
            [
                "But the application should not need to know if the Node it has is a LeafNode or not.",
                ["EB"]
            ],
            [
                "LeafNode.childNodes() should simply return an empty list as it used to do, and as per the javadoc.",
                ["OB", "EB"]
            ]
        ]
    },
    "Closure-126": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Break in finally block isn't optimized properly"],
        "desc_hints": ["TryStatement", "console.log"],
        "desc_text": [
            [
                "b: try { throw(\"throw me\") } finally { /* fake catcher */ ; break b }; console.log(\"ok then...\")",
                []
            ],
            ["...", []],
            ["gets optimized into ...", ["OB"]],
            ["throw\"throw me\";", []],
            ["...", []],
            ["which is not the same.", ["OB"]],
            [
                "The break in the finally block should prevent the exception from being passed on.",
                ["OB", "EB"]
            ],
            ["The expected result is:", ["OB", "EB"]],
            ["console.log(\"ok then...\")", []],
            ["ECMA-262 says:", []],
            [
                "The production TryStatement : try Block Finally is evaluated as follows:",
                ["SR"]
            ],
            ["Let B be the result of evaluating Block.", ["OB"]],
            ["Let F be the result of evaluating Finally.", ["OB"]],
            ["If F.type is normal, return B.", ["OB"]],
            ["Return F.", []],
            [
                "F.type in this case would be 'break' and not 'normal', so 'break' overrides the 'throw' of B",
                []
            ],
            [
                "This is with the build available for download on Feb 28 2013.",
                ["OB"]
            ]
        ]
    },
    "Jsoup-66": {
        "code_elements": [
            "String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";",
            "Document original = Jsoup.parse(html);",
            "Document clone = original.clone();",
            "Element originalElement = original.body().child(0);",
            "originalElement.after(\"<div>New element</div>\");",
            "Element originalNextElementSibling = originalElement.nextElementSibling();",
            "Element originalNextSibling = (Element) originalElement.nextSibling();",
            "System.out.println(\"originalNextElementSibling:\\n\" + originalNextElementSibling);",
            "System.out.println(\"originalNextSibling:\\n\" + originalNextSibling);",
            "System.out.println();",
            "Element cloneElement = clone.body().child(0);",
            "cloneElement.after(\"<div>New element</div>\");",
            "Element cloneNextElementSibling = cloneElement.nextElementSibling();",
            "Element cloneNextSibling = (Element) cloneElement.nextSibling();",
            "System.out.println(\"cloneNextElementSibling:\\n\" + cloneNextElementSibling);",
            "System.out.println(\"cloneNextSibling:\\n\" + cloneNextSibling);"
        ],
        "stack_traces": [],
        "summary_hints": ["nextElementSibling"],
        "summary_text": [
            "Method nextElementSibling() returns null after adding an element to a document that was cloned"
        ],
        "desc_hints": [
            "originalNextSibling",
            "nextSibling",
            "originalElement",
            "original.clone",
            "Jsoup.parse",
            "nextElementSibling",
            "originalNextElementSibling",
            "cloneElement",
            "originalElement.nextSibling",
            "cloneNextSibling",
            "cloneNextElementSibling",
            "cloneElement.after",
            "cloneElement.nextElementSibling",
            "originalElement.nextElementSibling",
            "clone.body",
            "original.body",
            "originalElement.after",
            "cloneElement.nextSibling",
            "System.out.println"
        ],
        "desc_text": [
            [
                "If I clone a document, and add an element by the method after(), and try to get the new element by the method nextElementSibling() I get null.",
                ["OB", "SR"]
            ],
            [
                "In the same time the method nextSibling() successfully returns this element.",
                ["OB"]
            ],
            [
                "If I do the same with the original document everything is fine.",
                ["OB", "SR"]
            ],
            ["Code:", ["SR"]],
            [
                "String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";",
                "CODE"
            ],
            ["Document original = Jsoup.parse(html);", "CODE"],
            ["Document clone = original.clone();", "CODE"],
            ["Element originalElement = original.body().child(0);", "CODE"],
            ["originalElement.after(\"<div>New element</div>\");", "CODE"],
            [
                "Element originalNextElementSibling = originalElement.nextElementSibling();",
                "CODE"
            ],
            [
                "Element originalNextSibling = (Element) originalElement.nextSibling();",
                "CODE"
            ],
            [
                "System.out.println(\"originalNextElementSibling:\\n\" + originalNextElementSibling);",
                "CODE"
            ],
            [
                "System.out.println(\"originalNextSibling:\\n\" + originalNextSibling);",
                "CODE"
            ],
            ["System.out.println();", "CODE"],
            ["Element cloneElement = clone.body().child(0);", "CODE"],
            ["cloneElement.after(\"<div>New element</div>\");", "CODE"],
            [
                "Element cloneNextElementSibling = cloneElement.nextElementSibling();",
                "CODE"
            ],
            [
                "Element cloneNextSibling = (Element) cloneElement.nextSibling();",
                "CODE"
            ],
            [
                "System.out.println(\"cloneNextElementSibling:\\n\" + cloneNextElementSibling);",
                "CODE"
            ],
            [
                "System.out.println(\"cloneNextSibling:\\n\" + cloneNextSibling);",
                "CODE"
            ],
            ["Output:", ["OB"]],
            ["originalNextElementSibling:", []],
            ["<div>", []],
            ["New element", ["OB"]],
            ["</div>", []],
            ["originalNextSibling:", []],
            ["<div>", []],
            ["New element", ["OB"]],
            ["</div>", []],
            ["cloneNextElementSibling:", []],
            ["null", []],
            ["cloneNextSibling:", []],
            ["<div>", []],
            ["New element", ["OB"]],
            ["</div>", []]
        ]
    },
    "Closure-158": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Order of jscomp_error, jscomp_warning, jscomp_off flags are not preserved"
        ],
        "desc_hints": [],
        "desc_text": [
            [
                "\"off\" always takes precedence over \"warning\", and \"warning\" always takes precedence over \"error\"",
                ["OB"]
            ],
            [
                "This should be changed so that the last arguments always has highest precedence.",
                ["EB"]
            ]
        ]
    },
    "Math-96": {
        "code_elements": [
            "import org.apache.commons.math.complex.*;",
            "public class TestProg {",
            "public static void main(String[] args) {",
            "ComplexFormat f = new ComplexFormat();",
            "Complex c1 = new Complex(0,1);",
            "Complex c2 = new Complex(-1,0);",
            "Complex res = c1.multiply(c2);",
            "Complex comp = new Complex(0,-1);",
            "System.out.println(\"res:  \"+f.format(res));",
            "System.out.println(\"comp: \"+f.format(comp));",
            "System.out.println(\"res=comp: \"+res.equals(comp));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Result of multiplying and equals for complex numbers is wrong"
        ],
        "desc_hints": [
            "org.apache.commons.math.complex",
            "ComplexFormat",
            "TestProg",
            "c1.multiply",
            "res.equals",
            "System.out.println"
        ],
        "desc_text": [
            ["Hi.", ["OB"]],
            ["The bug relates on complex numbers.", ["OB"]],
            [
                "The methods \"multiply\" and \"equals\" of the class Complex are involved.",
                ["OB"]
            ],
            ["mathematic background: (0,i) * (-1,0i) = (0,-i).", []],
            ["little java program + output that shows the bug:", []],
            [
                "-----------------------------------------------------------------------",
                []
            ],
            ["import org.apache.commons.math.complex.*;", "CODE"],
            ["public class TestProg {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            ["ComplexFormat f = new ComplexFormat();", "CODE"],
            ["Complex c1 = new Complex(0,1);", "CODE"],
            ["Complex c2 = new Complex(-1,0);", "CODE"],
            ["Complex res = c1.multiply(c2);", "CODE"],
            ["Complex comp = new Complex(0,-1);", "CODE"],
            ["System.out.println(\"res:  \"+f.format(res));", "CODE"],
            ["System.out.println(\"comp: \"+f.format(comp));", "CODE"],
            ["System.out.println(\"res=comp: \"+res.equals(comp));", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            [
                "-----------------------------------------------------------------------",
                []
            ],
            ["res: -0 - 1i", []],
            ["comp: 0 - 1i", []],
            ["res=comp: false", []],
            [
                "-----------------------------------------------------------------------",
                []
            ],
            ["I think the \"equals\" should return \"true\".", ["OB", "EB"]],
            [
                "The problem could either be the \"multiply\" method that gives (-0,-1i) instead of (0,-1i),",
                []
            ],
            [
                "or if you think thats right, the equals method has to be modified.",
                ["SR"]
            ],
            ["Good Luck", []],
            ["Dieter", []]
        ]
    },
    "Compress-34": {
        "code_elements": [
            "String name = \"TR_01.ZIP\";",
            "Tika tika = new Tika();",
            "return tika.detect(content, name);"
        ],
        "stack_traces": [
            "at org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(X7875_NewUnix.java:199)",
            "at org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(X7875_NewUnix.java:220)",
            "at org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(ExtraFieldUtils.java:174)",
            "at org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(ZipArchiveEntry.java:476)",
            "at org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(ZipFile.java:575)",
            "at org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(ZipFile.java:492)",
            "at org.apache.commons.compress.archivers.zip.ZipFile.<init>(ZipFile.java:216)",
            "at org.apache.commons.compress.archivers.zip.ZipFile.<init>(ZipFile.java:192)",
            "at org.apache.commons.compress.archivers.zip.ZipFile.<init>(ZipFile.java:153)",
            "at org.apache.tika.parser.pkg.ZipContainerDetector.detectZipFormat(ZipContainerDetector.java:141)",
            "at org.apache.tika.parser.pkg.ZipContainerDetector.detect(ZipContainerDetector.java:88)",
            "at org.apache.tika.detect.CompositeDetector.detect(CompositeDetector.java:77)",
            "at org.apache.tika.Tika.detect(Tika.java:155)",
            "at org.apache.tika.Tika.detect(Tika.java:183)",
            "at org.apache.tika.Tika.detect(Tika.java:223)"
        ],
        "summary_hints": ["X7875_NewUnix.parseFromLocalFileData"],
        "summary_text": [
            "Exception in X7875_NewUnix.parseFromLocalFileData when parsing 0-sized \"ux\" local entry"
        ],
        "desc_hints": [
            "org.apache.tika.parser.pkg.ZipContainerDetector.detect",
            "ZipArchiveEntry.java",
            "TR_01.ZIP",
            "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse",
            "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData",
            "ZipFile.java",
            "java.lang.ArrayIndexOutOfBoundsException",
            "ExtraFieldUtils.java",
            "tika.detect",
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra",
            "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry",
            "org.apache.tika.detect.CompositeDetector.detect",
            "X7875_NewUnix.java",
            "org.apache.commons.compress.archivers.zip.ZipFile",
            "ZipContainerDetector.java",
            "Tika.java",
            "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData",
            "CompositeDetector.java",
            "org.apache.tika.Tika.detect",
            "org.apache.tika.parser.pkg.ZipContainerDetector.detectZipFormat",
            "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory"
        ],
        "desc_text": [
            [
                "When trying to detect content type of a zip file with Tika 1.10 (which uses Commons Compress 1.9 internally) in manner like this:",
                ["OB", "SR"]
            ],
            ["byte[] content = ...", []],
            ["// whole zip file.", ["OB"]],
            ["String name = \"TR_01.ZIP\";", "CODE"],
            ["Tika tika = new Tika();", "CODE"],
            ["return tika.detect(content, name);", "CODE"],
            ["it throws an exception:", ["OB"]],
            ["java.lang.ArrayIndexOutOfBoundsException: 13", []],
            [
                "at org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(X7875_NewUnix.java:199)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(X7875_NewUnix.java:220)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(ExtraFieldUtils.java:174)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(ZipArchiveEntry.java:476)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(ZipFile.java:575)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(ZipFile.java:492)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ZipFile.<init>(ZipFile.java:216)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ZipFile.<init>(ZipFile.java:192)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.compress.archivers.zip.ZipFile.<init>(ZipFile.java:153)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tika.parser.pkg.ZipContainerDetector.detectZipFormat(ZipContainerDetector.java:141)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tika.parser.pkg.ZipContainerDetector.detect(ZipContainerDetector.java:88)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.tika.detect.CompositeDetector.detect(CompositeDetector.java:77)",
                "STACK_TRACE"
            ],
            ["at org.apache.tika.Tika.detect(Tika.java:155)", "STACK_TRACE"],
            ["at org.apache.tika.Tika.detect(Tika.java:183)", "STACK_TRACE"],
            ["at org.apache.tika.Tika.detect(Tika.java:223)", "STACK_TRACE"],
            [
                "The zip file does contain two .jpg images and is not a \"special\" (JAR, Openoffice, ...",
                ["OB", "SR"]
            ],
            [") zip file.", ["OB"]],
            [
                "Unfortunately, the contents of the zip file is confidential and so I cannot attach it to this ticket as it is, although I can provide the parameters supplied to",
                []
            ],
            [
                "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(X7875_NewUnix.java:199) as caught by the debugger:",
                []
            ],
            ["data = {byte[13]@2103}", []],
            ["0 = 85", []],
            ["1 = 84", []],
            ["2 = 5", ["SR"]],
            ["3 = 0", []],
            ["4 = 7", []],
            ["5 = -112", []],
            ["6 = -108", []],
            ["7 = 51", []],
            ["8 = 85", []],
            ["9 = 117", []],
            ["10 = 120", []],
            ["11 = 0", []],
            ["12 = 0", []],
            ["offset = 13", []],
            ["length = 0", []],
            [
                "This data comes from the local zip entry for the first file, it seems the method tries to read more bytes than is actually available in the buffer.",
                ["OB", "SR"]
            ],
            [
                "It seems that first 9 bytes of the buffer are 'UT' extended field with timestamp, followed by 0-sized 'ux' field (bytes 9-12) that is supposed to contain UID/GID - according to infozip's doc the 0-size is common for global dictionary, but the local dictionary should contain complete data.",
                ["OB", "EB", "SR"]
            ],
            [
                "In this case for some reason it does contain 0-sized data.",
                ["OB"]
            ],
            [
                "Note that 7zip and unzip can unzip the file without even a warning, so Commons Compress should be also able to handle that file correctly without choking on that exception.",
                ["OB", "EB"]
            ]
        ]
    },
    "Codec-8": {
        "code_elements": [
            "import org.apache.commons.codec.binary.Base64InputStream;",
            "public class TestReads {",
            "public static void main(String[] args) {",
            "Base64InputStream b64stream = new Base64InputStream(System.in, true, 0, null);",
            "int n = 0;",
            "try",
            "{",
            "while (b64stream.read() != -1) n++;",
            "}",
            "catch (Exception x)",
            "{",
            "System.out.println(n);",
            "x.printStackTrace();",
            "}",
            "}",
            "}"
        ],
        "stack_traces": [
            "at org.apache.commons.codec.binary.Base64.encode(Base64.java:502)",
            "at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:157)",
            "at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:109)"
        ],
        "summary_hints": [
            "ArrayIndexOutOfBoundsException",
            "Base64InputStream"
        ],
        "summary_text": [
            "ArrayIndexOutOfBoundsException when doing multiple reads() on encoding Base64InputStream"
        ],
        "desc_hints": [
            "Base64.java",
            "printStackTrace",
            "Base64InputStream.read",
            "System.in",
            "TestReads",
            "Base64InputStream",
            "Base64InputStream.java",
            "org.apache.commons.codec.binary.Base64InputStream.read",
            "java.lang.ArrayIndexOutOfBoundsException",
            "b64stream.read",
            "org.apache.commons.codec.binary.Base64.encode",
            "org.apache.commons.codec.binary.Base64InputStream",
            "resizeBuffer",
            "System.out.println"
        ],
        "desc_text": [
            [
                "When encoding a sizable stream byte by byte (so, just calling Base64InputStream.read()), after 10920 successful read()s, this happens:",
                []
            ],
            ["java.lang.ArrayIndexOutOfBoundsException: 2", ["SR"]],
            [
                "at org.apache.commons.codec.binary.Base64.encode(Base64.java:502)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:157)",
                "STACK_TRACE"
            ],
            [
                "at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:109)",
                "STACK_TRACE"
            ],
            [
                "Based on this, the necessary conditions seem to be that buffer = null and modulus = 2.",
                ["OB", "SR"]
            ],
            [
                "Then, if a read() is done, a single-byte buffer is used, whose length is doubled by resizeBuffer(), but that still doesn't make it big enough to hold the 4 bytes written to it because modulus was just incremented to 0.",
                ["OB", "SR"]
            ],
            ["Here's some sample code:", ["SR"]],
            [
                "import org.apache.commons.codec.binary.Base64InputStream;",
                "CODE"
            ],
            ["public class TestReads {", "CODE"],
            ["public static void main(String[] args) {", "CODE"],
            [
                "Base64InputStream b64stream = new Base64InputStream(System.in, true, 0, null);",
                "CODE"
            ],
            ["int n = 0;", "CODE"],
            ["try", "CODE"],
            ["{", "CODE"],
            ["while (b64stream.read() != -1) n++;", "CODE"],
            ["}", "CODE"],
            ["catch (Exception x)", "CODE"],
            ["{", "CODE"],
            ["System.out.println(n);", "CODE"],
            ["x.printStackTrace();", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"]
        ]
    },
    "Closure-140": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Google Common Loader Extern"],
        "desc_hints": [],
        "desc_text": [
            ["I needed this for one of my projects.", []],
            ["Chad Killingsworth", []]
        ]
    },
    "Closure-121": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// ==/ClosureCompiler==",
            "function reset() {",
            "uid = Math.random();",
            "}",
            "function doStuff() {",
            "reset();",
            "var _uid = uid;",
            "if (uid < 0.5) {",
            "doStuff();",
            "}",
            "if (_uid !== uid) {",
            "throw 'reset() was called';",
            "}",
            "}",
            "doStuff();",
            "var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw\"reset() was called\";}b();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Overzealous optimization confuses variables"],
        "desc_hints": ["doStuff", "ClosureCompiler", "Math.random"],
        "desc_text": [
            ["The following code:", ["OB", "SR"]],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["var uid;", []],
            ["function reset() {", "CODE"],
            ["uid = Math.random();", "CODE"],
            ["}", "CODE"],
            ["function doStuff() {", "CODE"],
            ["reset();", "CODE"],
            ["var _uid = uid;", "CODE"],
            ["if (uid < 0.5) {", "CODE"],
            ["doStuff();", "CODE"],
            ["}", "CODE"],
            ["if (_uid !== uid) {", "CODE"],
            ["throw 'reset() was called';", "CODE"],
            ["}", "CODE"],
            ["}", "CODE"],
            ["doStuff();", "CODE"],
            ["...gets optimized to:", []],
            [
                "var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw\"reset() was called\";}b();",
                "CODE"
            ],
            [
                "Notice how _uid gets optimized away and (uid!==_uid) becomes (a!==a) even though doStuff() might have been called and uid's value may have changed and become different from _uid.",
                []
            ],
            [
                "As an aside, replacing the declaration with \"var _uid = +uid;\" fixes it, as does adding an extra \"uid = _uid\" after \"var _uid = uid\".",
                []
            ]
        ]
    },
    "Closure-40": {
        "code_elements": [
            "var goog = {};",
            "goog.inherits = function(x, y) {};",
            "var ns = {};",
            "/** @constructor */ ns.PageSelectionModel = function(){};",
            "/** @constructor */",
            "ns.PageSelectionModel.FooEvent = function() {};",
            "/** @constructor */",
            "ns.PageSelectionModel.SelectEvent = function() {};",
            "goog.inherits(ns.PageSelectionModel.ChangeEvent, ns.PageSelectionModel.FooEvent);"
        ],
        "stack_traces": [],
        "summary_hints": ["smartNameRemoval"],
        "summary_text": ["smartNameRemoval causing compiler crash"],
        "desc_hints": [
            "ns.PageSelectionModel.FooEvent",
            "ns.PageSelectionModel",
            "ns.PageSelectionModel.ChangeEvent",
            "PageSelectionModel",
            "goog.inherits",
            "smartNameRemoval",
            "ns.PageSelectionModel.SelectEvent"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["Compiler the following code in advanced mode:", ["OB", "SR"]],
            ["{{{", []],
            ["var goog = {};", "CODE"],
            ["goog.inherits = function(x, y) {};", "CODE"],
            ["var ns = {};", "CODE"],
            [
                "/** @constructor */ ns.PageSelectionModel = function(){};",
                "CODE"
            ],
            ["/** @constructor */", "CODE"],
            ["ns.PageSelectionModel.FooEvent = function() {};", "CODE"],
            ["/** @constructor */", "CODE"],
            ["ns.PageSelectionModel.SelectEvent = function() {};", "CODE"],
            [
                "goog.inherits(ns.PageSelectionModel.ChangeEvent, ns.PageSelectionModel.FooEvent);",
                "CODE"
            ],
            ["}}}", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["The compiler will crash.", ["OB"]],
            [
                "The last var check throws an illegal state exception because it knows something is wrong.",
                ["OB"]
            ],
            ["The crash is caused by smartNameRemoval.", ["OB"]],
            [
                "It has special logic for counting references in class-defining function calls (like goog.inherits), and it isn't properly creating a reference to PageSelectionModel.",
                ["OB", "SR"]
            ]
        ]
    },
    "JacksonDatabind-102": {
        "code_elements": [
            "final ObjectMapper mapper = new ObjectMapper();",
            "mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern(\"yyyy-MM-dd\"));",
            "mapper.registerModule(new SimpleModule() {",
            "{",
            "addSerializer(",
            "java.sql.Date.class,",
            "new SqlDateSerializer().withFormat(false, new SimpleDateFormat(\"yyyy-MM-dd\"))",
            ");",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["SqlDateSerializer"],
        "summary_text": [
            "Cannot set custom format for SqlDateSerializer globally"
        ],
        "desc_hints": [
            "createContextual",
            "mapper.configOverride",
            "java.util.Date",
            "setFormat",
            "github.com",
            "java.sql.Date",
            "java.sql.Date.class",
            "SimpleDateFormat",
            "addSerializer",
            "ObjectMapper",
            "mapper.registerModule",
            "SqlDateSerializer",
            "FasterXML",
            "JsonFormat.Value.forPattern",
            "SimpleModule",
            "withFormat",
            "DateTimeSerializerBase.java"
        ],
        "desc_text": [
            ["Version: 2.9.5", []],
            [
                "After #219 was fixed, the default format for java.sql.Date serialization switched from string to numeric, following the default value of WRITE_DATES_AS_TIMESTAMPS.",
                ["OB", "SR"]
            ],
            [
                "In order to prevent breaks, I want java.sql.Date to serialize as a string, without changing behavior for java.util.Date (which has always serialized as a number by default).",
                ["OB"]
            ],
            [
                "According to #219 (comment), I should be able to revert the behavior for java.sql.Date only with",
                ["EB"]
            ],
            ["final ObjectMapper mapper = new ObjectMapper();", "CODE"],
            [
                "mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern(\"yyyy-MM-dd\"));",
                "CODE"
            ],
            ["This doesn't seem to do anything, though.", ["OB"]],
            [
                "Looking at the code, it looks like it's because the custom format isn't actually added to SqlDateSerializer except in the createContextual method (https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java#L59).",
                ["OB"]
            ],
            ["For now, I've reverted this behavior with", []],
            ["mapper.registerModule(new SimpleModule() {", "CODE"],
            ["{", "CODE"],
            ["addSerializer(", "CODE"],
            ["java.sql.Date.class,", "CODE"],
            [
                "new SqlDateSerializer().withFormat(false, new SimpleDateFormat(\"yyyy-MM-dd\"))",
                "CODE"
            ],
            [");", "CODE"],
            ["}", "CODE"],
            ["});", []],
            [
                "but it seems pretty hacky so I'd prefer the other method if possible.",
                ["OB"]
            ]
        ]
    },
    "Closure-89": {
        "code_elements": [
            "// ==ClosureCompiler==",
            "// @compilation_level ADVANCED_OPTIMIZATIONS",
            "// @output_file_name default.js",
            "// @use_closure_library true",
            "// @formatting pretty_print",
            "// ==/ClosureCompiler==",
            "var map = {};",
            "var addToMap = function(key, func) {",
            "map[key] = func;",
            "var f1 = function() { alert('f1'); };",
            "f1.alwaysCall = true;",
            "var f2 = function() { alert('f2'); };",
            "addToMap('f1', f1);",
            "addToMap('f2', f2);",
            "var callFunctionByKey = function(key) {",
            "var f = map[key];",
            "if (f.alwaysCall) f();",
            "callFunctionByKey(Math.random() > 0.5 ? 'f1' : 'f2');",
            "var a = {};",
            "a.f1 = function() {",
            "alert(\"f1\")",
            "a.f2 = function() {",
            "alert(\"f2\")",
            "var b = a[Math.random() > 0.5 ? \"f1\" : \"f2\"];",
            "b.a && b();",
            "b.a && b();",
            "a.f1.a =  true;",
            "f1['alwaysCall'] = true;",
            "// In callFunctionByKey:",
            "if (f['alwaysCall']) f();"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": [
            "Compiler removes function properties that it should not"
        ],
        "desc_hints": [
            "compiler.appspot.com",
            "f1.alwaysCall",
            "ClosureCompiler",
            "Math.random",
            "lastMsg",
            "addToMap",
            "callFunctionByKey",
            "default.js",
            "alwaysCall"
        ],
        "desc_text": [
            [
                "The Compiler appears to remove properties that are added to functions.",
                ["OB"]
            ],
            ["I do not believe that it should do such a thing.", ["OB", "EB"]],
            [
                "In the following example, I add a property named \"alwaysCall\" to a function that I check later.",
                ["OB", "SR"]
            ],
            [
                "The property appears to be stripped, which changes the behavior of the program.",
                ["OB"]
            ],
            [
                "To see this in action run the following through http://closure-compiler.appspot.com/home:",
                ["OB", "SR"]
            ],
            ["// ==ClosureCompiler==", "CODE"],
            ["// @compilation_level ADVANCED_OPTIMIZATIONS", "CODE"],
            ["// @output_file_name default.js", "CODE"],
            ["// @use_closure_library true", "CODE"],
            ["// @formatting pretty_print", "CODE"],
            ["// ==/ClosureCompiler==", "CODE"],
            ["var lastMsg;", []],
            ["var map = {};", "CODE"],
            ["var addToMap = function(key, func) {", "CODE"],
            ["map[key] = func;", "CODE"],
            ["};", []],
            ["var f1 = function() { alert('f1'); };", "CODE"],
            ["f1.alwaysCall = true;", "CODE"],
            ["var f2 = function() { alert('f2'); };", "CODE"],
            ["addToMap('f1', f1);", "CODE"],
            ["addToMap('f2', f2);", "CODE"],
            ["var callFunctionByKey = function(key) {", "CODE"],
            ["var f = map[key];", "CODE"],
            ["if (f.alwaysCall) f();", "CODE"],
            ["};", []],
            ["callFunctionByKey(Math.random() > 0.5 ? 'f1' : 'f2');", "CODE"],
            ["The compiled code is:", []],
            ["var a = {};", "CODE"],
            ["a.f1 = function() {", "CODE"],
            ["alert(\"f1\")", "CODE"],
            ["};", []],
            ["a.f2 = function() {", "CODE"],
            ["alert(\"f2\")", "CODE"],
            ["};", []],
            ["var b = a[Math.random() > 0.5 ? \"f1\" : \"f2\"];", "CODE"],
            ["b.a && b();", "CODE"],
            [
                "Note that a.f1 does not have a property defined on it anymore, though it still appears to be checked on this line of code:",
                ["OB", "SR"]
            ],
            ["b.a && b();", "CODE"],
            ["So it looks like it is missing the following:", ["OB", "SR"]],
            ["a.f1.a =  true;", "CODE"],
            ["For now, I can workaround this by quoting the property:", []],
            ["f1['alwaysCall'] = true;", "CODE"],
            ["// In callFunctionByKey:", "CODE"],
            ["if (f['alwaysCall']) f();", "CODE"],
            [
                "But that seems as though it should not be necessary.",
                ["OB", "EB"]
            ]
        ]
    },
    "Lang-49": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["Fraction.reduce"],
        "summary_text": [
            "infinite loop in Fraction.reduce when numerator == 0"
        ],
        "desc_hints": [],
        "desc_text": [["Summary pretty much says it all.", ["OB"]]]
    },
    "Closure-18": {
        "code_elements": [
            "compilerOptions.setClosurePass(false);",
            "DependencyOptions dependencyOptions = new DependencyOptions();",
            "dependencyOptions.setDependencySorting(true);"
        ],
        "stack_traces": [],
        "summary_hints": ["closurePass"],
        "summary_text": [
            "Dependency sorting with closurePass set to false no longer works."
        ],
        "desc_hints": [
            "goog.require",
            "goog.provide",
            "dependencyOptions",
            "DependencyOptions",
            "code.google.com",
            "compilerOptions.setClosurePass",
            "dependencyOptions.setDependencySorting",
            "Compiler.java",
            "closurePass"
        ],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["Instantiate new instance of Compiler", []],
            ["2.", ["OB", "SR"]],
            [
                "Set closurePass to false to prevent goog.require/goog.provide removal.",
                ["OB"]
            ],
            ["compilerOptions.setClosurePass(false);", "CODE"],
            ["3.", ["OB", "SR"]],
            ["Turn dependency sorting on.", ["OB"]],
            [
                "DependencyOptions dependencyOptions = new DependencyOptions();",
                "CODE"
            ],
            ["dependencyOptions.setDependencySorting(true);", "CODE"],
            ["4.", ["OB", "SR"]],
            ["Compile js code", []],
            ["What is the expected output?", "QUERY"],
            [
                "Dependent files should be sorted and concatenated in their dependent order.",
                ["OB", "EB"]
            ],
            ["What do you see instead?", "QUERY"],
            ["Dependent files are not sorted.", ["OB"]],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["> r1824", []],
            ["mac OS 10.7", []],
            ["Please provide any additional information below.", "QUERY"],
            ["This worked in the r1810 release.", ["OB"]],
            ["However, it looks like this was changed in r1824.", ["OB"]],
            [
                "The compiler now expects closurePass to be true for dependency sorting to work.",
                ["OB", "EB"]
            ],
            [
                "http://code.google.com/p/closure-compiler/source/detail?path=/trunk/src/com/google/javascript/jscomp/Compiler.java&r=1824",
                []
            ],
            [
                "What we are looking for is a way to sort dependencies and concatenate all files in their dependent order without removing the goog.require/goog.provide js calls.",
                ["EB"]
            ],
            [
                "Turning closurePass to true causes the goog calls to be replaced.",
                ["OB"]
            ],
            [
                "We use this methodology in local development to test our JS code.",
                ["OB", "SR"]
            ],
            ["Thanks!", []]
        ]
    },
    "Cli-20": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["PosixParser"],
        "summary_text": [
            "PosixParser keeps processing tokens after a non unrecognized long option"
        ],
        "desc_hints": ["stopAtNonOption", "PosixParser"],
        "desc_text": [
            [
                "PosixParser keeps processing tokens after a non unrecognized long option when stopAtNonOption is enabled.",
                ["OB"]
            ],
            [
                "The tokens after the unrecognized long option are burst, split around '=', etc..",
                ["OB"]
            ],
            ["instead of being kept as is.", ["OB", "EB"]],
            [
                "For example, with the options 'a' and 'b' defined, 'b' having an argument, the following command line:",
                ["SR"]
            ],
            ["--zop -abfoo", ["OB"]],
            ["is interpreted as:", []],
            ["--zop -a -b foo", []],
            ["but the last token should remain unchanged.", ["OB", "EB"]]
        ]
    },
    "JacksonXml-5": {
        "code_elements": [
            "public class XMLTest {",
            "public static void main(String[] s) throws Exception {",
            "final ObjectMapper xmlMapper = new XmlMapper();",
            "final ObjectMapper noAnnotationsXmlMapper = xmlMapper.copy()",
            ".configure(MapperFeature.USE_ANNOTATIONS, false)",
            ".configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);",
            "System.out.println(noAnnotationsXmlMapper.writeValueAsString(new XMLTest()));",
            "System.out.println(xmlMapper.writeValueAsString(new XMLTest()));",
            "}",
            "}"
        ],
        "stack_traces": [],
        "summary_hints": ["XmlMappers", "JacksonXmlRootElement"],
        "summary_text": [
            "@JacksonXmlRootElement malfunction when using it with multiple XmlMappers and disabling annotations"
        ],
        "desc_hints": [
            "SerializationFeature.FAIL_ON_EMPTY_BEANS",
            "xmlMapper.copy",
            "xmlMapper.writeValueAsString",
            "noAnnotationsXmlMapper",
            "xmlMapper",
            "JacksonXmlRootElement",
            "MapperFeature.USE_ANNOTATIONS",
            "XmlMapper",
            "ObjectMapper",
            "localName",
            "System.out.println",
            "noAnnotationsXmlMapper.writeValueAsString"
        ],
        "desc_text": [
            [
                "Found this in version 2.9.4 running some tests that go back and forth serializing with an XML mapper that uses annotations, and another one that ignores them.",
                ["OB", "SR"]
            ],
            [
                "May be related to issue #171 and the cache of class annotations.",
                []
            ],
            [
                "When running this code, the second print statement should use the annotation's localName but it instead uses the class name.",
                ["OB", "EB", "SR"]
            ],
            ["@JacksonXmlRootElement(localName = \"myname\")", []],
            ["public class XMLTest {", "CODE"],
            ["public static void main(String[] s) throws Exception {", "CODE"],
            ["final ObjectMapper xmlMapper = new XmlMapper();", "CODE"],
            [
                "final ObjectMapper noAnnotationsXmlMapper = xmlMapper.copy()",
                "CODE"
            ],
            [".configure(MapperFeature.USE_ANNOTATIONS, false)", "CODE"],
            [
                ".configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);",
                "CODE"
            ],
            [
                "System.out.println(noAnnotationsXmlMapper.writeValueAsString(new XMLTest()));",
                "CODE"
            ],
            [
                "System.out.println(xmlMapper.writeValueAsString(new XMLTest()));",
                "CODE"
            ],
            ["}", "CODE"],
            ["}", "CODE"],
            ["Output:", ["OB"]],
            ["<XMLTest/>", []],
            ["<XMLTest/>", []]
        ]
    },
    "Compress-32": {
        "code_elements": [
            "} else if (\"gid\".equals(key))",
            "{",
            "currEntry.setGroupId(Integer.parseInt(val));",
            "...",
            "}",
            "else if (\"uid\".equals(key)){",
            "currEntry.setUserId(Integer.parseInt(val));"
        ],
        "stack_traces": [],
        "summary_hints": ["TarArchiveInputStream"],
        "summary_text": [
            "TarArchiveInputStream rejects uid or gid >= 0x80000000"
        ],
        "desc_hints": [
            "Long.parseLong",
            "java.lang.NumberFormatException.forInputString",
            "NumberFormatException",
            "currEntry.setGroupId",
            "TarArchiveInputStream.java",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders",
            "TarArchiveEntry",
            "TarArchiveInputStream",
            "java.lang.Integer.parseInt",
            "java.lang.NumberFormatException",
            "applyPaxHeadersToCurrentEntry",
            "Integer.parseInt",
            "pubs.opengroup.org",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry",
            "currEntry.setUserId",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry",
            "NumberFormatException.java",
            "Integer.java",
            "pax.html"
        ],
        "desc_text": [
            [
                "A POSIX-format archive that came from sysdiagnose produces NumberFormatException[1] when I try to read it with TarArchiveInputStream.",
                ["OB", "SR"]
            ],
            ["The relevant part of the .tar file looks like this:", ["OB"]],
            ["18 uid=429496729", []],
            [
                "That's the uid of 'nobody' on Mac OS (on Mac OS, uid_t is 'unsigned int').",
                []
            ],
            [
                "POSIX doesn't say anything about the width of the uid extended header[2], so I assume the tar file is okay.",
                ["OB"]
            ],
            ["GNU tar doesn't have trouble with it.", ["OB"]],
            ["The relevant code, in applyPaxHeadersToCurrentEntry:", []],
            ["} else if (\"gid\".equals(key))", "CODE"],
            ["{", "CODE"],
            ["currEntry.setGroupId(Integer.parseInt(val));", "CODE"],
            ["...", "CODE"],
            ["}", "CODE"],
            ["else if (\"uid\".equals(key)){", "CODE"],
            ["currEntry.setUserId(Integer.parseInt(val));", "CODE"],
            [
                "uid_t and gid_t are typically unsigned 32-bit integers, so these should presumably use Long.parseLong to handle integers with the top bit set (and TarArchiveEntry would need some modifications to handle large uid and gid, too).",
                ["EB", "SR"]
            ],
            [
                "[1] java.lang.NumberFormatException: For input string: \"4294967294\"",
                []
            ],
            [
                "at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)",
                []
            ],
            ["at java.lang.Integer.parseInt(Integer.java:495)", []],
            ["at java.lang.Integer.parseInt(Integer.java:527)", []],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(TarArchiveInputStream.java:488)",
                []
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(TarArchiveInputStream.java:415)",
                []
            ],
            [
                "at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:295)",
                []
            ],
            [
                "[2] http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_03",
                []
            ],
            ["uid", []],
            [
                "The user ID of the file owner, expressed as a decimal number using digits from the ISO/IEC 646:1991 standard.",
                []
            ],
            [
                "This record shall override the uid field in the following header block(s).",
                ["OB"]
            ],
            [
                "When used in write or copy mode, pax shall include a uid extended header record for each file whose owner ID is greater than 2097151 (octal 7777777).",
                ["OB", "SR"]
            ]
        ]
    },
    "Closure-156": {
        "code_elements": [
            "/** @constructor",
            "*  @param {...Object} params",
            "*/",
            "dojox.gfx.shape.Shape = function(params) {};"
        ],
        "stack_traces": [
            "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
            "Caused by: java.lang.IllegalStateException: Unexpected variable dojox$gfx$shape$Shape",
            "... 47 more"
        ],
        "summary_hints": [],
        "summary_text": ["Compiler crashes on assign statement"],
        "desc_hints": [
            "java.lang.RuntimeException",
            "dojo.declare",
            "com.google.javascript.jscomp.Compiler.runInCompilerThread",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun",
            "dijit.js.uncompressed.js",
            "java.lang.Thread.run",
            "com.google.javascript.jscomp.VarCheck.visit",
            "com.google.javascript.jscomp.CommandLineRunner.main",
            "com.google.javascript.jscomp.AbstractCommandLineRunner.run",
            "com.google.javascript.jscomp.Compiler",
            "NamedPass.process",
            "com.google.javascript.jscomp.VarCheck.process",
            "PassFactoryDelegate.processInternal",
            "com.google.javascript.jscomp.Compiler.compileInternal",
            "com.google.javascript.jscomp.PhaseOptimizer",
            "com.google.javascript.jscomp.Compiler.optimize",
            "com.google.javascript.jscomp.Compiler.access",
            "com.google.javascript.jscomp.Compiler.compile",
            "com.google.javascript.jscomp.PhaseOptimizer.process",
            "dojox.gfx.shape.Shape.prototype",
            "dojox.gfx.shape.Shape",
            "java.lang.IllegalStateException",
            "com.google.javascript.jscomp.NodeTraversal.traverseRoots",
            "com.google.javascript.jscomp.Compiler.runCallable",
            "com.google.javascript.jscomp.NodeTraversal.traverseBranch"
        ],
        "desc_text": [
            [
                "It is a large app (containing the entire Dojo Toolkit library).",
                ["OB"]
            ],
            ["Code fragment that fails:", []],
            ["/** @constructor", "CODE"],
            ["*  @param {...Object} params", "CODE"],
            ["*/", "CODE"],
            ["dojox.gfx.shape.Shape = function(params) {};", "CODE"],
            [
                "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ { .......",
                []
            ],
            ["Error message:", ["OB"]],
            [
                "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                ["OB"]
            ],
            ["Please report this problem.", []],
            ["Unexpected variable dojox$gfx$shape$Shape", []],
            [
                "Node(NAME dojox$gfx$shape$Shape): release\\src\\dijit.js.uncompressed.js:15135:0",
                []
            ],
            [
                "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {",
                []
            ],
            [
                "Parent(ASSIGN): release\\src\\dijit.js.uncompressed.js:15135:22",
                []
            ],
            [
                "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compile(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)",
                []
            ],
            [
                "Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
                "STACK_TRACE"
            ],
            ["Please report this problem.", []],
            ["Unexpected variable dojox$gfx$shape$Shape", []],
            [
                "Node(NAME dojox$gfx$shape$Shape): release\\src\\dijit.js.uncompressed.js:15135:0",
                []
            ],
            [
                "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {",
                []
            ],
            [
                "Parent(ASSIGN): release\\src\\dijit.js.uncompressed.js:15135:22",
                []
            ],
            [
                "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {",
                []
            ],
            [
                "at com.google.javascript.jscomp.VarCheck.visit(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.NodeTraversal.traverseRoots(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.VarCheck.process(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)",
                []
            ],
            [
                "at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)",
                []
            ],
            ["at java.lang.Thread.run(Unknown Source)", []],
            [
                "Caused by: java.lang.IllegalStateException: Unexpected variable dojox$gfx$shape$Shape",
                "STACK_TRACE"
            ],
            ["... 47 more", "STACK_TRACE"]
        ]
    },
    "Closure-127": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["Break in finally block isn't optimized properly"],
        "desc_hints": ["TryStatement", "console.log"],
        "desc_text": [
            [
                "b: try { throw(\"throw me\") } finally { /* fake catcher */ ; break b }; console.log(\"ok then...\")",
                []
            ],
            ["...", []],
            ["gets optimized into ...", ["OB"]],
            ["throw\"throw me\";", []],
            ["...", []],
            ["which is not the same.", ["OB"]],
            [
                "The break in the finally block should prevent the exception from being passed on.",
                ["OB", "EB"]
            ],
            ["The expected result is:", ["OB", "EB"]],
            ["console.log(\"ok then...\")", []],
            ["ECMA-262 says:", []],
            [
                "The production TryStatement : try Block Finally is evaluated as follows:",
                ["SR"]
            ],
            ["Let B be the result of evaluating Block.", ["OB"]],
            ["Let F be the result of evaluating Finally.", ["OB"]],
            ["If F.type is normal, return B.", ["OB"]],
            ["Return F.", []],
            [
                "F.type in this case would be 'break' and not 'normal', so 'break' overrides the 'throw' of B",
                []
            ],
            [
                "This is with the build available for download on Feb 28 2013.",
                ["OB"]
            ]
        ]
    },
    "JacksonDatabind-71": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["CharSequence", "KeyDeserializer"],
        "summary_text": ["Missing KeyDeserializer for CharSequence"],
        "desc_hints": ["CharSequence"],
        "desc_text": [
            [
                "Looks like use of nominal Map key type of CharSequence does not work yet (as of 2.7.8 / 2.8.6).",
                ["OB"]
            ],
            [
                "This is something that is needed to work with certain frameworks, such as Avro's generated POJOs.",
                []
            ]
        ]
    },
    "JxPath-21": {
        "code_elements": [
            "Map<String, Integer> m = new HashMap<String, Integer>();",
            "m.put(\"a\", 1);",
            "m.put(\"b\", null);",
            "m.put(\"c\", 1);",
            "JXPathContext c = JXPathContext.newContext(m);",
            "System.out.println(c.getValue(\"a != b\") + \" should be true\");",
            "System.out.println(c.getValue(\"a != c\") + \" should be false\");",
            "System.out.println(c.getValue(\"a = b\") + \" should be false\");",
            "System.out.println(c.getValue(\"a = c\") + \" should be true\");",
            "System.out.println(c.getValue(\"not(a = b)\") + \" should be true\");",
            "System.out.println(c.getValue(\"not(a = c)\") + \" should be false\");"
        ],
        "stack_traces": [],
        "summary_hints": [],
        "summary_text": ["null handling is inconsistent"],
        "desc_hints": [
            "JXPathContext.newContext",
            "getValue",
            "JXPathContext",
            "HashMap",
            "System.out.println"
        ],
        "desc_text": [
            ["Comparing a vaule to null using unequals (!=) yields false!", []],
            [
                "Map<String, Integer> m = new HashMap<String, Integer>();",
                "CODE"
            ],
            ["m.put(\"a\", 1);", "CODE"],
            ["m.put(\"b\", null);", "CODE"],
            ["m.put(\"c\", 1);", "CODE"],
            ["JXPathContext c = JXPathContext.newContext(m);", "CODE"],
            [
                "System.out.println(c.getValue(\"a != b\") + \" should be true\");",
                "CODE"
            ],
            [
                "System.out.println(c.getValue(\"a != c\") + \" should be false\");",
                "CODE"
            ],
            [
                "System.out.println(c.getValue(\"a = b\") + \" should be false\");",
                "CODE"
            ],
            [
                "System.out.println(c.getValue(\"a = c\") + \" should be true\");",
                "CODE"
            ],
            [
                "System.out.println(c.getValue(\"not(a = b)\") + \" should be true\");",
                "CODE"
            ],
            [
                "System.out.println(c.getValue(\"not(a = c)\") + \" should be false\");",
                "CODE"
            ],
            ["Output using 1.3:", []],
            ["false should be true", ["EB"]],
            ["false should be false", ["EB"]],
            ["false should be false", ["EB"]],
            ["true should be true", ["EB"]],
            ["true should be true", ["EB"]],
            ["false should be false", ["EB"]],
            ["In 1.2 it works correctly!", []]
        ]
    },
    "Closure-111": {
        "code_elements": [
            "/**",
            "* @param {*} object",
            "* @return {*}",
            "*/",
            "var test = function(object) {",
            "if (goog.isArray(object)) {",
            "/** @type {Array} */ var x = object;",
            "return x;",
            "}",
            "/** @type {Array} */ var x = object;"
        ],
        "stack_traces": [],
        "summary_hints": ["goog.isArray"],
        "summary_text": ["goog.isArray doesn't hint compiler"],
        "desc_hints": ["goog.is", "code.google.com", "goog.isArray"],
        "desc_text": [
            ["What steps will reproduce the problem?", "QUERY"],
            ["1.", ["OB", "SR"]],
            ["/**", "CODE"],
            ["* @param {*} object", "CODE"],
            ["* @return {*}", "CODE"],
            ["*/", "CODE"],
            ["var test = function(object) {", "CODE"],
            ["if (goog.isArray(object)) {", "CODE"],
            ["/** @type {Array} */ var x = object;", "CODE"],
            ["return x;", "CODE"],
            ["}", "CODE"],
            ["};", []],
            ["2.", ["OB", "SR"]],
            ["ADVANCED_OPTIMIZATIONS", []],
            ["What is the expected output? What do you see instead?", "QUERY"],
            ["ERROR - initializing variable", ["OB"]],
            ["found : *", []],
            ["required: (Array|null)", []],
            ["/** @type {Array} */ var x = object;", "CODE"],
            ["^", []],
            [
                "What version of the product are you using? On what operating system?",
                "QUERY"
            ],
            ["Closure Compiler (http://code.google.com/closure/compiler)", []],
            ["Version: v20130411-90-g4e19b4e", []],
            ["Built on: 2013/06/03 12:07", []],
            ["Please provide any additional information below.", "QUERY"],
            [
                "goog.is* is supposed to help the compiler to check which type we're dealing with.",
                []
            ]
        ]
    },
    "Lang-34": {
        "code_elements": [],
        "stack_traces": [],
        "summary_hints": ["ThreadLocals", "HashCodeBuilder", "ToStringStyle"],
        "summary_text": [
            "Use of ThreadLocals in ToStringStyle and HashCodeBuilder trigger memory leaks in container environments"
        ],
        "desc_hints": [
            "org.apache.commons.lang3.builder.ToStringStyle",
            "markmail.org"
        ],
        "desc_text": [
            [
                "The thread local in org.apache.commons.lang3.builder.ToStringStyle is created but never removed and no API is provided to remove it.",
                ["OB"]
            ],
            [
                "If a webapp's use of LANG triggers the loading of this class, a reference chain will be created that will cause a memory leak on web application reload.",
                ["OB", "SR"]
            ],
            [
                "See http://markmail.org/thread/uetw2fdrsqgbh2cv for more info.",
                ["OB"]
            ]
        ]
    }
}
