{"issue_id": "531", "title": "Non-blocking parser reports incorrect locations when fed with non-zero offset", "description": "\n<p dir=\"auto\">When feeding a non-blocking parser, the input array offset leaks into the offsets reported by <code class=\"notranslate\">getCurrentLocation()</code> and <code class=\"notranslate\">getTokenLocation()</code>.</p>\n<p dir=\"auto\">For example, feeding with an offset of 7 yields tokens whose reported locations are 7 greater than they should be. Likewise the current location reported by the parser is 7 greater than the correct location.</p>\n<p dir=\"auto\">It's not possible for a user to work around this issue by subtracting 7 from the reported locations, because the token location may have been established by an earlier feeding with a different offset.</p>\n<p dir=\"auto\">Jackson version: 2.9.8</p>\n<p dir=\"auto\">Unit test:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.async.ByteArrayFeeder;\nimport org.junit.Test;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.junit.Assert.assertEquals;\n\npublic class FeedingOffsetTest {\n\n  @Test\n  public void inputOffsetShouldNotAffectLocations() throws Exception {\n    JsonFactory jsonFactory = new JsonFactory();\n    JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();\n    ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();\n\n    byte[] input = \"[[[\".getBytes(UTF_8);\n\n    feeder.feedInput(input, 2, 3);\n    assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n    assertEquals(1, parser.getCurrentLocation().getByteOffset()); // ACTUAL = 3\n    assertEquals(1, parser.getTokenLocation().getByteOffset());   // ACTUAL = 3\n\n    feeder.feedInput(input, 0, 1);\n    assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n    assertEquals(2, parser.getCurrentLocation().getByteOffset());\n    assertEquals(2, parser.getTokenLocation().getByteOffset());\n  }\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonFactory</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonParser</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonToken</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">async</span>.<span class=\"pl-s1\">ByteArrayFeeder</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">nio</span>.<span class=\"pl-s1\">charset</span>.<span class=\"pl-s1\">StandardCharsets</span>.<span class=\"pl-c1\">UTF_8</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">FeedingOffsetTest</span> {\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">inputOffsetShouldNotAffectLocations</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n    <span class=\"pl-smi\">JsonFactory</span> <span class=\"pl-s1\">jsonFactory</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonFactory</span>();\n    <span class=\"pl-smi\">JsonParser</span> <span class=\"pl-s1\">parser</span> = <span class=\"pl-s1\">jsonFactory</span>.<span class=\"pl-en\">createNonBlockingByteArrayParser</span>();\n    <span class=\"pl-smi\">ByteArrayFeeder</span> <span class=\"pl-s1\">feeder</span> = (<span class=\"pl-smi\">ByteArrayFeeder</span>) <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">getNonBlockingInputFeeder</span>();\n\n    <span class=\"pl-smi\">byte</span>[] <span class=\"pl-s1\">input</span> = <span class=\"pl-s\">\"[[[\"</span>.<span class=\"pl-en\">getBytes</span>(<span class=\"pl-c1\">UTF_8</span>);\n\n    <span class=\"pl-s1\">feeder</span>.<span class=\"pl-en\">feedInput</span>(<span class=\"pl-s1\">input</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>);\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-smi\">JsonToken</span>.<span class=\"pl-c1\">START_ARRAY</span>, <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">nextToken</span>());\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">getCurrentLocation</span>().<span class=\"pl-en\">getByteOffset</span>()); <span class=\"pl-c\">// ACTUAL = 3</span>\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">getTokenLocation</span>().<span class=\"pl-en\">getByteOffset</span>());   <span class=\"pl-c\">// ACTUAL = 3</span>\n\n    <span class=\"pl-s1\">feeder</span>.<span class=\"pl-en\">feedInput</span>(<span class=\"pl-s1\">input</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>);\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-smi\">JsonToken</span>.<span class=\"pl-c1\">START_ARRAY</span>, <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">nextToken</span>());\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">getCurrentLocation</span>().<span class=\"pl-en\">getByteOffset</span>());\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-s1\">parser</span>.<span class=\"pl-en\">getTokenLocation</span>().<span class=\"pl-en\">getByteOffset</span>());\n  }\n}</pre></div>\n"}