{"issue_id": "1991", "title": "Context attributes are not passed/available to custom serializer if object is in POJO", "description": "\n<p dir=\"auto\">Below is a test case where I create a custom serializer and use it to serialize an object 1) in a HashMap and 2) in an ObjectNode. In both cases I pass attribute to the serializer like this:<br/>\n<code class=\"notranslate\">mapper.writer().withAttribute(\"myAttr\", \"Hello!\")</code><br/>\nSerializing HashMap works as expected, but during ObjectNode serialization the attribute is null . It seems that in both cases the custom serializer should get access to the passed attribute and so both lines in the output should contain \"Hello!\"</p>\n<p dir=\"auto\">Produced output from running testCase.test()</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='{\"data\":{\"aStr\":\"The value is: Hello!\"}}\n{\"data\":{\"aStr\":\"The value is: NULL\"}}\n'><pre class=\"notranslate\"><code>{\"data\":{\"aStr\":\"The value is: Hello!\"}}\n{\"data\":{\"aStr\":\"The value is: NULL\"}}\n\n</code></pre></div>\n<p dir=\"auto\">Test case:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TestCase {\n  public final static ObjectMapper mapper = new ObjectMapper();\n\n  @JsonSerialize(using = TestCase.CustomSer.class)\n  public static class Data {\n    public String aStr;\n  }\n\n  public static class CustomSer extends StdSerializer&lt;Data&gt; {\n    public CustomSer() {\n      super(Data.class);\n    }\n\n    @Override\n    public void serialize(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n      String attrStr = (String) provider.getAttribute(\"myAttr\");\n      gen.writeStartObject();\n      gen.writeObjectField(\"aStr\", \"The value is: \" + (attrStr == null ? \"NULL\" : attrStr));\n      gen.writeEndObject();\n    }\n  }\n\n  public static void test() throws IOException {\n    Data data = new Data();\n    data.aStr = \"Hello\";\n\n    Map&lt;String, Object&gt; mapTest = new HashMap&lt;&gt;();\n    mapTest.put(\"data\", data);\n\n    ObjectNode treeTest = mapper.createObjectNode();\n    treeTest.putPOJO(\"data\", data);\n\n    String mapOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(mapTest);\n    System.out.println(mapOut);\n\n    String treeOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(treeTest);\n    System.out.println(treeOut);\n  }\n}\n'><pre class=\"notranslate\"><code>import com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TestCase {\n  public final static ObjectMapper mapper = new ObjectMapper();\n\n  @JsonSerialize(using = TestCase.CustomSer.class)\n  public static class Data {\n    public String aStr;\n  }\n\n  public static class CustomSer extends StdSerializer&lt;Data&gt; {\n    public CustomSer() {\n      super(Data.class);\n    }\n\n    @Override\n    public void serialize(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n      String attrStr = (String) provider.getAttribute(\"myAttr\");\n      gen.writeStartObject();\n      gen.writeObjectField(\"aStr\", \"The value is: \" + (attrStr == null ? \"NULL\" : attrStr));\n      gen.writeEndObject();\n    }\n  }\n\n  public static void test() throws IOException {\n    Data data = new Data();\n    data.aStr = \"Hello\";\n\n    Map&lt;String, Object&gt; mapTest = new HashMap&lt;&gt;();\n    mapTest.put(\"data\", data);\n\n    ObjectNode treeTest = mapper.createObjectNode();\n    treeTest.putPOJO(\"data\", data);\n\n    String mapOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(mapTest);\n    System.out.println(mapOut);\n\n    String treeOut = mapper.writer().withAttribute(\"myAttr\", \"Hello!\").writeValueAsString(treeTest);\n    System.out.println(treeOut);\n  }\n}\n\n</code></pre></div>\n"}