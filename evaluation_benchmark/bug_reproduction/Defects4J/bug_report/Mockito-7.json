{"issue_id": "128", "title": "Deep stubbing with generic responses in the call chain is not working", "description": "\n<p dir=\"auto\">Deep stubbing will throw an Exception if multiple generics occur in the call chain. For instance, consider having a mock <code class=\"notranslate\">myMock1</code> that provides a function that returns a generic <code class=\"notranslate\">T</code>. If <code class=\"notranslate\">T</code> also has a function that returns a generic, an Exception with the message \"Raw extraction not supported for : 'null'\" will be thrown.</p>\n<p dir=\"auto\">As an example the following test will throw an Exception:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class MockitoGenericsDeepStubTest {\n\n    @Test\n    public void discoverDeepMockingOfGenerics() {\n        MyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\n\n        when(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n    }\n\n    public static interface MyClass1 &lt;MC2 extends MyClass2&gt; {\n        public MC2 getNested();\n    }\n\n    public static interface MyClass2&lt;MC3 extends MyClass3&gt; {\n        public MC3 getNested();\n    }\n\n    public static interface MyClass3 {\n        public String returnSomething();\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MockitoGenericsDeepStubTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">discoverDeepMockingOfGenerics</span>() {\n        <span class=\"pl-smi\">MyClass1</span> <span class=\"pl-s1\">myMock1</span> = <span class=\"pl-en\">mock</span>(<span class=\"pl-smi\">MyClass1</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-c1\">RETURNS_DEEP_STUBS</span>);\n\n        <span class=\"pl-en\">when</span>(<span class=\"pl-s1\">myMock1</span>.<span class=\"pl-en\">getNested</span>().<span class=\"pl-en\">getNested</span>().<span class=\"pl-en\">returnSomething</span>()).<span class=\"pl-en\">thenReturn</span>(<span class=\"pl-s\">\"Hello World.\"</span>);\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">MyClass1</span> &lt;<span class=\"pl-c1\">MC2</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">MyClass2</span>&gt; {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MC2</span> <span class=\"pl-en\">getNested</span>();\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">MyClass2</span>&lt;<span class=\"pl-c1\">MC3</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">MyClass3</span>&gt; {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MC3</span> <span class=\"pl-en\">getNested</span>();\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">MyClass3</span> {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">returnSomething</span>();\n    }\n}</pre></div>\n<p dir=\"auto\">You can make this test run if you step into the class <code class=\"notranslate\">ReturnsDeepStubs</code> and change the method <code class=\"notranslate\">withSettingsUsing</code> to return <code class=\"notranslate\">MockSettings</code> with <code class=\"notranslate\">ReturnsDeepStubs</code> instead of <code class=\"notranslate\">ReturnsDeepStubsSerializationFallback</code> as default answer:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\n    MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n            withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n            : withSettings();\n\n    return propagateSerializationSettings(mockSettings, parentMockSettings)\n            .defaultAnswer(this);\n}\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-smi\">MockSettings</span> <span class=\"pl-s1\">withSettingsUsing</span>(<span class=\"pl-smi\">GenericMetadataSupport</span> <span class=\"pl-s1\">returnTypeGenericMetadata</span>, <span class=\"pl-smi\">MockCreationSettings</span> <span class=\"pl-s1\">parentMockSettings</span>) {\n    <span class=\"pl-smi\">MockSettings</span> <span class=\"pl-s1\">mockSettings</span> = <span class=\"pl-s1\">returnTypeGenericMetadata</span>.<span class=\"pl-en\">hasRawExtraInterfaces</span>() ?\n            <span class=\"pl-en\">withSettings</span>().<span class=\"pl-en\">extraInterfaces</span>(<span class=\"pl-s1\">returnTypeGenericMetadata</span>.<span class=\"pl-en\">rawExtraInterfaces</span>())\n            : <span class=\"pl-en\">withSettings</span>();\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">propagateSerializationSettings</span>(<span class=\"pl-s1\">mockSettings</span>, <span class=\"pl-s1\">parentMockSettings</span>)\n            .<span class=\"pl-en\">defaultAnswer</span>(<span class=\"pl-smi\">this</span>);\n}</pre></div>\n<p dir=\"auto\">However, this breaks other tests and features.</p>\n<p dir=\"auto\">I think, the issue is that further generics are not possible to be mocked by <code class=\"notranslate\">ReturnsDeepStubsSerializationFallback</code> since the <code class=\"notranslate\">GenericMetadataSupport</code> is \"closed\" at this point.</p>\n<p dir=\"auto\">Thanks and kind regards<br/>\nTobias</p>\n"}