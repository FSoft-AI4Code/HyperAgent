{"issue_id": "COMPRESS-277", "title": "IOUtils.skip does not work as advertised", "description": "\n<div class=\"user-content-block\">\n<p>I am trying to feed a TarInputStream from a CipherInputStream.<br/>\nIt does not work, because IOUtils.skip() does not adhere to the contract it claims in javadoc:</p>\n<p>\"     * &lt;p&gt;This method will only skip less than the requested number of</p>\n<ul>\n<li>bytes if the end of the input stream has been reached.&lt;/p&gt;\"</li>\n</ul>\n<p>However it does:</p>\n<p>            long skipped = input.skip(numToSkip);<br/>\n            if (skipped == 0) </p>\n{\n                break;\n            }\n\n<p>And the input stream javadoc says:</p>\n<p>\"     * This may result from any of a number of conditions; reaching end of file</p>\n<ul>\n<li>before &lt;code&gt;n&lt;/code&gt; bytes have been skipped is only one possibility.\"</li>\n</ul>\n<p>In the case of CipherInputStream, it stops at the end of each byte buffer.</p>\n<p>If you check the IOUtils from colleagues at commons-io, they have considered this case in IOUtils.skip() where they use a read to skip through the stream.<br/>\nAn optimized version could combine trying to skip, then read then trying to skip again.</p>\n</div>\n"}