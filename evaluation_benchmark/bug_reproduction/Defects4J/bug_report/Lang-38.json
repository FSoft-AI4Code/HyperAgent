{"issue_id": "LANG-538", "title": "DateFormatUtils.format does not correctly change Calendar TimeZone in certain situations", "description": "\n<div class=\"user-content-block\">\n<p>If a Calendar object is constructed in certain ways a call to Calendar.setTimeZone does not correctly change the Calendars fields.  Calling Calenar.getTime() seems to fix this problem.  While this is probably a bug in the JDK, it would be nice if DateFormatUtils was smart enough to detect/resolve this problem.</p>\n<p>For example, the following unit test fails:</p>\n<div class=\"preformatted panel\" style=\"border-width: 1px;\"><div class=\"preformattedContent panelContent\">\n<pre>  public void testFormat_CalendarIsoMsZulu() {\n    final String dateTime = \"2009-10-16T16:42:16.000Z\";\n\n    // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n    // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n    cal.clear();\n    cal.set(2009, 9, 16, 8, 42, 16);\n\n\n    FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(\"dateTime\", dateTime, format.format(cal));\n  }\n</pre>\n</div></div>\n<p>However, this unit test passes:</p>\n<div class=\"preformatted panel\" style=\"border-width: 1px;\"><div class=\"preformattedContent panelContent\">\n<pre>  public void testFormat_CalendarIsoMsZulu() {\n    final String dateTime = \"2009-10-16T16:42:16.000Z\";\n    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n    cal.clear();\n    cal.set(2009, 9, 16, 8, 42, 16);\n    cal.getTime();\n\n    FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(\"dateTime\", dateTime, format.format(cal));\n  }\n</pre>\n</div></div>\n</div>\n"}