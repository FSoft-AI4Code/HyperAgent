{"issue_id": "1607", "title": "@JsonIdentityReference not used when setup on class only", "description": "\n<p dir=\"auto\">I am trying to setup @JsonIdentityInfo/@JsonIdentityReference in order to serialize all references to a given class as Object Id (and deserialize them later using a custom ObjectIdResolver to retrieve the proper referenced instance)</p>\n<p dir=\"auto\">I use @JsonIdentityReference(alwaysAsId=true) in order to enforce exporting the object id in all cases.<br/>\nIt does not work as expected when I define the annotation only on the class (but it works fine when I set it directly on the property). I would rather not have to define it on every property as I will probably miss some...</p>\n<p dir=\"auto\">From what I see in <a href=\"https://github.com/FasterXML/jackson-databind/blob/fea0d29eabcb8e4825a318501b35f8a759c91426/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java#L473\">BeanSerializerBase</a>, the alwaysAsId is reset when not ObjectIdInfo is found on the accessor:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n            if (objectIdInfo == null) {\n                // no ObjectId override, but maybe ObjectIdRef?\n                if (oiw != null) {\n                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\noiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\"><pre>            <span class=\"pl-smi\">ObjectIdInfo</span> <span class=\"pl-s1\">objectIdInfo</span> = <span class=\"pl-s1\">intr</span>.<span class=\"pl-en\">findObjectIdInfo</span>(<span class=\"pl-s1\">accessor</span>);\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">objectIdInfo</span> == <span class=\"pl-c1\">null</span>) {\n                <span class=\"pl-c\">// no ObjectId override, but maybe ObjectIdRef?</span>\n                <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">oiw</span> != <span class=\"pl-c1\">null</span>) {\n                    <span class=\"pl-s1\">objectIdInfo</span> = <span class=\"pl-s1\">intr</span>.<span class=\"pl-en\">findObjectReferenceInfo</span>(<span class=\"pl-s1\">accessor</span>,\n                            <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectIdInfo</span>(<span class=\"pl-c1\">NAME_FOR_OBJECT_REF</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>));\n<span class=\"pl-s1\">oiw</span> = <span class=\"pl-s1\">_objectIdWriter</span>.<span class=\"pl-en\">withAlwaysAsId</span>(<span class=\"pl-s1\">objectIdInfo</span>.<span class=\"pl-en\">getAlwaysAsId</span>());</pre></div>\n<p dir=\"auto\">Shouldn't it be kept to the current value when no override is found ?<br/>\nI tried to set it back in the default ObjectIdInfo created with NAME_FOR_OBJECT_REF but I am not sure if this is the right way to fix this.</p>\n<p dir=\"auto\">Here is test I added in <a href=\"https://github.com/vboulaye/jackson-databind/blob/master/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization.java#L324\">TestObjectIdSerialization</a> for this case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='\n    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n    @JsonIdentityReference(alwaysAsId=true)\n    static class ReallyAlwaysAsId\n    {\n        public int value;\n\n        public ReallyAlwaysAsId() { this(0); }\n        public ReallyAlwaysAsId(int v) {\n            value = v;\n        }\n    }\n\n    @JsonPropertyOrder(alphabetic=true)\n    static class ReallyAlwaysContainer\n    {\n\n        @JsonIdentityReference(alwaysAsId=true)\n        public AlwaysAsId a = new AlwaysAsId(13);\n\n        public ReallyAlwaysAsId b = new ReallyAlwaysAsId(13);\n\n    }\n\n    public void testReallyAlwaysAsId() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());\n        assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2}\", json);\n    }\n'><pre>    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityInfo</span>(<span class=\"pl-s1\">generator</span>=<span class=\"pl-smi\">ObjectIdGenerators</span>.<span class=\"pl-s1\">IntSequenceGenerator</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">property</span>=<span class=\"pl-s\">\"id\"</span>)\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityReference</span>(<span class=\"pl-s1\">alwaysAsId</span>=<span class=\"pl-c1\">true</span>)\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ReallyAlwaysAsId</span>\n    {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">value</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ReallyAlwaysAsId</span>() { <span class=\"pl-smi\">this</span>(<span class=\"pl-c1\">0</span>); }\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ReallyAlwaysAsId</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">v</span>) {\n            <span class=\"pl-s1\">value</span> = <span class=\"pl-s1\">v</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonPropertyOrder</span>(<span class=\"pl-s1\">alphabetic</span>=<span class=\"pl-c1\">true</span>)\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ReallyAlwaysContainer</span>\n    {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityReference</span>(<span class=\"pl-s1\">alwaysAsId</span>=<span class=\"pl-c1\">true</span>)\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AlwaysAsId</span> <span class=\"pl-s1\">a</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AlwaysAsId</span>(<span class=\"pl-c1\">13</span>);\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ReallyAlwaysAsId</span> <span class=\"pl-s1\">b</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ReallyAlwaysAsId</span>(<span class=\"pl-c1\">13</span>);\n\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testReallyAlwaysAsId</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span>\n    {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-c1\">MAPPER</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ReallyAlwaysContainer</span>());\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"{\\\"a\\\":1,\\\"b\\\":2}\"</span>, <span class=\"pl-s1\">json</span>);\n    }</pre></div>\n"}