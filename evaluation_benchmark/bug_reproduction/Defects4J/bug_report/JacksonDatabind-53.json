{"issue_id": "1215", "title": "Problem with type specialization for Maps with <code>@JsonDeserialize(as=subtype)</code>", "description": "\n<p dir=\"auto\">If I have json that looks like</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='{\n  \"something\": [\n        {\n           \"id\": \"a uuid\",\n           \"property\": \"value\"\n         }\n  ]\n}'><pre class=\"notranslate\"><code>{\n  \"something\": [\n        {\n           \"id\": \"a uuid\",\n           \"property\": \"value\"\n         }\n  ]\n}\n</code></pre></div>\n<p dir=\"auto\">And I have a java pojo with an annotation like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @JsonDeserialize(as = MyHashMap.class)\n    private void setSomething(Map&lt;UUID, Foo&gt; incomingValue) {\"><pre class=\"notranslate\"><code>    @JsonDeserialize(as = MyHashMap.class)\n    private void setSomething(Map&lt;UUID, Foo&gt; incomingValue) {\n</code></pre></div>\n<p dir=\"auto\">Where MyHashMap.java has some custom logic using generics that allow us to map the array json above into a Map where \"id\" is the key and everything else serializes into the value.  We use generics on MyHashMap to enforce that every value implements a certain interface that respects the contract of returning an \"id\" property.  In this example Foo.java implements this interface MyCustomIdInterface.java.</p>\n<p dir=\"auto\">When using 2.6.6 this worked fine, but if I switch to 2.7.x then it breaks with the error:</p>\n<p dir=\"auto\"><code class=\"notranslate\">Can not construct instance of MyCustomIdInterface, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information</code></p>\n<p dir=\"auto\">in 2.7.x, it looks like jackson resolves to using AbstractDeserializer based on MyCustomIdInterface but in 2.6.6 it resolves to using BeanDeserializer based on Foo.java.</p>\n<p dir=\"auto\">Is this a bug or is there some default/feature flag that changed here?</p>\n"}