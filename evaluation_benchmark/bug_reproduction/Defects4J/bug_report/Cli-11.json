{"issue_id": "cli-1", "title": "PosixParser interupts \"-target opt\" as \"-t arget opt\"", "description": "\n<div class=\"user-content-block\">\n<p>This was posted on the Commons-Developer list and confirmed as a bug.</p>\n<p>&gt; Is this a bug?  Or am I using this incorrectly?<br/>\n&gt; I have an option with short and long values.  Given code that is <br/>\n&gt; essentially what is below, with a PosixParser I see results as <br/>\n&gt; follows:<br/>\n&gt; <br/>\n&gt; A command line with just \"-t\" prints out the results of the catch <br/>\n&gt; block<br/>\n&gt; (OK)<br/>\n&gt; A command line with just \"-target\" prints out the results of the catch<br/>\n&gt; block (OK)<br/>\n&gt; A command line with just \"-t foobar.com\" prints out \"processing selected<br/>\n&gt; target: foobar.com\" (OK)<br/>\n&gt; A command line with just \"-target foobar.com\" prints out \"processing<br/>\n&gt; selected target: arget\" (ERROR?)<br/>\n&gt; <br/>\n&gt; ======================================================================<br/>\n&gt; ==<br/>\n&gt; =======================<br/>\n&gt;   private static final String OPTION_TARGET = \"t\";<br/>\n&gt;   private static final String OPTION_TARGET_LONG = \"target\";<br/>\n&gt;   // ...<br/>\n&gt;   Option generateTarget = new Option(OPTION_TARGET, <br/>\n&gt;                                      OPTION_TARGET_LONG, <br/>\n&gt;                                      true, <br/>\n&gt;                                      \"Generate files for the specified<br/>\n&gt; target machine\");<br/>\n&gt;   // ...<br/>\n&gt;   try </p>\n{\n&gt;         parsedLine = parser.parse(cmdLineOpts, args);\n&gt;       }\n<p> catch (ParseException pe) </p>\n{\n&gt;         System.out.println(\"Invalid command: \" + pe.getMessage() +\n&gt; \"\\n\");\n&gt;         HelpFormatter hf = new HelpFormatter();\n&gt;         hf.printHelp(USAGE, cmdLineOpts);\n&gt;         System.exit(-1);\n&gt;       }\n<p>&gt; <br/>\n&gt;   if (parsedLine.hasOption(OPTION_TARGET)) </p>\n{\n&gt;     System.out.println(\"processing selected target: \" +\n&gt; parsedLine.getOptionValue(OPTION_TARGET));        \n&gt;   }\n\n<p>It is a bug but it is due to well defined behaviour (so that makes me feel a<br/>\nlittle better about myself <img align=\"absmiddle\" alt=\"\" border=\"0\" class=\"emoticon\" height=\"16\" src=\"/jira/images/icons/emoticons/wink.png\" width=\"16\"/>.  To support <b>special</b> <br/>\n(well I call them special anyway) like -Dsystem.property=value we need to be<br/>\nable to examine the first character of an option.  If the first character is<br/>\nitself defined as an Option then the remainder of the token is used as the<br/>\nvalue, e.g. 'D' is the token, it is an option so 'system.property=value' is the<br/>\nargument value for that option.  This is the behaviour that we are seeing for<br/>\nyour example.  <br/>\n't' is the token, it is an options so 'arget' is the argument value.  </p>\n<p>I suppose a solution to this could be to have a way to specify properties for<br/>\nparsers.  In this case 'posix.special.option == true' for turning <br/>\non <b>special</b> options. I'll have a look into this and let you know.</p>\n<p>Just to keep track of this and to get you used to how we operate, can you log a<br/>\nbug in bugzilla for this.</p>\n<p>Thanks,<br/>\n-John K</p>\n</div>\n"}