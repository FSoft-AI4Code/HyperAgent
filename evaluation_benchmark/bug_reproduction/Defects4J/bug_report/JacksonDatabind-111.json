{"issue_id": "2303", "title": "Deserialize null, when java type is \"TypeRef of TypeRef of T\", does not provide \"Type(Type(null))\"", "description": "\n<p dir=\"auto\"><strong>Dependency</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jackson = '2.9.7'\ncompile &quot;com.fasterxml.jackson.core:jackson-databind:$jackson&quot;\"><pre class=\"notranslate\"><code>jackson = '2.9.7'\ncompile \"com.fasterxml.jackson.core:jackson-databind:$jackson\"\n</code></pre></div>\n<p dir=\"auto\"><strong>Short explanation</strong></p>\n<p dir=\"auto\">In Kotlin, I got an issue when I deserialize the value in the context of a reference type that include another reference type. I provide here a reproduction scenario in Java based on AtomicReference (I don't think there is a real use-case that use an AR of AR of Integer, but with a kind of DSL, it may happen to have a similar inclusion...)</p>\n<p dir=\"auto\">So, when we deserialize an 22, we get an AR of AR of 22 as expected. But when we deserialize the null value, we get an AR of null (instead of AR of AR of null).</p>\n<p dir=\"auto\">I think there is 2 issues:</p>\n<p dir=\"auto\">(1) the getNull method of AtomicReference always returns \"new AtomicReference()\". I think it should be smarter and use contextual information such fullType or simply call _valueDeserializer.getNull() -- but _valueDeserializer was null during my tests because of (2).</p>\n<p dir=\"auto\">(2) the bean propertyCreator has distinct deserializer and nullProvider. In the case of ReferenceTypeDeserializer, a new contextual deserializer is created, which is able to deserialize its content. Then the deserializer of the bean propertyCreator is updated, but not its nullProvider</p>\n<p dir=\"auto\"><strong>To reproduce</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='class MyBean {\n    private AtomicReference&lt;AtomicReference&lt;Integer&gt;&gt; refRef;\n    public AtomicReference&lt;AtomicReference&lt;Integer&gt;&gt; getRefRef() {\n        return refRef;\n    }\n    public void setRefRef(AtomicReference&lt;AtomicReference&lt;Integer&gt;&gt; refRef) {\n        this.refRef = refRef;\n    }\n}\n\n@Test\nvoid myTest() throws IOException {\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectReader objectReader = objectMapper.readerFor(MyBean.class);\n\n    MyBean intRef = objectReader.readValue(\" {\\\"refRef\\\": 2 } \");\n    Assertions.assertNotNull(intRef.refRef); // succeeds\n    Assertions.assertNotNull(intRef.refRef.get()); // succeeds\n    Assertions.assertEquals(intRef.refRef.get().get(), new Integer(2)); // succeeds\n\n    MyBean nullRef = objectReader.readValue(\" {\\\"refRef\\\": null } \");\n    Assertions.assertNotNull(intRef.refRef); // succeeds\n    Assertions.assertNotNull(intRef.refRef.get()); // fails\n    Assertions.assertNull(intRef.refRef.get().get()); // fails\n}'><pre class=\"notranslate\"><code>class MyBean {\n    private AtomicReference&lt;AtomicReference&lt;Integer&gt;&gt; refRef;\n    public AtomicReference&lt;AtomicReference&lt;Integer&gt;&gt; getRefRef() {\n        return refRef;\n    }\n    public void setRefRef(AtomicReference&lt;AtomicReference&lt;Integer&gt;&gt; refRef) {\n        this.refRef = refRef;\n    }\n}\n\n@Test\nvoid myTest() throws IOException {\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectReader objectReader = objectMapper.readerFor(MyBean.class);\n\n    MyBean intRef = objectReader.readValue(\" {\\\"refRef\\\": 2 } \");\n    Assertions.assertNotNull(intRef.refRef); // succeeds\n    Assertions.assertNotNull(intRef.refRef.get()); // succeeds\n    Assertions.assertEquals(intRef.refRef.get().get(), new Integer(2)); // succeeds\n\n    MyBean nullRef = objectReader.readValue(\" {\\\"refRef\\\": null } \");\n    Assertions.assertNotNull(intRef.refRef); // succeeds\n    Assertions.assertNotNull(intRef.refRef.get()); // fails\n    Assertions.assertNull(intRef.refRef.get().get()); // fails\n}\n</code></pre></div>\n"}