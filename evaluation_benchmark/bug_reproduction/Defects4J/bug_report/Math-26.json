{"issue_id": "MATH-836", "title": "Fraction(double, int) constructor strange behaviour", "description": "\n<div class=\"user-content-block\">\n<p>The Fraction constructor Fraction(double, int) takes a double value and a int maximal denominator, and approximates a fraction. When the double value is a large, negative number with many digits in the fractional part, and the maximal denominator is a big, positive integer (in the 100'000s), two distinct bugs can manifest:</p>\n<p>1: the constructor returns a positive Fraction. Calling Fraction(-33655.1677817278, 371880) returns the fraction 410517235/243036, which both has the wrong sign, and is far away from the absolute value of the given value</p>\n<p>2: the constructor does not manage to reduce the Fraction properly. Calling Fraction(-43979.60679604749, 366081) returns the fraction -1651878166/256677, which should have* been reduced to -24654898/3831.</p>\n<p>I have, as of yet, not found a solution. The constructor looks like this:</p>\n<p>public Fraction(double value, int maxDenominator)<br/>\n        throws FractionConversionException</p>\n    {\n       this(value, 0, maxDenominator, 100);\n    }\n\n<p>Increasing the 100 value (max iterations) does not fix the problem for all cases. Changing the 0-value (the epsilon, maximum allowed error) to something small does not work either, as this breaks the tests in FractionTest. </p>\n<p>The problem is not neccissarily that the algorithm is unable to approximate a fraction correctly. A solution where a FractionConversionException had been thrown in each of these examples would probably be the best solution if an improvement on the approximation algorithm turns out to be hard to find.</p>\n<p>This bug has been found when trying to explore the idea of axiom-based testing (<a class=\"external-link\" href=\"http://bldl.ii.uib.no/testing.html\" rel=\"nofollow noopener\" target=\"_blank\">http://bldl.ii.uib.no/testing.html</a>). Attached is a java test class FractionTestByAxiom (junit, goes into org.apache.commons.math3.fraction) which shows these bugs through a simplified approach to this kind of testing, and a text file describing some of the value/maxDenominator combinations which causes one of these failures.</p>\n<ul>\n<li>It is never specified in the documentation that the Fraction class guarantees that completely reduced rational numbers are constructed, but a comment inside the equals method claims that \"since fractions are always in lowest terms, numerators and can be compared directly for equality\", so it seems like this is the intention.</li>\n</ul>\n</div>\n"}