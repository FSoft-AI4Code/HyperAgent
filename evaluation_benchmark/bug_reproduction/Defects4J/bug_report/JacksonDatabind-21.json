{"issue_id": "677", "title": "Specifying <code>Enum</code> value serialization using <code>@JsonProperty</code>", "description": "\n<p dir=\"auto\">Currently, if I want to deserialize an enum with a value that isn't its <code class=\"notranslate\">Enum.name()</code>, I can do either</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public enum TestEnum {\n    VALUE_ONE(\"value1\");\n\n    private String valueInJson;\n\n    private TestEnum(String valueInJson) {\n        this.valueInJson = valueInJson;\n    }\n\n    @JsonCreator\n    public static TestEnum getEnumFromValue(String value) {\n        for (TestEnum testEnum : values()) {\n            if (testEnum.valueInJson.equals(value)) {\n                return testEnum;\n            }\n        }\n        throw new IllegalArgumentException();\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">TestEnum</span> {\n    <span class=\"pl-c1\">VALUE_ONE</span>(<span class=\"pl-s\">\"value1\"</span>);\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">valueInJson</span>;\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">TestEnum</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">valueInJson</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">valueInJson</span> = <span class=\"pl-s1\">valueInJson</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TestEnum</span> <span class=\"pl-en\">getEnumFromValue</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">TestEnum</span> <span class=\"pl-s1\">testEnum</span> : <span class=\"pl-en\">values</span>()) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">testEnum</span>.<span class=\"pl-s1\">valueInJson</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">value</span>)) {\n                <span class=\"pl-k\">return</span> <span class=\"pl-s1\">testEnum</span>;\n            }\n        }\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>();\n    }\n}</pre></div>\n<p dir=\"auto\">or, using <code class=\"notranslate\">DeserializationFeature.READ_ENUMS_USING_TO_STRING</code>,</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public enum TestEnum {\n    VALUE_ONE(\"value1\");\n\n    private String valueInJson;\n\n    private TestEnum(String valueInJson) {\n        this.valueInJson = valueInJson;\n    }\n\n    @Override\n    public String toString() {\n        return valueInJson;\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">TestEnum</span> {\n    <span class=\"pl-c1\">VALUE_ONE</span>(<span class=\"pl-s\">\"value1\"</span>);\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">valueInJson</span>;\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">TestEnum</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">valueInJson</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">valueInJson</span> = <span class=\"pl-s1\">valueInJson</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">valueInJson</span>;\n    }\n}</pre></div>\n<p dir=\"auto\">This seems like a lot of boilerplate - is there a simpler way to do this, similar to how <code class=\"notranslate\">Gson</code> handles it?</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public enum TestEnum {\n    @SerializedName(\"value1\")\n    VALUE_ONE\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">TestEnum</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">SerializedName</span>(<span class=\"pl-s\">\"value1\"</span>)\n    <span class=\"pl-c1\">VALUE_ONE</span>\n}</pre></div>\n<p dir=\"auto\">It's both more concise and handles both serialization and deserialization.</p>\n"}