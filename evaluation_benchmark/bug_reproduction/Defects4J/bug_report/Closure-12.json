{"issue_id": "794", "title": "Try/catch blocks incorporate code not inside original blocks", "description": "<b>What steps will reproduce the problem?</b>\n\r\nStarting with this code:\r\n\r\n-----\r\nfunction a() {\r\n var x = '1';\r\n try {\r\n  x += somefunction();\r\n } catch(e) {\r\n }\r\n x += &quot;2&quot;;\r\n try {\r\n  x += somefunction();\r\n } catch(e) {\r\n }\r\n document.write(x);\r\n}\r\n\r\na();\r\na();\r\n-----\r\n\r\nIt gets compiled to:\r\n\r\n-----\r\nfunction b() {\r\n  var a;\r\n  try {\r\n    a = &quot;1&quot; + somefunction()\r\n  }catch(c) {\r\n  }\r\n  try {\r\n    a = a + &quot;2&quot; + somefunction()\r\n  }catch(d) {\r\n  }\r\n  document.write(a)\r\n}\r\nb();\r\nb();\r\n-----\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n\r\nThe problem is that it's including the constant &quot;1&quot; and &quot;2&quot; inside the try block when the shouldn't be. When executed uncompiled, the script prints &quot;1212&quot;. When compiled, the script prints &quot;undefinedundefined&quot;.\r\n\r\nThis behavior doesn't happen if the entire function gets inlined, or if the code between the two try blocks is sufficiently complex.\r\n\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n\r\nClosure Compiler (http://code.google.com/closure/compiler)\r\nVersion: 20120430 (revision 1918)\r\nBuilt on: 2012/04/30 18:02\r\njava version &quot;1.6.0_33&quot;\r\nJava(TM) SE Runtime Environment (build 1.6.0_33-b03-424-11M3720)\r\nJava HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode)\r\n"}