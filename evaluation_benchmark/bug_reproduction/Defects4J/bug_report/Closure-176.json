{"issue_id": "1056", "title": "initial type of variable wrong when initialize in a \"var\" statement with type declaration.", "description": "The following code doesn't give any warning even though it is an obvious bug:\r\n\r\n-------------===============================---------\r\n/**\r\n * @constructor\r\n */\r\nfunction MyClass() {\r\n  this.value = 1;\r\n}\r\n\r\nMyClass.prototype.show = function() {\r\n  window.console.log(this.value)\r\n}\r\n\r\n/**\r\n * @type {MyClass}\r\n */\r\nvar x = null;\r\nx.show();\r\n-------------===============================---------\r\n\r\nHowever, if you remove the @type from the var declaration, then closure realizes the problem and warns about x being null rather than an Object.\r\n\r\nIn any case, since x &quot;can be null&quot;, closure should warn about a potential null pointer error, and suggest to guard against the null value, like it does if we try to pass x as an argument where a non-null type is expected. That could be an optional behavior protected behind a flag, but it would definitely help catch lots of errors and write safer code.\r\n\r\nI am using the latest closure version available to date, on Ubuntu 13.04, on an amd64 machine.\r\n"}