{"issue_id": "COMPRESS-309", "title": "BZip2CompressorInputStream return value wrong when told to read to a full buffer.", "description": "\n<div class=\"user-content-block\">\n<p>BZip2CompressorInputStream.read(buffer, offset, length) returns -1 when given an offset equal to the length of the buffer.</p>\n<p>This indicates, not that the buffer was full, but that the stream was finished.</p>\n<p>It seems like a pretty stupid thing to do - but I'm getting this when trying to use Kryo serialization (which is probably a bug on their part, too), so it does occur and has negative affects.</p>\n<p>Here's a JUnit test that shows the problem specifically:</p>\n<div class=\"preformatted panel\" style=\"border-width: 1px;\"><div class=\"preformattedContent panelContent\">\n<pre>\t@Test\n\tpublic void testApacheCommonsBZipUncompression () throws Exception {\n\t\t// Create a big random piece of data\n\t\tbyte[] rawData = new byte[1048576];\n\t\tfor (int i=0; i&lt;rawData.length; ++i) {\n\t\t\trawData[i] = (byte) Math.floor(Math.random()*256);\n\t\t}\n\n\t\t// Compress it\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tBZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);\n\t\tbzipOut.write(rawData);\n\t\tbzipOut.flush();\n\t\tbzipOut.close();\n\t\tbaos.flush();\n\t\tbaos.close();\n\n\t\t// Try to read it back in\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);\n\t\tbyte[] buffer = new byte[1024];\n\t\t// Works fine\n\t\tAssert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));\n\t\t// Fails, returns -1 (indicating the stream is complete rather than that the buffer \n\t\t// was full)\n\t\tAssert.assertEquals(0, bzipIn.read(buffer, 1024, 0));\n\t\t// But if you change the above expected value to -1, the following line still works\n\t\tAssert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));\n\t\tbzipIn.close();\n\t}\n</pre>\n</div></div>\n</div>\n"}