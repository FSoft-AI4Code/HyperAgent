{"issue_id": "399", "title": "WrongTypeOfReturnValue when abstract class have two abstract method", "description": "\n<p dir=\"auto\">Hey<br/>\nI found a strange problem, when i create a abstract class:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='abstract class AbstractClass {\n    abstract protected Long lol();\n    abstract protected String wow();\n    public String give() {\n        wow();\n        lol();\n        return \"give\";\n    }\n}'><pre><span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">AbstractClass</span> {\n    <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">Long</span> <span class=\"pl-en\">lol</span>();\n    <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">wow</span>();\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">give</span>() {\n        <span class=\"pl-en\">wow</span>();\n        <span class=\"pl-en\">lol</span>();\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"give\"</span>;\n    }\n}</pre></div>\n<p dir=\"auto\">and i have another class extends abstract Class:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class ClassExtendsAbstractClass extends AbstractClass {\n@Override\n protected Long lol() {\n        return 2L;\n    }\n    @Override\n    protected String wow() {\n        return \"WOW\";\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ClassExtendsAbstractClass</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractClass</span> {\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">Long</span> <span class=\"pl-en\">lol</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">2L</span>;\n    }\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">wow</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"WOW\"</span>;\n    }\n}</pre></div>\n<p dir=\"auto\">and I have class:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class A {\n  private ClassExtendsAbstractClass classExtendsAbstractClass;\n  public A(ClassExtendsAbstractClass classExtendsAbstractClass) {\n    this.classExtendsAbstractClass = classExtendsAbstractClass;\n  }\n  public String doSomeThing(){\n    return classExtendsAbstractClass.wow();\n  }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">A</span> {\n  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">ClassExtendsAbstractClass</span> <span class=\"pl-s1\">classExtendsAbstractClass</span>;\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">A</span>(<span class=\"pl-smi\">ClassExtendsAbstractClass</span> <span class=\"pl-s1\">classExtendsAbstractClass</span>) {\n    <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">classExtendsAbstractClass</span> = <span class=\"pl-s1\">classExtendsAbstractClass</span>;\n  }\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">doSomeThing</span>(){\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">classExtendsAbstractClass</span>.<span class=\"pl-en\">wow</span>();\n  }\n}</pre></div>\n<p dir=\"auto\">and when i try mock method doSomeThing() from A class in test:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='  @Mock\n  private ClassExtendsAbstractClass classExtendsAbstractClass;\n  private A a;\n\n  @Before\n  public void before(){\n    Mockito.when(classExtendsAbstractClass.give()).thenReturn(\"aaa\");\n  }\n  @Test\n  public void test() {\n    a = new A(classExtendsAbstractClass);\n  }'><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Mock</span>\n  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">ClassExtendsAbstractClass</span> <span class=\"pl-s1\">classExtendsAbstractClass</span>;\n  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">A</span> <span class=\"pl-s1\">a</span>;\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Before</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">before</span>(){\n    <span class=\"pl-s1\">Mockito</span>.<span class=\"pl-en\">when</span>(<span class=\"pl-s1\">classExtendsAbstractClass</span>.<span class=\"pl-en\">give</span>()).<span class=\"pl-en\">thenReturn</span>(<span class=\"pl-s\">\"aaa\"</span>);\n  }\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">test</span>() {\n    <span class=\"pl-s1\">a</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">A</span>(<span class=\"pl-s1\">classExtendsAbstractClass</span>);\n  }</pre></div>\n<p dir=\"auto\">I get the error:</p>\n<blockquote>\n<p dir=\"auto\">org.mockito.exceptions.misusing.WrongTypeOfReturnValue:<br/>\nString cannot be returned by lol()<br/>\nlol() should return Long</p>\n</blockquote>\n<p dir=\"auto\">This is strange behavior, because the method <code class=\"notranslate\">lol()</code> should not be called, but when I delete one abstract method everything is good.</p>\n"}