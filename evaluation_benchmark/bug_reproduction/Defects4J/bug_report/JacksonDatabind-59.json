{"issue_id": "1384", "title": "@JsonDeserialize(keyUsing = ...) does not work correctly together with DefaultTyping.NON_FINAL", "description": "\n<p dir=\"auto\">Version 2.8.3 seems to ignore @JsonDeserialize(keyUsing = ...) when used together with DefaultTyping.NON_FINAL setting and Map&lt;,&gt; argument type in constructor with concrete type (e.g. HashMap&lt;,&gt;) specified in JSON.</p>\n<p dir=\"auto\">In the code below testFails() fails and testSucceeds() passes fine. The only difference is testSucceeds() has a module with deserializer registered explicitly. Both tests pass on version 2.6.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.test.testjackson.testjackson;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParseException;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.KeyDeserializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport java.io.IOException;\nimport java.util.Map;\nimport org.junit.Test;\n\nimport static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY;\nimport static junit.framework.Assert.assertEquals;\n\npublic class TestJackson \n{\n    private static String TEST_INSTANCE_SERIALIZED = &quot;{\\&quot;mapProperty\\&quot;:[\\&quot;java.util.HashMap\\&quot;,{\\&quot;Compound|Key\\&quot;:\\&quot;Value\\&quot;}]}&quot;;\n\n    @Test\n    public void testFails() throws JsonParseException, JsonMappingException, IOException\n    {\n        ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);\n        TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);\n        String testInstanceSerialized = mapper.writeValueAsString(testInstance);\n        assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);\n    }\n\n    @Test\n    public void testSucceeds() throws JsonParseException, JsonMappingException, IOException\n    {\n        ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL).registerModule(new SimpleModule() {\n            private static final long serialVersionUID = 1L;\n            @Override\n            public void setupModule(SetupContext context) {\n                context.addKeyDeserializers(new SimpleKeyDeserializers().addDeserializer(CompoundKey.class, new CompoundKeyDeserializer()));\n            }\n        });\n        TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);\n        String testInstanceSerialized = mapper.writeValueAsString(testInstance);\n        assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);\n    }\n\n    @JsonAutoDetect(fieldVisibility = ANY)\n    public static final class TestClass {\n        @JsonProperty(&quot;mapProperty&quot;)\n        @JsonSerialize(keyUsing = CompoundKeySerializer.class)\n        private final Map&lt;CompoundKey, String&gt; mapProperty;\n\n        @JsonCreator\n        private TestClass(@JsonDeserialize(keyUsing = CompoundKeyDeserializer.class) @JsonProperty(&quot;mapProperty&quot;) Map&lt;CompoundKey, String&gt; mapProperty) {\n            this.mapProperty = mapProperty;\n        }\n    }\n\n    public static final class CompoundKey {\n        private String part0;\n        private String part1;\n\n        public CompoundKey(String part0, String part1) {\n            this.part0 = part0;\n            this.part1 = part1;\n        }\n\n        public String getPart0() { return part0; }\n        public String getPart1() { return part1; }\n    }\n\n    public static class CompoundKeyDeserializer extends KeyDeserializer {\n        @Override\n        public Object deserializeKey(String s, DeserializationContext deserializationContext) {\n            String[] parts = s.split(&quot;\\\\|&quot;);\n            return new CompoundKey(parts[0], parts[1]);\n        }\n    }\n\n    public static class CompoundKeySerializer extends JsonSerializer&lt;CompoundKey&gt; {\n        @Override\n        public void serialize(CompoundKey compoundKey, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n            jsonGenerator.writeFieldName(compoundKey.getPart0() + '|' + compoundKey.getPart1());\n        }\n    }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">test</span>.<span class=\"pl-s1\">testjackson</span>.<span class=\"pl-s1\">testjackson</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonAutoDetect</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonCreator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonProperty</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonGenerator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonParseException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationContext</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonSerializer</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">KeyDeserializer</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>.<span class=\"pl-s1\">DefaultTyping</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">SerializerProvider</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonDeserialize</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSerialize</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">module</span>.<span class=\"pl-s1\">SimpleKeyDeserializers</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">module</span>.<span class=\"pl-s1\">SimpleModule</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-c1\">IOException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonAutoDetect</span>.<span class=\"pl-s1\">Visibility</span>.<span class=\"pl-c1\">ANY</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">framework</span>.<span class=\"pl-s1\">Assert</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestJackson</span> \n{\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">TEST_INSTANCE_SERIALIZED</span> = <span class=\"pl-s\">\"{\\\"mapProperty\\\":[\\\"java.util.HashMap\\\",{\\\"Compound|Key\\\":\\\"Value\\\"}]}\"</span>;\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testFails</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonParseException</span>, <span class=\"pl-smi\">JsonMappingException</span>, <span class=\"pl-smi\">IOException</span>\n    {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>().<span class=\"pl-en\">enableDefaultTyping</span>(<span class=\"pl-smi\">DefaultTyping</span>.<span class=\"pl-c1\">NON_FINAL</span>);\n        <span class=\"pl-smi\">TestClass</span> <span class=\"pl-s1\">testInstance</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-c1\">TEST_INSTANCE_SERIALIZED</span>, <span class=\"pl-smi\">TestClass</span>.<span class=\"pl-s1\">class</span>);\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">testInstanceSerialized</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">testInstance</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">TEST_INSTANCE_SERIALIZED</span>, <span class=\"pl-s1\">testInstanceSerialized</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testSucceeds</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonParseException</span>, <span class=\"pl-smi\">JsonMappingException</span>, <span class=\"pl-smi\">IOException</span>\n    {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>().<span class=\"pl-en\">enableDefaultTyping</span>(<span class=\"pl-smi\">DefaultTyping</span>.<span class=\"pl-c1\">NON_FINAL</span>).<span class=\"pl-en\">registerModule</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleModule</span>() {\n            <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">long</span> <span class=\"pl-s1\">serialVersionUID</span> = <span class=\"pl-c1\">1L</span>;\n            <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setupModule</span>(<span class=\"pl-smi\">SetupContext</span> <span class=\"pl-s1\">context</span>) {\n                <span class=\"pl-s1\">context</span>.<span class=\"pl-en\">addKeyDeserializers</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleKeyDeserializers</span>().<span class=\"pl-en\">addDeserializer</span>(<span class=\"pl-smi\">CompoundKey</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CompoundKeyDeserializer</span>()));\n            }\n        });\n        <span class=\"pl-smi\">TestClass</span> <span class=\"pl-s1\">testInstance</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-c1\">TEST_INSTANCE_SERIALIZED</span>, <span class=\"pl-smi\">TestClass</span>.<span class=\"pl-s1\">class</span>);\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">testInstanceSerialized</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">testInstance</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">TEST_INSTANCE_SERIALIZED</span>, <span class=\"pl-s1\">testInstanceSerialized</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonAutoDetect</span>(<span class=\"pl-s1\">fieldVisibility</span> = <span class=\"pl-c1\">ANY</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestClass</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"mapProperty\"</span>)\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSerialize</span>(<span class=\"pl-s1\">keyUsing</span> = <span class=\"pl-smi\">CompoundKeySerializer</span>.<span class=\"pl-s1\">class</span>)\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">CompoundKey</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">mapProperty</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">TestClass</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonDeserialize</span>(<span class=\"pl-s1\">keyUsing</span> = <span class=\"pl-smi\">CompoundKeyDeserializer</span>.<span class=\"pl-s1\">class</span>) <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"mapProperty\"</span>) <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">CompoundKey</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">mapProperty</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">mapProperty</span> = <span class=\"pl-s1\">mapProperty</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CompoundKey</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">part0</span>;\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">part1</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">CompoundKey</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">part0</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">part1</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">part0</span> = <span class=\"pl-s1\">part0</span>;\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">part1</span> = <span class=\"pl-s1\">part1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getPart0</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-s1\">part0</span>; }\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getPart1</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-s1\">part1</span>; }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CompoundKeyDeserializer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">KeyDeserializer</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Object</span> <span class=\"pl-en\">deserializeKey</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">s</span>, <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">deserializationContext</span>) {\n            <span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">parts</span> = <span class=\"pl-s1\">s</span>.<span class=\"pl-en\">split</span>(<span class=\"pl-s\">\"\\\\|\"</span>);\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CompoundKey</span>(<span class=\"pl-s1\">parts</span>[<span class=\"pl-c1\">0</span>], <span class=\"pl-s1\">parts</span>[<span class=\"pl-c1\">1</span>]);\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CompoundKeySerializer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">JsonSerializer</span>&lt;<span class=\"pl-smi\">CompoundKey</span>&gt; {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">CompoundKey</span> <span class=\"pl-s1\">compoundKey</span>, <span class=\"pl-smi\">JsonGenerator</span> <span class=\"pl-s1\">jsonGenerator</span>, <span class=\"pl-smi\">SerializerProvider</span> <span class=\"pl-s1\">serializerProvider</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n            <span class=\"pl-s1\">jsonGenerator</span>.<span class=\"pl-en\">writeFieldName</span>(<span class=\"pl-s1\">compoundKey</span>.<span class=\"pl-en\">getPart0</span>() + <span class=\"pl-s\">'|'</span> + <span class=\"pl-s1\">compoundKey</span>.<span class=\"pl-en\">getPart1</span>());\n        }\n    }\n}</pre></div>\n"}