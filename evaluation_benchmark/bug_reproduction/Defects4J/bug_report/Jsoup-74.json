{"issue_id": "978", "title": "&amp;shy; renders as '-' when Node.text() is called", "description": "\n<p dir=\"auto\">Consider the following JUnit4 test</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='@Test\npublic void testIfShyIsStripped(){\n        String htmlwithSHY = \"&lt;html&gt;&lt;body&gt;quite&amp;shy;a&amp;shy;long&amp;shy;word&lt;/body&gt;&lt;/html&gt;\";\n        Document parse = Jsoup.parse(htmlwithSHY);\n        String text = parse.body().text();\n        assertEquals(\"quitealongword\", text);\n}'><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testIfShyIsStripped</span>(){\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">htmlwithSHY</span> = <span class=\"pl-s\">\"&lt;html&gt;&lt;body&gt;quite&amp;shy;a&amp;shy;long&amp;shy;word&lt;/body&gt;&lt;/html&gt;\"</span>;\n        <span class=\"pl-smi\">Document</span> <span class=\"pl-s1\">parse</span> = <span class=\"pl-s1\">Jsoup</span>.<span class=\"pl-en\">parse</span>(<span class=\"pl-s1\">htmlwithSHY</span>);\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">text</span> = <span class=\"pl-s1\">parse</span>.<span class=\"pl-en\">body</span>().<span class=\"pl-en\">text</span>();\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"quitealongword\"</span>, <span class=\"pl-s1\">text</span>);\n}</pre></div>\n<p dir=\"auto\">This test fails as text is parsed as <code class=\"notranslate\">quite-a-long-word</code> rather then it's actual textual representation that would have been <code class=\"notranslate\">quitealongword</code> in any browser.</p>\n<p dir=\"auto\">Perhaps this is working as intended, but it would be interesting to understand the reasoning behind it.</p>\n"}