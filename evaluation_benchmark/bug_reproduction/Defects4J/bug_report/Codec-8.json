{"issue_id": "CODEC-105", "title": "ArrayIndexOutOfBoundsException when doing multiple reads() on encoding Base64InputStream", "description": "\n<div class=\"user-content-block\">\n<p>When encoding a sizable stream byte by byte (so, just calling Base64InputStream.read()), after 10920 successful read()s, this happens: </p>\n<p>java.lang.ArrayIndexOutOfBoundsException: 2<br/>\n        at org.apache.commons.codec.binary.Base64.encode(Base64.java:502)<br/>\n        at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:157)<br/>\n        at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:109)</p>\n<p>Based on this, the necessary conditions seem to be that buffer = null and modulus = 2. Then, if a read() is done, a single-byte buffer is used, whose length is doubled by resizeBuffer(), but that still doesn't make it big enough to hold the 4 bytes written to it because modulus was just incremented to 0. </p>\n<p>Here's some sample code:</p>\n<p>import org.apache.commons.codec.binary.Base64InputStream;</p>\n<p>public class TestReads {<br/>\n    public static void main(String[] args) {<br/>\n        Base64InputStream b64stream = new Base64InputStream(System.in, true, 0, null);<br/>\n        int n = 0;<br/>\n        try </p>\n{\n            while (b64stream.read() != -1) n++;\n        }\n<p> catch (Exception x) </p>\n{\n            System.out.println(n);\n            x.printStackTrace();\n        }\n<p>    }<br/>\n}</p>\n</div>\n"}