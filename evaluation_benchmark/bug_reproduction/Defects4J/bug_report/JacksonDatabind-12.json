{"issue_id": "735", "title": "@JsonDeserialize on Map with contentUsing custom deserializer overwrites default behavior", "description": "\n<p dir=\"auto\">I recently updated from version 2.3.3 to 2.5.1 and encountered a new issue with our custom deserializers. They either seemed to stop working or were active on the wrong fields.<br/>\nI could narrow it down to some change in version 2.4.4 (2.4.3 is still working for me)</p>\n<p dir=\"auto\">I wrote a test to show this behavior. It seems to appear when there a two maps with the same key and value types in a bean, and only one of them has a custom deserializer. The deserializer is then falsely used either for both or none of the maps.</p>\n<p dir=\"auto\">This test works for me in version 2.4.3 and fails with higher versions.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import static org.junit.Assert.assertEquals;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport org.junit.Test;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n\npublic class DeserializeTest {\n\n    @Test\n    public void testIt() throws Exception {\n        ObjectMapper om = new ObjectMapper();\n        String json = \"{\\\"map1\\\":{\\\"a\\\":1},\\\"map2\\\":{\\\"a\\\":1}}\";\n        TestBean bean = om.readValue(json.getBytes(), TestBean.class);\n\n        assertEquals(100, bean.getMap1().get(\"a\").intValue());\n        assertEquals(1, bean.getMap2().get(\"a\").intValue());\n    }\n\n    public static class TestBean {\n\n        @JsonProperty(\"map1\")\n        @JsonDeserialize(contentUsing = CustomDeserializer.class)\n        Map&lt;String, Integer&gt; map1;\n\n        @JsonProperty(\"map2\")\n        Map&lt;String, Integer&gt; map2;\n\n        public Map&lt;String, Integer&gt; getMap1() {\n            return map1;\n        }\n\n        public void setMap1(Map&lt;String, Integer&gt; map1) {\n            this.map1 = map1;\n        }\n\n        public Map&lt;String, Integer&gt; getMap2() {\n            return map2;\n        }\n\n        public void setMap2(Map&lt;String, Integer&gt; map2) {\n            this.map2 = map2;\n        }\n    }\n\n    public static class CustomDeserializer extends StdDeserializer&lt;Integer&gt; {\n\n        public CustomDeserializer() {\n            super(Integer.class);\n        }\n\n        @Override\n        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n            Integer value = p.readValueAs(Integer.class);\n            return value * 100;\n        }\n    }\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-c1\">IOException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonProperty</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonParser</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationContext</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonDeserialize</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">std</span>.<span class=\"pl-s1\">StdDeserializer</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">DeserializeTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testIt</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">om</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"{\\\"map1\\\":{\\\"a\\\":1},\\\"map2\\\":{\\\"a\\\":1}}\"</span>;\n        <span class=\"pl-smi\">TestBean</span> <span class=\"pl-s1\">bean</span> = <span class=\"pl-s1\">om</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>.<span class=\"pl-en\">getBytes</span>(), <span class=\"pl-smi\">TestBean</span>.<span class=\"pl-s1\">class</span>);\n\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">100</span>, <span class=\"pl-s1\">bean</span>.<span class=\"pl-en\">getMap1</span>().<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">intValue</span>());\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s1\">bean</span>.<span class=\"pl-en\">getMap2</span>().<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">intValue</span>());\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestBean</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"map1\"</span>)\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonDeserialize</span>(<span class=\"pl-s1\">contentUsing</span> = <span class=\"pl-smi\">CustomDeserializer</span>.<span class=\"pl-s1\">class</span>)\n        <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">map1</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"map2\"</span>)\n        <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">map2</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">getMap1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">map1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setMap1</span>(<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">map1</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">map1</span> = <span class=\"pl-s1\">map1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">getMap2</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">map2</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setMap2</span>(<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">map2</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">map2</span> = <span class=\"pl-s1\">map2</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CustomDeserializer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">StdDeserializer</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; {\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">CustomDeserializer</span>() {\n            <span class=\"pl-en\">super</span>(<span class=\"pl-smi\">Integer</span>.<span class=\"pl-s1\">class</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Integer</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">JsonParser</span> <span class=\"pl-s1\">p</span>, <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span>, <span class=\"pl-smi\">JsonProcessingException</span> {\n            <span class=\"pl-smi\">Integer</span> <span class=\"pl-s1\">value</span> = <span class=\"pl-s1\">p</span>.<span class=\"pl-en\">readValueAs</span>(<span class=\"pl-smi\">Integer</span>.<span class=\"pl-s1\">class</span>);\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">value</span> * <span class=\"pl-c1\">100</span>;\n        }\n    }\n}</pre></div>\n"}