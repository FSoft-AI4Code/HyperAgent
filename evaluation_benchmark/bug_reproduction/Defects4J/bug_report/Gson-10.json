{"issue_id": "831", "title": "JsonAdapter annotation ignored for primitive fields", "description": "\n<p dir=\"auto\"><code class=\"notranslate\">ReflectiveTypeAdapterFactory</code> correctly detects the <code class=\"notranslate\">@JsonAdapter</code> annotation and registers the custom adapter (<a href=\"https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L133\">source</a>), but its <code class=\"notranslate\">write</code> method wraps that type adapter in a <code class=\"notranslate\">TypeAdapterRuntimeTypeWrapper</code> (<a href=\"https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L111\">source</a>), which overrides the adapter with the default Gson adapter (<a href=\"https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java#L65\">source</a>).</p>\n<p dir=\"auto\">Here's a test that demonstrates the behavior:</p>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest\nindex 4c745ec..8cae980 100644\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {\n       this.part = part;\n     }\n   }\n+\n+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new GadgetWithPrimitivePart(42));\n+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);\n+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\n+    assertEquals(42, gadget.part);\n+  }\n+\n+  private static final class GadgetWithPrimitivePart {\n+    @JsonAdapter(LongToStringTypeAdapterFactory.class)\n+    final long part;\n+\n+    private GadgetWithPrimitivePart(long part) {\n+      this.part = part;\n+    }\n+  }\n+\n+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {\n+    static final TypeAdapter&lt;Long&gt; ADAPTER = new TypeAdapter&lt;Long&gt;() {\n+      @Override public void write(JsonWriter out, Long value) throws IOException {\n+        out.value(value.toString());\n+      }\n+      @SuppressWarnings(\"unchecked\")\n+      @Override public Long read(JsonReader in) throws IOException {\n+        return in.nextLong();\n+      }\n+    };\n+    @Override public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, final TypeToken&lt;T&gt; type) {\n+      Class&lt;?&gt; cls = type.getRawType();\n+      if (Long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter&lt;T&gt;) ADAPTER;\n+      } else if (long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter&lt;T&gt;) ADAPTER;\n+      }\n+      throw new IllegalStateException(\"Non-long field of type \" + type\n+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");\n+    }\n+  }\n }'><pre><span class=\"pl-c1\">diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest</span>\nindex 4c745ec..8cae980 100644\n<span class=\"pl-md\">--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java</span>\n<span class=\"pl-mi1\">+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java</span>\n<span class=\"pl-mdr\">@@ -220,4 +220,43 @@</span> public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {\n       this.part = part;\n     }\n   }\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    Gson gson = new Gson();</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    String json = gson.toJson(new GadgetWithPrimitivePart(42));</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    assertEquals(42, gadget.part);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  private static final class GadgetWithPrimitivePart {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    @JsonAdapter(LongToStringTypeAdapterFactory.class)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    final long part;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    private GadgetWithPrimitivePart(long part) {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      this.part = part;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    static final TypeAdapter&lt;Long&gt; ADAPTER = new TypeAdapter&lt;Long&gt;() {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      @Override public void write(JsonWriter out, Long value) throws IOException {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        out.value(value.toString());</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      @SuppressWarnings(\"unchecked\")</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      @Override public Long read(JsonReader in) throws IOException {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        return in.nextLong();</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    };</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    @Override public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, final TypeToken&lt;T&gt; type) {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      Class&lt;?&gt; cls = type.getRawType();</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      if (Long.class.isAssignableFrom(cls)) {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        return (TypeAdapter&lt;T&gt;) ADAPTER;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      } else if (long.class.isAssignableFrom(cls)) {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        return (TypeAdapter&lt;T&gt;) ADAPTER;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      throw new IllegalStateException(\"Non-long field of type \" + type</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  }</span>\n }</pre></div>\n<p dir=\"auto\">And here's the result of running it:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='[snip]\nRunning com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest\nTests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec &lt;&lt;&lt; FAILURE!\n[snip]\nResults :\n\nFailed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:&lt;{\"part\":[\"42\"]}&gt; but was:&lt;{\"part\":[42]}&gt;\n\nTests run: 990, Failures: 1, Errors: 0, Skipped: 0'><pre class=\"notranslate\"><code>[snip]\nRunning com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest\nTests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec &lt;&lt;&lt; FAILURE!\n[snip]\nResults :\n\nFailed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:&lt;{\"part\":[\"42\"]}&gt; but was:&lt;{\"part\":[42]}&gt;\n\nTests run: 990, Failures: 1, Errors: 0, Skipped: 0\n</code></pre></div>\n<p dir=\"auto\">Is this the intended behavior? If so, <code class=\"notranslate\">JsonAdapter</code>'s documentation is a bit misleading.</p>\n<p dir=\"auto\">If it's not, I unfortunately do not have a suggested fix. I was actually a bit surprised to see that a new <code class=\"notranslate\">TypeAdapterRuntimeTypeWrapper</code> object is constructed for each field that is serialized, on every serialization.</p>\n<p dir=\"auto\">In case you would like to incorporate my test into Gson, I hereby assign copyright of that test to Google.</p>\n<p dir=\"auto\">Thanks!</p>\n"}