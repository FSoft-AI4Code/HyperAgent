{"issue_id": "502", "title": "Make <code>DefaultPrettyPrinter.createInstance()</code> to fail for sub-classes", "description": "\n<p dir=\"auto\">Pattern of \"blueprint object\" (that is, having an instance not used as-is, but that has factory method for creating actual instance) is used by Jackson in couple of places; often for things that implement <code class=\"notranslate\">Instantiatable</code>. But one problem is that unless method is left abstract, sub-classing can be problematic -- if sub-class does not override method, then calls will result in an instance of wrong type being created.</p>\n<p dir=\"auto\">And this is what can easily happen with <code class=\"notranslate\">DefaultPrettyPrinter</code>.</p>\n<p dir=\"auto\">A simple solution is for base class to make explicit that if base implementation is called, then instance can not be a sub-class (that is, it is only legal to call on <code class=\"notranslate\">DefaultPrettyPrinter</code>, but no sub-class). This is not optimal (ideally check would be done compile-time), but better than getting a mysterious failure.</p>\n"}