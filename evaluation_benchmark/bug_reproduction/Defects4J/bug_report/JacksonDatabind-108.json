{"issue_id": "2211", "title": "Change of behavior (2.8 -&gt; 2.9) with <code>ObjectMapper.readTree(input)</code> with no content", "description": "\n<p dir=\"auto\">So, it looks like <code class=\"notranslate\">readTree()</code> methods in <code class=\"notranslate\">ObjectMapper</code>, <code class=\"notranslate\">ObjectReader</code> that take input OTHER than <code class=\"notranslate\">JsonParser</code>, and are given \"empty input\" (only white-space available before end), will</p>\n<ul dir=\"auto\">\n<li>Return <code class=\"notranslate\">NullNode</code> (Jackson 2.x up to and including 2.8)</li>\n<li>Return <code class=\"notranslate\">null</code> (Jackson 2.9)</li>\n</ul>\n<p dir=\"auto\">Latter behavior is what <code class=\"notranslate\">readTree(JsonParser)</code> has and will do; but this accidentally changed other methods due to refactoring that unified underlying call handling (and add checking for new <code class=\"notranslate\">DeserializationFeature.FAIL_ON_TRAILING_TOKENS</code>).<br/>\nBehavior for this edge case was not being tested, apparently.</p>\n<p dir=\"auto\">Now: since behavior has been changed for all 2.9.x patch versions, I am not sure it should be changed for 2.9 branch. But it seems sub-optimal as behavior, and something to definitely change for 3.0... but probably also for 2.10.</p>\n<p dir=\"auto\">There are multiple things we could do.</p>\n<ol dir=\"auto\">\n<li>Change it back to 2.8, to return <code class=\"notranslate\">NullNode</code></li>\n<li>Change to throw exception, as \"not valid\" use case</li>\n<li>Change it to return <code class=\"notranslate\">MissingNode</code></li>\n<li>Leave as-is, for rest of 2.x.</li>\n</ol>\n<p dir=\"auto\">Although it might seem best to revert it to (1), that seems somewhat wrong, problematic, as it would now not be possible to distinguish between JSON <code class=\"notranslate\">null</code> value and missing content.<br/>\nAnd although (2) would probably make sense, if designing API from scratch, it is probably too intrusive.</p>\n<p dir=\"auto\">So I think (3) is the best way: it avoids returning <code class=\"notranslate\">null</code> or throwing Exception (both being likely to break 2.9 code), but still allows distinguishing between all possible input cases.</p>\n"}