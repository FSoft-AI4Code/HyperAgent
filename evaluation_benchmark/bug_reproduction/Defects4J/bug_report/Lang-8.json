{"issue_id": "LANG-818", "title": "FastDateFormat's \"z\" pattern does not respect timezone of Calendar instances passed to format()", "description": "\n<div class=\"user-content-block\">\n<p>The work on <a class=\"issue-link\" data-issue-key=\"LANG-462\" href=\"https://issues.apache.org/jira/browse/LANG-462\" title=\"FastDateFormat supports parse\"><del>LANG-462</del></a> has introduced a time zone formatting bug in FastDateFormat in commons-lang3.</p>\n<p>The problem can be seen by this snippet:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-comment\">// Always prints timezone name of machine's <span class=\"code-keyword\">default</span> timezone, ignoring TZ\n</span><span class=\"code-comment\">// set on calendar, even though the printed time itself respects calendar's TZ.\n</span>Calendar myCal = Calendar.getInstance(TimeZone.getTimeZone(<span class=\"code-quote\">\"US/Central\"</span>));\n<span class=\"code-object\">System</span>.out.println(FastDateFormat.getInstance(<span class=\"code-quote\">\"h:mma z\"</span>).format(myCal));\n</pre>\n</div></div>\n<p>If you happen to be in US/Central, this will print the right thing, but just try it with US/Eastern, US/Pacific, etc.  It will print the time in the correct timezone, but the timezone name at the end (the \"z\" pattern) will always be the system default timezone.  This is a regression against commons-lang 2.x.</p>\n<p>Basically, when the \"forced time zone\" code was removed, the TimeZoneNameRule class stopped respecting the Calendar instance's timezone, and instead now always uses the mTimeZone of the FastDateFormat instance itself (which is only supposed to be used when formatting timezone-less objects such as Date or long).</p>\n<p>The removal of the forced time zone stuff is surely the right thing to do (it was a mess).  I think the fix is to change the TimeZoneNameRule inner class to not take a TimeZone instance, but rather to use the TimeZone on the Calendar instance passed into appendTo(), just like TimeZoneNumberRule does.  Presumably then for efficiency, one would use the getTimeZoneDisplay() package-static method to quickly retrieve the required timezone's display name.</p>\n</div>\n"}