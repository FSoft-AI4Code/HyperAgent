{"issue_id": "COMPRESS-87", "title": "ZipArchiveInputStream doesn't report the end of a truncated archive", "description": "\n<div class=\"user-content-block\">\n<p>If a Zip archive is truncated, (e.g. because it is the first volume in a multi-volume archive) the ZipArchiveInputStream.read() method will not detect that fact. All calls to read() will return 0 bytes read. They will not return -1 (end of stream), nor will they throw any exception (which would seem like a good idea to me because the archive is truncated).</p>\n<p>I have tracked this problem to ZipArchiveInputStream.java, line 239. It contains a check</p>\n<p>if (read == 0 &amp;&amp; inf.finished()) {<br/>\n    return -1;<br/>\n}</p>\n<p>For truncated archives the read is always zero but the inf is never finished(). I suggest adding two lines below:</p>\n<p>if (read == 0 &amp;&amp; inf.finished()) {<br/>\n    return -1;<br/>\n} else if (read == 0 &amp;&amp; lengthOfLastRead == -1) {<br/>\n\tthrow new IOException(\"Truncated ZIP file\");<br/>\n}</p>\n<p>This solves the problem in my tests.</p>\n</div>\n"}