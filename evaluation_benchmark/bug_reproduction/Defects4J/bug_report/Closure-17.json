{"issue_id": "688", "title": "@const dumps type cast information", "description": "The following code compiles fine:\r\n\r\n/**\r\n* Class defining an interface with two numbers.\r\n* @interface\r\n*/\r\nfunction TwoNumbers() {}\r\n\r\n/** @type number */\r\nTwoNumbers.prototype.first;\r\n\r\n/** @type number */\r\nTwoNumbers.prototype.second;\r\n\r\nvar SOME_DEFAULT =\r\n  /** @type {TwoNumbers} */ ({first: 1, second: 2});\r\n\r\n/**\r\n * Class with a two number member.\r\n * @constructor\r\n */\r\nfunction HasTwoNumbers() {\r\n  /** @type {TwoNumbers} */\r\n  this.twoNumbers = this.getTwoNumbers();\r\n}\r\n\r\n/**\r\n * Get the default two numbers.\r\n * @return {TwoNumbers}\r\n */\r\nHasTwoNumbers.prototype.getTwoNumbers = function() {\r\n  return SOME_DEFAULT;\r\n};\r\n\r\nNow realizing that SOME_DEFAULTS is actually a preset constant which should not change I would like to say for that line (just adding an @const)\r\n\r\n/** @const */ var SOME_DEFAULT =\r\n  /** @type {TwoNumbers} */ ({first: 1, second: 2});\r\n\r\nHowever that starts throwing warnings as adding the @const makes the compiler dump the type. (Does the value get inlined without the typecast?)\r\n\r\nExpected:\r\nCompiles fine.\r\n\r\nError can be reproduced on:\r\nhttp://closure-compiler.appspot.com/home\r\ncopy-past the attached file in there, it throws a warning and does not compile."}