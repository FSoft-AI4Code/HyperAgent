{"issue_id": "793", "title": "readTree does not work with defaultTyping enabled but no type info provided", "description": "\n<p dir=\"auto\">I have enabled <code class=\"notranslate\">defaultTyping</code>, and serialized <code class=\"notranslate\">Foo</code> entity with no type info. I'm trying to read json as a tree with <code class=\"notranslate\">mapper.readTree(json)</code>, and it throws an exception</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='Exception in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: \nUnexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY \ntype information for class com.fasterxml.jackson.databind.JsonNode\n at [Source: {\n  \"bar\" : \"bar\"\n}; line: 1, column: 1]\n    at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)\n    at com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(DeserializationContext.java:927)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._locateTypeId(AsArrayTypeDeserializer.java:127)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:93)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:68)\n    at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:144)\n    at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:14)\n    at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)\n    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3562)\n    at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2136)\n    at test.App.main(App.java:23)'><pre><span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">in</span> <span class=\"pl-s1\">thread</span> <span class=\"pl-s\">\"main\"</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>: \n<span class=\"pl-s1\">Unexpected</span> <span class=\"pl-en\">token</span> (<span class=\"pl-c1\">START_OBJECT</span>), <span class=\"pl-s1\">expected</span> <span class=\"pl-c1\">START_ARRAY</span>: <span class=\"pl-smi\">need</span> <span class=\"pl-c1\">JSON</span> <span class=\"pl-smi\">Array</span> <span class=\"pl-s1\">to</span> <span class=\"pl-smi\">contain</span> <span class=\"pl-s1\">As</span>.<span class=\"pl-c1\">WRAPPER_ARRAY</span> \n<span class=\"pl-s1\">type</span> <span class=\"pl-s1\">information</span> <span class=\"pl-s1\">for</span> <span class=\"pl-k\">class</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonNode</span>\n <span class=\"pl-s1\">at</span> [<span class=\"pl-s1\">Source</span>: {\n  <span class=\"pl-s\">\"bar\"</span> : <span class=\"pl-s\">\"bar\"</span>\n}; <span class=\"pl-s1\">line</span>: <span class=\"pl-c1\">1</span>, <span class=\"pl-s1\">column</span>: <span class=\"pl-c1\">1</span>]\n    <span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>.<span class=\"pl-s1\">from</span>(<span class=\"pl-smi\">JsonMappingException</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">148</span>)\n    <span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationContext</span>.<span class=\"pl-en\">wrongTokenException</span>(<span class=\"pl-smi\">DeserializationContext</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">927</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">AsArrayTypeDeserializer</span>.<span class=\"pl-en\">_locateTypeId</span>(<span class=\"pl-smi\">AsArrayTypeDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">AsArrayTypeDeserializer</span>.<span class=\"pl-en\">_deserialize</span>(<span class=\"pl-smi\">AsArrayTypeDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">93</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">AsArrayTypeDeserializer</span>.<span class=\"pl-en\">deserializeTypedFromAny</span>(<span class=\"pl-smi\">AsArrayTypeDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">68</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">std</span>.<span class=\"pl-s1\">BaseNodeDeserializer</span>.<span class=\"pl-en\">deserializeWithType</span>(<span class=\"pl-smi\">JsonNodeDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">144</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">std</span>.<span class=\"pl-s1\">JsonNodeDeserializer</span>.<span class=\"pl-en\">deserializeWithType</span>(<span class=\"pl-smi\">JsonNodeDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">14</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">TypeWrappedDeserializer</span>.<span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">TypeWrappedDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">42</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>.<span class=\"pl-en\">_readMapAndClose</span>(<span class=\"pl-smi\">ObjectMapper</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">3562</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>.<span class=\"pl-en\">readTree</span>(<span class=\"pl-smi\">ObjectMapper</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">2136</span>)\n    <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">test</span>.<span class=\"pl-s1\">App</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">App</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">23</span>)</pre></div>\n<p dir=\"auto\">However, if I disable <code class=\"notranslate\">defaultTyping</code>, the same code works fine. So, <code class=\"notranslate\">readTree(json)</code> does not actually need type info for the root element, because it works when <code class=\"notranslate\">defaultTyping</code> is disabled (i.e. <code class=\"notranslate\">{\"bar\" : \"bar\"}</code>), but it throws the exception when <code class=\"notranslate\">defaultTyping</code> is enabled, that's why it looks like a bug. The same thing happens for <code class=\"notranslate\">valueToTree(foo)</code>.<br/>\nJackson version is <code class=\"notranslate\">2.5.3</code><br/>\nFull code is provided.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.MapperFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport java.io.IOException;\n\npublic class App {\n    public static void main(String[] args) throws IOException {\n        ObjectMapper mapper = new ObjectMapper()\n                .enableDefaultTyping() // works fine with disableDefaultTyping()\n                .enable(MapperFeature.AUTO_DETECT_GETTERS)\n                .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)\n                .disable(MapperFeature.USE_GETTERS_AS_SETTERS)\n                .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)\n                .enable(SerializationFeature.INDENT_OUTPUT)\n                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n\n        Foo foo = new Foo(\"bar\");\n        String serialized = mapper.writeValueAsString(foo); // {\"bar\" : \"bar\"}\n\n        JsonNode jsonNode = mapper.readTree(serialized); // exception here\n        JsonNode node = mapper.valueToTree(foo); // and here\n    }\n\n    public static class Foo {\n        private String bar;\n\n        public Foo() {\n        }\n\n        public Foo(String bar) {\n            this.bar = bar;\n        }\n\n        public String getBar() {\n            return bar;\n        }\n\n        public void setBar(String bar) {\n            this.bar = bar;\n        }\n    }\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonNode</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">MapperFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">SerializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-c1\">IOException</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">App</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>()\n                .<span class=\"pl-en\">enableDefaultTyping</span>() <span class=\"pl-c\">// works fine with disableDefaultTyping()</span>\n                .<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">AUTO_DETECT_GETTERS</span>)\n                .<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">REQUIRE_SETTERS_FOR_GETTERS</span>)\n                .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">USE_GETTERS_AS_SETTERS</span>)\n                .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">CAN_OVERRIDE_ACCESS_MODIFIERS</span>)\n                .<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">SerializationFeature</span>.<span class=\"pl-c1\">INDENT_OUTPUT</span>)\n                .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">SerializationFeature</span>.<span class=\"pl-c1\">FAIL_ON_EMPTY_BEANS</span>);\n\n        <span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">foo</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s\">\"bar\"</span>);\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">serialized</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">foo</span>); <span class=\"pl-c\">// {\"bar\" : \"bar\"}</span>\n\n        <span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">jsonNode</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readTree</span>(<span class=\"pl-s1\">serialized</span>); <span class=\"pl-c\">// exception here</span>\n        <span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">node</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">valueToTree</span>(<span class=\"pl-s1\">foo</span>); <span class=\"pl-c\">// and here</span>\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">bar</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Foo</span>() {\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">bar</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">bar</span> = <span class=\"pl-s1\">bar</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getBar</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">bar</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setBar</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">bar</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">bar</span> = <span class=\"pl-s1\">bar</span>;\n        }\n    }\n}</pre></div>\n"}