{"issue_id": "CSV-224", "title": "Some multi-iterator parsing peek sequences incorrectly consume elements", "description": "\n<div class=\"user-content-block\">\n<p>Repeated calls to CSVParser Iterable return new Iterators that each reference the same underlying parser lexer. Within the scope of a\u00a0single Iterator, row peeking with Iterator.hasNext() works as intended. When row peeking with Iterator.hasNext()\u00a0under circumstances that create a new Iterator, an element is consumed by the iterator which cannot be\u00a0accessed by subsequent, newly created Iterators and Iterator.next()s. Effectively, the record Iterator and the lexer get out of sequence. See snippet below.</p>\n<p>The \"right thing\" is keeping the Iterator in sequence with the lexer, and since this is reading from a buffer, there seem to me to be only two resolutions:</p>\n<ol>\n<li>One lexer, one Iterator.</li>\n<li>New Iterators, but peeking with hasNext doesn't advance the lexer.</li>\n</ol>\n<p>\u00a0</p>\n<p>If there's a consensus on one of these, I can put up a PR.</p>\n<p>\u00a0</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n\u00a0 @Test\r\n\r\n\u00a0 <span class=\"code-keyword\">public</span> void newIteratorSameLexer() <span class=\"code-keyword\">throws</span> Exception {\r\n\r\n\r\n\r\n\u00a0 \u00a0 <span class=\"code-object\">String</span> fiveRows = <span class=\"code-quote\">\"1\\n2\\n3\\n4\\n5\\n\"</span>;\r\n\r\n\r\n\r\n\u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"Enhanced <span class=\"code-keyword\">for</span> loop, no peeking:\"</span>);\r\n\r\n\u00a0 \u00a0 CSVParser parser =\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">new</span> CSVParser(<span class=\"code-keyword\">new</span> BufferedReader(<span class=\"code-keyword\">new</span> StringReader(fiveRows)), CSVFormat.DEFAULT);\r\n\r\n\u00a0 \u00a0 <span class=\"code-object\">int</span> recordNumber = 0;\r\n\r\n\u00a0 \u00a0 <span class=\"code-keyword\">for</span> (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(recordNumber + <span class=\"code-quote\">\" -&gt; \"</span> + record.get(0));\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">if</span> (recordNumber &gt;= 2) {\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">break</span>;\r\n\r\n\u00a0 \u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 <span class=\"code-comment\">// CSVParser.iterator() returns a <span class=\"code-keyword\">new</span> iterator, but the lexer isn't reset so we can pick up\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// where we left off.\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-keyword\">for</span> (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(recordNumber + <span class=\"code-quote\">\" -&gt; \"</span> + record.get(0));\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 <span class=\"code-comment\">// Enhanced <span class=\"code-keyword\">for</span> loop, no peeking:\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 1 -&gt; 1\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 2 -&gt; 2\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 3 -&gt; 3\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 4 -&gt; 4\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 5 -&gt; 5\r\n</span>\r\n\r\n\r\n\r\n\r\n\u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"\\nEnhanced <span class=\"code-keyword\">for</span> loop, with peek:\"</span>);\r\n\r\n\u00a0 \u00a0 parser = <span class=\"code-keyword\">new</span> CSVParser(<span class=\"code-keyword\">new</span> BufferedReader(<span class=\"code-keyword\">new</span> StringReader(fiveRows)), CSVFormat.DEFAULT);\r\n\r\n\u00a0 \u00a0 recordNumber = 0;\r\n\r\n\u00a0 \u00a0 <span class=\"code-keyword\">for</span> (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(recordNumber + <span class=\"code-quote\">\" -&gt; \"</span> + record.get(0));\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">if</span> (recordNumber &gt;= 2) {\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">break</span>;\r\n\r\n\u00a0 \u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 <span class=\"code-comment\">// CSVParser.iterator() returns a <span class=\"code-keyword\">new</span> iterator, but we call hasNext before next, so we queue\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// one element <span class=\"code-keyword\">for</span> consumption. This element is discarded by the <span class=\"code-keyword\">new</span> iterator, even though the\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// lexer has advanced a row, so we've consumed an element with the peek!\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"hasNext(): \"</span> + parser.iterator().hasNext());\r\n\r\n\u00a0 \u00a0 <span class=\"code-keyword\">for</span> (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(recordNumber + <span class=\"code-quote\">\" -&gt; \"</span> + record.get(0));\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 <span class=\"code-comment\">// Enhanced <span class=\"code-keyword\">for</span> loop, with peek:\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 1 -&gt; 1\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 2 -&gt; 2\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// hasNext(): <span class=\"code-keyword\">true</span>\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 3 -&gt; 4\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 4 -&gt; 5\r\n</span>\r\n\r\n\r\n\r\n\r\n\u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"\\nIterator <span class=\"code-keyword\">while</span>, with peek:\"</span>);\r\n\r\n\u00a0 \u00a0 parser = <span class=\"code-keyword\">new</span> CSVParser(<span class=\"code-keyword\">new</span> BufferedReader(<span class=\"code-keyword\">new</span> StringReader(fiveRows)), CSVFormat.DEFAULT);\r\n\r\n\u00a0 \u00a0 recordNumber = 0;\r\n\r\n\u00a0 \u00a0 Iterator&lt;CSVRecord&gt; iter = parser.iterator();\r\n\r\n\u00a0 \u00a0 <span class=\"code-keyword\">while</span> (iter.hasNext()) {\r\n\r\n\u00a0 \u00a0 \u00a0 CSVRecord record = iter.next();\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(recordNumber + <span class=\"code-quote\">\" -&gt; \"</span> + record.get(0));\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">if</span> (recordNumber &gt;= 2) {\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"code-keyword\">break</span>;\r\n\r\n\u00a0 \u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 <span class=\"code-comment\">// When we use the same iterator, iterator and lexer are in sequence.\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"hasNext(): \"</span> + iter.hasNext());\r\n\r\n\u00a0 \u00a0 <span class=\"code-keyword\">while</span> (iter.hasNext()) {\r\n\r\n\u00a0 \u00a0 \u00a0 CSVRecord record = iter.next();\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 <span class=\"code-object\">System</span>.out.println(recordNumber + <span class=\"code-quote\">\" -&gt; \"</span> + record.get(0));\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 <span class=\"code-comment\">// Iterator <span class=\"code-keyword\">while</span>, with peek:\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 1 -&gt; 1\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 2 -&gt; 2\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// hasNext(): <span class=\"code-keyword\">true</span>\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 3 -&gt; 3\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 4 -&gt; 4\r\n</span>\r\n\u00a0 \u00a0 <span class=\"code-comment\">// 5 -&gt; 5\r\n</span>\r\n\u00a0 }</pre>\n</div></div>\n</div>\n"}