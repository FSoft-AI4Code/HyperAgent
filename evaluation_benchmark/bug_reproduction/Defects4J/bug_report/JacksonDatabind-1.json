{"issue_id": "223", "title": "NULL values are duplicated when serializing as array [via @JsonFormat(shape = JsonFormat.Shape.ARRAY)]", "description": "\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class TestOuter {\n\n    @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n    public ArrayList&lt;TestInner&gt; array;\n\n    public TestOuter() {\n        this.array = new ArrayList&lt;TestInner&gt;();\n        this.array.add(new TestInner(1, \"one\"));\n        this.array.add(new TestInner(0, null));\n    }\n\n    private class TestInner {\n        public int i;\n        public String mayBeNull;\n\n        public TestInner(int i, String s) {\n            this.i = i;\n            this.mayBeNull = s;\n        }\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestOuter</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonFormat</span>(<span class=\"pl-s1\">shape</span> = <span class=\"pl-smi\">JsonFormat</span>.<span class=\"pl-s1\">Shape</span>.<span class=\"pl-c1\">ARRAY</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ArrayList</span>&lt;<span class=\"pl-smi\">TestInner</span>&gt; <span class=\"pl-s1\">array</span>;\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">TestOuter</span>() {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">array</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;<span class=\"pl-smi\">TestInner</span>&gt;();\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">array</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">TestInner</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\">\"one\"</span>));\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">array</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">TestInner</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">null</span>));\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestInner</span> {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">i</span>;\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">mayBeNull</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">TestInner</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">i</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">s</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">i</span> = <span class=\"pl-s1\">i</span>;\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">mayBeNull</span> = <span class=\"pl-s1\">s</span>;\n        }\n    }\n}</pre></div>\n<p dir=\"auto\">Serializing an instance of TestOuter will produce the following incorrect result (as of Jackson 2.2.1):</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='\"array\": [[1, \"one\"], [0, null, null]]'><pre><span class=\"pl-ent\">\"array\"</span>: [[<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>one<span class=\"pl-pds\">\"</span></span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>]]</pre></div>\n<p dir=\"auto\">where the null value is duplicated. The expected result would be:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='\"array\": [[1, \"one\"], [0, null]]'><pre><span class=\"pl-ent\">\"array\"</span>: [[<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>one<span class=\"pl-pds\">\"</span></span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">null</span>]]</pre></div>\n<p dir=\"auto\">I tracked the issue down to:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.fasterxml.jackson.databind.ser;\n// ...\npublic class BeanPropertyWriter {\n// ...\n    public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n        throws Exception\n    {\n        Object value = get(bean);\n        if (value == null) { // nulls need specialized handling\n            if (_nullSerializer != null) {\n                _nullSerializer.serialize(null, jgen, prov);\n            } else { // can NOT suppress entries in tabular output\n                jgen.writeNull();\n            }\n        }\n        // otherwise find serializer to use\n        JsonSerializer&lt;Object&gt; ser = _serializer;\n    // ... ...\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ser</span>;\n<span class=\"pl-c\">// ...</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">BeanPropertyWriter</span> {\n<span class=\"pl-c\">// ...</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">serializeAsColumn</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">bean</span>, <span class=\"pl-smi\">JsonGenerator</span> <span class=\"pl-s1\">jgen</span>, <span class=\"pl-smi\">SerializerProvider</span> <span class=\"pl-s1\">prov</span>)\n        <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span>\n    {\n        <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span> = <span class=\"pl-en\">get</span>(<span class=\"pl-s1\">bean</span>);\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">value</span> == <span class=\"pl-c1\">null</span>) { <span class=\"pl-c\">// nulls need specialized handling</span>\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">_nullSerializer</span> != <span class=\"pl-c1\">null</span>) {\n                <span class=\"pl-s1\">_nullSerializer</span>.<span class=\"pl-en\">serialize</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-s1\">jgen</span>, <span class=\"pl-s1\">prov</span>);\n            } <span class=\"pl-k\">else</span> { <span class=\"pl-c\">// can NOT suppress entries in tabular output</span>\n                <span class=\"pl-s1\">jgen</span>.<span class=\"pl-en\">writeNull</span>();\n            }\n        }\n        <span class=\"pl-c\">// otherwise find serializer to use</span>\n        <span class=\"pl-smi\">JsonSerializer</span>&lt;<span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">ser</span> = <span class=\"pl-s1\">_serializer</span>;\n    <span class=\"pl-c\">// ... ...</span></pre></div>\n<p dir=\"auto\">where I suspect there is a missing \"return\", to exit the function once handling of the null value in the dedicated branch is done.<br/>\nAs it is now, a null value is first serialized in the dedicated branch (jgen.writeNull()), and then execution continues on the \"normal\" (non-null) path and eventually the value is serialized once again.</p>\n"}