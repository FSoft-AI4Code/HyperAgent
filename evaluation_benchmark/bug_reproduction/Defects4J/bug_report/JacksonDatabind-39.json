{"issue_id": "1108", "title": "Jackson not continue to parse after DeserializationFeature.FAIL_ON_INVALID_SUBTYPE error", "description": "\n<p dir=\"auto\">After FAIL_ON_INVALID_SUBTYPE error, jackson should continue to parse, but seems jackson doesn't.</p>\n<p dir=\"auto\">The output:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"CallRecord [version=0.0, application=123, ] // doesn't read item2 which is valid\nCallRecord [version=0.0, application=123, ]\nCallRecord [version=0.0, ] // doesn't read application after invalid item.\"><pre class=\"notranslate\"><code>CallRecord [version=0.0, application=123, ] // doesn't read item2 which is valid\nCallRecord [version=0.0, application=123, ]\nCallRecord [version=0.0, ] // doesn't read application after invalid item.\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@JsonInclude(Include.NON_NULL)\npublic class CallRecord {\n    public float version;\n    public String application;\n    public Item item;\n    public Item item2;\n    public CallRecord() {}\n\n    public static void main(final String[] args) throws IOException {\n        final ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n                DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);\n        final CallRecord call = new CallRecord();\n\n        final Event event = new Event();\n        event.location = &quot;location1&quot;;\n        call.item = event;\n        call.item2 = event;\n        call.application = &quot;123&quot;;\n        // System.out.println(objectMapper.writeValueAsString(call));\n        String json =\n                &quot;{\\&quot;version\\&quot;:0.0,\\&quot;application\\&quot;:\\&quot;123\\&quot;,\\&quot;item\\&quot;:{\\&quot;type\\&quot;:\\&quot;xevent\\&quot;,\\&quot;location\\&quot;:\\&quot;location1\\&quot;},\\&quot;item2\\&quot;:{\\&quot;type\\&quot;:\\&quot;event\\&quot;,\\&quot;location\\&quot;:\\&quot;location1\\&quot;}}&quot;;\n        // can't read item2 - which is valid\n        System.out.println(objectMapper.readValue(json, CallRecord.class));\n\n        json = &quot;{\\&quot;version\\&quot;:0.0,\\&quot;application\\&quot;:\\&quot;123\\&quot;},{\\&quot;item\\&quot;:{\\&quot;type\\&quot;:\\&quot;xevent\\&quot;,\\&quot;location\\&quot;:\\&quot;location1\\&quot;}&quot;;\n        System.out.println(objectMapper.readValue(json, CallRecord.class));\n\n        json = &quot;{\\&quot;item\\&quot;:{\\&quot;type\\&quot;:\\&quot;xevent\\&quot;,\\&quot;location\\&quot;:\\&quot;location1\\&quot;}, \\&quot;version\\&quot;:0.0,\\&quot;application\\&quot;:\\&quot;123\\&quot;}&quot;;\n        // order matters: move item to the fornt, now it can't read application property\n        System.out.println(objectMapper.readValue(json, CallRecord.class));\n    }\n    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder();\n        builder.append(&quot;CallRecord [version=&quot;).append(version).append(&quot;, &quot;);\n        if (application != null) {\n            builder.append(&quot;application=&quot;).append(application).append(&quot;, &quot;);\n        }\n        if (item != null) {\n            builder.append(&quot;item=&quot;).append(item);\n        }\n        builder.append(&quot;]&quot;);\n        return builder.toString();\n    }\n}\n\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = &quot;type&quot;, visible = true)\n@JsonSubTypes({@Type(value = Event.class, name = Event.TYPE)})\npublic interface Item {\n}\n\npublic final class Event implements Item {\n    public String location;\n    public static final String TYPE = &quot;event&quot;;\n    public Event() {}\n}\"><pre class=\"notranslate\" lang=\"jaca\"><code>@JsonInclude(Include.NON_NULL)\npublic class CallRecord {\n    public float version;\n    public String application;\n    public Item item;\n    public Item item2;\n    public CallRecord() {}\n\n    public static void main(final String[] args) throws IOException {\n        final ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n                DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);\n        final CallRecord call = new CallRecord();\n\n        final Event event = new Event();\n        event.location = \"location1\";\n        call.item = event;\n        call.item2 = event;\n        call.application = \"123\";\n        // System.out.println(objectMapper.writeValueAsString(call));\n        String json =\n                \"{\\\"version\\\":0.0,\\\"application\\\":\\\"123\\\",\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"},\\\"item2\\\":{\\\"type\\\":\\\"event\\\",\\\"location\\\":\\\"location1\\\"}}\";\n        // can't read item2 - which is valid\n        System.out.println(objectMapper.readValue(json, CallRecord.class));\n\n        json = \"{\\\"version\\\":0.0,\\\"application\\\":\\\"123\\\"},{\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"}\";\n        System.out.println(objectMapper.readValue(json, CallRecord.class));\n\n        json = \"{\\\"item\\\":{\\\"type\\\":\\\"xevent\\\",\\\"location\\\":\\\"location1\\\"}, \\\"version\\\":0.0,\\\"application\\\":\\\"123\\\"}\";\n        // order matters: move item to the fornt, now it can't read application property\n        System.out.println(objectMapper.readValue(json, CallRecord.class));\n    }\n    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder();\n        builder.append(\"CallRecord [version=\").append(version).append(\", \");\n        if (application != null) {\n            builder.append(\"application=\").append(application).append(\", \");\n        }\n        if (item != null) {\n            builder.append(\"item=\").append(item);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\", visible = true)\n@JsonSubTypes({@Type(value = Event.class, name = Event.TYPE)})\npublic interface Item {\n}\n\npublic final class Event implements Item {\n    public String location;\n    public static final String TYPE = \"event\";\n    public Event() {}\n}\n</code></pre></div>\n"}