{"issue_id": "2189", "title": "<code>TreeTraversingParser</code> does not check int bounds", "description": "\n<p dir=\"auto\">Similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1729/hovercard\" data-id=\"249698794\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1729\" href=\"https://github.com/FasterXML/jackson-databind/issues/1729\">#1729</a>, <a href=\"https://github.com/FasterXML/jackson-databind/blob/2.9/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java#L311\">TreeTraversingParser</a> does not perform bounds checks on <em>some</em> JSON values bound to ints.</p>\n<p dir=\"auto\">Using Jackson version 2.9.7, here are several comparisons generated with the following code:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='  public static class IntClass {\n    public int x;\n\n    @Override\n    public String toString() {\n      return String.valueOf(x);\n    }\n  }\n\n  ObjectMapper mapper  = new ObjectMapper();\n  void readAndPrint(String _example) {\n    String fromTree;\n    try {\n      JsonNode tree = mapper.readTree(_example);\n      fromTree = mapper.readerFor(IntClass.class).readValue(tree).toString();\n    } catch (IOException _e) {\n      fromTree = _e.getClass().getSimpleName();\n    }\n\n    String fromString;\n    try {\n      fromString = mapper.readerFor(IntClass.class).readValue(_example).toString();\n    } catch (IOException _e) {\n      fromString = _e.getClass().getSimpleName();\n    }\n\n    System.out.printf(\"|%30s | %30s | %-30s|\\n\", _example, fromTree, fromString);\n  }\n\n  @Test\n  public void compareFromTree() {\n    System.out.printf(\"|%30s | %30s | %-30s|\\n\", \"json input\", \"read from tree\", \"read from string\");\n    System.out.println(\"|-------------------------------|--------------------------------|-------------------------------|\");\n    readAndPrint(\"{\\\"x\\\": 0}\");\n    // etc.\n  }'><pre>  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">IntClass</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span>;\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">String</span>.<span class=\"pl-en\">valueOf</span>(<span class=\"pl-s1\">x</span>);\n    }\n  }\n\n  <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span>  = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n  <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">readAndPrint</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">_example</span>) {\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">fromTree</span>;\n    <span class=\"pl-k\">try</span> {\n      <span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">tree</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readTree</span>(<span class=\"pl-s1\">_example</span>);\n      <span class=\"pl-s1\">fromTree</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readerFor</span>(<span class=\"pl-smi\">IntClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">tree</span>).<span class=\"pl-en\">toString</span>();\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> <span class=\"pl-s1\">_e</span>) {\n      <span class=\"pl-s1\">fromTree</span> = <span class=\"pl-s1\">_e</span>.<span class=\"pl-en\">getClass</span>().<span class=\"pl-en\">getSimpleName</span>();\n    }\n\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">fromString</span>;\n    <span class=\"pl-k\">try</span> {\n      <span class=\"pl-s1\">fromString</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readerFor</span>(<span class=\"pl-smi\">IntClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">_example</span>).<span class=\"pl-en\">toString</span>();\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> <span class=\"pl-s1\">_e</span>) {\n      <span class=\"pl-s1\">fromString</span> = <span class=\"pl-s1\">_e</span>.<span class=\"pl-en\">getClass</span>().<span class=\"pl-en\">getSimpleName</span>();\n    }\n\n    <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">printf</span>(<span class=\"pl-s\">\"|%30s | %30s | %-30s|\\n\"</span>, <span class=\"pl-s1\">_example</span>, <span class=\"pl-s1\">fromTree</span>, <span class=\"pl-s1\">fromString</span>);\n  }\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">compareFromTree</span>() {\n    <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">printf</span>(<span class=\"pl-s\">\"|%30s | %30s | %-30s|\\n\"</span>, <span class=\"pl-s\">\"json input\"</span>, <span class=\"pl-s\">\"read from tree\"</span>, <span class=\"pl-s\">\"read from string\"</span>);\n    <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"|-------------------------------|--------------------------------|-------------------------------|\"</span>);\n    <span class=\"pl-en\">readAndPrint</span>(<span class=\"pl-s\">\"{\\\"x\\\": 0}\"</span>);\n    <span class=\"pl-c\">// etc.</span>\n  }</pre></div>\n<table role=\"table\">\n<thead>\n<tr>\n<th>json input</th>\n<th>read from tree</th>\n<th>read from string</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>{\"x\": 0}</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>{\"x\": 10}</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>{\"x\": 1e4}</td>\n<td>10000</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>{\"x\": 1e10}</td>\n<td>2147483647</td>\n<td>JsonMappingException</td>\n</tr>\n<tr>\n<td>{\"x\": 1e-1}</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>{\"x\": 2147483648}</td>\n<td>-2147483648</td>\n<td>JsonMappingException</td>\n</tr>\n<tr>\n<td>{\"x\": 2147483649}</td>\n<td>-2147483647</td>\n<td>JsonMappingException</td>\n</tr>\n<tr>\n<td>{\"x\": -2147483649}</td>\n<td>2147483647</td>\n<td>JsonMappingException</td>\n</tr>\n<tr>\n<td>{\"x\": -4294967295}</td>\n<td>1</td>\n<td>JsonMappingException</td>\n</tr>\n<tr>\n<td>{\"x\": 0.1}</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>{\"x\": 1.9}</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>{\"x\": 1.9999999999999999}</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>{\"x\": true}</td>\n<td>MismatchedInputException</td>\n<td>MismatchedInputException</td>\n</tr>\n<tr>\n<td>{\"x\": {}}</td>\n<td>MismatchedInputException</td>\n<td>MismatchedInputException</td>\n</tr>\n<tr>\n<td>{\"x\": []}</td>\n<td>MismatchedInputException</td>\n<td>MismatchedInputException</td>\n</tr>\n<tr>\n<td>{\"x\": [0]}</td>\n<td>MismatchedInputException</td>\n<td>MismatchedInputException</td>\n</tr>\n<tr>\n<td>{\"x\": \"0\"}</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>{\"x\": \"10\"}</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>{\"x\": \"1e4\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"1e10\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"1e-1\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"2147483648\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"2147483649\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"-2147483649\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"-4294967295\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"0.1\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"1.9\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"1.9999999999999999\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"true\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"{}\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"[]\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n<tr>\n<td>{\"x\": \"[0]\"}</td>\n<td>InvalidFormatException</td>\n<td>InvalidFormatException</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">Without digging further into the code, it appears if the JSON value is numeric, <code class=\"notranslate\">TreeTraversingParser</code> silently overflows. Maybe this is expected behavior, but to me the inconsistency between reading from a non-tree (reader/string/file, etc) versus directly from a tree seems like a bug. At the very least, it makes it less convenient to do manipulations on a JSON document before binding.</p>\n<p dir=\"auto\">I would expect an exception thrown for the all but the first three examples above, but I do understand there are use-cases for coercing values. Even so, I would expect the coercion logic to be</p>\n<ul dir=\"auto\">\n<li>consistent between the parsers (or clearly documented otherwise)</li>\n<li>consistent between quoted and unquoted values</li>\n</ul>\n<p dir=\"auto\">I'm also curious about the expected behavior when converting non-integral values. Why is <code class=\"notranslate\">true</code> <code class=\"notranslate\">MismatchedInput</code>, but <code class=\"notranslate\">0.1</code> is converted? Similarly, why are <code class=\"notranslate\">0.1</code>, <code class=\"notranslate\">1e4</code>, and <code class=\"notranslate\">1e-1</code> acceptable, but not when in quotes, even though <code class=\"notranslate\">\"10\"</code> and other quote integers are acceptable?</p>\n<p dir=\"auto\">Thanks for all your hard work on this. I hope this issue doesn't come off as condescending. For our specific use case, we read the value as a tree, validating it against a schema, then using Jackson to bind the tree to an object. While it's true that we can specify type, minimum, and maximum values in the schema, it is prone to mistakes, and there's not necessarily a reason to tie the schema to the language implementation, provided things like overflow consistently result in an exception. Thus, I'm trying to better understand the expectations and limits Jackson has when using the tree parser.</p>\n"}