{"issue_id": "1941", "title": "<code>TypeFactory.constructFromCanonical()</code> throws NPE for Unparameterized generic canonical strings", "description": "\n<p dir=\"auto\">When <code class=\"notranslate\">TypeFactory.constructFromCanonical(returnType)</code> is used in <code class=\"notranslate\">2.6.1</code>, the <code class=\"notranslate\">returnType</code> string for generic types is not expected to have parameterized type information. For example, the following code runs fine on 2.6.1:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='returnType = \"java.util.List\";\nobjectMapper.getTypeFactory().constructFromCanonical(returnType);'><pre><span class=\"pl-s1\">returnType</span> = <span class=\"pl-s\">\"java.util.List\"</span>;\n<span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">getTypeFactory</span>().<span class=\"pl-en\">constructFromCanonical</span>(<span class=\"pl-s1\">returnType</span>);</pre></div>\n<p dir=\"auto\">But in version <code class=\"notranslate\">2.8.7</code>, the same code gives a <code class=\"notranslate\">NullPointerException</code> with the stack trace:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.rmi.RemoteException: java.lang.NullPointerException:null. \n    at com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(TypeFactory.java:1421)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1182)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(TypeFactory.java:1404)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1172)\n    at com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(TypeFactory.java:1318)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromClass(TypeFactory.java:1261)\n    at com.fasterxml.jackson.databind.type.TypeParser.parseType(TypeParser.java:60)\n    at com.fasterxml.jackson.databind.type.TypeParser.parse(TypeParser.java:33)\n    at com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(TypeFactory.java:544)\n    at foo.company.package.serialize.Serializer.deserialize(Serializer.java:355)\"><pre class=\"notranslate\"><code>java.rmi.RemoteException: java.lang.NullPointerException:null. \n    at com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(TypeFactory.java:1421)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1182)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(TypeFactory.java:1404)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1172)\n    at com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(TypeFactory.java:1318)\n    at com.fasterxml.jackson.databind.type.TypeFactory._fromClass(TypeFactory.java:1261)\n    at com.fasterxml.jackson.databind.type.TypeParser.parseType(TypeParser.java:60)\n    at com.fasterxml.jackson.databind.type.TypeParser.parse(TypeParser.java:33)\n    at com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(TypeFactory.java:544)\n    at foo.company.package.serialize.Serializer.deserialize(Serializer.java:355)\n</code></pre></div>\n<p dir=\"auto\">But if the <code class=\"notranslate\">returnType</code> string is passed with the generic type information, even if it is passed as <code class=\"notranslate\">Object</code>, ie, <code class=\"notranslate\">returnType = \"java.util.List&lt;java.lang.Object&gt;\";</code>, it works fine.</p>\n<p dir=\"auto\">I have 2 questions, is there a way to make this change backward compatible? If not, how can I work around this? PS: The workaround given by Tatu in the mailing list is not clear to <em>me</em>, if someone can give me an example, it'd be great help. Thanks!</p>\n<p dir=\"auto\"><a href=\"https://groups.google.com/forum/#!topic/jackson-user/Ik1oEkUC1E8\" rel=\"nofollow\">Link to google groups thread.</a></p>\n"}