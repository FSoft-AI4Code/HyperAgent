{"issue_id": "248", "title": "support @lends annotation", "description": "Some javascript toolkits (dojo, base, etc.) have a special way of declaring (what java calls) classes, for example in dojo:\r\n\r\ndojo.declare(&quot;MyClass&quot;, [superClass1, superClass2], { \r\n    foo: function(){ ... } \r\n    bar: function(){ ... } \r\n}); \r\n\r\nJSDoc (or at least JSDoc toolkit) supports this via annotations: \r\n\r\n/** \r\n * @name MyClass \r\n * @class \r\n * @extends superClass1 \r\n * @extends superClass2 \r\n */ \r\ndojo.declare(&quot;MyClass&quot;, [superClass1, superClass2], /** @lends \r\nMyClass.prototype */ { \r\n    foo: function(){ ... } \r\n    bar: function(){ ... } \r\n}); \r\n\r\nThe @lends keyword in particular is useful since it tells JSDoc that foo and bar are part of MyClass's prototype.   But closure compiler isn't picking up on that, thus I get a bunch of errors about &quot;dangerous use of this&quot; inside of foo() and bar(). \r\n\r\nSo, can @lends support be added to the closure compiler?\r\n\r\nThe workaround is to use @this on every method, but not sure if that is sufficient to make advanced mode compilation work correctly."}