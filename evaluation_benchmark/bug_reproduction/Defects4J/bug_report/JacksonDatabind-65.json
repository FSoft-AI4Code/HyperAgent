{"issue_id": "1429", "title": "<code>StdKeyDeserializer</code> can erroneously use a static factory method with more than one argument", "description": "\n<p dir=\"auto\">While investigating an issue, I found that there was different behavior for normal deserializers and key deserializers where deserializing a value as a field works as expected, but as a map key fails with \"not a valid representation: wrong number of arguments\".</p>\n<p dir=\"auto\">A basic example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.annotation.*;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class KeyVsFieldTest {\n    @Test\n    public void deserializeAsField() throws IOException {\n        AsField as_field = new ObjectMapper().readValue(\"{\\\"name\\\": \\\"first.last\\\"}\", AsField.class);\n        assertEquals(as_field.getName()._firstname, \"first\");\n        assertEquals(as_field.getName()._lastname, \"last\");\n    }\n\n    @Test\n    public void deserializeAsKey() throws IOException {\n        Map&lt;FullName, Double&gt; map =\n            new ObjectMapper().readValue(\"{\\\"first.last\\\": 42}\", new TypeReference&lt;Map&lt;FullName, Double&gt;&gt;() {\n            });\n       /* \n          Fails with: com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct Map key of type KeyVsFieldTest$FullName from String \"first.last\": not a valid representation: wrong number of arguments\n at [Source: java.io.StringReader@7113b13f; line: 1, column: 2]\n       */\n\n        Entry&lt;FullName, Double&gt; entry = map.entrySet().iterator().next();\n\n        assertEquals(entry.getKey()._firstname, \"first\");\n        assertEquals(entry.getKey()._lastname, \"last\");\n        assertEquals(entry.getValue().doubleValue(), 42, 0);\n    }\n\n    public static class AsField {\n        private final FullName _name;\n\n        public AsField(@JsonProperty(\"name\") FullName aName) {\n            _name = aName;\n        }\n\n        public FullName getName() {\n            return _name;\n        }\n    }\n\n    public static class FullName {\n        private final String _firstname;\n        private final String _lastname;\n\n        private FullName(String firstname, String lastname) {\n            _firstname = firstname;\n            _lastname = lastname;\n        }\n\n        @JsonCreator\n        public static FullName valueOf(String value) {\n            String[] mySplit = value.split(\"\\\\.\");\n            return new FullName(mySplit[0], mySplit[1]);\n        }\n\n        public static FullName valueOf(String firstname, String lastname) {\n            return new FullName(firstname, lastname);\n        }\n\n        @JsonValue\n        @Override\n        public String toString() {\n            return _firstname + \".\" + _lastname;\n        }\n    }\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.*;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-c1\">IOException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>.<span class=\"pl-s1\">Entry</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">KeyVsFieldTest</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">deserializeAsField</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n        <span class=\"pl-smi\">AsField</span> <span class=\"pl-s1\">as_field</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>().<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{\\\"name\\\": \\\"first.last\\\"}\"</span>, <span class=\"pl-smi\">AsField</span>.<span class=\"pl-s1\">class</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">as_field</span>.<span class=\"pl-en\">getName</span>().<span class=\"pl-s1\">_firstname</span>, <span class=\"pl-s\">\"first\"</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">as_field</span>.<span class=\"pl-en\">getName</span>().<span class=\"pl-s1\">_lastname</span>, <span class=\"pl-s\">\"last\"</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">deserializeAsKey</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n        <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">FullName</span>, <span class=\"pl-smi\">Double</span>&gt; <span class=\"pl-s1\">map</span> =\n            <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>().<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{\\\"first.last\\\": 42}\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeReference</span>&lt;<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">FullName</span>, <span class=\"pl-smi\">Double</span>&gt;&gt;() {\n            });\n       <span class=\"pl-c\">/* </span>\n<span class=\"pl-c\">          Fails with: com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct Map key of type KeyVsFieldTest$FullName from String \"first.last\": not a valid representation: wrong number of arguments</span>\n<span class=\"pl-c\"> at [Source: java.io.StringReader@7113b13f; line: 1, column: 2]</span>\n<span class=\"pl-c\">       */</span>\n\n        <span class=\"pl-smi\">Entry</span>&lt;<span class=\"pl-smi\">FullName</span>, <span class=\"pl-smi\">Double</span>&gt; <span class=\"pl-s1\">entry</span> = <span class=\"pl-s1\">map</span>.<span class=\"pl-en\">entrySet</span>().<span class=\"pl-en\">iterator</span>().<span class=\"pl-en\">next</span>();\n\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">entry</span>.<span class=\"pl-en\">getKey</span>().<span class=\"pl-s1\">_firstname</span>, <span class=\"pl-s\">\"first\"</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">entry</span>.<span class=\"pl-en\">getKey</span>().<span class=\"pl-s1\">_lastname</span>, <span class=\"pl-s\">\"last\"</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">entry</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">doubleValue</span>(), <span class=\"pl-c1\">42</span>, <span class=\"pl-c1\">0</span>);\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">AsField</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">FullName</span> <span class=\"pl-s1\">_name</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AsField</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"name\"</span>) <span class=\"pl-smi\">FullName</span> <span class=\"pl-s1\">aName</span>) {\n            <span class=\"pl-s1\">_name</span> = <span class=\"pl-s1\">aName</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">FullName</span> <span class=\"pl-en\">getName</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">_name</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">FullName</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">_firstname</span>;\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">_lastname</span>;\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">FullName</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">firstname</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">lastname</span>) {\n            <span class=\"pl-s1\">_firstname</span> = <span class=\"pl-s1\">firstname</span>;\n            <span class=\"pl-s1\">_lastname</span> = <span class=\"pl-s1\">lastname</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">FullName</span> <span class=\"pl-en\">valueOf</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n            <span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">mySplit</span> = <span class=\"pl-s1\">value</span>.<span class=\"pl-en\">split</span>(<span class=\"pl-s\">\"\\\\.\"</span>);\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FullName</span>(<span class=\"pl-s1\">mySplit</span>[<span class=\"pl-c1\">0</span>], <span class=\"pl-s1\">mySplit</span>[<span class=\"pl-c1\">1</span>]);\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">FullName</span> <span class=\"pl-en\">valueOf</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">firstname</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">lastname</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FullName</span>(<span class=\"pl-s1\">firstname</span>, <span class=\"pl-s1\">lastname</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span>\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">_firstname</span> + <span class=\"pl-s\">\".\"</span> + <span class=\"pl-s1\">_lastname</span>;\n        }\n    }\n}</pre></div>\n<p dir=\"auto\">It looks like this is because in <code class=\"notranslate\">BasicBeanDescriptor</code>, <code class=\"notranslate\">findFactoryMethod</code> has an incorrect assumption about the contents of <code class=\"notranslate\">_classInfo.getStaticMethods()</code>, which will have any method named <code class=\"notranslate\">valueOf</code> and static methods annotated with <code class=\"notranslate\">@JsonCreator</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Override\n    public Method findFactoryMethod(Class&lt;?&gt;... expArgTypes)\n    {\n        // So, of all single-arg static methods:\n        for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n            if (isFactoryMethod(am)) {\n                // And must take one of expected arg types (or supertype)\n                Class&lt;?&gt; actualArgType = am.getRawParameterType(0);\n                for (Class&lt;?&gt; expArgType : expArgTypes) {\n                    // And one that matches what we would pass in\n                    if (actualArgType.isAssignableFrom(expArgType)) {\n                        return am.getAnnotated();\n                    }\n                }\n            }\n        }\n        return null;\n    }\"><pre>    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Method</span> <span class=\"pl-s1\">findFactoryMethod</span>(<span class=\"pl-smi\">Class</span>&lt;?&gt;... <span class=\"pl-s1\">expArgTypes</span>)\n    {\n        <span class=\"pl-c\">// So, of all single-arg static methods:</span>\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">AnnotatedMethod</span> <span class=\"pl-s1\">am</span> : <span class=\"pl-s1\">_classInfo</span>.<span class=\"pl-en\">getStaticMethods</span>()) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-en\">isFactoryMethod</span>(<span class=\"pl-s1\">am</span>)) {\n                <span class=\"pl-c\">// And must take one of expected arg types (or supertype)</span>\n                <span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">actualArgType</span> = <span class=\"pl-s1\">am</span>.<span class=\"pl-en\">getRawParameterType</span>(<span class=\"pl-c1\">0</span>);\n                <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">expArgType</span> : <span class=\"pl-s1\">expArgTypes</span>) {\n                    <span class=\"pl-c\">// And one that matches what we would pass in</span>\n                    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">actualArgType</span>.<span class=\"pl-en\">isAssignableFrom</span>(<span class=\"pl-s1\">expArgType</span>)) {\n                        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">am</span>.<span class=\"pl-en\">getAnnotated</span>();\n                    }\n                }\n            }\n        }\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n    }</pre></div>\n<p dir=\"auto\">This can be worked around by annotating static factory methods not intended to be used as <code class=\"notranslate\">@JsonCreator</code>s with <code class=\"notranslate\">@JsonIgnore</code>, due to the resolution in <code class=\"notranslate\">_classInfo.getStaticMethods()</code>, so is not really urgent.</p>\n<p dir=\"auto\">Please let me know if you have any questions about the issue!</p>\n<p dir=\"auto\">Thanks,<br/>\nChris</p>\n"}