{"issue_id": "1441", "title": "Failure with custom Enum key deserializer, polymorphic types", "description": "\n<p dir=\"auto\">Normally the <code class=\"notranslate\">JsonParser</code> and the <code class=\"notranslate\">DeserializationContext</code> is passed to a <code class=\"notranslate\">Module</code>'s <code class=\"notranslate\">JsonDeserializer</code>.</p>\n<p dir=\"auto\">However, in the <code class=\"notranslate\">MapDeserializer</code>, when deserializing a <code class=\"notranslate\">Map</code> with an <code class=\"notranslate\">Enum</code> key, the <code class=\"notranslate\">KeyDeserializer</code> doesn't accept the <code class=\"notranslate\">JsonParser</code> as an argument:</p>\n<p dir=\"auto\"><a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java#L453\">https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java#L453</a><br/>\nObject key = keyDes.deserializeKey(keyStr, ctxt);</p>\n<p dir=\"auto\">and the <code class=\"notranslate\">StdKeyDeserializer.DelegatingKD</code> uses the context's parser</p>\n<p dir=\"auto\"><a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java#L315\">https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java#L315</a><br/>\nObject result = _delegate.deserialize(ctxt.getParser(), ctxt);</p>\n<p dir=\"auto\">When the type info field is missing from the json, the <code class=\"notranslate\">DeserializationContext</code>'s <code class=\"notranslate\">JsonParser</code>'s token is <code class=\"notranslate\">END_OBJECT</code> (presumably because it <code class=\"notranslate\">nextToken</code>'d through the object to find type and whiffed).</p>\n<p dir=\"auto\">This makes the module fail since the <code class=\"notranslate\">JsonParser</code> in the <code class=\"notranslate\">Module</code> is wrong, i.e. not the same as the <code class=\"notranslate\">JsonParser</code> in the <code class=\"notranslate\">MapDeserializer</code>.</p>\n<p dir=\"auto\">Class:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.annotation.JsonTypeInfo;\n\nimport java.util.Map;\n\nimport static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;\n\n@JsonTypeInfo(use = NAME, property = \"@type\", defaultImpl = SuperType.class)\npublic class SuperType {\n    private Map&lt;SuperTypeEnum, String&gt; someMap;\n\n    public Map&lt;SuperTypeEnum, String&gt; getSomeMap() {\n        return someMap;\n    }\n\n    public void setSomeMap(Map&lt;SuperTypeEnum, String&gt; someMap) {\n        this.someMap = someMap;\n    }\n}'><pre class=\"notranslate\"><code>import com.fasterxml.jackson.annotation.JsonTypeInfo;\n\nimport java.util.Map;\n\nimport static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;\n\n@JsonTypeInfo(use = NAME, property = \"@type\", defaultImpl = SuperType.class)\npublic class SuperType {\n    private Map&lt;SuperTypeEnum, String&gt; someMap;\n\n    public Map&lt;SuperTypeEnum, String&gt; getSomeMap() {\n        return someMap;\n    }\n\n    public void setSomeMap(Map&lt;SuperTypeEnum, String&gt; someMap) {\n        this.someMap = someMap;\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">Enum:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public enum SuperTypeEnum {\n    FOO\n}\"><pre class=\"notranslate\"><code>public enum SuperTypeEnum {\n    FOO\n}\n</code></pre></div>\n<p dir=\"auto\">Test:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport org.junit.*;\n\nimport java.io.IOException;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TestDeserializeType {\n\n    @Test\n    public void testNoTypeShouldDeserialize() throws IOException {\n        String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";\n        ObjectMapper mapper = new ObjectMapper();\n        SuperType superType = mapper.readValue(json, SuperType.class);\n        assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));\n    }\n\n    @Test\n    public void testNoTypeWithModuleShouldDeserialize() throws IOException {\n        String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";\n        ObjectMapper mapper = new ObjectMapper();\n        SimpleModule simpleModule = new SimpleModule();\n        simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer&lt;SuperTypeEnum&gt;() {\n            @Override\n            public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n                    throws IOException {\n\n                return SuperTypeEnum.valueOf(jsonParser.getText());\n            }\n        });\n        mapper.registerModule(simpleModule);\n\n        SuperType superType = mapper.readValue(json, SuperType.class);\n        assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));\n    }\n}'><pre class=\"notranslate\"><code>import com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport org.junit.*;\n\nimport java.io.IOException;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TestDeserializeType {\n\n    @Test\n    public void testNoTypeShouldDeserialize() throws IOException {\n        String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";\n        ObjectMapper mapper = new ObjectMapper();\n        SuperType superType = mapper.readValue(json, SuperType.class);\n        assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));\n    }\n\n    @Test\n    public void testNoTypeWithModuleShouldDeserialize() throws IOException {\n        String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";\n        ObjectMapper mapper = new ObjectMapper();\n        SimpleModule simpleModule = new SimpleModule();\n        simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer&lt;SuperTypeEnum&gt;() {\n            @Override\n            public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n                    throws IOException {\n\n                return SuperTypeEnum.valueOf(jsonParser.getText());\n            }\n        });\n        mapper.registerModule(simpleModule);\n\n        SuperType superType = mapper.readValue(json, SuperType.class);\n        assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));\n    }\n}\n</code></pre></div>\n"}