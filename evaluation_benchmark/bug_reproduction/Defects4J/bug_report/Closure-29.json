{"issue_id": "724", "title": "closure compiler screws up a perfectly valid isFunction() implementation", "description": " hi, this function does not get compiled correctly via google closure compiler\r\n\r\n isFunction = function(functionToCheck) {\r\n    var getType;\r\n    getType = {}; //just an object\r\n    return functionToCheck &amp;&amp; getType.toString.apply(functionToCheck) === '[object Function]';\r\n  };\r\n\r\ngets compiled into \r\n\r\nisFunction = function(a) {\r\n  return a &amp;&amp; &quot;[object Function]&quot; === (void 0).apply(a)\r\n};\r\n\r\nto make it work, we have to use an array instead of an object (even though we just want to call the object toString method)\r\n\r\n  isFunction = function(functionToCheck) {\r\n    var getType;\r\n    getType = []; //not it's an array \r\n    return functionToCheck &amp;&amp; getType.toString.apply(functionToCheck) === '[object Function]';\r\n  };\r\n\r\ngets compiled into\r\n\r\nisFunction = function(a) {\r\n  var b;\r\n  b = [];\r\n  return a &amp;&amp; &quot;[object Function]&quot; === b.toString.apply(a)\r\n};\r\n\r\nand it does what it should do. \r\n\r\ni wasted an hour to find that bug. bugs me. great tool otherwise. "}