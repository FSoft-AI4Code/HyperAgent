{"issue_id": "MATH-1021", "title": "HypergeometricDistribution.sample suffers from integer overflow", "description": "\n<div class=\"user-content-block\">\n<p>Hi, I have an application which broke when ported from commons math 2.2 to 3.2. It looks like the HypergeometricDistribution.sample() method doesn't work as well as it used to with large integer values \u2013 the example code below should return a sample between 0 and 50, but usually returns -50.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-keyword\">import</span> org.apache.commons.math3.distribution.HypergeometricDistribution;\n\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">class </span>Foo {\n  <span class=\"code-keyword\">public</span> <span class=\"code-keyword\">static</span> void main(<span class=\"code-object\">String</span>[] args) {\n    HypergeometricDistribution a = <span class=\"code-keyword\">new</span> HypergeometricDistribution(\n        43130568, 42976365, 50);\n    <span class=\"code-object\">System</span>.out.printf(<span class=\"code-quote\">\"%d %d%n\"</span>, a.getSupportLowerBound(), a.getSupportUpperBound()); <span class=\"code-comment\">// Prints <span class=\"code-quote\">\"0 50\"</span>\n</span>    <span class=\"code-object\">System</span>.out.printf(<span class=\"code-quote\">\"%d%n\"</span>,a.sample());                                             <span class=\"code-comment\">// Prints <span class=\"code-quote\">\"-50\"</span>\n</span>  }\n}\n</pre>\n</div></div>\n<p>In the debugger, I traced it as far as an integer overflow in HypergeometricDistribution.getNumericalMean() \u2013 instead of doing</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-keyword\">return</span> (<span class=\"code-object\">double</span>) (getSampleSize() * getNumberOfSuccesses()) / (<span class=\"code-object\">double</span>) getPopulationSize();\n</pre>\n</div></div>\n<p>it could do:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-keyword\">return</span> getSampleSize() * ((<span class=\"code-object\">double</span>) getNumberOfSuccesses() / (<span class=\"code-object\">double</span>) getPopulationSize());\n</pre>\n</div></div>\n<p>This seemed to fix it, based on a quick test.</p>\n</div>\n"}