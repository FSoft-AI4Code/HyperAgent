{"issue_id": "216", "title": "ArrayIndexOutOfBoundsException: 128 when repeatedly serializing to a byte array", "description": "\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.ArrayIndexOutOfBoundsException: 128\n    at com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(ByteQuadsCanonicalizer.java:853)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2340)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:2224)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(UTF8StreamJsonParser.java:1831)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(UTF8StreamJsonParser.java:1786)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(UTF8StreamJsonParser.java:1743)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(UTF8StreamJsonParser.java:1678)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(UTF8StreamJsonParser.java:1007)\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:471)\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:341)\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)\n    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3702)\n    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2824)\n    at com.kryptnostic.services.v1.SmokeTests.spamAddIndexPair(SmokeTests.java:605)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\"><pre class=\"notranslate\"><code>java.lang.ArrayIndexOutOfBoundsException: 128\n    at com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(ByteQuadsCanonicalizer.java:853)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2340)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:2224)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(UTF8StreamJsonParser.java:1831)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(UTF8StreamJsonParser.java:1786)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(UTF8StreamJsonParser.java:1743)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(UTF8StreamJsonParser.java:1678)\n    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(UTF8StreamJsonParser.java:1007)\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:471)\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:341)\n    at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)\n    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3702)\n    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2824)\n    at com.kryptnostic.services.v1.SmokeTests.spamAddIndexPair(SmokeTests.java:605)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n</code></pre></div>\n<p dir=\"auto\">Repro:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='@Test\npublic void spamTest() {\n        ObjectMapper mapper = new ObjectMapper();\n        Map&lt;ObjectUserKey, ServerIndexPair&gt; ssip = Maps.newConcurrentMap();\n        for ( int i = 0; i &lt; 10000; ++i ) {\n            byte[] indexPairBytes = new byte[ 2080 ];\n            new Random().nextBytes( indexPairBytes );\n            ServerIndexPair sip = new ServerIndexPair( indexPairBytes );\n\n            byte[] s = mapper.writeValueAsBytes( ImmutableMap.of( UUID\n                    .randomUUID().toString(), sip ) );\n            Map&lt;String, ServerIndexPair&gt; metadata = mapper.readValue( s,\n                    new TypeReference&lt;Map&lt;String, ServerIndexPair&gt;&gt;() {} );\n            for ( Entry&lt;String, ServerIndexPair&gt; metadataEntry : metadata.entrySet() ) {\n                ServerIndexPair indexPair = metadataEntry.getValue();\n                ssip.put( new ObjectUserKey( metadataEntry.getKey(), user ),\n                        indexPair );\n            }\n            logger.error( \"Iteration: {}\", i );\n        }\n}'><pre class=\"notranslate\"><code>@Test\npublic void spamTest() {\n        ObjectMapper mapper = new ObjectMapper();\n        Map&lt;ObjectUserKey, ServerIndexPair&gt; ssip = Maps.newConcurrentMap();\n        for ( int i = 0; i &lt; 10000; ++i ) {\n            byte[] indexPairBytes = new byte[ 2080 ];\n            new Random().nextBytes( indexPairBytes );\n            ServerIndexPair sip = new ServerIndexPair( indexPairBytes );\n\n            byte[] s = mapper.writeValueAsBytes( ImmutableMap.of( UUID\n                    .randomUUID().toString(), sip ) );\n            Map&lt;String, ServerIndexPair&gt; metadata = mapper.readValue( s,\n                    new TypeReference&lt;Map&lt;String, ServerIndexPair&gt;&gt;() {} );\n            for ( Entry&lt;String, ServerIndexPair&gt; metadataEntry : metadata.entrySet() ) {\n                ServerIndexPair indexPair = metadataEntry.getValue();\n                ssip.put( new ObjectUserKey( metadataEntry.getKey(), user ),\n                        indexPair );\n            }\n            logger.error( \"Iteration: {}\", i );\n        }\n}\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class ServerIndexPair {\n    public static final String INDEX_PAIR_FIELD = \"indexPair\";\n    private final byte[]       indexPair;\n\n    @JsonCreator\n    public ServerIndexPair( @JsonProperty( INDEX_PAIR_FIELD ) byte[] indexPair ) {\n        Preconditions.checkState( indexPair.length == 2080, \"Index pair must be 2080 bytes long.\" );\n        this.indexPair = indexPair;\n    }\n\n    @JsonProperty( INDEX_PAIR_FIELD )\n    public byte[] getIndexPair() {\n        return indexPair;\n    }\n}'><pre class=\"notranslate\"><code>public class ServerIndexPair {\n    public static final String INDEX_PAIR_FIELD = \"indexPair\";\n    private final byte[]       indexPair;\n\n    @JsonCreator\n    public ServerIndexPair( @JsonProperty( INDEX_PAIR_FIELD ) byte[] indexPair ) {\n        Preconditions.checkState( indexPair.length == 2080, \"Index pair must be 2080 bytes long.\" );\n        this.indexPair = indexPair;\n    }\n\n    @JsonProperty( INDEX_PAIR_FIELD )\n    public byte[] getIndexPair() {\n        return indexPair;\n    }\n}\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class ObjectUserKey {\n    public static final String SEPARATOR = \":\";\n    private final String       objectId;\n    private final UUID         userKey;\n\n    @JsonCreator\n    public ObjectUserKey(\n            @JsonProperty( Names.ID_FIELD ) String objectId,\n            @JsonProperty( Names.USER_FIELD ) UUID userKey ) {\n        super();\n        this.objectId = objectId;\n        this.userKey = userKey;\n    }\n\n    @JsonProperty( Names.ID_FIELD )\n    public String getObjectId() {\n        return objectId;\n    }\n\n    @JsonProperty( Names.USER_FIELD )\n    public UUID getUserKey() {\n        return userKey;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ( ( objectId == null ) ? 0 : objectId.hashCode() );\n        return result;\n    }\n\n    @Override\n    public boolean equals( Object obj ) {\n        if ( this == obj ) {\n            return true;\n        }\n        if ( obj == null ) {\n            return false;\n        }\n        if ( !( obj instanceof ObjectUserKey ) ) {\n            return false;\n        }\n        ObjectUserKey other = (ObjectUserKey) obj;\n        if ( objectId == null ) {\n            if ( other.objectId != null ) {\n                return false;\n            }\n        }\n        if ( userKey == null ) {\n            if ( other.userKey != null ) {\n                return false;\n            }\n        }\n        if ( !objectId.equals( other.objectId ) ) {\n            return false;\n        }\n        if ( !userKey.equals( other.userKey ) ) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        return userKey + SEPARATOR + objectId;\n    }\n\n    public static ObjectUserKey fromString( String value ) {\n        int index = value.lastIndexOf( ObjectUserKey.SEPARATOR );\n        Preconditions.checkState( index &gt; -1, \"Separator character \" + SEPARATOR\n                + \" should be present for ObjectUserKey\" );\n        String userKeyString = value.substring( 0, index );\n        String objectIdString = value.substring( index + 1 );\n        UUID userKey = UUID.fromString( userKeyString );\n        return new ObjectUserKey( objectIdString, userKey );\n    }\n\n    public byte[] asBytes() {\n        return this.toString().getBytes();\n    }\n\n}'><pre class=\"notranslate\"><code>public class ObjectUserKey {\n    public static final String SEPARATOR = \":\";\n    private final String       objectId;\n    private final UUID         userKey;\n\n    @JsonCreator\n    public ObjectUserKey(\n            @JsonProperty( Names.ID_FIELD ) String objectId,\n            @JsonProperty( Names.USER_FIELD ) UUID userKey ) {\n        super();\n        this.objectId = objectId;\n        this.userKey = userKey;\n    }\n\n    @JsonProperty( Names.ID_FIELD )\n    public String getObjectId() {\n        return objectId;\n    }\n\n    @JsonProperty( Names.USER_FIELD )\n    public UUID getUserKey() {\n        return userKey;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ( ( objectId == null ) ? 0 : objectId.hashCode() );\n        return result;\n    }\n\n    @Override\n    public boolean equals( Object obj ) {\n        if ( this == obj ) {\n            return true;\n        }\n        if ( obj == null ) {\n            return false;\n        }\n        if ( !( obj instanceof ObjectUserKey ) ) {\n            return false;\n        }\n        ObjectUserKey other = (ObjectUserKey) obj;\n        if ( objectId == null ) {\n            if ( other.objectId != null ) {\n                return false;\n            }\n        }\n        if ( userKey == null ) {\n            if ( other.userKey != null ) {\n                return false;\n            }\n        }\n        if ( !objectId.equals( other.objectId ) ) {\n            return false;\n        }\n        if ( !userKey.equals( other.userKey ) ) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        return userKey + SEPARATOR + objectId;\n    }\n\n    public static ObjectUserKey fromString( String value ) {\n        int index = value.lastIndexOf( ObjectUserKey.SEPARATOR );\n        Preconditions.checkState( index &gt; -1, \"Separator character \" + SEPARATOR\n                + \" should be present for ObjectUserKey\" );\n        String userKeyString = value.substring( 0, index );\n        String objectIdString = value.substring( index + 1 );\n        UUID userKey = UUID.fromString( userKeyString );\n        return new ObjectUserKey( objectIdString, userKey );\n    }\n\n    public byte[] asBytes() {\n        return this.toString().getBytes();\n    }\n\n}\n</code></pre></div>\n"}