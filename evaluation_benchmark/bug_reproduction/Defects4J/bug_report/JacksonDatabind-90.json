{"issue_id": "1804", "title": "<code>ValueInstantiator.canInstantiate()</code> ignores <code>canCreateUsingArrayDelegate()</code>", "description": "\n<h3 dir=\"auto\">Problem</h3>\n<p dir=\"auto\">Method Javadoc doesn't match behavior. As a result, delegate collection constructors (for abstract types) don't work properly.</p>\n<h3 dir=\"auto\">Tested versions</h3>\n<p dir=\"auto\">jackson-databind v2.8.7 and v2.9.2.</p>\n<h3 dir=\"auto\">Location in code</h3>\n<p dir=\"auto\"><a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java#L70\">https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java#L70</a></p>\n<h3 dir=\"auto\">Expected Behavior</h3>\n<p dir=\"auto\">Outputs <code class=\"notranslate\">[]</code>.</p>\n<h3 dir=\"auto\">Observed Behavior</h3>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='Exception in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `ArrayDelegateDeserializationTest$MyType` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information\n at [Source: (String)\"[]\"; line: 1, column: 1]\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1451)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1027)\n\tat com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(AbstractDeserializer.java:265)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2992)\n\tat ArrayDelegateDeserializationTest.main(ArrayDelegateDeserializationTest.java:35)'><pre class=\"notranslate\"><code>Exception in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `ArrayDelegateDeserializationTest$MyType` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information\n at [Source: (String)\"[]\"; line: 1, column: 1]\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1451)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1027)\n\tat com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(AbstractDeserializer.java:265)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2992)\n\tat ArrayDelegateDeserializationTest.main(ArrayDelegateDeserializationTest.java:35)\n</code></pre></div>\n<h3 dir=\"auto\">Test code</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import java.util.List;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class ArrayDelegateDeserializationTest {\n\n    public static class MyTypeImpl implements MyType {\n        private final List&lt;Integer&gt; values;\n\n        MyTypeImpl(List&lt;Integer&gt; values) {\n            this.values = values;\n        }\n\n        @Override\n        public List&lt;Integer&gt; getValues() {\n            return values;\n        }\n    }\n\n    public interface MyType {\n        @JsonValue\n        List&lt;Integer&gt; getValues();\n\n        @JsonCreator\n        static MyType of(List&lt;Integer&gt; values) {\n            return new MyTypeImpl(values);\n        }\n    }\n\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        MyType thing = mapper.readValue(\"[]\", MyType.class);\n        System.out.println(thing.getValues());\n    }\n\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonCreator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonValue</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ArrayDelegateDeserializationTest</span> {\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTypeImpl</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">MyType</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">values</span>;\n\n        <span class=\"pl-smi\">MyTypeImpl</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">values</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">values</span> = <span class=\"pl-s1\">values</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">getValues</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">values</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">MyType</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span>\n        <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">getValues</span>();\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-k\">static</span> <span class=\"pl-smi\">MyType</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">values</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MyTypeImpl</span>(<span class=\"pl-s1\">values</span>);\n        }\n    }\n\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">MyType</span> <span class=\"pl-s1\">thing</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"[]\"</span>, <span class=\"pl-smi\">MyType</span>.<span class=\"pl-s1\">class</span>);\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">thing</span>.<span class=\"pl-en\">getValues</span>());\n    }\n\n}</pre></div>\n"}