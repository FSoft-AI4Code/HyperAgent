{"issue_id": "61", "title": "Type checker misses annotations on functions defined within functions", "description": "<b>What steps will reproduce the problem?</b>\n1. Compile the following code under --warning_level VERBOSE\r\n\r\nvar ns = {};\r\n\r\n/** @param {string=} b */\r\nns.a = function(b) {}\r\n\r\nfunction d() {\r\n    ns.a();\r\n    ns.a(123);\r\n}\r\n\r\n2. Observe that the type checker correctly emits one warning, as 123 \r\ndoesn't match the type {string}\r\n\r\n3. Now compile the code with ns.a defined within an anonymous function, \r\nlike so:\r\n\r\nvar ns = {};\r\n\r\n(function() {\r\n    /** @param {string=} b */\r\n    ns.a = function(b) {}\r\n})();\r\n\r\nfunction d() {\r\n    ns.a();\r\n    ns.a(123);\r\n}\r\n\r\n4. Observe that a warning is emitted for calling ns.a with 0 parameters, and \r\nnot for the type error, as though the @param declaration were ignored. \r\n\r\n<b>What version of the product are you using? On what operating system?</b>\nr15\r\n\r\n<b>Please provide any additional information below.</b>\n\r\nThis sort of module pattern is common enough that it strikes me as worth \r\nsupporting.\r\n\r\nOne last note to make matters stranger: if the calling code isn't itself within \r\na function, no warnings are emitted at all:\r\n\r\nvar ns = {};\r\n\r\n(function() {\r\n    /** @param {string=} b */\r\n    ns.a = function(b) {}\r\n})();\r\n\r\nns.a();\r\nns.a(123);\r\n"}