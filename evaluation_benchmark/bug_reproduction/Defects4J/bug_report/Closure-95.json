{"issue_id": "66", "title": "Use @public tag to prevent compression of symbol names", "description": "Given this input code:\r\n\r\n\tGlow = {};\r\n\t/** @public */ Glow.versions = [1,2,3];\r\n\tGlow.showVersions = function() { alert(Glow.versions); }\r\n\t\r\n\t// exports\r\n\twindow['Glow'] = Glow;\r\n\tGlow['versions'] = Glow.versions;\r\n\tGlow['showVersions'] = Glow.showVersions;\r\n\r\nThe compiler (with ADVANCED_OPTIMIZATIONS on) will produce the following\r\noutput code:\r\n\r\n\tGlow = {};\r\n\tGlow.a = [1, 2, 3];\r\n\tGlow.b = function() { alert(Glow.a) };\r\n\twindow.Glow = Glow;\r\n\tGlow.versions = Glow.a;\r\n\tGlow.showVersions = Glow.b\r\n\r\nFrom outside the Glow library, a user may do the following (in their own,\r\nuncompressed code):\r\n\r\n\tGlow.versions = [4,5,6];\r\n\tGlow.showVersions();\r\n\r\nOnly in the compiled code will the user-code produces &quot;1,2,3&quot; instead of\r\nthe expected &quot;4,5,6&quot;. This is because the compiler renamed the reference to\r\n[1,2,3] in `showVersions()` to &quot;Glow.a&quot;, whilst the user assigned a new\r\narray to &quot;Glow.versions&quot;, and therefore the two different names now refer\r\nto two different arrays.\r\n\r\nI can avoid this by using the stringy-name to refer to Glow[&quot;versions&quot;],\r\nbut I would then have to do that everywhere in my code which is a annoying\r\nand bug-prone (if I or someone else should ever forget). I'd prefer to tell\r\nthe compiler once about my wish to have a property name left uncompresed,\r\nrather than relying on a side effect (the fact that the compiler won't\r\ncompress stringy-named properties) and then having to invoke that\r\nside-effect consistently everywhere.\r\n\r\nInstead I'm requesting that when the compiler sees a property is marked by\r\nthe author as @public it should then leave that name uncompressed everywhere.\r\n\r\nSo, given the input code above, the desired output would be:\r\n\r\n\tGlow = {};\r\n\tGlow.versions = [1, 2, 3];\r\n\tGlow.b = function() { alert(Glow.versions) };\r\n\twindow.Glow = Glow;\r\n\tGlow.versions = Glow.versions; // not needed now\r\n\tGlow.showVersions = Glow.b\r\n\r\nI'm not fixed on a particular tag, but @public seems an obvious choice, and\r\nI'd prefer to use tags that already exist in JsDoc Toolkit.\r\n\r\nNote that my proposed feature is different than the `@export Glow.versions`\r\ntag proposal, as that tag would merely be a shortcut for &quot;Glow['versions']\r\n= Glow.versions;&quot;, which, as I've shown above, doesn't solve this problem.\r\n"}