{"issue_id": "771", "title": "Annotation bundles ignored when added to Mixin", "description": "\n<p dir=\"auto\">When updating from v 2.4.4 to 2.5.* it appears as though annotation bundles created with <code class=\"notranslate\">@JacksonAnnotationsInside</code> are ignored when placed on a mixin.  Moving the annotation bundel to the actual class seems to resolve the issue.  Below is a simple test that attempts to rename a property.  I have more complicated test cases that are also failing but this should provide some context.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class Fun {\n\n    @Test\n    public void test() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);\n        String result = mapper.writeValueAsString(new Foo(\"result\"));\n        Assert.assertEquals(\"{\\\"bar\\\":\\\"result\\\"}\", result);\n    }\n\n    @Target(value={ ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD })\n    @Retention(value=RetentionPolicy.RUNTIME)\n    @JacksonAnnotationsInside\n    @JsonProperty(\"bar\")\n    public @interface ExposeStuff {\n\n    }\n\n    public abstract class FooMixin {\n        @ExposeStuff\n        public abstract String getStuff();\n    }\n\n    public class Foo {\n\n        private String stuff;\n\n        Foo(String stuff) {\n            this.stuff = stuff;\n        }\n\n        public String getStuff() {\n            return stuff;\n        }\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Fun</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>().<span class=\"pl-en\">addMixIn</span>(<span class=\"pl-smi\">Foo</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">FooMixin</span>.<span class=\"pl-s1\">class</span>);\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">result</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s\">\"result\"</span>));\n        <span class=\"pl-s1\">Assert</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"{\\\"bar\\\":\\\"result\\\"}\"</span>, <span class=\"pl-s1\">result</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Target</span>(<span class=\"pl-s1\">value</span>={ <span class=\"pl-smi\">ElementType</span>.<span class=\"pl-c1\">CONSTRUCTOR</span>, <span class=\"pl-smi\">ElementType</span>.<span class=\"pl-c1\">FIELD</span>, <span class=\"pl-smi\">ElementType</span>.<span class=\"pl-c1\">METHOD</span> })\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Retention</span>(<span class=\"pl-s1\">value</span>=<span class=\"pl-smi\">RetentionPolicy</span>.<span class=\"pl-c1\">RUNTIME</span>)\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JacksonAnnotationsInside</span>\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"bar\"</span>)\n    <span class=\"pl-k\">public</span> @interface <span class=\"pl-s1\">ExposeStuff</span> {\n\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">FooMixin</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">ExposeStuff</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getStuff</span>();\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">stuff</span>;\n\n        <span class=\"pl-smi\">Foo</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">stuff</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">stuff</span> = <span class=\"pl-s1\">stuff</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getStuff</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">stuff</span>;\n        }\n    }\n}</pre></div>\n<p dir=\"auto\">I'm expecting the \"stuff\" property to be serialized as \"bar\".</p>\n<p dir=\"auto\">I apologize I haven't been able to identify the culprit (and perhaps it's in my usage).  Let me know your thoughts. I'm always happy to provide more details!</p>\n"}