{"issue_id": "MATH-241", "title": "MathUtils.binomialCoefficient(n,k) fails for large results", "description": "\n<div class=\"user-content-block\">\n<p>Probably due to rounding errors, MathUtils.binomialCoefficient(n,k) fails for results near Long.MAX_VALUE.</p>\n<p>The existence of failures can be demonstrated by testing the recursive property:</p>\n<div class=\"preformatted panel\" style=\"border-width: 1px;\"><div class=\"preformattedContent panelContent\">\n<pre>         assertEquals(MathUtils.binomialCoefficient(65,32) + MathUtils.binomialCoefficient(65,33),\n                 MathUtils.binomialCoefficient(66,33));\n</pre>\n</div></div>\n<p>Or by directly using the (externally calculated and hopefully correct) expected value:</p>\n<div class=\"preformatted panel\" style=\"border-width: 1px;\"><div class=\"preformattedContent panelContent\">\n<pre>         assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66,33));\n</pre>\n</div></div>\n<p>I suggest a nonrecursive test implementation along the lines of</p>\n<div class=\"code panel\" style=\"border-style: solid;border-width: 1px;\"><div class=\"codeHeader panelHeader\" style=\"border-bottom-width: 1px;border-bottom-style: solid;\"><b>MathUtilsTest.java</b></div><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">    /**\n     * Exact implementation using BigInteger and the explicit formula\n     * (n, k) == ((k-1)*...*n) / (1*...*(n-k))\n     */\n\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">static</span> <span class=\"code-object\">long</span> binomialCoefficient(<span class=\"code-object\">int</span> n, <span class=\"code-object\">int</span> k) {\n\t\t<span class=\"code-keyword\">if</span> (k == 0 || k == n)\n\t\t\t<span class=\"code-keyword\">return</span> 1;\n\t\tBigInteger result = BigInteger.ONE;\n\t\t<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = k + 1; i &lt;= n; i++) {\n\t\t\tresult = result.multiply(BigInteger.valueOf(i));\n\t\t}\n\t\t<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 1; i &lt;= n - k; i++) {\n\t\t\tresult = result.divide(BigInteger.valueOf(i));\n\t\t}\n\t\t<span class=\"code-keyword\">if</span> (result.compareTo(BigInteger.valueOf(<span class=\"code-object\">Long</span>.MAX_VALUE)) &gt; 0) {\n\t\t\t<span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> ArithmeticException(\n                                <span class=\"code-quote\">\"Binomial coefficient overflow: \"</span> + n + <span class=\"code-quote\">\", \"</span> + k);\n\t\t}\n\t\t<span class=\"code-keyword\">return</span> result.longValue();\n\t}\n</pre>\n</div></div>\n<p>Which would allow you to test the expected values directly:</p>\n<div class=\"preformatted panel\" style=\"border-width: 1px;\"><div class=\"preformattedContent panelContent\">\n<pre>         assertEquals(binomialCoefficient(66,33), MathUtils.binomialCoefficient(66,33));\n</pre>\n</div></div>\n</div>\n"}