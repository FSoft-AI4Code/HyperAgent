{"issue_id": "90", "title": "#90 DateTimeZone.getOffsetFromLocal error during DST transition\n\n<small>\n<a class=\"icon\" href=\"feed.rss\" rel=\"nofollow\" title=\"Follow this Ticket\"><i class=\"fa fa-rss\"></i></a>\n</small>\n", "description": "\n<div><div class=\"markdown_content\"><p>This may be a failure of my understanding, but the comments in DateTimeZone.getOffsetFromLocal lead me to believe that if an ambiguous local time is given, the offset corresponding to the later of the two possible UTC instants will be returned - i.e. the greater offset.</p>\n<p>This doesn't appear to tally with my experience. In fall 2009, America/Los_Angeles changed from -7 to -8 at 2am wall time on November 11. Thus 2am became 1am - so 1:30am is ambiguous. I would therefore expect that constructing a DateTime for November 11th, 1:30am would give an instant corresponding with the later value (i.e. 9:30am UTC). This appears not to be the case:</p>\n<p>import org.joda.time.DateTime;<br/>\nimport org.joda.time.DateTimeZone;</p>\n<p>public class TzTest {<br/>\npublic static void main(String[] args) throws Exception {<br/>\nDateTimeZone zone = DateTimeZone.forID(\"America/Los_Angeles\");<br/>\nDateTime when1 = new DateTime(2009, 11, 1, 0, 30, 0, 0, zone);<br/>\nDateTime when2 = new DateTime(2009, 11, 1, 1, 30, 0, 0, zone);<br/>\nDateTime when3 = new DateTime(2009, 11, 1, 2, 30, 0, 0, zone);<br/>\nSystem.out.println(when1);<br/>\nSystem.out.println(when2);<br/>\nSystem.out.println(when3);<br/>\n}<br/>\n}</p>\n<p>Results:</p>\n<p>2009-11-01T00:30:00.000-07:00 // Correct<br/>\n2009-11-01T01:30:00.000-07:00 // Should be -08:00<br/>\n2009-11-01T02:30:00.000-08:00 // Correct</p></div></div>\n"}