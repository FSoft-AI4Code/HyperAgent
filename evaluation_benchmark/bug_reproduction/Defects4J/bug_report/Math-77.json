{"issue_id": "MATH-326", "title": "getLInfNorm() uses wrong formula in both ArrayRealVector and OpenMapRealVector (in different ways)", "description": "\n<div class=\"user-content-block\">\n<p>the L_infinity norm of a finite dimensional vector is just the max of the absolute value of its entries.</p>\n<p>The current implementation in ArrayRealVector has a typo:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">    <span class=\"code-keyword\">public</span> <span class=\"code-object\">double</span> getLInfNorm() {\n        <span class=\"code-object\">double</span> max = 0;\n        <span class=\"code-keyword\">for</span> (<span class=\"code-object\">double</span> a : data) {\n            max += <span class=\"code-object\">Math</span>.max(max, <span class=\"code-object\">Math</span>.abs(a));\n        }\n        <span class=\"code-keyword\">return</span> max;\n    }\n</pre>\n</div></div>\n<p>the += should just be an =.</p>\n<p>There is sadly a unit test assuring us that this is the correct behavior (effectively a regression-only test, not a test for correctness).</p>\n<p>Worse, the implementation in OpenMapRealVector is not even positive semi-definite:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">   \n    <span class=\"code-keyword\">public</span> <span class=\"code-object\">double</span> getLInfNorm() {\n        <span class=\"code-object\">double</span> max = 0;\n        Iterator iter = entries.iterator();\n        <span class=\"code-keyword\">while</span> (iter.hasNext()) {\n            iter.advance();\n            max += iter.value();\n        }\n        <span class=\"code-keyword\">return</span> max;\n    }\n</pre>\n</div></div>\n<p>I would suggest that this method be moved up to the AbstractRealVector superclass and implemented using the sparseIterator():</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">  <span class=\"code-keyword\">public</span> <span class=\"code-object\">double</span> getLInfNorm() {\n    <span class=\"code-object\">double</span> norm = 0;\n    Iterator&lt;Entry&gt; it = sparseIterator();\n    Entry e;\n    <span class=\"code-keyword\">while</span>(it.hasNext() &amp;&amp; (e = it.next()) != <span class=\"code-keyword\">null</span>) {\n      norm = <span class=\"code-object\">Math</span>.max(norm, <span class=\"code-object\">Math</span>.abs(e.getValue()));\n    }\n    <span class=\"code-keyword\">return</span> norm;\n  }\n</pre>\n</div></div>\n<p>Unit tests with negative valued vectors would be helpful to check for this kind of thing in the future.</p>\n</div>\n"}