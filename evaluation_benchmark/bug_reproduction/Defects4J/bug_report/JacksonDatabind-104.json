{"issue_id": "2167", "title": "Large ISO-8601 Dates are formatted/serialized incorrectly", "description": "\n<p dir=\"auto\"><strong>The problem</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.text.ParseException: Cannot parse date &quot;\u75dd055-12-02T16:47:04.192+0000&quot;: not compatible with any of standard forms (&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;, &quot;yyyy-MM-dd'T'HH:mm:ss.SSS&quot;, &quot;EEE, dd MMM yyyy HH:mm:ss zzz&quot;, &quot;yyyy-MM-dd&quot;)\n\tat com.fasterxml.jackson.databind.util.StdDateFormat.parse(StdDateFormat.java:372)\"><pre class=\"notranslate\"><code>java.text.ParseException: Cannot parse date \"\u75dd055-12-02T16:47:04.192+0000\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")\n\tat com.fasterxml.jackson.databind.util.StdDateFormat.parse(StdDateFormat.java:372)\n</code></pre></div>\n<p dir=\"auto\">Years &gt; 9999 are not rendered as 5 numbers or more, but with a non numerical characters for the thousands digit..</p>\n<p dir=\"auto\"><strong>The testcase</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class MyTestCase{\n  public static void main(String[] args) throws JsonProcessingException, ParseException {\n    StdDateFormat formatter = new StdDateFormat();\n    System.out.println(formatter.format(new Date(Long.MIN_VALUE)));\n    System.out.println(formatter.format(new Date(Long.MAX_VALUE)));\n    System.out.println(formatter.parse(formatter.format(new Date(Long.MIN_VALUE))));\n    System.out.println(formatter.parse(formatter.format(new Date(Long.MAX_VALUE))));\n\n    assert formatter.parse(formatter.format(new Date(Long.MAX_VALUE))).getTime() == Long.MAX_VALUE;\n    // Will fail due to lack of support for negative dates.\n    //assert formatter.parse(formatter.format(new Date(Long.MIN_VALUE))).getTime() == Long.MIN_VALUE;\n  }\n}\"><pre class=\"notranslate\"><code>public class MyTestCase{\n  public static void main(String[] args) throws JsonProcessingException, ParseException {\n    StdDateFormat formatter = new StdDateFormat();\n    System.out.println(formatter.format(new Date(Long.MIN_VALUE)));\n    System.out.println(formatter.format(new Date(Long.MAX_VALUE)));\n    System.out.println(formatter.parse(formatter.format(new Date(Long.MIN_VALUE))));\n    System.out.println(formatter.parse(formatter.format(new Date(Long.MAX_VALUE))));\n\n    assert formatter.parse(formatter.format(new Date(Long.MAX_VALUE))).getTime() == Long.MAX_VALUE;\n    // Will fail due to lack of support for negative dates.\n    //assert formatter.parse(formatter.format(new Date(Long.MIN_VALUE))).getTime() == Long.MIN_VALUE;\n  }\n}\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected</strong></p>\n<p dir=\"auto\">a) All dates are formatted correctly, meaning, years bigger than 9999.<br/>\nb) or some sort of exception telling the data is not supported.</p>\n<p dir=\"auto\"><strong>The location</strong><br/>\n<code class=\"notranslate\">'0' + something</code><br/>\n<a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java#L442\">https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java#L442</a></p>\n<p dir=\"auto\"><strong>Suggestion</strong><br/>\na) Adding '0' with an integer is not a safe operation. But if you are doing it, you need an upper bound check, e.g.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" private static void pad2(StringBuffer buffer, int value) {\n     int tens = value / 10;\n+    if (tens &gt;= 10) {\n+        pad2(buffer, tens);\n+        buffer.append((char) ('0' + value % 10));\n+        return;\n+    }\n     if (tens == 0) {\n         buffer.append('0');\n     } else {\n         buffer.append((char) ('0' + tens));\n         value -= 10 * tens;\n     }\n     buffer.append((char) ('0' + value));\n }\n \n private static void pad3(StringBuffer buffer, int value) {\n     int h = value / 100;\n+    if (h &gt;= 100) {\n+        pad3(buffer, h);\n+        pad2(buffer, value % 100);\n+        return;\n+    }\n     if (h == 0) {\n         buffer.append('0');\n     } else {\n         buffer.append((char) ('0' + h));\n         value -= (h * 100);\n     }\n     pad2(buffer, value);\n }\"><pre class=\"notranslate\"><code> private static void pad2(StringBuffer buffer, int value) {\n     int tens = value / 10;\n+    if (tens &gt;= 10) {\n+        pad2(buffer, tens);\n+        buffer.append((char) ('0' + value % 10));\n+        return;\n+    }\n     if (tens == 0) {\n         buffer.append('0');\n     } else {\n         buffer.append((char) ('0' + tens));\n         value -= 10 * tens;\n     }\n     buffer.append((char) ('0' + value));\n }\n \n private static void pad3(StringBuffer buffer, int value) {\n     int h = value / 100;\n+    if (h &gt;= 100) {\n+        pad3(buffer, h);\n+        pad2(buffer, value % 100);\n+        return;\n+    }\n     if (h == 0) {\n         buffer.append('0');\n     } else {\n         buffer.append((char) ('0' + h));\n         value -= (h * 100);\n     }\n     pad2(buffer, value);\n }\n</code></pre></div>\n<p dir=\"auto\">b) Or if you do not want to support such high years, then throw some sort of exception. E.g.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"     protected void _format(TimeZone tz, Locale loc, Date date,\n             StringBuffer buffer)\n     {\n         Calendar cal = _getCalendar(tz);\n         cal.setTime(date);\n\n+        int year = cal.get(Calendar.YEAR);\n+        if (cal.get(Calendar.ERA) == 0) {\n+            year = -year + 1;\n+        }\n+        if (year &lt; 0 || 9999 &lt; year) {\n+            throw new IndexOutOfBoundsException(&quot;Year not within the range [0,9999]: &quot; + Integer.toString(year))\n+        }\n \n-        pad4(buffer, cal.get(Calendar.YEAR));\n+        pad4(buffer, year);\n         buffer.append('-');\n         pad2(buffer, cal.get(Calendar.MONTH) + 1);\n         buffer.append('-');\n         pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));\"><pre class=\"notranslate\"><code>     protected void _format(TimeZone tz, Locale loc, Date date,\n             StringBuffer buffer)\n     {\n         Calendar cal = _getCalendar(tz);\n         cal.setTime(date);\n\n+        int year = cal.get(Calendar.YEAR);\n+        if (cal.get(Calendar.ERA) == 0) {\n+            year = -year + 1;\n+        }\n+        if (year &lt; 0 || 9999 &lt; year) {\n+            throw new IndexOutOfBoundsException(\"Year not within the range [0,9999]: \" + Integer.toString(year))\n+        }\n \n-        pad4(buffer, cal.get(Calendar.YEAR));\n+        pad4(buffer, year);\n         buffer.append('-');\n         pad2(buffer, cal.get(Calendar.MONTH) + 1);\n         buffer.append('-');\n         pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));\n</code></pre></div>\n"}