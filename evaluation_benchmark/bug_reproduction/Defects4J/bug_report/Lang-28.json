{"issue_id": "LANG-617", "title": "StringEscapeUtils.escapeXML() can't process UTF-16 supplementary characters", "description": "\n<div class=\"user-content-block\">\n<p>Supplementary characters in UTF-16 are those whose code points are above 0xffff, that is, require more than 1 Java char to be encoded, as explained here: <a class=\"external-link\" href=\"http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\" rel=\"nofollow noopener\" target=\"_blank\">http://java.sun.com/developer/technicalArticles/Intl/Supplementary/</a></p>\n<p>Currently, StringEscapeUtils.escapeXML() isn't aware of this coding scheme and treats each char as one character, which is not always right.</p>\n<p>A possible solution in class Entities would be:</p>\n<p>    public void escape(Writer writer, String str) throws IOException {<br/>\n        int len = str.length();<br/>\n        for (int i = 0; i &lt; len; i++) {<br/>\n            int code = str.codePointAt<img align=\"absmiddle\" alt=\"\" border=\"0\" class=\"emoticon\" height=\"16\" src=\"/jira/images/icons/emoticons/information.png\" width=\"16\"/>;<br/>\n            String entityName = this.entityName(code);<br/>\n            if (entityName != null) </p>\n{\n                writer.write('&amp;');\n                writer.write(entityName);\n                writer.write(';');\n            }\n<p> else if (code &gt; 0x7F) </p>\n{\n                    writer.write(\"&amp;#\");\n                    writer.write(code);\n                    writer.write(';');\n            }\n<p> else </p>\n{\n                    writer.write((char) code);\n            }\n\n<p>            if (code &gt; 0xffff) </p>\n{\n                    i++;\n            }\n<p>        }<br/>\n    }</p>\n<p>Besides fixing escapeXML(), this will also affect HTML escaping functions. I guess that's a good thing, but please remember I have only tested escapeXML().</p>\n</div>\n"}