{"issue_id": "368", "title": "In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures.", "description": "In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures. The following code only warns in the one instance noted in the comment, whereas I would expect it to complain about the declarations of both Bar.prototype.add and Bar.prototype.sub, as they claim @inheritDoc, but have seemingly different signatures from that of their superclass methods.\r\n\r\nIt would be helpful to have such a warning so that when you change the signature of a superclass method, you can run the Compiler to trigger warnings and find all of the other signatures that you need to update.\r\n\r\nRun the following:\r\n\r\n// ==ClosureCompiler==\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @use_closure_library true\r\n// ==/ClosureCompiler==\r\n\r\ngoog.provide('Foo');\r\ngoog.provide('Bar');\r\n\r\n\r\n/** @constructor */\r\nFoo = function() {};\r\n\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number}\r\n */\r\nFoo.prototype.add = function(a, b) {\r\n  return a + b;\r\n};\r\n\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number}\r\n */\r\nFoo.prototype.sub = goog.abstractMethod;\r\n\r\n\r\n/**\r\n * @constructor\r\n * @extends {Foo}\r\n */\r\nBar = function() {\r\n  goog.base(this);\r\n};\r\ngoog.inherits(Bar, Foo);\r\n\r\n\r\n/** @inheritDoc */\r\nBar.prototype.add = function(one) {\r\n  return one;\r\n};\r\n\r\n\r\n/** @inheritDoc */\r\nBar.prototype.sub = function(one) {\r\n  return one;\r\n};\r\n\r\n\r\nvar foo = /** @type {Foo} */ (new Bar());\r\nalert(foo.add(3, 4));\r\n\r\nvar bar = new Bar();\r\n// THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT\r\nalert(bar.add(3, 4));\r\n"}