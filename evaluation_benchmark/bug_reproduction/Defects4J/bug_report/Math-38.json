{"issue_id": "MATH-728", "title": "Errors in BOBYQAOptimizer when numberOfInterpolationPoints is greater than 2*dim+1", "description": "\n<div class=\"user-content-block\">\n<p>I've been having trouble getting BOBYQA to minimize a function (actually a non-linear least squares fit) so as one change I increased the number of interpolation points.  It seems that anything larger than 2*dim+1 causes an error (typically at</p>\n<p>line 1662<br/>\n                   interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));</p>\n<p>I'm guessing there is an off by one error in the translation from FORTRAN.  Changing the BOBYQAOptimizerTest as follows (increasing number of interpolation points by one) will cause failures.</p>\n<p>Bruce</p>\n<p>Index: src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java<br/>\n===================================================================<br/>\n\u2014 src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\t(revision 1221065)<br/>\n+++ src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\t(working copy)<br/>\n@@ -258,7 +258,7 @@<br/>\n //        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);<br/>\n         final double[] lB = boundaries == null ? null : boundaries<span class=\"error\">[0]</span>;<br/>\n         final double[] uB = boundaries == null ? null : boundaries<span class=\"error\">[1]</span>;</p>\n<ul class=\"alternate\" type=\"square\">\n<li>BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 1);<br/>\n+        BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 2);<br/>\n         RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);<br/>\n //        System.out.println(func.getClass().getName() + \" = \" <br/>\n //              + optim.getEvaluations() + \" f(\");</li>\n</ul>\n</div>\n"}