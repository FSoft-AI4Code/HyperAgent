{"issue_id": "200", "title": "ArgumentCaptor.fromClass's return type should match a parameterized type", "description": "\n<p dir=\"auto\"><code class=\"notranslate\">ArgumentCaptor.fromClass</code>'s return type should match a parameterized type.  I.e. the expression <code class=\"notranslate\">ArgumentCaptor.fromClass(Class&lt;S&gt;)</code> should be of type <code class=\"notranslate\">ArgumentCaptor&lt;U&gt;</code> where <code class=\"notranslate\">S</code> is a subtype of <code class=\"notranslate\">U</code>.</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ArgumentCaptor&lt;Consumer&lt;String&gt;&gt; captor = ArgumentCaptor.fromClass(Consumer.class)\"><pre class=\"notranslate\"><code>ArgumentCaptor&lt;Consumer&lt;String&gt;&gt; captor = ArgumentCaptor.fromClass(Consumer.class)\n</code></pre></div>\n<p dir=\"auto\">does not type check (i.e. it is a compile time error). It should type check.</p>\n<p dir=\"auto\">The reasons that it is desirable for <code class=\"notranslate\">ArgumentCaptor.fromClass</code> to allow expressions such as the example above to type check are:</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">ArgumentCaptor.fromClass</code> is intended to be a convenience method to allow the user to construct an ArgumentCaptor without casting the returned value.</li>\n</ol>\n<p dir=\"auto\">Currently, the user can devise a workaround such as:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ArgumentCaptor&lt;? extends Consumer&lt;String&gt;&gt; captor \n= ArgumentCaptor.fromClass(Consumer.class)\"><pre class=\"notranslate\"><code>ArgumentCaptor&lt;? extends Consumer&lt;String&gt;&gt; captor \n= ArgumentCaptor.fromClass(Consumer.class)\n</code></pre></div>\n<p dir=\"auto\">This workaround is inconvenient, and so contrary to <code class=\"notranslate\">ArgumentCaptor.fromClass</code> being a convenience method.</p>\n<ol dir=\"auto\" start=\"2\">\n<li>It is inconsistent with <code class=\"notranslate\">@Captor</code>, which can be applied to a field with a paramterized type.  I.e.</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Captor ArgumentCaptor&lt;Consumer&lt;String&gt;&gt; captor \"><pre class=\"notranslate\"><code>@Captor ArgumentCaptor&lt;Consumer&lt;String&gt;&gt; captor \n</code></pre></div>\n<p dir=\"auto\">type checks.</p>\n"}