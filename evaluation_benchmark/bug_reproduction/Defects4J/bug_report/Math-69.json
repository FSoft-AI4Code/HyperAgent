{"issue_id": "MATH-371", "title": "PearsonsCorrelation.getCorrelationPValues() precision limited by machine epsilon", "description": "\n<div class=\"user-content-block\">\n<p>Similar to the issue described in <a class=\"issue-link\" data-issue-key=\"MATH-201\" href=\"https://issues.apache.org/jira/browse/MATH-201\" title=\"T-test p-value precision hampered by machine epsilon\"><del>MATH-201</del></a>, using PearsonsCorrelation.getCorrelationPValues() with many treatments results in p-values that are continuous down to 2.2e-16 but that drop to 0 after that.</p>\n<p>In <a class=\"issue-link\" data-issue-key=\"MATH-201\" href=\"https://issues.apache.org/jira/browse/MATH-201\" title=\"T-test p-value precision hampered by machine epsilon\"><del>MATH-201</del></a>, the problem was described as such:<br/>\n&gt; So in essence, the p-value returned by TTestImpl.tTest() is:<br/>\n&gt; <br/>\n&gt; 1.0 - (cumulativeProbability(t) - cumulativeProbabily(-t))<br/>\n&gt; <br/>\n&gt; For large-ish t-statistics, cumulativeProbabilty(-t) can get quite small, and cumulativeProbabilty(t) can get very close to 1.0. When <br/>\n&gt; cumulativeProbability(-t) is less than the machine epsilon, we get p-values equal to zero because:<br/>\n&gt; <br/>\n&gt; 1.0 - 1.0 + 0.0 = 0.0</p>\n<p>The solution in <a class=\"issue-link\" data-issue-key=\"MATH-201\" href=\"https://issues.apache.org/jira/browse/MATH-201\" title=\"T-test p-value precision hampered by machine epsilon\"><del>MATH-201</del></a> was to modify the p-value calculation to this:<br/>\n&gt; p = 2.0 * cumulativeProbability(-t)</p>\n<p>Here, the problem is similar.  From PearsonsCorrelation.getCorrelationPValues():<br/>\n  p = 2 * (1 - tDistribution.cumulativeProbability(t));</p>\n<p>Directly calculating the p-value using identical code as PearsonsCorrelation.getCorrelationPValues(), but with the following change seems to solve the problem:<br/>\n  p = 2 * (tDistribution.cumulativeProbability(-t));</p>\n</div>\n"}