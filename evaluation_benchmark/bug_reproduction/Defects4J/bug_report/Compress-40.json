{"issue_id": "COMPRESS-363", "title": "Overflow in BitInputStream", "description": "\n<div class=\"user-content-block\">\n<p>in Class BitInputStream.java(\\src\\main\\java\\org\\apache\\commons\\compress\\utils),<br/>\nfuncion:</p>\n<p> public long readBits(final int count) throws IOException {<br/>\n        if (count &lt; 0 || count &gt; MAXIMUM_CACHE_SIZE) </p>\n{\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n<p>        while (bitsCachedSize &lt; count) {<br/>\n            final long nextByte = in.read();<br/>\n            if (nextByte &lt; 0) </p>\n{\n                return nextByte;\n            }\n<p>            if (byteOrder == ByteOrder.LITTLE_ENDIAN) </p>\n{\n                bitsCached |= (nextByte &lt;&lt; bitsCachedSize);\n            }\n<p> else </p>\n{\n                bitsCached &lt;&lt;= 8;\n                bitsCached |= nextByte;\n            }\n<p>            bitsCachedSize += 8;<br/>\n        }</p>\n<p>        final long bitsOut;<br/>\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) </p>\n{\n            bitsOut = (bitsCached &amp; MASKS[count]);\n            bitsCached &gt;&gt;&gt;= count;\n        }\n<p> else </p>\n{\n            bitsOut = (bitsCached &gt;&gt; (bitsCachedSize - count)) &amp; MASKS[count];\n        }\n<p>        bitsCachedSize -= count;<br/>\n        return bitsOut;<br/>\n    }</p>\n<p>I think here \"bitsCached |= (nextByte &lt;&lt; bitsCachedSize);\" will overflow in some cases. for example, below is a test case:</p>\n<p>public static void test() {</p>\n<p>        ByteArrayInputStream in = new ByteArrayInputStream(new byte[]</p>\n{87, 45, 66, 15,\n                                                                      90, 29, 88, 61, 33, 74}\n<p>);<br/>\n        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);<br/>\n        try </p>\n{\n            long ret = bin.readBits(5);\n            ret = bin.readBits(63);\n            ret = bin.readBits(12);\n        }\n<p> catch (Exception e) </p>\n{\n            e.printStackTrace();\n        }\n<p>}</p>\n<p>overflow occur in \"bin.readBits(63);\" , so ,result in wrong result from  \"bin.readBits(12);\" </p>\n</div>\n"}