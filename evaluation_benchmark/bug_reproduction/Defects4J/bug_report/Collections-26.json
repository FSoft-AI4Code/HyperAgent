{"issue_id": "COLLECTIONS-576", "title": "MultiKey subclassing has deserialization problem since COLLECTIONS-266: either declare protected readResolve() or MultiKey must be final", "description": "\n<div class=\"user-content-block\">\n<p>MultiKey from collections 4 provides a transient hashCode and a <b>private</b> readResolve to resolve <a class=\"issue-link\" data-issue-key=\"COLLECTIONS-266\" href=\"https://issues.apache.org/jira/browse/COLLECTIONS-266\" title=\"Issue with MultiKey when serialized/deserialized via RMI\"><del>COLLECTIONS-266</del></a>: Issue with MultiKey when serialized/deserialized via RMI.</p>\n<p>Unfortunately the solution does not work in case of <b>subclassing</b>: readResolve in MultiKey should be declared <b>protected</b> readResolve() to be called during deserialization of the subclass. Otherwise MultiKey must be final to avoid such subclassing.</p>\n<p><b>Testcase</b>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeHeader panelHeader\" style=\"border-bottom-width: 1px;\"><b>MultiKeySerializationTest.java</b></div><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-keyword\">package</span> de.ivu.test.common.collections4;\n\n<span class=\"code-keyword\">import</span> <span class=\"code-keyword\">static</span> org.junit.Assert.assertEquals;\n\n<span class=\"code-keyword\">import</span> java.io.ByteArrayInputStream;\n<span class=\"code-keyword\">import</span> java.io.ByteArrayOutputStream;\n<span class=\"code-keyword\">import</span> java.io.IOException;\n<span class=\"code-keyword\">import</span> java.io.ObjectInputStream;\n<span class=\"code-keyword\">import</span> java.io.ObjectOutputStream;\n\n<span class=\"code-keyword\">import</span> org.apache.commons.collections4.keyvalue.MultiKey;\n<span class=\"code-keyword\">import</span> org.junit.Test;\n\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">class </span>MultiKeySerializationTest {\n\n    @Test\n    @SuppressWarnings(<span class=\"code-quote\">\"unchecked\"</span>)\n    <span class=\"code-keyword\">public</span> void testReadResolveEqualHashCode()\n            <span class=\"code-keyword\">throws</span> IOException, ClassNotFoundException {\n        <span class=\"code-keyword\">class </span>MultiKey2&lt;A, B&gt;\n                <span class=\"code-keyword\">extends</span> MultiKey {\n\n            <span class=\"code-keyword\">private</span> <span class=\"code-keyword\">static</span> <span class=\"code-keyword\">final</span> <span class=\"code-object\">long</span> serialVersionUID = 1928896152249821416L;\n\n            <span class=\"code-keyword\">public</span> MultiKey2(A key1, B key2) {\n                <span class=\"code-keyword\">super</span>(key1, key2);\n            }\n\n            <span class=\"code-keyword\">public</span> A getFirst() {\n                <span class=\"code-keyword\">return</span> (A) getKey(0);\n            }\n\n            <span class=\"code-keyword\">public</span> B getSecond() {\n                <span class=\"code-keyword\">return</span> (B) getKey(1);\n            }\n            \n            <span class=\"code-comment\">// FIXME: MultiKey should either declare <span class=\"code-keyword\">protected</span> readResolve() or must be <span class=\"code-keyword\">final</span>.\n</span>        }\n        MultiKey2&lt;<span class=\"code-object\">String</span>, <span class=\"code-object\">String</span>&gt; one = <span class=\"code-keyword\">new</span> MultiKey2&lt;&gt;(<span class=\"code-quote\">\"bla\"</span>, <span class=\"code-quote\">\"blub\"</span>);\n        <span class=\"code-object\">System</span>.out.println(one.hashCode());\n        ByteArrayOutputStream byteOut = <span class=\"code-keyword\">new</span> ByteArrayOutputStream();\n        ObjectOutputStream out = <span class=\"code-keyword\">new</span> ObjectOutputStream(byteOut);\n        out.writeObject(one);\n        out.close();\n        <span class=\"code-object\">byte</span>[] serialized = byteOut.toByteArray();\n        ByteArrayInputStream byteIn = <span class=\"code-keyword\">new</span> ByteArrayInputStream(serialized);\n        ObjectInputStream in = <span class=\"code-keyword\">new</span> ObjectInputStream(byteIn);\n        MultiKey2&lt;<span class=\"code-object\">String</span>, <span class=\"code-object\">String</span>&gt; two = (MultiKey2&lt;<span class=\"code-object\">String</span>, <span class=\"code-object\">String</span>&gt;) in.readObject();\n        <span class=\"code-object\">System</span>.out.println(two.hashCode());\n        assertEquals(<span class=\"code-quote\">\"hashCode must be equal - please check <span class=\"code-keyword\">for</span> <span class=\"code-keyword\">protected</span> readResolve in MultiKey*\"</span>, one.hashCode(),\n            two.hashCode());\n    }\n}\n</pre>\n</div></div>\n<p><b>Fix:</b></p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeHeader panelHeader\" style=\"border-bottom-width: 1px;\"><b>MultiKey.java</b></div><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">@@ -274,7 +274,7 @@\n      * only stable <span class=\"code-keyword\">for</span> the same process).\n      * @<span class=\"code-keyword\">return</span> the instance with recalculated hash code\n      */\n-    <span class=\"code-keyword\">private</span> <span class=\"code-object\">Object</span> readResolve() {\n+    <span class=\"code-keyword\">protected</span> <span class=\"code-object\">Object</span> readResolve() {\n         calculateHashCode(keys);\n         <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>;\n     }\n</pre>\n</div></div>\n</div>\n"}