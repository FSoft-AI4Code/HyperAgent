{"issue_id": "MATH-803", "title": "Bugs in RealVector.ebeMultiply(RealVector) and ebeDivide(RealVector)", "description": "\n<div class=\"user-content-block\">\n<p><tt>OpenMapRealVector.ebeMultiply(RealVector)</tt> and <tt>OpenMapRealVector.ebeDivide(RealVector)</tt> return wrong values when one entry of the specified <tt>RealVector</tt> is nan or infinity. The bug is easy to understand. Here is the current implementation of <tt>ebeMultiply</tt></p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">    <span class=\"code-keyword\">public</span> OpenMapRealVector ebeMultiply(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = <span class=\"code-keyword\">new</span> OpenMapRealVector(<span class=\"code-keyword\">this</span>);\n        Iterator iter = entries.iterator();\n        <span class=\"code-keyword\">while</span> (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n        }\n        <span class=\"code-keyword\">return</span> res;\n    }\n</pre>\n</div></div>\n<p>The assumption is that for any double <tt>x</tt>, <tt>x * 0d == 0d</tt> holds, which is not true. The bug is easy enough to identify, but more complex to solve. The only solution I can come up with is to loop through <b>all</b> entries of v (instead of those entries which correspond to non-zero entries of this). I'm afraid about performance losses.</p>\n</div>\n"}