{"issue_id": "289", "title": "Compiler removes function properties that it should not", "description": "The Compiler appears to remove properties that are added to functions. I do not believe that it should do such a thing. In the following example, I add a property named &quot;alwaysCall&quot; to a function that I check later. The property appears to be stripped, which changes the behavior of the program. To see this in action run the following through http://closure-compiler.appspot.com/home:\r\n\r\n// ==ClosureCompiler==\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @use_closure_library true\r\n// @formatting pretty_print\r\n// ==/ClosureCompiler==\r\n\r\nvar lastMsg;\r\nvar map = {};\r\n\r\nvar addToMap = function(key, func) {\r\n  map[key] = func;\r\n};\r\n\r\nvar f1 = function() { alert('f1'); };\r\nf1.alwaysCall = true;\r\nvar f2 = function() { alert('f2'); };\r\n\r\naddToMap('f1', f1);\r\naddToMap('f2', f2);\r\n\r\nvar callFunctionByKey = function(key) {\r\n  var f = map[key];\r\n  if (f.alwaysCall) f();\r\n};\r\n\r\ncallFunctionByKey(Math.random() &gt; 0.5 ? 'f1' : 'f2');\r\n\r\n\r\nThe compiled code is:\r\n\r\n\r\nvar a = {};\r\na.f1 = function() {\r\n  alert(&quot;f1&quot;)\r\n};\r\na.f2 = function() {\r\n  alert(&quot;f2&quot;)\r\n};\r\nvar b = a[Math.random() &gt; 0.5 ? &quot;f1&quot; : &quot;f2&quot;];\r\nb.a &amp;&amp; b();\r\n\r\nNote that a.f1 does not have a property defined on it anymore, though it still appears to be checked on this line of code:\r\n\r\nb.a &amp;&amp; b();\r\n\r\nSo it looks like it is missing the following:\r\n\r\na.f1.a =  true;\r\n\r\nFor now, I can workaround this by quoting the property:\r\n\r\nf1['alwaysCall'] = true;\r\n\r\n// In callFunctionByKey:\r\nif (f['alwaysCall']) f();\r\n\r\nBut that seems as though it should not be necessary.\r\n"}