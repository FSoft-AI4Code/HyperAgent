{"issue_id": "1090", "title": "JsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,", "description": "\n<p dir=\"auto\">In lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like <code class=\"notranslate\">NaN</code>, <code class=\"notranslate\">Infinity</code>, <code class=\"notranslate\">-Infinity</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='    if (!lenient\n        &amp;&amp; (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }'><pre>    <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">lenient</span>\n        &amp;&amp; (<span class=\"pl-s1\">string</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s\">\"-Infinity\"</span>) || <span class=\"pl-s1\">string</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s\">\"Infinity\"</span>) || <span class=\"pl-s1\">string</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s\">\"NaN\"</span>))) {\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\">\"Numeric values must be finite, but was \"</span> + <span class=\"pl-s1\">value</span>);\n    }</pre></div>\n<p dir=\"auto\">But JsonWriter#value(double) behaves in different way:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='    if (Double.isNaN(value) || Double.isInfinite(value)) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }'><pre>    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">Double</span>.<span class=\"pl-en\">isNaN</span>(<span class=\"pl-s1\">value</span>) || <span class=\"pl-s1\">Double</span>.<span class=\"pl-en\">isInfinite</span>(<span class=\"pl-s1\">value</span>)) {\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\">\"Numeric values must be finite, but was \"</span> + <span class=\"pl-s1\">value</span>);\n    }</pre></div>\n<p dir=\"auto\">So, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. <code class=\"notranslate\">out.value((Number) Double.valueOf(Double.NaN))</code>).</p>\n<p dir=\"auto\">I think, this should be possible, because boxing gives worse performance.</p>\n"}