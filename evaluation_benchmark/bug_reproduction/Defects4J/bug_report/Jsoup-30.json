{"issue_id": "246", "title": "Jsoup.clean sometimes will throw execution exception:java.lang.StackOverflowError", "description": "\n<p dir=\"auto\">[ ERROR ]  throw execution exception:java.lang.StackOverflowError<br/>\njava.util.concurrent.ExecutionException: java.lang.StackOverflowError<br/>\nCaused by: java.lang.StackOverflowError<br/>\nat org.jsoup.safety.Whitelist.isSafeTag(Whitelist.java:323)<br/>\nat org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:115)<br/>\nat org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)<br/>\nat org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)<br/>\nat org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)<br/>\nat org.jsoup.safety.Cleaner.copySafeNodes(Cleaner.java:127)</p>\n<p dir=\"auto\">clean the url:<a href=\"http://blog.sina.com.cn/s/blog_501a5b1f0102dx6z.html\" rel=\"nofollow\">http://blog.sina.com.cn/s/blog_501a5b1f0102dx6z.html</a></p>\n<p dir=\"auto\">It's have to much <strong>wbr</strong> tags,when i search the page source ,found 24205.</p>\n<p dir=\"auto\">i look at  org.jsoup.safety.Cleaner source code and add code like this</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private int num = 1;\n    /**\n     * Iterates the input and copies trusted nodes (tags, attributes, text) into\n     * the destination.\n     * \n     * @param source\n     *            source of HTML\n     * @param dest\n     *            destination element to copy into\n     * @return number of discarded elements (that were considered unsafe)\n     */\n    private int copySafeNodes(Element source, Element dest) {\n        List&lt;Node&gt; sourceChildren = source.childNodes();\n        int numDiscarded = 0;\n\n        for (Node sourceChild : sourceChildren) {\n            num++;\n            logger.info(num);\n            if (num &gt; 2000) {\n                //break this tag.\n                break;\n            }\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone\n                                                                // and copy safe\n                                                                // attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or\n                            // text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(),\n                        sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">num</span> = <span class=\"pl-c1\">1</span>;\n    <span class=\"pl-c\">/**</span>\n<span class=\"pl-c\">     * Iterates the input and copies trusted nodes (tags, attributes, text) into</span>\n<span class=\"pl-c\">     * the destination.</span>\n<span class=\"pl-c\">     * </span>\n<span class=\"pl-c\">     * @param source</span>\n<span class=\"pl-c\">     *            source of HTML</span>\n<span class=\"pl-c\">     * @param dest</span>\n<span class=\"pl-c\">     *            destination element to copy into</span>\n<span class=\"pl-c\">     * @return number of discarded elements (that were considered unsafe)</span>\n<span class=\"pl-c\">     */</span>\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">copySafeNodes</span>(<span class=\"pl-smi\">Element</span> <span class=\"pl-s1\">source</span>, <span class=\"pl-smi\">Element</span> <span class=\"pl-s1\">dest</span>) {\n        <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Node</span>&gt; <span class=\"pl-s1\">sourceChildren</span> = <span class=\"pl-s1\">source</span>.<span class=\"pl-en\">childNodes</span>();\n        <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">numDiscarded</span> = <span class=\"pl-c1\">0</span>;\n\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Node</span> <span class=\"pl-s1\">sourceChild</span> : <span class=\"pl-s1\">sourceChildren</span>) {\n            <span class=\"pl-s1\">num</span>++;\n            <span class=\"pl-s1\">logger</span>.<span class=\"pl-en\">info</span>(<span class=\"pl-s1\">num</span>);\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">num</span> &gt; <span class=\"pl-c1\">2000</span>) {\n                <span class=\"pl-c\">//break this tag.</span>\n                <span class=\"pl-k\">break</span>;\n            }\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">sourceChild</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">Element</span>) {\n                <span class=\"pl-smi\">Element</span> <span class=\"pl-s1\">sourceEl</span> = (<span class=\"pl-smi\">Element</span>) <span class=\"pl-s1\">sourceChild</span>;\n\n                <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">whitelist</span>.<span class=\"pl-en\">isSafeTag</span>(<span class=\"pl-s1\">sourceEl</span>.<span class=\"pl-en\">tagName</span>())) { <span class=\"pl-c\">// safe, clone</span>\n                                                                <span class=\"pl-c\">// and copy safe</span>\n                                                                <span class=\"pl-c\">// attrs</span>\n                    <span class=\"pl-smi\">ElementMeta</span> <span class=\"pl-s1\">meta</span> = <span class=\"pl-en\">createSafeElement</span>(<span class=\"pl-s1\">sourceEl</span>);\n                    <span class=\"pl-smi\">Element</span> <span class=\"pl-s1\">destChild</span> = <span class=\"pl-s1\">meta</span>.<span class=\"pl-s1\">el</span>;\n                    <span class=\"pl-s1\">dest</span>.<span class=\"pl-en\">appendChild</span>(<span class=\"pl-s1\">destChild</span>);\n                    <span class=\"pl-s1\">numDiscarded</span> += <span class=\"pl-s1\">meta</span>.<span class=\"pl-s1\">numAttribsDiscarded</span>;\n                    <span class=\"pl-s1\">numDiscarded</span> += <span class=\"pl-en\">copySafeNodes</span>(<span class=\"pl-s1\">sourceEl</span>, <span class=\"pl-s1\">destChild</span>); <span class=\"pl-c\">// recurs</span>\n                } <span class=\"pl-k\">else</span> { <span class=\"pl-c\">// not a safe tag, but it may have children (els or</span>\n                            <span class=\"pl-c\">// text) that are, so recurse</span>\n                    <span class=\"pl-s1\">numDiscarded</span>++;\n                    <span class=\"pl-s1\">numDiscarded</span> += <span class=\"pl-en\">copySafeNodes</span>(<span class=\"pl-s1\">sourceEl</span>, <span class=\"pl-s1\">dest</span>);\n                }\n            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">sourceChild</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">TextNode</span>) {\n                <span class=\"pl-smi\">TextNode</span> <span class=\"pl-s1\">sourceText</span> = (<span class=\"pl-smi\">TextNode</span>) <span class=\"pl-s1\">sourceChild</span>;\n                <span class=\"pl-smi\">TextNode</span> <span class=\"pl-s1\">destText</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TextNode</span>(<span class=\"pl-s1\">sourceText</span>.<span class=\"pl-en\">getWholeText</span>(),\n                        <span class=\"pl-s1\">sourceChild</span>.<span class=\"pl-en\">baseUri</span>());\n                <span class=\"pl-s1\">dest</span>.<span class=\"pl-en\">appendChild</span>(<span class=\"pl-s1\">destText</span>);\n            } <span class=\"pl-c\">// else, we don't care about comments, xml proc instructions, etc</span>\n        }\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">numDiscarded</span>;\n    }</pre></div>\n<p dir=\"auto\">but the clean result will be wrong and The layout will be chaos.</p>\n<p dir=\"auto\">How can I solve this problem?</p>\n"}