{"issue_id": "1013", "title": "@JsonUnwrapped is not treated as assuming @JsonProperty(\"\")", "description": "\n<p dir=\"auto\">See discussion <a href=\"https://groups.google.com/forum/#!topic/jackson-user/QLpWb8YzIoE\" rel=\"nofollow\">here</a> but basically <code class=\"notranslate\">@JsonUnwrapped</code> on a private field by itself does not cause that field to be serialized, currently,  You need to add an explicit <code class=\"notranslate\">@JsonProperty</code>.  You shouldn't have to do that.  (Following test fails currently, should pass, though you can make it pass by commenting out the line with <code class=\"notranslate\">@JsonProperty</code>.  Uses TestNG and AssertJ.)</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='package com.bakins_bits;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.testng.annotations.Test;\n\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class TestJsonUnwrappedShouldMakePrivateFieldsSerializable\n{\n    public static class Inner\n    {\n        public String animal;\n    }\n\n    public static class Outer\n    {\n        // @JsonProperty\n        @JsonUnwrapped\n        private Inner inner;\n    }\n\n    @Test\n    public void jsonUnwrapped_should_make_private_fields_serializable() throws JsonProcessingException {\n        // ARRANGE\n        Inner inner = new Inner();\n        inner.animal = \"Zebra\";\n\n        Outer outer = new Outer();\n        outer.inner = inner;\n\n        ObjectMapper sut = new ObjectMapper();\n\n        // ACT\n        String actual = sut.writeValueAsString(outer);\n\n        // ASSERT\n        assertThat(actual).contains(\"animal\");\n        assertThat(actual).contains(\"Zebra\");\n        assertThat(actual).doesNotContain(\"inner\");\n    }\n}'><pre><span class=\"pl-k\">package</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">bakins_bits</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertThat</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">testng</span>.<span class=\"pl-s1\">annotations</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonUnwrapped</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestJsonUnwrappedShouldMakePrivateFieldsSerializable</span>\n{\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Inner</span>\n    {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">animal</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Outer</span>\n    {\n        <span class=\"pl-c\">// @JsonProperty</span>\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonUnwrapped</span>\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Inner</span> <span class=\"pl-s1\">inner</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">jsonUnwrapped_should_make_private_fields_serializable</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-c\">// ARRANGE</span>\n        <span class=\"pl-smi\">Inner</span> <span class=\"pl-s1\">inner</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Inner</span>();\n        <span class=\"pl-s1\">inner</span>.<span class=\"pl-s1\">animal</span> = <span class=\"pl-s\">\"Zebra\"</span>;\n\n        <span class=\"pl-smi\">Outer</span> <span class=\"pl-s1\">outer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Outer</span>();\n        <span class=\"pl-s1\">outer</span>.<span class=\"pl-s1\">inner</span> = <span class=\"pl-s1\">inner</span>;\n\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">sut</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n        <span class=\"pl-c\">// ACT</span>\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">sut</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">outer</span>);\n\n        <span class=\"pl-c\">// ASSERT</span>\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"animal\"</span>);\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Zebra\"</span>);\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">doesNotContain</span>(<span class=\"pl-s\">\"inner\"</span>);\n    }\n}</pre></div>\n"}