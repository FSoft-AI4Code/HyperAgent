{"issue_id": "515", "title": "Mixin annotations lost when using a mixin class hierarchy with non-mixin interfaces", "description": "\n<p dir=\"auto\">In summary, mixin annotations are lost when Jackson scans a parent mixin class with Json annotations followed by an interface implemented by the parent mixin class that does not have the same Json annotations.<br/>\nJackson version: 2.4.0</p>\n<p dir=\"auto\">Detail:<br/>\nI have the following class structure</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public interface Contact {\n    String getCity();\n}\n\npublic class ContactImpl implements Contact {\n    public String getCity() { ... }\n}\n\npublic class ContactMixin implements Contact {\n    @JsonProperty\n    public String getCity() { return null; }\n}\n\npublic interface Person extends Contact {}\n\npublic class PersonImpl extends ContactImpl implements Person {}\n\npublic class PersonMixin extends ContactMixin implements Person {}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Contact</span> {\n    <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getCity</span>();\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ContactImpl</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Contact</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getCity</span>() { ... }\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ContactMixin</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Contact</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getCity</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>; }\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Person</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Contact</span> {}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">PersonImpl</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">ContactImpl</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Person</span> {}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">PersonMixin</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">ContactMixin</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Person</span> {}</pre></div>\n<p dir=\"auto\">and I configure a module as</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// There are other getters/properties in the Impl class that do not need to be serialized and so\n// I am using the Mixin to match the interface and explicitly annotate all the inherited methods\nmodule.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)\n    .disable(MapperFeature.AUTO_DETECT_FIELDS)\n    .disable(MapperFeature.AUTO_DETECT_GETTERS)\n    .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)\n    .disable(MapperFeature.INFER_PROPERTY_MUTATORS);\nmodule.setMixInAnnotation(Person.class, PersonMixin.class);\"><pre><span class=\"pl-c\">// There are other getters/properties in the Impl class that do not need to be serialized and so</span>\n<span class=\"pl-c\">// I am using the Mixin to match the interface and explicitly annotate all the inherited methods</span>\n<span class=\"pl-s1\">module</span>.<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">ALLOW_FINAL_FIELDS_AS_MUTATORS</span>)\n    .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">AUTO_DETECT_FIELDS</span>)\n    .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">AUTO_DETECT_GETTERS</span>)\n    .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">AUTO_DETECT_IS_GETTERS</span>)\n    .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">INFER_PROPERTY_MUTATORS</span>);\n<span class=\"pl-s1\">module</span>.<span class=\"pl-en\">setMixInAnnotation</span>(<span class=\"pl-smi\">Person</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">PersonMixin</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">When a <code class=\"notranslate\">PersonImpl</code> instance is serialized, <code class=\"notranslate\">city</code> is not included.</p>\n<p dir=\"auto\">I debugged the code and this is what happens:<br/>\nIn <code class=\"notranslate\">AnnotatedClass.resolveMemberMethods()</code> the supertypes of <code class=\"notranslate\">PersonImpl</code> are <code class=\"notranslate\">[Person.class, Contact.class, ContactImpl.class]</code> in that order.</p>\n<p dir=\"auto\">It starts with <code class=\"notranslate\">Person</code> for which it finds <code class=\"notranslate\">PersonMixin</code> and proceeds to <code class=\"notranslate\">AnnotatedClass._addMethodMixIns()</code>. Here the <code class=\"notranslate\">parents</code> list has <code class=\"notranslate\">[PersonMixin, ContactMixin, Contact]</code>. When it processes <code class=\"notranslate\">ContactMixin</code> it adds <code class=\"notranslate\">getCity()</code> with the <code class=\"notranslate\">JsonProperty</code> annotation. Then it processes <code class=\"notranslate\">Contact</code>, doesn't find <code class=\"notranslate\">getCity()</code> in <code class=\"notranslate\">methods</code> map and so creates a new <code class=\"notranslate\">AnnotatedMethod</code> for <code class=\"notranslate\">getCity()</code> with the one from the interface which has no annotation which replaces the one from <code class=\"notranslate\">ContactMixin</code></p>\n<p dir=\"auto\">The workaround for this issue is to explicitly add any parent mixins to the module i.e.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"module.setMixInAnnotation(Contact.class, ContactMixin.class);\"><pre><span class=\"pl-s1\">module</span>.<span class=\"pl-en\">setMixInAnnotation</span>(<span class=\"pl-smi\">Contact</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">ContactMixin</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n"}