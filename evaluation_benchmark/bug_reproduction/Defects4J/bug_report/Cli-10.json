{"issue_id": "CLI-156", "title": "Missing required options not throwing MissingOptionException", "description": "\n<div class=\"user-content-block\">\n<p>When an Options object is used to parse a second set of command arguments it won't throw a MissingOptionException.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-keyword\">import</span> org.apache.commons.cli.CommandLine;\n<span class=\"code-keyword\">import</span> org.apache.commons.cli.GnuParser;\n<span class=\"code-keyword\">import</span> org.apache.commons.cli.OptionBuilder;\n<span class=\"code-keyword\">import</span> org.apache.commons.cli.Options;\n<span class=\"code-keyword\">import</span> org.apache.commons.cli.ParseException;\n\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">class </span>Example\n{\n\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">static</span> void main(<span class=\"code-object\">String</span>[] args) <span class=\"code-keyword\">throws</span> ParseException\n\t{\n\t\tbrokenExample();\n\t\tworkingExample();\n\t}\n\n\t<span class=\"code-comment\">// <span class=\"code-keyword\">throws</span> exception as expected\n</span>\t<span class=\"code-keyword\">private</span> <span class=\"code-keyword\">static</span> void workingExample() <span class=\"code-keyword\">throws</span> ParseException\n\t{\n\t\t<span class=\"code-object\">String</span>[] args = {};\n\n\t\tOptions opts = <span class=\"code-keyword\">new</span> Options();\n\t\topts.addOption(OptionBuilder.isRequired().create(<span class=\"code-quote\">'v'</span>));\n\n\t\tGnuParser parser = <span class=\"code-keyword\">new</span> GnuParser();\n\t\tCommandLine secondCL = parser.parse(opts, args);\n\n\t\t<span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"Done workingExample\"</span>);\n\t}\n\n\t<span class=\"code-comment\">// fails to <span class=\"code-keyword\">throw</span> exception on second invocation of parse\n</span>\t<span class=\"code-keyword\">private</span> <span class=\"code-keyword\">static</span> void brokenExample() <span class=\"code-keyword\">throws</span> ParseException\n\t{\n\t\t<span class=\"code-object\">String</span>[] firstArgs = { <span class=\"code-quote\">\"-v\"</span> };\n\t\t<span class=\"code-object\">String</span>[] secondArgs = {};\n\n\t\tOptions opts = <span class=\"code-keyword\">new</span> Options();\n\t\topts.addOption(OptionBuilder.isRequired().create(<span class=\"code-quote\">'v'</span>));\n\n\t\tGnuParser parser = <span class=\"code-keyword\">new</span> GnuParser();\n\t\tCommandLine firstCL = parser.parse(opts, firstArgs);\n\t\tCommandLine secondCL = parser.parse(opts, secondArgs);\n\n\t\t<span class=\"code-object\">System</span>.out.println(<span class=\"code-quote\">\"Done brokenExample\"</span>);\n\t}\n}\n</pre>\n</div></div>\n<p>This is a result of the Options object returning the reference to its own list and the parsers modifying that list. The first call is removing the required options as they are found and subsequent calls get back an empty list.</p>\n</div>\n"}