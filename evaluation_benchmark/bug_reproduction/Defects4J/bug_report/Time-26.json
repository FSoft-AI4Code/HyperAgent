{"issue_id": "60", "title": "#60 .withHourOfDay() sets hour inconsistantly on DST transition.\n\n<small>\n<a class=\"icon\" href=\"feed.rss\" rel=\"nofollow\" title=\"Follow this Ticket\"><i class=\"fa fa-rss\"></i></a>\n</small>\n", "description": "\n<div><div class=\"markdown_content\"><p>When the hour of day is set to the ambiguous hour on the daylight to<br/>\nstandard time transition in a given time zone the result is inconsistent for different time zones. Shoul the hour be set to the<br/>\ndaylight hour or the standard hour for all time zones? I can't find anything<br/>\nthat documents this behavior.</p>\n<p>My test code below returns different results for different time zones.</p>\n<p>/<em><em><br/>\n</em> Verify Joda converts the hour of day the same for regions north and<br/>\nsouth of the equator on the DST</em> daylight to standard time transition.<br/>\n*/<br/>\n@Test<br/>\npublic void jodaTest ()<br/>\n{<br/>\nChronology chronUTC =<br/>\nGregorianChronology.getInstance(DateTimeZone.UTC);</p>\n<p>DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0,<br/>\n0, chronUTC);<br/>\nDateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0,<br/>\n0, chronUTC);</p>\n<p>Chronology chronUSCentral =<br/>\nGregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));</p>\n<p>Assert.assertTrue(\"Should be standard time\",<br/>\nchronUSCentral.getZone().isStandardOffset(<br/>\nusCentralStandardInUTC.getMillis()));<br/>\nAssert.assertFalse(\"Should be daylight time\",<br/>\nchronUSCentral.getZone().isStandardOffset(<br/>\nusCentralDaylightInUTC.getMillis()));</p>\n<p>DateTime usCentralStandardInUSCentral =<br/>\nusCentralStandardInUTC.toDateTime(chronUSCentral);<br/>\nDateTime usCentralDaylightInUSCentral =<br/>\nusCentralDaylightInUTC.toDateTime(chronUSCentral);<br/>\nassertEquals(1, usCentralStandardInUSCentral.getHourOfDay());<br/>\nassertEquals(usCentralStandardInUSCentral.getHourOfDay(),<br/>\nusCentralDaylightInUSCentral.getHourOfDay());<br/>\nAssert.assertTrue(usCentralStandardInUSCentral.getMillis() !=<br/>\nusCentralDaylightInUSCentral.getMillis());</p>\n<p>DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0,<br/>\n0, 0, chronUTC);<br/>\nDateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0,<br/>\n0, 0, chronUTC);</p>\n<p>Chronology chronAusNSW =<br/>\nGregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));</p>\n<p>Assert.assertTrue(\"Should be standard time\",<br/>\nchronAusNSW.getZone().isStandardOffset(<br/>\naustraliaNSWStandardInUTC.getMillis()));<br/>\nAssert.assertFalse(\"Should be daylight time\",<br/>\nchronAusNSW.getZone().isStandardOffset(<br/>\naustraliaNSWDaylightInUTC.getMillis()));</p>\n<p>DateTime australiaNSWStandardInAustraliaNSW =<br/>\naustraliaNSWStandardInUTC.toDateTime(chronAusNSW);<br/>\nDateTime australiaNSWDaylightInAusraliaNSW =<br/>\naustraliaNSWDaylightInUTC.toDateTime(chronAusNSW);<br/>\nassertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());<br/>\nassertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(),<br/>\naustraliaNSWDaylightInAusraliaNSW.getHourOfDay());<br/>\nAssert.assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() !=<br/>\naustraliaNSWDaylightInAusraliaNSW.getMillis());</p>\n<p>// Verify that setting the hour of day on the DST boundary results<br/>\nin a daylight time for<br/>\n// both time zones.<br/>\nassertEquals(usCentralDaylightInUSCentral,<br/>\nusCentralStandardInUSCentral.withHourOfDay(1));<br/>\nassertEquals(australiaNSWDaylightInAusraliaNSW,<br/>\naustraliaNSWStandardInAustraliaNSW.withHourOfDay(2));</p>\n<p>}</p>\n<p>The very last assertion fails on the Australia time zone cutover.<br/>\njava.lang.AssertionError: expected:&lt;2008-04-06T02:00:00.000+11:00&gt; but<br/>\nwas:&lt;2008-04-06T02:00:00.000+10:00&gt;</p></div></div>\n"}