{"issue_id": "LANG-786", "title": "StringUtils equals() relies on undefined behavior", "description": "\n<div class=\"user-content-block\">\n<p>Since the <tt>java.lang.CharSequence</tt> class was first introduced in 1.4, the JavaDoc block has contained the following note:</p>\n<blockquote>\n<p>This interface does not refine the general contracts of the equals and hashCode methods. The result of comparing two objects that implement CharSequence is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other.</p></blockquote>\n<p>When the signature of the StringUtils equals() method was changed from <tt>equals(String, String)</tt> to <tt>equals(CharSequence, CharSequence)</tt> in R920543, the implementation still relied on calling CharSequence#equals(Object) even though, in general, the result is undefined.</p>\n<p>One example where <tt>equals(Object)</tt> returns <tt>false</tt> even though, as CharSequences, two objects represent equal sequences is when one object is an instance of <tt>javax.lang.model.element.Name</tt> and the other object is a String.</p>\n</div>\n"}