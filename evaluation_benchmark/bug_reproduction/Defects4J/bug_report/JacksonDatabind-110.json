{"issue_id": "2265", "title": "Inconsistent handling of Collections$UnmodifiableList VS Collections$UnmodifiableRandomAccessList", "description": "\n<p dir=\"auto\">I'm sorry to bring that one up again, but I'm under the impression that the issue about unmodifiable collections (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1880/hovercard\" data-id=\"287267442\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1880\" href=\"https://github.com/FasterXML/jackson-databind/issues/1880\">#1880</a>) is still not solved completely.</p>\n<p dir=\"auto\">In fact, the way the <code class=\"notranslate\">CLASS_UNMODIFIABLE_LIST</code> is retrieved <a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java#L52\">here</a> yields <code class=\"notranslate\">Collections$UnmodifiableRandomAccessList</code>, and therefore only this type is currently supported by Jackson 2.9.8.</p>\n<p dir=\"auto\">However, using <code class=\"notranslate\">Collections.unmodifiableList()</code> on a <code class=\"notranslate\">List</code> implementation that doesn't implement <code class=\"notranslate\">RandomAccess</code> will yield a <code class=\"notranslate\">Collections$UnmodifiableList</code> instead, which is not deserialized properly and fails with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `java.util.Collections$UnmodifiableList` (no Creators, like default constructor, exist): no default no-arguments constructor found\"><pre class=\"notranslate\"><code>com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `java.util.Collections$UnmodifiableList` (no Creators, like default constructor, exist): no default no-arguments constructor found\n</code></pre></div>\n<p dir=\"auto\">This can be reproduced by adding the following test case in <code class=\"notranslate\">TestDefaultForUtilCollections1868</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public void testUnmodifiableNonRandomAccessList() throws Exception {\n   _verifyCollection(Collections.unmodifiableList(new LinkedList&lt;&gt;(Arrays.asList(\"first\", \"second\"))));\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testUnmodifiableNonRandomAccessList</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n   <span class=\"pl-en\">_verifyCollection</span>(<span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">unmodifiableList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">LinkedList</span>&lt;&gt;(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"first\"</span>, <span class=\"pl-s\">\"second\"</span>))));\n}</pre></div>\n<p dir=\"auto\">Or more generally for outside the project:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public void testUnmodifiableNonRandomAccessList() throws Exception {\n    Collection&lt;?&gt; exp = Collections.unmodifiableList(new LinkedList&lt;&gt;(Arrays.asList(\"first\", \"second\")));\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n    String json = mapper.writeValueAsString(exp);\n    Collection&lt;?&gt; act = mapper.readValue(json, Collection.class);\n\n    assertEquals(exp, act);\n    assertEquals(exp.getClass(), act.getClass());\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testUnmodifiableNonRandomAccessList</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n    <span class=\"pl-smi\">Collection</span>&lt;?&gt; <span class=\"pl-s1\">exp</span> = <span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">unmodifiableList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">LinkedList</span>&lt;&gt;(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"first\"</span>, <span class=\"pl-s\">\"second\"</span>)));\n    <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n    <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">enableDefaultTyping</span>(<span class=\"pl-smi\">DefaultTyping</span>.<span class=\"pl-c1\">NON_FINAL</span>, <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">As</span>.<span class=\"pl-c1\">PROPERTY</span>);\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">exp</span>);\n    <span class=\"pl-smi\">Collection</span>&lt;?&gt; <span class=\"pl-s1\">act</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Collection</span>.<span class=\"pl-s1\">class</span>);\n\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">exp</span>, <span class=\"pl-s1\">act</span>);\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">exp</span>.<span class=\"pl-en\">getClass</span>(), <span class=\"pl-s1\">act</span>.<span class=\"pl-en\">getClass</span>());\n}</pre></div>\n<p dir=\"auto\">Currently <code class=\"notranslate\">java.util.Collections.unmodifiableList()</code> can only return these 2 types of unmodifiable lists, so I believe it is safe for now to just hardcode yet another special case for this class.</p>\n<p dir=\"auto\">This can currently be solved on user side by adding a mixin, but since <code class=\"notranslate\">Collections$UnmodifiableRandomAccessList</code> is supported, I would find it natural to also support the non-random access variant.</p>\n"}