{"issue_id": "731", "title": "XmlAdapter result marshaling error in case of ValueType=Object ", "description": "\n<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">I have an error \"com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.lang.String and no properties discovered to create BeanSerializer\" in case of using custom XmlAdapter with such declaration:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public static class IntegerListXmlAdapter extends XmlAdapter&lt;Object, List&lt;Integer&gt;&gt; {\n        ...\n        @Override\n        public Object marshal(List&lt;Integer&gt; list) throws Exception {\n            return Joiner.on(\",\").join(list);\n        }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">IntegerListXmlAdapter</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">XmlAdapter</span>&lt;<span class=\"pl-smi\">Object</span>, <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt;&gt; {\n        ...\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Object</span> <span class=\"pl-en\">marshal</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">list</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Joiner</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\">\",\"</span>).<span class=\"pl-en\">join</span>(<span class=\"pl-s1\">list</span>);\n        }\n}</pre></div>\n<p dir=\"auto\">If change declaration of this class to \"extends XmlAdapter&lt;String, List&gt;\" it works good.</p>\n<p dir=\"auto\">Full example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='public class IntegerListXmlAdapterTest {\n    @Test\n    public void testBasic() throws JsonProcessingException {\n        ObjectMapper mapper = (new ObjectMapper()).setAnnotationIntrospector(new JaxbAnnotationIntrospector());\n        SomeIntListHolder listHolder = new SomeIntListHolder();\n        listHolder.setListOne(asList(1, 2, 3));\n        System.out.println(mapper.writeValueAsString(listHolder));\n    }\n\n    public static class IntegerListXmlAdapter extends XmlAdapter&lt;Object, List&lt;Integer&gt;&gt; {\n        @Override\n        public List&lt;Integer&gt; unmarshal(Object value) throws Exception {return null;}\n\n        @Override\n        public Object marshal(List&lt;Integer&gt; list) throws Exception {\n            return Joiner.on(\",\").join(list);\n        }\n    }\n\n    public static class IntegerListToStringXmlAdapter extends XmlAdapter&lt;String, List&lt;Integer&gt;&gt; {\n        public List&lt;Integer&gt; unmarshal(String value) throws Exception {return null;}\n\n        public String marshal(List&lt;Integer&gt; list) throws Exception {\n            return Joiner.on(\",\").join(list);\n        }\n    }\n\n    @XmlRootElement\n    @XmlAccessorType(XmlAccessType.NONE)\n    public static class SomeIntListHolder {\n\n        @XmlAttribute\n        @XmlJavaTypeAdapter(IntegerListXmlAdapter.class)\n        private List&lt;Integer&gt; listOne;\n\n        public List&lt;Integer&gt; getListOne() {\n            return listOne;\n        }\n\n        public void setListOne(List&lt;Integer&gt; listOne) {\n            this.listOne = listOne;\n        }\n    }\n}'><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">IntegerListXmlAdapterTest</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testBasic</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = (<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>()).<span class=\"pl-en\">setAnnotationIntrospector</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">JaxbAnnotationIntrospector</span>());\n        <span class=\"pl-smi\">SomeIntListHolder</span> <span class=\"pl-s1\">listHolder</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SomeIntListHolder</span>();\n        <span class=\"pl-s1\">listHolder</span>.<span class=\"pl-en\">setListOne</span>(<span class=\"pl-en\">asList</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>));\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">listHolder</span>));\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">IntegerListXmlAdapter</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">XmlAdapter</span>&lt;<span class=\"pl-smi\">Object</span>, <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt;&gt; {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">unmarshal</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {<span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;}\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Object</span> <span class=\"pl-en\">marshal</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">list</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Joiner</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\">\",\"</span>).<span class=\"pl-en\">join</span>(<span class=\"pl-s1\">list</span>);\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">IntegerListToStringXmlAdapter</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">XmlAdapter</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt;&gt; {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">unmarshal</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {<span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;}\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">marshal</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">list</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Joiner</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\">\",\"</span>).<span class=\"pl-en\">join</span>(<span class=\"pl-s1\">list</span>);\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">XmlRootElement</span>\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">XmlAccessorType</span>(<span class=\"pl-smi\">XmlAccessType</span>.<span class=\"pl-c1\">NONE</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">SomeIntListHolder</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">XmlAttribute</span>\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">XmlJavaTypeAdapter</span>(<span class=\"pl-smi\">IntegerListXmlAdapter</span>.<span class=\"pl-s1\">class</span>)\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">listOne</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-en\">getListOne</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">listOne</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setListOne</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">listOne</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">listOne</span> = <span class=\"pl-s1\">listOne</span>;\n        }\n    }\n}</pre></div>\n<p dir=\"auto\">In this state with last Jackson version we will get an error</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.lang.String and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: SomeIntListHolder[\"listOne\"])\n    at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:59)\n    at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:26)\n    at com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(StdDelegatingSerializer.java:157)\n    at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:575)\n    at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:663)\n    at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:156)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:129)\n    at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3385)\n    at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:2779)'><pre class=\"notranslate\"><code>com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.lang.String and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: SomeIntListHolder[\"listOne\"])\n    at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:59)\n    at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:26)\n    at com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(StdDelegatingSerializer.java:157)\n    at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:575)\n    at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:663)\n    at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:156)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:129)\n    at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3385)\n    at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:2779)\n</code></pre></div>\n<p dir=\"auto\">But if we change XmlJavaTypeAdapter to IntegerListToStringXmlAdapter error will be fixed and code will work fine.<br/>\nThis error exists only in Jackson 2, we have this code with Object generic on Jackson 1 and get an issue only during migration to new major version.</p>\n<p dir=\"auto\">This concrete error can be fixed by hack in com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Override\n    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException\n    {\n        Object delegateValue = convertValue(value);\n        // should we accept nulls?\n        if (delegateValue == null) {\n            provider.defaultSerializeNull(gen);\n            return;\n        }\n\n        //original code:\n        //_delegateSerializer.serialize(delegateValue, gen, provider);\n\n        JsonSerializer&lt;Object&gt; delegateSerializer;\n        if (_delegateSerializer instanceof UnknownSerializer) {\n            delegateSerializer =  provider.findValueSerializer(delegateValue.getClass());\n        } else {\n            delegateSerializer = _delegateSerializer;\n        }\n\n        delegateSerializer.serialize(delegateValue, gen, provider);\n    }\"><pre>    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">serialize</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>, <span class=\"pl-smi\">JsonGenerator</span> <span class=\"pl-s1\">gen</span>, <span class=\"pl-smi\">SerializerProvider</span> <span class=\"pl-s1\">provider</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-c1\">IOException</span>\n    {\n        <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">delegateValue</span> = <span class=\"pl-en\">convertValue</span>(<span class=\"pl-s1\">value</span>);\n        <span class=\"pl-c\">// should we accept nulls?</span>\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">delegateValue</span> == <span class=\"pl-c1\">null</span>) {\n            <span class=\"pl-s1\">provider</span>.<span class=\"pl-en\">defaultSerializeNull</span>(<span class=\"pl-s1\">gen</span>);\n            <span class=\"pl-k\">return</span>;\n        }\n\n        <span class=\"pl-c\">//original code:</span>\n        <span class=\"pl-c\">//_delegateSerializer.serialize(delegateValue, gen, provider);</span>\n\n        <span class=\"pl-smi\">JsonSerializer</span>&lt;<span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">delegateSerializer</span>;\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">_delegateSerializer</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">UnknownSerializer</span>) {\n            <span class=\"pl-s1\">delegateSerializer</span> =  <span class=\"pl-s1\">provider</span>.<span class=\"pl-en\">findValueSerializer</span>(<span class=\"pl-s1\">delegateValue</span>.<span class=\"pl-en\">getClass</span>());\n        } <span class=\"pl-k\">else</span> {\n            <span class=\"pl-s1\">delegateSerializer</span> = <span class=\"pl-s1\">_delegateSerializer</span>;\n        }\n\n        <span class=\"pl-s1\">delegateSerializer</span>.<span class=\"pl-en\">serialize</span>(<span class=\"pl-s1\">delegateValue</span>, <span class=\"pl-s1\">gen</span>, <span class=\"pl-s1\">provider</span>);\n    }</pre></div>\n<p dir=\"auto\">You can find test class here: <a href=\"https://github.com/Spikhalskiy/jackson_xmladapter__bug/blob/master/src/test/java/IntegerListXmlAdapterTest.java\">https://github.com/Spikhalskiy/jackson_xmladapter__bug/blob/master/src/test/java/IntegerListXmlAdapterTest.java</a></p>\n<p dir=\"auto\">and hacked serializer code here: <a href=\"https://github.com/Spikhalskiy/jackson_xmladapter__bug/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\">https://github.com/Spikhalskiy/jackson_xmladapter__bug/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java</a></p>\n<p dir=\"auto\">Now test passing in this repo because of fake StdDelegatingSerializer in classpath - try to delete it to get an issue.</p>\n"}