{"issue_id": "MATH-567", "title": "class Dfp toDouble method return -inf whan Dfp value is 0 \"zero\"", "description": "\n<div class=\"user-content-block\">\n<p>I found a bug in the toDouble() method of the Dfp class.<br/>\nIf the Dfp's value is 0 \"zero\", the toDouble() method returns a  negative infini.</p>\n<p>This is because the double value returned has an exposant equal to 0xFFF <br/>\nand a significand is equal to 0.<br/>\nIn the IEEE754 this is a -inf.</p>\n<p>To be equal to zero, the exposant and the significand must be equal to zero.</p>\n<p>A simple test case is :<br/>\n----------------------------------------------<br/>\nimport org.apache.commons.math.dfp.DfpField;</p>\n<p>public class test {</p>\n<p>\t/**</p>\n<ul>\n<li>@param args<br/>\n\t */<br/>\n\tpublic static void main(String[] args) \n{\n\t\tDfpField field = new DfpField(100);\n\t\tSystem.out.println(\"toDouble value of getZero() =\"+field.getZero().toDouble()+\n\t\t\t\t\"\\ntoDouble value of newDfp(0.0) =\"+\n\t\t\t\tfield.newDfp(0.0).toDouble());\n\t}\n<p>}</p></li>\n</ul>\n<p>May be the simplest way to fix it is to test the zero equality at the begin of the toDouble() method, to be able to return the correctly signed zero ?</p>\n</div>\n"}