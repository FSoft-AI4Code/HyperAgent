{"issue_id": "207", "title": "ArrayIndexOutOfBoundsException in com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "description": "\n<p dir=\"auto\">The following code demonstrates a bug in jackson-core, version 2.6.0, in the hash table implementation of <code class=\"notranslate\">com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer</code>. From a quick glance, it looks to me as if the \"primary hash information area\" <code class=\"notranslate\">_hashArea</code> has a spillover area that is not accounted for properly in the <code class=\"notranslate\">String</code> array <code class=\"notranslate\">_names</code>.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.testng.annotations.Test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\n/**\n * Simple test case for demonstrating bug in class {@link ByteQuadsCanonicalizer}.\n *\n * &lt;p&gt;In some cases, it is possible to work around this bug by disabling the\n * {@link JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} feature. In that case\n * {@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper#constructParser(int, com.fasterxml.jackson.core.ObjectCodec, ByteQuadsCanonicalizer, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int)}\n * creates a {@link com.fasterxml.jackson.core.json.ReaderBasedJsonParser} instead of a\n * {@link com.fasterxml.jackson.core.json.UTF8StreamJsonParser}.\n */\npublic class UTF8ByteStreamTest {\n    private static final int SEED = -523743345;\n\n    private static void injectReproducibleSeed(ObjectMapper objectMapper) throws Exception {\n        JsonFactory jsonFactory = objectMapper.getFactory();\n        // As a workaround, uncomment the following line.\n        // jsonFactory.disable(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES);\n        Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField(\"_byteSymbolCanonicalizer\");\n        byteSymbolCanonicalizerField.setAccessible(true);\n\n        Method factoryMethod = ByteQuadsCanonicalizer.class.getDeclaredMethod(\"createRoot\", int.class);\n        factoryMethod.setAccessible(true);\n        byteSymbolCanonicalizerField.set(jsonFactory, factoryMethod.invoke(null, SEED));\n    }\n\n    @Test\n    public void testRead() throws Exception {\n        ObjectMapper objectMapper = new ObjectMapper();\n        injectReproducibleSeed(objectMapper);\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\"{\\n\");\n        stringBuilder.append(\"    \\\"expectedGCperPosition\\\": null\");\n        for (int i = 0; i &lt; 60; ++i) {\n            stringBuilder.append(\",\\n    \\\"\").append(i + 1).append(\"\\\": null\");\n        }\n        stringBuilder.append(\"\\n}\");\n        objectMapper.readValue(stringBuilder.toString().getBytes(StandardCharsets.UTF_8), Map.class);\n    }\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonFactory</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">sym</span>.<span class=\"pl-s1\">ByteQuadsCanonicalizer</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">testng</span>.<span class=\"pl-s1\">annotations</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Field</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">nio</span>.<span class=\"pl-s1\">charset</span>.<span class=\"pl-s1\">StandardCharsets</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n\n<span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * Simple test case for demonstrating bug in class {@link ByteQuadsCanonicalizer}.</span>\n<span class=\"pl-c\"> *</span>\n<span class=\"pl-c\"> * &lt;p&gt;In some cases, it is possible to work around this bug by disabling the</span>\n<span class=\"pl-c\"> * {@link JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} feature. In that case</span>\n<span class=\"pl-c\"> * {@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper#constructParser(int, com.fasterxml.jackson.core.ObjectCodec, ByteQuadsCanonicalizer, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int)}</span>\n<span class=\"pl-c\"> * creates a {@link com.fasterxml.jackson.core.json.ReaderBasedJsonParser} instead of a</span>\n<span class=\"pl-c\"> * {@link com.fasterxml.jackson.core.json.UTF8StreamJsonParser}.</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">UTF8ByteStreamTest</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-c1\">SEED</span> = -<span class=\"pl-c1\">523743345</span>;\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">injectReproducibleSeed</span>(<span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-smi\">JsonFactory</span> <span class=\"pl-s1\">jsonFactory</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">getFactory</span>();\n        <span class=\"pl-c\">// As a workaround, uncomment the following line.</span>\n        <span class=\"pl-c\">// jsonFactory.disable(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES);</span>\n        <span class=\"pl-smi\">Field</span> <span class=\"pl-s1\">byteSymbolCanonicalizerField</span> = <span class=\"pl-smi\">JsonFactory</span>.<span class=\"pl-s1\">class</span>.<span class=\"pl-en\">getDeclaredField</span>(<span class=\"pl-s\">\"_byteSymbolCanonicalizer\"</span>);\n        <span class=\"pl-s1\">byteSymbolCanonicalizerField</span>.<span class=\"pl-en\">setAccessible</span>(<span class=\"pl-c1\">true</span>);\n\n        <span class=\"pl-smi\">Method</span> <span class=\"pl-s1\">factoryMethod</span> = <span class=\"pl-smi\">ByteQuadsCanonicalizer</span>.<span class=\"pl-s1\">class</span>.<span class=\"pl-en\">getDeclaredMethod</span>(<span class=\"pl-s\">\"createRoot\"</span>, <span class=\"pl-smi\">int</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-s1\">factoryMethod</span>.<span class=\"pl-en\">setAccessible</span>(<span class=\"pl-c1\">true</span>);\n        <span class=\"pl-s1\">byteSymbolCanonicalizerField</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-s1\">jsonFactory</span>, <span class=\"pl-s1\">factoryMethod</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">SEED</span>));\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testRead</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-en\">injectReproducibleSeed</span>(<span class=\"pl-s1\">objectMapper</span>);\n        <span class=\"pl-smi\">StringBuilder</span> <span class=\"pl-s1\">stringBuilder</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>();\n        <span class=\"pl-s1\">stringBuilder</span>.<span class=\"pl-en\">append</span>(<span class=\"pl-s\">\"{\\n\"</span>);\n        <span class=\"pl-s1\">stringBuilder</span>.<span class=\"pl-en\">append</span>(<span class=\"pl-s\">\"    \\\"expectedGCperPosition\\\": null\"</span>);\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">i</span> = <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> &lt; <span class=\"pl-c1\">60</span>; ++<span class=\"pl-s1\">i</span>) {\n            <span class=\"pl-s1\">stringBuilder</span>.<span class=\"pl-en\">append</span>(<span class=\"pl-s\">\",\\n    \\\"\"</span>).<span class=\"pl-en\">append</span>(<span class=\"pl-s1\">i</span> + <span class=\"pl-c1\">1</span>).<span class=\"pl-en\">append</span>(<span class=\"pl-s\">\"\\\": null\"</span>);\n        }\n        <span class=\"pl-s1\">stringBuilder</span>.<span class=\"pl-en\">append</span>(<span class=\"pl-s\">\"\\n}\"</span>);\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">stringBuilder</span>.<span class=\"pl-en\">toString</span>().<span class=\"pl-en\">getBytes</span>(<span class=\"pl-smi\">StandardCharsets</span>.<span class=\"pl-c1\">UTF_8</span>), <span class=\"pl-smi\">Map</span>.<span class=\"pl-s1\">class</span>);\n    }\n}</pre></div>\n"}