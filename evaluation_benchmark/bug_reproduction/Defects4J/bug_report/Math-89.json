{"issue_id": "MATH-259", "title": "Bugs in Frequency API", "description": "\n<div class=\"user-content-block\">\n<p>I think the existing Frequency API has some bugs in it.</p>\n<p>The addValue(Object v) method allows one to add a plain Object, but one cannot add anything further to the instance, as the second add fails with IllegalArgumentException.<br/>\nIn fact, the problem is with the first call to addValue(Object) which should not allow a plain Object to be added - it should only allow Comparable objects.<br/>\nThis could be fixed by checking that the object is Comparable.</p>\n<p>Similar considerations apply to the getCumFreq(Object) and getCumPct(Object) methods - they will only work with objects that implement Comparable.</p>\n<p>The getCount(Object) and getPct(Object) methods don't fail when given a non-Comparable object (because the class cast exception is caught), however they just return 0 as if the object was not present:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">        <span class=\"code-keyword\">final</span> <span class=\"code-object\">Object</span> OBJ = <span class=\"code-keyword\">new</span> <span class=\"code-object\">Object</span>();\n        f.addValue(OBJ); <span class=\"code-comment\">// This ought to fail, but doesn't, causing the unexpected behaviour below\n</span>        <span class=\"code-object\">System</span>.out.println(f.getCount(OBJ)); <span class=\"code-comment\">// 0\n</span>        <span class=\"code-object\">System</span>.out.println(f.getPct(OBJ)); <span class=\"code-comment\">// 0.0</span>\n</pre>\n</div></div>\n<p>Rather than adding extra checks for Comparable, it seems to me that the API would be much improved by using Comparable instead of Object.<br/>\nAlso, it should make it easier to implement generics.</p>\n<p>However, this would cause compilation failures for some programs that pass Object rather than Comparable to the class.<br/>\nThese would need recoding, but I think they would continue to run OK against the new API.</p>\n<p>It would also affect the run-time behaviour slightly, as the first attempt to add a non-Comparable object would fail, rather than the second add of a possibly valid object.<br/>\nBut is that a viable program? It can only add one object, and any attempt to get statistics will either return 0 or an Exception, and applying the instanceof fix would also cause it to fail.</p>\n</div>\n"}