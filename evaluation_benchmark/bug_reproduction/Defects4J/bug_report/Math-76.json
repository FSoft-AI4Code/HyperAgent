{"issue_id": "MATH-320", "title": "NaN singular value from SVD", "description": "\n<div class=\"user-content-block\">\n<p>The following jython code<br/>\nStart code</p>\n<p>from org.apache.commons.math.linear import *</p>\n<p>Alist = [<span class=\"error\">[1.0, 2.0, 3.0]</span>,<span class=\"error\">[2.0,3.0,4.0]</span>,<span class=\"error\">[3.0,5.0,7.0]</span>]</p>\n<p>A = Array2DRowRealMatrix(Alist)</p>\n<p>decomp = SingularValueDecompositionImpl(A)</p>\n<p>print decomp.getSingularValues()</p>\n<p>End code</p>\n<p>prints<br/>\narray('d', <span class=\"error\">[11.218599757513008, 0.3781791648535976, nan]</span>)<br/>\nThe last singular value should be something very close to 0 since the matrix<br/>\nis rank deficient.  When i use the result from getSolver() to solve a system, i end <br/>\nup with a bunch of NaNs in the solution.  I assumed i would get back a least squares solution.</p>\n<p>Does this SVD implementation require that the matrix be full rank?  If so, then i would expect<br/>\nan exception to be thrown from the constructor or one of the methods.</p>\n</div>\n"}