{"issue_id": "124", "title": "#124 Inconsistent interpretation of ambiguous time during DST\n\n<small>\n<a class=\"icon\" href=\"feed.rss\" rel=\"nofollow\" title=\"Follow this Ticket\"><i class=\"fa fa-rss\"></i></a>\n</small>\n", "description": "\n<div><div class=\"markdown_content\"><p>The inconsistency appears for timezone Europe/London.</p>\n<p>Consider the following code<br/>\n\u2026<br/>\nDateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID(\"Europe/London\"));<br/>\nDateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID(\"Europe/Oslo\"));<br/>\nDateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID(\"Europe/Helsinki\"));</p>\n<div class=\"codehilite\"><pre><span></span>    System.out.println(britishDate);\n    System.out.println(norwDate);\n    System.out.println(finnishDate);\n</pre></div>\n<p>\u2026<br/>\nThese three DateTime objects should all represent the same moment in time even if they are ambiguous. And using jodatime 1.6.2 this is the case. The code produces the following output:<br/>\n2011-10-30T01:59:00.000Z<br/>\n2011-10-30T02:59:00.000+01:00<br/>\n2011-10-30T03:59:00.000+02:00</p>\n<p>Using jodatime 2.0 however, the output is:</p>\n<p>2011-10-30T01:59:00.000Z<br/>\n2011-10-30T02:59:00.000+02:00<br/>\n2011-10-30T03:59:00.000+03:00</p>\n<p>which IMO is wrong for Europe/London. Correct output should have been <br/>\n2011-10-30T01:59:00.000+01:00</p>\n<p>The release notes for 2.0 states that: <br/>\n\"Now, it always returns the earlier instant (summer time) during an overlap. \u2026\"</p></div></div>\n"}