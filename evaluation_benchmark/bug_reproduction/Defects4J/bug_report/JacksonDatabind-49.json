{"issue_id": "1255", "title": "JsonIdentityInfo incorrectly serializing forward references", "description": "\n<p dir=\"auto\">I wrote this small test program to demonstrate the issue:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonIdentityReference;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class ObjectIdTest {\n\n    public static class Foo {\n\n        @JsonIdentityReference(alwaysAsId = true)\n        public Bar bar1;\n\n        @JsonIdentityReference()\n        public Bar bar2;\n    }\n\n    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n    public static class Bar {\n\n    }\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n\n        // create structure to serialize\n        Foo mo = new Foo();\n        mo.bar1 = new Bar();\n        mo.bar2 = mo.bar1;\n\n        // serialize it\n        System.out.println(mapper.writeValueAsString(mo));\n    }\n\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonIdentityInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonIdentityReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">ObjectIdGenerators</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ObjectIdTest</span> {\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityReference</span>(<span class=\"pl-s1\">alwaysAsId</span> = <span class=\"pl-c1\">true</span>)\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Bar</span> <span class=\"pl-s1\">bar1</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityReference</span>()\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Bar</span> <span class=\"pl-s1\">bar2</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityInfo</span>(<span class=\"pl-s1\">generator</span> = <span class=\"pl-smi\">ObjectIdGenerators</span>.<span class=\"pl-s1\">IntSequenceGenerator</span>.<span class=\"pl-s1\">class</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Bar</span> {\n\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n        <span class=\"pl-c\">// create structure to serialize</span>\n        <span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">mo</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>();\n        <span class=\"pl-s1\">mo</span>.<span class=\"pl-s1\">bar1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Bar</span>();\n        <span class=\"pl-s1\">mo</span>.<span class=\"pl-s1\">bar2</span> = <span class=\"pl-s1\">mo</span>.<span class=\"pl-s1\">bar1</span>;\n\n        <span class=\"pl-c\">// serialize it</span>\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">mo</span>));\n    }\n\n}</pre></div>\n<p dir=\"auto\">When executing this test program in the latest version (2.7.4), the output will be <code class=\"notranslate\">{\"bar1\":1,\"bar2\":{\"@id\":2}}</code> - the second field will be written with a new id even though both fields reference the same object. Because of this, writing forward references is essentially impossible.</p>\n<p dir=\"auto\">The issue seems to be the fact that BeanSerializerBase will always call WritableObjectId.generateId if the referenced object has not been written in plain format yet (<a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java#L600\">https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java#L600</a>). This will also happen if an id has been generated before.<br/>\nIt might also be smarter to only generate a new id in WritableObjectId.generateId if that hasn't happened before; as that method doesn't have a javadoc I can't tell how it is supposed to work.</p>\n"}