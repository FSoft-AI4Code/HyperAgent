{"issue_id": "1395", "title": "Problems deserializing primitive <code>long</code> field while using <code>TypeResolverBuilder</code>", "description": "\n<p dir=\"auto\">When running the following test app</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='import com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        // Create test data\n        Data data = new Data();\n        data.key = 1;\n        Map&lt;String, Object&gt; mapData = new HashMap&lt;&gt;();\n        mapData.put(\"longInMap\", 2L);\n        mapData.put(\"longAsField\", data);\n\n        // Configure Jackson to preserve types\n        JsonFactory factory = new JsonFactory();\n        ObjectMapper mapper = new ObjectMapper(factory);\n        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();\n        resolver.init(JsonTypeInfo.Id.CLASS, null);\n        resolver.inclusion(JsonTypeInfo.As.PROPERTY);\n        resolver.typeProperty(\"__t\");\n        mapper.setDefaultTyping(resolver);\n        mapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        // Serialize\n        String json = mapper.writeValueAsString(mapData);\n        System.out.println(\"json = \" + json);\n\n        // Deserialize\n        Map deserializedData = mapper.readValue(json, Map.class);\n    }\n\n    static class Data {\n\n        public long key;\n    }\n}'><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonFactory</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">SerializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">StdTypeResolverBuilder</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-c1\">IOException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">HashMap</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Main</span> {\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n        <span class=\"pl-c\">// Create test data</span>\n        <span class=\"pl-smi\">Data</span> <span class=\"pl-s1\">data</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Data</span>();\n        <span class=\"pl-s1\">data</span>.<span class=\"pl-s1\">key</span> = <span class=\"pl-c1\">1</span>;\n        <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">mapData</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n        <span class=\"pl-s1\">mapData</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"longInMap\"</span>, <span class=\"pl-c1\">2L</span>);\n        <span class=\"pl-s1\">mapData</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"longAsField\"</span>, <span class=\"pl-s1\">data</span>);\n\n        <span class=\"pl-c\">// Configure Jackson to preserve types</span>\n        <span class=\"pl-smi\">JsonFactory</span> <span class=\"pl-s1\">factory</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonFactory</span>();\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>(<span class=\"pl-s1\">factory</span>);\n        <span class=\"pl-smi\">StdTypeResolverBuilder</span> <span class=\"pl-s1\">resolver</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StdTypeResolverBuilder</span>();\n        <span class=\"pl-s1\">resolver</span>.<span class=\"pl-en\">init</span>(<span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-c1\">Id</span>.<span class=\"pl-c1\">CLASS</span>, <span class=\"pl-c1\">null</span>);\n        <span class=\"pl-s1\">resolver</span>.<span class=\"pl-en\">inclusion</span>(<span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">As</span>.<span class=\"pl-c1\">PROPERTY</span>);\n        <span class=\"pl-s1\">resolver</span>.<span class=\"pl-en\">typeProperty</span>(<span class=\"pl-s\">\"__t\"</span>);\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">setDefaultTyping</span>(<span class=\"pl-s1\">resolver</span>);\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">SerializationFeature</span>.<span class=\"pl-c1\">INDENT_OUTPUT</span>);\n\n        <span class=\"pl-c\">// Serialize</span>\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">mapData</span>);\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"json = \"</span> + <span class=\"pl-s1\">json</span>);\n\n        <span class=\"pl-c\">// Deserialize</span>\n        <span class=\"pl-smi\">Map</span> <span class=\"pl-s1\">deserializedData</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Map</span>.<span class=\"pl-s1\">class</span>);\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Data</span> {\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">long</span> <span class=\"pl-s1\">key</span>;\n    }\n}</pre></div>\n<p dir=\"auto\">I get this output and exception</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content='json = {\n  \"__t\" : \"java.util.HashMap\",\n  \"longInMap\" : [ \"java.lang.Long\", 2 ],\n  \"longAsField\" : {\n    \"__t\" : \"com.pinkmatter.bean.serialization.Main$Data\",\n    \"key\" : [ \"java.lang.Long\", 1 ]\n  }\n}\nException in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: Class java.lang.Long not subtype of [simple type, class long] (through reference chain: java.util.HashMap[\"longAsField\"]-&gt;com.pinkmatter.bean.serialization.Data[\"key\"])\n  at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:379)\n  at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:339)\n  at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1591)\n  at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:278)\n  ...\nCaused by: java.lang.IllegalArgumentException: Class java.lang.Long not subtype of [simple type, class long]\n  at com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(TypeFactory.java:359)\n  at com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._typeFromId(ClassNameIdResolver.java:72)\n  at com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId(ClassNameIdResolver.java:42)\n  ...'><pre><span class=\"pl-s1\">json</span> = {\n  <span class=\"pl-s\">\"__t\"</span> : <span class=\"pl-s\">\"java.util.HashMap\"</span>,\n  <span class=\"pl-s\">\"longInMap\"</span> : [ <span class=\"pl-s\">\"java.lang.Long\"</span>, <span class=\"pl-c1\">2</span> ],\n  <span class=\"pl-s\">\"longAsField\"</span> : {\n    <span class=\"pl-s\">\"__t\"</span> : <span class=\"pl-s\">\"com.pinkmatter.bean.serialization.Main$Data\"</span>,\n    <span class=\"pl-s\">\"key\"</span> : [ <span class=\"pl-s\">\"java.lang.Long\"</span>, <span class=\"pl-c1\">1</span> ]\n  }\n}\n<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">in</span> <span class=\"pl-s1\">thread</span> <span class=\"pl-s\">\"main\"</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>: <span class=\"pl-smi\">Class</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">Long</span> <span class=\"pl-s1\">not</span> <span class=\"pl-s1\">subtype</span> <span class=\"pl-s1\">of</span> [<span class=\"pl-smi\">simple</span> <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">class</span> long] (<span class=\"pl-smi\">through</span> <span class=\"pl-s1\">reference</span> <span class=\"pl-s1\">chain</span>: <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">HashMap</span>[<span class=\"pl-s\">\"longAsField\"</span>]-&gt;<span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">pinkmatter</span>.<span class=\"pl-s1\">bean</span>.<span class=\"pl-s1\">serialization</span>.<span class=\"pl-s1\">Data</span>[<span class=\"pl-s\">\"key\"</span>])\n  <span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>.<span class=\"pl-en\">wrapWithPath</span>(<span class=\"pl-smi\">JsonMappingException</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">379</span>)\n  <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>.<span class=\"pl-en\">wrapWithPath</span>(<span class=\"pl-smi\">JsonMappingException</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">339</span>)\n  <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">BeanDeserializerBase</span>.<span class=\"pl-en\">wrapAndThrow</span>(<span class=\"pl-smi\">BeanDeserializerBase</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1591</span>)\n  <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">BeanDeserializer</span>.<span class=\"pl-en\">vanillaDeserialize</span>(<span class=\"pl-smi\">BeanDeserializer</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">278</span>)\n  ...\n<span class=\"pl-s1\">Caused</span> <span class=\"pl-s1\">by</span>: <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">IllegalArgumentException</span>: <span class=\"pl-smi\">Class</span> <span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">lang</span>.<span class=\"pl-smi\">Long</span> <span class=\"pl-s1\">not</span> <span class=\"pl-smi\">subtype</span> <span class=\"pl-s1\">of</span> [<span class=\"pl-smi\">simple</span> <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">class</span> long]\n  <span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeFactory</span>.<span class=\"pl-en\">constructSpecializedType</span>(<span class=\"pl-smi\">TypeFactory</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">359</span>)\n  <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">ClassNameIdResolver</span>.<span class=\"pl-en\">_typeFromId</span>(<span class=\"pl-smi\">ClassNameIdResolver</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">72</span>)\n  <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">ClassNameIdResolver</span>.<span class=\"pl-en\">typeFromId</span>(<span class=\"pl-smi\">ClassNameIdResolver</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">42</span>)\n  ...</pre></div>\n<p dir=\"auto\">I am trying to serialize a bunch of basic plain old java objects from libraries we are using (so we cannot modify the classes or add annotations), while also trying to preserve the types of values in collections (\"longInMap\" in the above example must stay a Long object).</p>\n<p dir=\"auto\">The problem is that Jackson throws the above exception when trying to deserialize the primitive <code class=\"notranslate\">public long key</code> in the <code class=\"notranslate\">Data</code> class. If I change the type to <code class=\"notranslate\">public int key</code> then no exception is thrown and deserialization works.</p>\n<p dir=\"auto\">Also, since there are many different types of objects and I don't know at compile time exactly what will be serialized I don't think using mix-ins will work.</p>\n<p dir=\"auto\">I am using Jackson 2.8.3.</p>\n"}